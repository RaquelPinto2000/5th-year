
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 14 00 20 ed 25 00 00 0d 5b 00 00 c1 25 00 00     ... .%...[...%..
  10:	c1 25 00 00 c1 25 00 00 c1 25 00 00 00 00 00 00     .%...%...%......
	...
  2c:	51 1f 00 00 c1 25 00 00 00 00 00 00 fd 1e 00 00     Q....%..........
  3c:	c1 25 00 00                                         .%..

00000040 <_irq_vector_table>:
  40:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  50:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  60:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  70:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  80:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  90:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  a0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  b0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  c0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  d0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  e0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
  f0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x26>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <main>:
#include <MyMath.h>

#define STEPTIME_MS 500 /* Time between calls to MyAdd (in ms) */ 

/* Main function */
void main(void) {
     3dc:	b570      	push	{r4, r5, r6, lr}

    /* Variables */
    int x=0,y=10,res=0;

    /* Task init code */
    printk("Example if the use of SW modules  \n");
     3de:	480e      	ldr	r0, [pc, #56]	; (418 <CONFIG_FLASH_SIZE+0x18>)
    printk("Call to MyAdd(x,y) in MyMath module\n\r"); 

    /* Blink loop */
    while(1) {  
        res=MyAdd(x++,y++);
        printk("MyAdd(%d,%d)=%d \n\r",x,y,res);
     3e0:	4e0e      	ldr	r6, [pc, #56]	; (41c <CONFIG_FLASH_SIZE+0x1c>)
    printk("Example if the use of SW modules  \n");
     3e2:	f005 f9ef 	bl	57c4 <printk>
    printk("Call to MyAdd(x,y) in MyMath module\n\r"); 
     3e6:	480e      	ldr	r0, [pc, #56]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     3e8:	f005 f9ec 	bl	57c4 <printk>
    int x=0,y=10,res=0;
     3ec:	2400      	movs	r4, #0
        res=MyAdd(x++,y++);
     3ee:	f104 010a 	add.w	r1, r4, #10
     3f2:	4620      	mov	r0, r4
     3f4:	f005 f997 	bl	5726 <MyAdd>
     3f8:	1c65      	adds	r5, r4, #1
     3fa:	4603      	mov	r3, r0
        printk("MyAdd(%d,%d)=%d \n\r",x,y,res);
     3fc:	f104 020b 	add.w	r2, r4, #11
     400:	4629      	mov	r1, r5
     402:	4630      	mov	r0, r6
     404:	f005 f9de 	bl	57c4 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     408:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     40c:	2100      	movs	r1, #0
     40e:	f004 fde3 	bl	4fd8 <z_impl_k_sleep>
        res=MyAdd(x++,y++);
     412:	462c      	mov	r4, r5
     414:	e7eb      	b.n	3ee <main+0x12>
     416:	bf00      	nop
     418:	00006a2c 	.word	0x00006a2c
     41c:	00006a76 	.word	0x00006a76
     420:	00006a50 	.word	0x00006a50

00000424 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     428:	b08d      	sub	sp, #52	; 0x34
     42a:	461f      	mov	r7, r3
     42c:	9b16      	ldr	r3, [sp, #88]	; 0x58
     42e:	9202      	str	r2, [sp, #8]
     430:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     432:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     436:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     43a:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     43c:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     43e:	0782      	lsls	r2, r0, #30
{
     440:	4605      	mov	r5, r0
     442:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     444:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     446:	f040 8221 	bne.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     44a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     44c:	2800      	cmp	r0, #0
     44e:	f040 8220 	bne.w	892 <CONFIG_ISR_STACK_SIZE+0x92>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     452:	f001 0607 	and.w	r6, r1, #7
     456:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     458:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     45c:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     460:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     464:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     466:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     46a:	4652      	mov	r2, sl
	bool parsing = false;
     46c:	46d1      	mov	r9, sl
	size = sizeof(char *);
     46e:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     470:	b105      	cbz	r5, 474 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     472:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     474:	9804      	ldr	r0, [sp, #16]
     476:	2800      	cmp	r0, #0
     478:	dc07      	bgt.n	48a <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     47a:	48cb      	ldr	r0, [pc, #812]	; (7a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c0>)
     47c:	4287      	cmp	r7, r0
     47e:	f0c0 8141 	bcc.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     482:	48ca      	ldr	r0, [pc, #808]	; (7ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c4>)
     484:	4287      	cmp	r7, r0
     486:	f080 813d 	bcs.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     48a:	9802      	ldr	r0, [sp, #8]
     48c:	f010 0e02 	ands.w	lr, r0, #2
     490:	f000 8151 	beq.w	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     494:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     498:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     49a:	f1be 0f00 	cmp.w	lr, #0
     49e:	f000 8137 	beq.w	710 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x228>
     4a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     4a6:	f0c0 8133 	bcc.w	710 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x228>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     4aa:	f06f 0015 	mvn.w	r0, #21
     4ae:	e0fe      	b.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
		if (!parsing) {
     4b0:	f1b9 0f00 	cmp.w	r9, #0
     4b4:	d108      	bne.n	4c8 <cbvprintf_package+0xa4>
			if (*fmt == '%') {
     4b6:	2825      	cmp	r0, #37	; 0x25
     4b8:	f040 8141 	bne.w	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
				parsing = true;
     4bc:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     4c0:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     4c4:	4641      	mov	r1, r8
     4c6:	e13a      	b.n	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
		switch (*fmt) {
     4c8:	282b      	cmp	r0, #43	; 0x2b
     4ca:	d825      	bhi.n	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     4cc:	281f      	cmp	r0, #31
     4ce:	d802      	bhi.n	4d6 <cbvprintf_package+0xb2>
			parsing = false;
     4d0:	f04f 0900 	mov.w	r9, #0
     4d4:	e133      	b.n	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
		switch (*fmt) {
     4d6:	f1a0 0c20 	sub.w	ip, r0, #32
     4da:	f1bc 0f0b 	cmp.w	ip, #11
     4de:	d8f7      	bhi.n	4d0 <cbvprintf_package+0xac>
     4e0:	f20f 0e04 	addw	lr, pc, #4
     4e4:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     4e8:	0000073f 	.word	0x0000073f
     4ec:	000004d1 	.word	0x000004d1
     4f0:	000004d1 	.word	0x000004d1
     4f4:	0000073f 	.word	0x0000073f
     4f8:	000004d1 	.word	0x000004d1
     4fc:	000004d1 	.word	0x000004d1
     500:	000004d1 	.word	0x000004d1
     504:	000004d1 	.word	0x000004d1
     508:	000004d1 	.word	0x000004d1
     50c:	000004d1 	.word	0x000004d1
     510:	000006cf 	.word	0x000006cf
     514:	0000073f 	.word	0x0000073f
     518:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     51c:	fa5f fe8c 	uxtb.w	lr, ip
     520:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     524:	d8d4      	bhi.n	4d0 <cbvprintf_package+0xac>
     526:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     52a:	d8d1      	bhi.n	4d0 <cbvprintf_package+0xac>
     52c:	f20f 0e04 	addw	lr, pc, #4
     530:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     534:	0000073f 	.word	0x0000073f
     538:	0000073f 	.word	0x0000073f
     53c:	000004d1 	.word	0x000004d1
     540:	0000073f 	.word	0x0000073f
     544:	0000073f 	.word	0x0000073f
     548:	0000073f 	.word	0x0000073f
     54c:	0000073f 	.word	0x0000073f
     550:	0000073f 	.word	0x0000073f
     554:	0000073f 	.word	0x0000073f
     558:	0000073f 	.word	0x0000073f
     55c:	0000073f 	.word	0x0000073f
     560:	0000073f 	.word	0x0000073f
     564:	0000073f 	.word	0x0000073f
     568:	000004d1 	.word	0x000004d1
     56c:	000004d1 	.word	0x000004d1
     570:	000004d1 	.word	0x000004d1
     574:	000004d1 	.word	0x000004d1
     578:	000004d1 	.word	0x000004d1
     57c:	000004d1 	.word	0x000004d1
     580:	000004d1 	.word	0x000004d1
     584:	0000068b 	.word	0x0000068b
     588:	000004d1 	.word	0x000004d1
     58c:	000004d1 	.word	0x000004d1
     590:	000004d1 	.word	0x000004d1
     594:	0000068b 	.word	0x0000068b
     598:	0000068b 	.word	0x0000068b
     59c:	0000068b 	.word	0x0000068b
     5a0:	000004d1 	.word	0x000004d1
     5a4:	000004d1 	.word	0x000004d1
     5a8:	000004d1 	.word	0x000004d1
     5ac:	000004d1 	.word	0x000004d1
     5b0:	0000073f 	.word	0x0000073f
     5b4:	000004d1 	.word	0x000004d1
     5b8:	000004d1 	.word	0x000004d1
     5bc:	000004d1 	.word	0x000004d1
     5c0:	000004d1 	.word	0x000004d1
     5c4:	000004d1 	.word	0x000004d1
     5c8:	000004d1 	.word	0x000004d1
     5cc:	000004d1 	.word	0x000004d1
     5d0:	000004d1 	.word	0x000004d1
     5d4:	000004d1 	.word	0x000004d1
     5d8:	000004d1 	.word	0x000004d1
     5dc:	000004d1 	.word	0x000004d1
     5e0:	0000066d 	.word	0x0000066d
     5e4:	000004d1 	.word	0x000004d1
     5e8:	000004d1 	.word	0x000004d1
     5ec:	000004d1 	.word	0x000004d1
     5f0:	000004d1 	.word	0x000004d1
     5f4:	000004d1 	.word	0x000004d1
     5f8:	000004d1 	.word	0x000004d1
     5fc:	000004d1 	.word	0x000004d1
     600:	000004d1 	.word	0x000004d1
     604:	0000068b 	.word	0x0000068b
     608:	000004d1 	.word	0x000004d1
     60c:	0000066d 	.word	0x0000066d
     610:	0000066d 	.word	0x0000066d
     614:	0000068b 	.word	0x0000068b
     618:	0000068b 	.word	0x0000068b
     61c:	0000068b 	.word	0x0000068b
     620:	0000073f 	.word	0x0000073f
     624:	0000066d 	.word	0x0000066d
     628:	000006bf 	.word	0x000006bf
     62c:	000004d1 	.word	0x000004d1
     630:	0000073f 	.word	0x0000073f
     634:	000004d1 	.word	0x000004d1
     638:	000006c5 	.word	0x000006c5
     63c:	0000066d 	.word	0x0000066d
     640:	000006c5 	.word	0x000006c5
     644:	000004d1 	.word	0x000004d1
     648:	000004d1 	.word	0x000004d1
     64c:	000006c5 	.word	0x000006c5
     650:	000004c1 	.word	0x000004c1
     654:	0000066d 	.word	0x0000066d
     658:	000004d1 	.word	0x000004d1
     65c:	000004d1 	.word	0x000004d1
     660:	0000066d 	.word	0x0000066d
     664:	000004d1 	.word	0x000004d1
     668:	000004c1 	.word	0x000004c1
			if (fmt[-1] == 'l') {
     66c:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     670:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     674:	d129      	bne.n	6ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e2>
				if (fmt[-2] == 'l') {
     676:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     67a:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     67c:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     680:	d03d      	beq.n	6fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x216>
			align = VA_STACK_ALIGN(void *);
     682:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     686:	4641      	mov	r1, r8
     688:	e021      	b.n	6ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e6>
				v.ld = va_arg(ap, long double);
     68a:	9800      	ldr	r0, [sp, #0]
     68c:	f100 0b07 	add.w	fp, r0, #7
     690:	f02b 0007 	bic.w	r0, fp, #7
     694:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     698:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     69a:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     69c:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     6a0:	b155      	cbz	r5, 6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>
				if (BUF_OFFSET + size > len) {
     6a2:	9805      	ldr	r0, [sp, #20]
     6a4:	4420      	add	r0, r4
     6a6:	42b0      	cmp	r0, r6
     6a8:	d904      	bls.n	6b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1cc>
					return -ENOSPC;
     6aa:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     6ae:	b00d      	add	sp, #52	; 0x34
     6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     6b4:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     6b8:	3408      	adds	r4, #8
			parsing = false;
     6ba:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     6be:	f04f 0808 	mov.w	r8, #8
     6c2:	e6ff      	b.n	4c4 <cbvprintf_package+0xa0>
			parsing = false;
     6c4:	f04f 0900 	mov.w	r9, #0
     6c8:	e7db      	b.n	682 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19a>
			parsing = false;
     6ca:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     6ce:	3c01      	subs	r4, #1
     6d0:	4444      	add	r4, r8
     6d2:	f1c8 0c00 	rsb	ip, r8, #0
     6d6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6da:	b125      	cbz	r5, 6e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fe>
     6dc:	eba1 0c05 	sub.w	ip, r1, r5
     6e0:	44a4      	add	ip, r4
     6e2:	45b4      	cmp	ip, r6
     6e4:	d8e1      	bhi.n	6aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c2>
		if (*fmt == 's') {
     6e6:	2873      	cmp	r0, #115	; 0x73
     6e8:	d152      	bne.n	790 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6ea:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     6ec:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6f0:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     6f2:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6f6:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     6f8:	f8cd b000 	str.w	fp, [sp]
     6fc:	e6b8      	b.n	470 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     6fe:	f04f 0808 	mov.w	r8, #8
     702:	e7c0      	b.n	686 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     704:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     706:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     70a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     70e:	e6c3      	b.n	498 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     710:	2a0f      	cmp	r2, #15
     712:	f63f aeca 	bhi.w	4aa <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     716:	b345      	cbz	r5, 76a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x282>
					str_ptr_pos[s_idx] = s_ptr_idx;
     718:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     71c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     720:	4496      	add	lr, r2
     722:	f1bc 0f00 	cmp.w	ip, #0
     726:	d01a      	beq.n	75e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x276>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     728:	f060 007f 	orn	r0, r0, #127	; 0x7f
     72c:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     730:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     734:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     736:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     73a:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     73c:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     73e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     742:	2800      	cmp	r0, #0
     744:	f47f aeb4 	bne.w	4b0 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     748:	1b61      	subs	r1, r4, r5
     74a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     74e:	f4bf aeac 	bcs.w	4aa <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     752:	2d00      	cmp	r5, #0
     754:	d13e      	bne.n	7d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ec>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     756:	f1a6 0408 	sub.w	r4, r6, #8
     75a:	1860      	adds	r0, r4, r1
     75c:	e7a7      	b.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
					str_ptr_pos[s_idx] = s_ptr_idx;
     75e:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     762:	9803      	ldr	r0, [sp, #12]
     764:	3001      	adds	r0, #1
     766:	9003      	str	r0, [sp, #12]
     768:	e7e4      	b.n	734 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24c>
				} else if (is_ro || rws_pos_en) {
     76a:	f1bc 0f00 	cmp.w	ip, #0
     76e:	d101      	bne.n	774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>
     770:	9801      	ldr	r0, [sp, #4]
     772:	b108      	cbz	r0, 778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>
					len += 1;
     774:	3601      	adds	r6, #1
     776:	e7dd      	b.n	734 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24c>
					len += strlen(s) + 1 + 1;
     778:	4638      	mov	r0, r7
     77a:	e9cd 1206 	strd	r1, r2, [sp, #24]
     77e:	9305      	str	r3, [sp, #20]
     780:	f005 f9f5 	bl	5b6e <strlen>
     784:	3602      	adds	r6, #2
     786:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     78a:	9b05      	ldr	r3, [sp, #20]
     78c:	4406      	add	r6, r0
     78e:	e7d1      	b.n	734 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24c>
		} else if (size == sizeof(int)) {
     790:	2904      	cmp	r1, #4
     792:	d10d      	bne.n	7b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c8>
			int v = va_arg(ap, int);
     794:	9800      	ldr	r0, [sp, #0]
     796:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     79a:	b10d      	cbz	r5, 7a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b8>
			int v = va_arg(ap, int);
     79c:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     79e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     7a0:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     7a2:	f8cd c000 	str.w	ip, [sp]
     7a6:	e7ca      	b.n	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
     7a8:	0000649c 	.word	0x0000649c
     7ac:	00007194 	.word	0x00007194
		} else if (size == sizeof(long long)) {
     7b0:	2908      	cmp	r1, #8
     7b2:	f47f ae7a 	bne.w	4aa <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     7b6:	9800      	ldr	r0, [sp, #0]
     7b8:	3007      	adds	r0, #7
     7ba:	f020 0007 	bic.w	r0, r0, #7
     7be:	f100 0c08 	add.w	ip, r0, #8
     7c2:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     7c6:	b11d      	cbz	r5, 7d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e8>
			long long v = va_arg(ap, long long);
     7c8:	e9d0 bc00 	ldrd	fp, ip, [r0]
     7cc:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     7d0:	3408      	adds	r4, #8
     7d2:	e7b4      	b.n	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
	if (rws_pos_en) {
     7d4:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     7d6:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     7d8:	0889      	lsrs	r1, r1, #2
     7da:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     7dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     7e0:	b1a3      	cbz	r3, 80c <CONFIG_ISR_STACK_SIZE+0xc>
		buf0[1] = 0;
     7e2:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     7e4:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     7e6:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     7ea:	f1ba 0f00 	cmp.w	sl, #0
     7ee:	d006      	beq.n	7fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x316>
     7f0:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     7f2:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     7f6:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     7fa:	4562      	cmp	r2, ip
     7fc:	d10a      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     7fe:	f10d 0820 	add.w	r8, sp, #32
     802:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     806:	f1c5 0b01 	rsb	fp, r5, #1
     80a:	e039      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
		buf0[3] = 0;
     80c:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     80e:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     810:	70eb      	strb	r3, [r5, #3]
     812:	e7e8      	b.n	7e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2fe>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     814:	f810 1b01 	ldrb.w	r1, [r0], #1
     818:	060b      	lsls	r3, r1, #24
     81a:	d508      	bpl.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
			if (BUF_OFFSET + 1 > len) {
     81c:	eb04 080e 	add.w	r8, r4, lr
     820:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     822:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     826:	f63f af40 	bhi.w	6aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c2>
			*buf++ = pos;
     82a:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     82e:	f10c 0c01 	add.w	ip, ip, #1
     832:	e7e2      	b.n	7fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x312>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     834:	f1ba 0f00 	cmp.w	sl, #0
     838:	d003      	beq.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     83a:	f998 2000 	ldrsb.w	r2, [r8]
     83e:	2a00      	cmp	r2, #0
     840:	db1c      	blt.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
		if (rws_pos_en) {
     842:	9b01      	ldr	r3, [sp, #4]
     844:	bb03      	cbnz	r3, 888 <CONFIG_ISR_STACK_SIZE+0x88>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     846:	f898 2000 	ldrb.w	r2, [r8]
     84a:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     84e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     852:	4638      	mov	r0, r7
     854:	f005 f98b 	bl	5b6e <strlen>
     858:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     85a:	eb04 010b 	add.w	r1, r4, fp
     85e:	4411      	add	r1, r2
     860:	42b1      	cmp	r1, r6
     862:	f63f af22 	bhi.w	6aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c2>
		*buf++ = str_ptr_pos[i];
     866:	f898 1000 	ldrb.w	r1, [r8]
     86a:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     86e:	4639      	mov	r1, r7
     870:	4620      	mov	r0, r4
     872:	9200      	str	r2, [sp, #0]
     874:	f005 f98b 	bl	5b8e <memcpy>
		buf += size;
     878:	9a00      	ldr	r2, [sp, #0]
     87a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     87c:	f108 0801 	add.w	r8, r8, #1
     880:	45c1      	cmp	r9, r8
     882:	d1d7      	bne.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
	return BUF_OFFSET;
     884:	1b60      	subs	r0, r4, r5
     886:	e712      	b.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
			size = 0;
     888:	2200      	movs	r2, #0
     88a:	e7e6      	b.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
		return -EFAULT;
     88c:	f06f 000d 	mvn.w	r0, #13
     890:	e70d      	b.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     892:	2907      	cmp	r1, #7
     894:	f63f ade2 	bhi.w	45c <cbvprintf_package+0x38>
     898:	e707      	b.n	6aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c2>
     89a:	bf00      	nop

0000089c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     89c:	4b01      	ldr	r3, [pc, #4]	; (8a4 <__printk_hook_install+0x8>)
     89e:	6018      	str	r0, [r3, #0]
}
     8a0:	4770      	bx	lr
     8a2:	bf00      	nop
     8a4:	20000000 	.word	0x20000000

000008a8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8ac:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8b0:	f019 0808 	ands.w	r8, r9, #8
{
     8b4:	4604      	mov	r4, r0
     8b6:	4693      	mov	fp, r2
	if (processing) {
     8b8:	d00d      	beq.n	8d6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     8ba:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     8bc:	bf0c      	ite	eq
     8be:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8c2:	f049 0920 	orrne.w	r9, r9, #32
     8c6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8ca:	f38b 8811 	msr	BASEPRI, fp
     8ce:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     8d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8d6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     8da:	2902      	cmp	r1, #2
     8dc:	d107      	bne.n	8ee <process_event+0x46>
			evt = process_recheck(mgr);
     8de:	4620      	mov	r0, r4
     8e0:	f004 ff7d 	bl	57de <process_recheck>
		if (evt == EVT_NOP) {
     8e4:	2800      	cmp	r0, #0
     8e6:	d0f0      	beq.n	8ca <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     8e8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8ea:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     8ec:	d14e      	bne.n	98c <process_event+0xe4>
			res = mgr->last_res;
     8ee:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8f0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     8f2:	2f00      	cmp	r7, #0
     8f4:	da15      	bge.n	922 <process_event+0x7a>
		*clients = mgr->clients;
     8f6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8f8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     8fc:	e9c4 8800 	strd	r8, r8, [r4]
     900:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     904:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     906:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     908:	8b21      	ldrh	r1, [r4, #24]
     90a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     90e:	45ca      	cmp	sl, r9
     910:	d002      	beq.n	918 <process_event+0x70>
		if (do_monitors
     912:	68a3      	ldr	r3, [r4, #8]
     914:	2b00      	cmp	r3, #0
     916:	d15a      	bne.n	9ce <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     918:	b90d      	cbnz	r5, 91e <process_event+0x76>
		    || (transit != NULL)) {
     91a:	2e00      	cmp	r6, #0
     91c:	d071      	beq.n	a02 <process_event+0x15a>
     91e:	2300      	movs	r3, #0
     920:	e056      	b.n	9d0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     922:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     926:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     928:	2a01      	cmp	r2, #1
     92a:	d81e      	bhi.n	96a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     92c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     930:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     932:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     934:	b289      	uxth	r1, r1
     936:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     93a:	d10a      	bne.n	952 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     93c:	b13d      	cbz	r5, 94e <process_event+0xa6>
     93e:	8b63      	ldrh	r3, [r4, #26]
     940:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     942:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     944:	3301      	adds	r3, #1
     946:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     948:	2a00      	cmp	r2, #0
     94a:	d1fa      	bne.n	942 <process_event+0x9a>
     94c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     94e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     952:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     954:	4620      	mov	r0, r4
     956:	f004 ff42 	bl	57de <process_recheck>
     95a:	4606      	mov	r6, r0
     95c:	2800      	cmp	r0, #0
     95e:	d0d3      	beq.n	908 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     960:	8b23      	ldrh	r3, [r4, #24]
     962:	f043 0320 	orr.w	r3, r3, #32
     966:	8323      	strh	r3, [r4, #24]
     968:	e7cd      	b.n	906 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     96a:	2b04      	cmp	r3, #4
     96c:	d10c      	bne.n	988 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     96e:	f021 0107 	bic.w	r1, r1, #7
     972:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     974:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     976:	4620      	mov	r0, r4
     978:	f004 ff31 	bl	57de <process_recheck>
     97c:	4605      	mov	r5, r0
     97e:	2800      	cmp	r0, #0
     980:	d0c1      	beq.n	906 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     982:	f041 0120 	orr.w	r1, r1, #32
     986:	8321      	strh	r1, [r4, #24]
     988:	2500      	movs	r5, #0
     98a:	e7bc      	b.n	906 <process_event+0x5e>
		} else if (evt == EVT_START) {
     98c:	2803      	cmp	r0, #3
     98e:	d109      	bne.n	9a4 <process_event+0xfc>
			transit = mgr->transitions->start;
     990:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     992:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     996:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     998:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     99c:	8323      	strh	r3, [r4, #24]
}
     99e:	2500      	movs	r5, #0
		res = 0;
     9a0:	462f      	mov	r7, r5
     9a2:	e7b1      	b.n	908 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     9a4:	2804      	cmp	r0, #4
     9a6:	d106      	bne.n	9b6 <process_event+0x10e>
			transit = mgr->transitions->stop;
     9a8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9aa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     9ae:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9b0:	f043 0304 	orr.w	r3, r3, #4
     9b4:	e7f2      	b.n	99c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     9b6:	2805      	cmp	r0, #5
     9b8:	d106      	bne.n	9c8 <process_event+0x120>
			transit = mgr->transitions->reset;
     9ba:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9bc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     9c0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9c2:	f043 0305 	orr.w	r3, r3, #5
     9c6:	e7e9      	b.n	99c <process_event+0xf4>
     9c8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     9ca:	462e      	mov	r6, r5
     9cc:	e7e8      	b.n	9a0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     9ce:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     9d0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     9d4:	8321      	strh	r1, [r4, #24]
     9d6:	f38b 8811 	msr	BASEPRI, fp
     9da:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     9de:	b9fb      	cbnz	r3, a20 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     9e0:	bb85      	cbnz	r5, a44 <process_event+0x19c>
			if (transit != NULL) {
     9e2:	b116      	cbz	r6, 9ea <process_event+0x142>
				transit(mgr, transition_complete);
     9e4:	491f      	ldr	r1, [pc, #124]	; (a64 <process_event+0x1bc>)
     9e6:	4620      	mov	r0, r4
     9e8:	47b0      	blx	r6
	__asm__ volatile(
     9ea:	f04f 0320 	mov.w	r3, #32
     9ee:	f3ef 8b11 	mrs	fp, BASEPRI
     9f2:	f383 8812 	msr	BASEPRI_MAX, r3
     9f6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     9fa:	8b23      	ldrh	r3, [r4, #24]
     9fc:	f023 0308 	bic.w	r3, r3, #8
     a00:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a02:	8b23      	ldrh	r3, [r4, #24]
     a04:	06da      	lsls	r2, r3, #27
     a06:	d525      	bpl.n	a54 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a08:	f023 0310 	bic.w	r3, r3, #16
     a0c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     a0e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a10:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     a14:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     a18:	2900      	cmp	r1, #0
     a1a:	f47f af5e 	bne.w	8da <process_event+0x32>
out:
     a1e:	e754      	b.n	8ca <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a20:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a22:	2900      	cmp	r1, #0
     a24:	d0dc      	beq.n	9e0 <process_event+0x138>
	return node->next;
     a26:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     a2a:	f8d1 b004 	ldr.w	fp, [r1, #4]
     a2e:	463b      	mov	r3, r7
     a30:	4652      	mov	r2, sl
     a32:	4620      	mov	r0, r4
     a34:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a36:	f1b9 0f00 	cmp.w	r9, #0
     a3a:	d0d1      	beq.n	9e0 <process_event+0x138>
     a3c:	4649      	mov	r1, r9
     a3e:	f8d9 9000 	ldr.w	r9, [r9]
     a42:	e7f2      	b.n	a2a <process_event+0x182>
     a44:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     a46:	463b      	mov	r3, r7
     a48:	4652      	mov	r2, sl
     a4a:	4620      	mov	r0, r4
     a4c:	682d      	ldr	r5, [r5, #0]
     a4e:	f004 fee2 	bl	5816 <notify_one>
     a52:	e7c5      	b.n	9e0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a54:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a58:	bf1e      	ittt	ne
     a5a:	f023 0320 	bicne.w	r3, r3, #32
     a5e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     a60:	2102      	movne	r1, #2
     a62:	e7d5      	b.n	a10 <process_event+0x168>
     a64:	00005843 	.word	0x00005843

00000a68 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a6c:	b091      	sub	sp, #68	; 0x44
     a6e:	468b      	mov	fp, r1
     a70:	9002      	str	r0, [sp, #8]
     a72:	4692      	mov	sl, r2
     a74:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a76:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a78:	f89a 0000 	ldrb.w	r0, [sl]
     a7c:	b908      	cbnz	r0, a82 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a7e:	4628      	mov	r0, r5
     a80:	e35f      	b.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
		if (*fp != '%') {
     a82:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     a84:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     a88:	d007      	beq.n	a9a <cbvprintf+0x32>
			OUTC('%');
     a8a:	9b02      	ldr	r3, [sp, #8]
     a8c:	4659      	mov	r1, fp
     a8e:	4798      	blx	r3
     a90:	2800      	cmp	r0, #0
     a92:	f2c0 8356 	blt.w	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
     a96:	3501      	adds	r5, #1
			break;
     a98:	e212      	b.n	ec0 <cbvprintf+0x458>
		} state = {
     a9a:	2218      	movs	r2, #24
     a9c:	2100      	movs	r1, #0
     a9e:	a80a      	add	r0, sp, #40	; 0x28
     aa0:	f005 f880 	bl	5ba4 <memset>
	if (*sp == '%') {
     aa4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     aa8:	2b25      	cmp	r3, #37	; 0x25
     aaa:	d078      	beq.n	b9e <cbvprintf+0x136>
     aac:	2200      	movs	r2, #0
     aae:	4610      	mov	r0, r2
     ab0:	4696      	mov	lr, r2
     ab2:	4694      	mov	ip, r2
     ab4:	4616      	mov	r6, r2
     ab6:	4639      	mov	r1, r7
		switch (*sp) {
     ab8:	f817 3b01 	ldrb.w	r3, [r7], #1
     abc:	2b2b      	cmp	r3, #43	; 0x2b
     abe:	f000 809d 	beq.w	bfc <cbvprintf+0x194>
     ac2:	f200 8094 	bhi.w	bee <cbvprintf+0x186>
     ac6:	2b20      	cmp	r3, #32
     ac8:	f000 809b 	beq.w	c02 <cbvprintf+0x19a>
     acc:	2b23      	cmp	r3, #35	; 0x23
     ace:	f000 809b 	beq.w	c08 <cbvprintf+0x1a0>
     ad2:	b12e      	cbz	r6, ae0 <cbvprintf+0x78>
     ad4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     ad8:	f046 0604 	orr.w	r6, r6, #4
     adc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     ae0:	f1bc 0f00 	cmp.w	ip, #0
     ae4:	d005      	beq.n	af2 <cbvprintf+0x8a>
     ae6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     aea:	f046 0608 	orr.w	r6, r6, #8
     aee:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     af2:	f1be 0f00 	cmp.w	lr, #0
     af6:	d005      	beq.n	b04 <cbvprintf+0x9c>
     af8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     afc:	f046 0610 	orr.w	r6, r6, #16
     b00:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b04:	b128      	cbz	r0, b12 <cbvprintf+0xaa>
     b06:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b0a:	f040 0020 	orr.w	r0, r0, #32
     b0e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b12:	b12a      	cbz	r2, b20 <cbvprintf+0xb8>
     b14:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b1c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b24:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b28:	2844      	cmp	r0, #68	; 0x44
     b2a:	d103      	bne.n	b34 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b2c:	f36f 1286 	bfc	r2, #6, #1
     b30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b34:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b38:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b3e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b42:	d17b      	bne.n	c3c <cbvprintf+0x1d4>
		conv->width_star = true;
     b44:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b48:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     b4c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     b4e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b52:	781a      	ldrb	r2, [r3, #0]
     b54:	2a2e      	cmp	r2, #46	; 0x2e
     b56:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b5a:	bf0c      	ite	eq
     b5c:	2101      	moveq	r1, #1
     b5e:	2100      	movne	r1, #0
     b60:	f361 0241 	bfi	r2, r1, #1, #1
     b64:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b68:	d174      	bne.n	c54 <cbvprintf+0x1ec>
	if (*sp == '*') {
     b6a:	785a      	ldrb	r2, [r3, #1]
     b6c:	2a2a      	cmp	r2, #42	; 0x2a
     b6e:	d06a      	beq.n	c46 <cbvprintf+0x1de>
	++sp;
     b70:	3301      	adds	r3, #1
	size_t val = 0;
     b72:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     b74:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b76:	4618      	mov	r0, r3
     b78:	f810 2b01 	ldrb.w	r2, [r0], #1
     b7c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     b80:	2f09      	cmp	r7, #9
     b82:	f240 808e 	bls.w	ca2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     b86:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     b8a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     b8c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     b90:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     b94:	f361 0241 	bfi	r2, r1, #1, #1
     b98:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b9c:	e05a      	b.n	c54 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     b9e:	f10a 0702 	add.w	r7, sl, #2
     ba2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     ba6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     baa:	07d9      	lsls	r1, r3, #31
     bac:	f140 8149 	bpl.w	e42 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bb0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bb4:	f1b9 0f00 	cmp.w	r9, #0
     bb8:	da07      	bge.n	bca <cbvprintf+0x162>
				conv->flag_dash = true;
     bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bbe:	f042 0204 	orr.w	r2, r2, #4
     bc2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bc6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     bca:	075a      	lsls	r2, r3, #29
     bcc:	f140 8142 	bpl.w	e54 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     bd0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     bd4:	f1b8 0f00 	cmp.w	r8, #0
     bd8:	f280 8141 	bge.w	e5e <cbvprintf+0x3f6>
				conv->prec_present = false;
     bdc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     be0:	f36f 0341 	bfc	r3, #1, #1
     be4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     be8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     bec:	e137      	b.n	e5e <cbvprintf+0x3f6>
		switch (*sp) {
     bee:	2b2d      	cmp	r3, #45	; 0x2d
     bf0:	d00c      	beq.n	c0c <cbvprintf+0x1a4>
     bf2:	2b30      	cmp	r3, #48	; 0x30
     bf4:	f47f af6d 	bne.w	ad2 <cbvprintf+0x6a>
			conv->flag_zero = true;
     bf8:	2201      	movs	r2, #1
	} while (loop);
     bfa:	e75c      	b.n	ab6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     bfc:	f04f 0c01 	mov.w	ip, #1
     c00:	e759      	b.n	ab6 <cbvprintf+0x4e>
			conv->flag_space = true;
     c02:	f04f 0e01 	mov.w	lr, #1
     c06:	e756      	b.n	ab6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c08:	2001      	movs	r0, #1
     c0a:	e754      	b.n	ab6 <cbvprintf+0x4e>
		switch (*sp) {
     c0c:	2601      	movs	r6, #1
     c0e:	e752      	b.n	ab6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c10:	fb0c 0202 	mla	r2, ip, r2, r0
     c14:	3a30      	subs	r2, #48	; 0x30
     c16:	4633      	mov	r3, r6
     c18:	461e      	mov	r6, r3
     c1a:	f816 0b01 	ldrb.w	r0, [r6], #1
     c1e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c22:	2f09      	cmp	r7, #9
     c24:	d9f4      	bls.n	c10 <cbvprintf+0x1a8>
	if (sp != wp) {
     c26:	4299      	cmp	r1, r3
     c28:	d093      	beq.n	b52 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c2a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c2e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c30:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c32:	f362 0141 	bfi	r1, r2, #1, #1
     c36:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c3a:	e78a      	b.n	b52 <cbvprintf+0xea>
     c3c:	460b      	mov	r3, r1
	size_t val = 0;
     c3e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c40:	f04f 0c0a 	mov.w	ip, #10
     c44:	e7e8      	b.n	c18 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c46:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c4a:	f042 0204 	orr.w	r2, r2, #4
     c4e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c52:	3302      	adds	r3, #2
	switch (*sp) {
     c54:	461f      	mov	r7, r3
     c56:	f817 2b01 	ldrb.w	r2, [r7], #1
     c5a:	2a6c      	cmp	r2, #108	; 0x6c
     c5c:	d041      	beq.n	ce2 <cbvprintf+0x27a>
     c5e:	d825      	bhi.n	cac <cbvprintf+0x244>
     c60:	2a68      	cmp	r2, #104	; 0x68
     c62:	d02b      	beq.n	cbc <cbvprintf+0x254>
     c64:	2a6a      	cmp	r2, #106	; 0x6a
     c66:	d046      	beq.n	cf6 <cbvprintf+0x28e>
     c68:	2a4c      	cmp	r2, #76	; 0x4c
     c6a:	d04c      	beq.n	d06 <cbvprintf+0x29e>
     c6c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c6e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     c72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     c76:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     c7a:	2a78      	cmp	r2, #120	; 0x78
     c7c:	f200 80d9 	bhi.w	e32 <cbvprintf+0x3ca>
     c80:	2a57      	cmp	r2, #87	; 0x57
     c82:	d84d      	bhi.n	d20 <cbvprintf+0x2b8>
     c84:	2a41      	cmp	r2, #65	; 0x41
     c86:	d003      	beq.n	c90 <cbvprintf+0x228>
     c88:	3a45      	subs	r2, #69	; 0x45
     c8a:	2a02      	cmp	r2, #2
     c8c:	f200 80d1 	bhi.w	e32 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     c90:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c94:	2204      	movs	r2, #4
     c96:	f362 0302 	bfi	r3, r2, #0, #3
     c9a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     c9e:	2301      	movs	r3, #1
			break;
     ca0:	e09e      	b.n	de0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     ca2:	fb06 2101 	mla	r1, r6, r1, r2
     ca6:	3930      	subs	r1, #48	; 0x30
     ca8:	4603      	mov	r3, r0
     caa:	e764      	b.n	b76 <cbvprintf+0x10e>
	switch (*sp) {
     cac:	2a74      	cmp	r2, #116	; 0x74
     cae:	d026      	beq.n	cfe <cbvprintf+0x296>
     cb0:	2a7a      	cmp	r2, #122	; 0x7a
     cb2:	d1db      	bne.n	c6c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cb4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cb8:	2206      	movs	r2, #6
     cba:	e00d      	b.n	cd8 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cbc:	785a      	ldrb	r2, [r3, #1]
     cbe:	2a68      	cmp	r2, #104	; 0x68
     cc0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cc4:	d106      	bne.n	cd4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     cc6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     cc8:	f361 02c6 	bfi	r2, r1, #3, #4
     ccc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     cd0:	1c9f      	adds	r7, r3, #2
     cd2:	e7cc      	b.n	c6e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     cd4:	4613      	mov	r3, r2
     cd6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     cd8:	f362 03c6 	bfi	r3, r2, #3, #4
     cdc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     ce0:	e7c5      	b.n	c6e <cbvprintf+0x206>
		if (*++sp == 'l') {
     ce2:	785a      	ldrb	r2, [r3, #1]
     ce4:	2a6c      	cmp	r2, #108	; 0x6c
     ce6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cea:	d101      	bne.n	cf0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     cec:	2104      	movs	r1, #4
     cee:	e7eb      	b.n	cc8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     cf0:	4613      	mov	r3, r2
     cf2:	2203      	movs	r2, #3
     cf4:	e7f0      	b.n	cd8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     cf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cfa:	2205      	movs	r2, #5
     cfc:	e7ec      	b.n	cd8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     cfe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d02:	2207      	movs	r2, #7
     d04:	e7e8      	b.n	cd8 <cbvprintf+0x270>
		conv->unsupported = true;
     d06:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d0a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d0e:	f023 0302 	bic.w	r3, r3, #2
     d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d16:	f043 0302 	orr.w	r3, r3, #2
     d1a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d1e:	e7a6      	b.n	c6e <cbvprintf+0x206>
	switch (conv->specifier) {
     d20:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d24:	2920      	cmp	r1, #32
     d26:	f200 8084 	bhi.w	e32 <cbvprintf+0x3ca>
     d2a:	a001      	add	r0, pc, #4	; (adr r0, d30 <cbvprintf+0x2c8>)
     d2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d30:	00000df5 	.word	0x00000df5
     d34:	00000e33 	.word	0x00000e33
     d38:	00000e33 	.word	0x00000e33
     d3c:	00000e33 	.word	0x00000e33
     d40:	00000e33 	.word	0x00000e33
     d44:	00000e33 	.word	0x00000e33
     d48:	00000e33 	.word	0x00000e33
     d4c:	00000e33 	.word	0x00000e33
     d50:	00000e33 	.word	0x00000e33
     d54:	00000c91 	.word	0x00000c91
     d58:	00000e33 	.word	0x00000e33
     d5c:	00000df5 	.word	0x00000df5
     d60:	00000db5 	.word	0x00000db5
     d64:	00000c91 	.word	0x00000c91
     d68:	00000c91 	.word	0x00000c91
     d6c:	00000c91 	.word	0x00000c91
     d70:	00000e33 	.word	0x00000e33
     d74:	00000db5 	.word	0x00000db5
     d78:	00000e33 	.word	0x00000e33
     d7c:	00000e33 	.word	0x00000e33
     d80:	00000e33 	.word	0x00000e33
     d84:	00000e33 	.word	0x00000e33
     d88:	00000dfd 	.word	0x00000dfd
     d8c:	00000df5 	.word	0x00000df5
     d90:	00000e19 	.word	0x00000e19
     d94:	00000e33 	.word	0x00000e33
     d98:	00000e33 	.word	0x00000e33
     d9c:	00000e19 	.word	0x00000e19
     da0:	00000e33 	.word	0x00000e33
     da4:	00000df5 	.word	0x00000df5
     da8:	00000e33 	.word	0x00000e33
     dac:	00000e33 	.word	0x00000e33
     db0:	00000df5 	.word	0x00000df5
		conv->specifier_cat = SPECIFIER_SINT;
     db4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     db8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     dba:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dbe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     dc2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     dc4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     dc8:	bf02      	ittt	eq
     dca:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     dce:	f041 0101 	orreq.w	r1, r1, #1
     dd2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     dd6:	2a63      	cmp	r2, #99	; 0x63
     dd8:	d131      	bne.n	e3e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     dda:	3b00      	subs	r3, #0
     ddc:	bf18      	it	ne
     dde:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     de0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     de4:	f3c2 0140 	ubfx	r1, r2, #1, #1
     de8:	430b      	orrs	r3, r1
     dea:	f363 0241 	bfi	r2, r3, #1, #1
     dee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     df2:	e6d8      	b.n	ba6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     df4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     df8:	2002      	movs	r0, #2
     dfa:	e7de      	b.n	dba <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     dfc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e00:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e04:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e08:	2103      	movs	r1, #3
     e0a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e0e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e10:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e14:	4143      	adcs	r3, r0
     e16:	e7e3      	b.n	de0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e18:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e1c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e1e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e22:	f361 0202 	bfi	r2, r1, #0, #3
     e26:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e2a:	bf14      	ite	ne
     e2c:	2301      	movne	r3, #1
     e2e:	2300      	moveq	r3, #0
     e30:	e7d6      	b.n	de0 <cbvprintf+0x378>
		conv->invalid = true;
     e32:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e36:	f043 0301 	orr.w	r3, r3, #1
     e3a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e3e:	2300      	movs	r3, #0
     e40:	e7ce      	b.n	de0 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e42:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e46:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e48:	bfb4      	ite	lt
     e4a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e4e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     e52:	e6ba      	b.n	bca <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e54:	079b      	lsls	r3, r3, #30
     e56:	f57f aec7 	bpl.w	be8 <cbvprintf+0x180>
			precision = conv->prec_value;
     e5a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e5e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e62:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e64:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e68:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e6c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e70:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e72:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     e76:	d138      	bne.n	eea <cbvprintf+0x482>
			switch (length_mod) {
     e78:	1ecb      	subs	r3, r1, #3
     e7a:	2b04      	cmp	r3, #4
     e7c:	d822      	bhi.n	ec4 <cbvprintf+0x45c>
     e7e:	e8df f003 	tbb	[pc, r3]
     e82:	0903      	.short	0x0903
     e84:	2109      	.short	0x2109
     e86:	21          	.byte	0x21
     e87:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     e88:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     e8c:	17da      	asrs	r2, r3, #31
     e8e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     e92:	e006      	b.n	ea2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     e94:	3407      	adds	r4, #7
     e96:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     e9a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     e9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ea2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ea6:	f013 0603 	ands.w	r6, r3, #3
     eaa:	d056      	beq.n	f5a <cbvprintf+0x4f2>
			OUTS(sp, fp);
     eac:	9802      	ldr	r0, [sp, #8]
     eae:	463b      	mov	r3, r7
     eb0:	4652      	mov	r2, sl
     eb2:	4659      	mov	r1, fp
     eb4:	f004 fd8e 	bl	59d4 <outs>
     eb8:	2800      	cmp	r0, #0
     eba:	f2c0 8142 	blt.w	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
     ebe:	4405      	add	r5, r0
			continue;
     ec0:	46ba      	mov	sl, r7
     ec2:	e5d9      	b.n	a78 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ec4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     ec8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     eca:	ea4f 72e3 	mov.w	r2, r3, asr #31
     ece:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ed2:	d105      	bne.n	ee0 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     ed4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     ed8:	930a      	str	r3, [sp, #40]	; 0x28
     eda:	2300      	movs	r3, #0
     edc:	930b      	str	r3, [sp, #44]	; 0x2c
     ede:	e7e0      	b.n	ea2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     ee0:	2902      	cmp	r1, #2
     ee2:	d1de      	bne.n	ea2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     ee4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     ee8:	e7d0      	b.n	e8c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     eea:	2b02      	cmp	r3, #2
     eec:	d123      	bne.n	f36 <cbvprintf+0x4ce>
			switch (length_mod) {
     eee:	1ecb      	subs	r3, r1, #3
     ef0:	2b04      	cmp	r3, #4
     ef2:	d813      	bhi.n	f1c <cbvprintf+0x4b4>
     ef4:	e8df f003 	tbb	[pc, r3]
     ef8:	120a0a03 	.word	0x120a0a03
     efc:	12          	.byte	0x12
     efd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     efe:	6822      	ldr	r2, [r4, #0]
     f00:	920a      	str	r2, [sp, #40]	; 0x28
     f02:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     f04:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     f06:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f08:	4604      	mov	r4, r0
     f0a:	e7ca      	b.n	ea2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     f0c:	1de0      	adds	r0, r4, #7
     f0e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     f12:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     f1a:	e7f5      	b.n	f08 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     f1c:	f854 3b04 	ldr.w	r3, [r4], #4
     f20:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f22:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     f24:	f04f 0300 	mov.w	r3, #0
     f28:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f2a:	d0d3      	beq.n	ed4 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     f2c:	2902      	cmp	r1, #2
     f2e:	d1b8      	bne.n	ea2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     f30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f34:	e7d0      	b.n	ed8 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     f36:	2b04      	cmp	r3, #4
     f38:	d109      	bne.n	f4e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     f3a:	1de3      	adds	r3, r4, #7
     f3c:	f023 0307 	bic.w	r3, r3, #7
     f40:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     f44:	e9d3 2300 	ldrd	r2, r3, [r3]
     f48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     f4c:	e7a9      	b.n	ea2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f4e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f50:	bf04      	itt	eq
     f52:	f854 3b04 	ldreq.w	r3, [r4], #4
     f56:	930a      	streq	r3, [sp, #40]	; 0x28
     f58:	e7a3      	b.n	ea2 <cbvprintf+0x43a>
		switch (conv->specifier) {
     f5a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f5e:	2878      	cmp	r0, #120	; 0x78
     f60:	d8ae      	bhi.n	ec0 <cbvprintf+0x458>
     f62:	2862      	cmp	r0, #98	; 0x62
     f64:	d822      	bhi.n	fac <cbvprintf+0x544>
     f66:	2825      	cmp	r0, #37	; 0x25
     f68:	f43f ad8f 	beq.w	a8a <cbvprintf+0x22>
     f6c:	2858      	cmp	r0, #88	; 0x58
     f6e:	d1a7      	bne.n	ec0 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f70:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f74:	9300      	str	r3, [sp, #0]
     f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     f7a:	ab04      	add	r3, sp, #16
     f7c:	aa0c      	add	r2, sp, #48	; 0x30
     f7e:	f004 fce3 	bl	5948 <encode_uint>
     f82:	4682      	mov	sl, r0
			if (precision >= 0) {
     f84:	f1b8 0f00 	cmp.w	r8, #0
     f88:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     f8c:	db0c      	blt.n	fa8 <cbvprintf+0x540>
				conv->flag_zero = false;
     f8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     f92:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     f96:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f9a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     f9c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fa0:	d902      	bls.n	fa8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     fa2:	eba8 0303 	sub.w	r3, r8, r3
     fa6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fa8:	4680      	mov	r8, r0
     faa:	e03d      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
		switch (conv->specifier) {
     fac:	3863      	subs	r0, #99	; 0x63
     fae:	2815      	cmp	r0, #21
     fb0:	d886      	bhi.n	ec0 <cbvprintf+0x458>
     fb2:	a201      	add	r2, pc, #4	; (adr r2, fb8 <cbvprintf+0x550>)
     fb4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     fb8:	00001039 	.word	0x00001039
     fbc:	0000109d 	.word	0x0000109d
     fc0:	00000ec1 	.word	0x00000ec1
     fc4:	00000ec1 	.word	0x00000ec1
     fc8:	00000ec1 	.word	0x00000ec1
     fcc:	00000ec1 	.word	0x00000ec1
     fd0:	0000109d 	.word	0x0000109d
     fd4:	00000ec1 	.word	0x00000ec1
     fd8:	00000ec1 	.word	0x00000ec1
     fdc:	00000ec1 	.word	0x00000ec1
     fe0:	00000ec1 	.word	0x00000ec1
     fe4:	000010f7 	.word	0x000010f7
     fe8:	000010c5 	.word	0x000010c5
     fec:	000010c9 	.word	0x000010c9
     ff0:	00000ec1 	.word	0x00000ec1
     ff4:	00000ec1 	.word	0x00000ec1
     ff8:	00001011 	.word	0x00001011
     ffc:	00000ec1 	.word	0x00000ec1
    1000:	000010c5 	.word	0x000010c5
    1004:	00000ec1 	.word	0x00000ec1
    1008:	00000ec1 	.word	0x00000ec1
    100c:	000010c5 	.word	0x000010c5
			if (precision >= 0) {
    1010:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1014:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1018:	db0a      	blt.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
				len = strnlen(bps, precision);
    101a:	4641      	mov	r1, r8
    101c:	4650      	mov	r0, sl
    101e:	f004 fdad 	bl	5b7c <strnlen>
			bpe = bps + len;
    1022:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1026:	2600      	movs	r6, #0
		if (bps == NULL) {
    1028:	f1ba 0f00 	cmp.w	sl, #0
    102c:	d10c      	bne.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    102e:	e747      	b.n	ec0 <cbvprintf+0x458>
				len = strlen(bps);
    1030:	4650      	mov	r0, sl
    1032:	f004 fd9c 	bl	5b6e <strlen>
    1036:	e7f4      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    103a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    103e:	2600      	movs	r6, #0
			bps = buf;
    1040:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1044:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1048:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    104c:	b106      	cbz	r6, 1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
			nj_len += 1U;
    104e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1050:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1054:	06d0      	lsls	r0, r2, #27
    1056:	d568      	bpl.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
			nj_len += 2U;
    1058:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    105a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    105c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    105e:	bf48      	it	mi
    1060:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1062:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1064:	bf48      	it	mi
    1066:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1068:	f1b9 0f00 	cmp.w	r9, #0
    106c:	dd76      	ble.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
			if (!conv->flag_dash) {
    106e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1072:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1076:	f3c2 0380 	ubfx	r3, r2, #2, #1
    107a:	9303      	str	r3, [sp, #12]
    107c:	0753      	lsls	r3, r2, #29
    107e:	d46d      	bmi.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
				if (conv->flag_zero) {
    1080:	0650      	lsls	r0, r2, #25
    1082:	d561      	bpl.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
					if (sign != 0) {
    1084:	b146      	cbz	r6, 1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
						OUTC(sign);
    1086:	9b02      	ldr	r3, [sp, #8]
    1088:	4659      	mov	r1, fp
    108a:	4630      	mov	r0, r6
    108c:	4798      	blx	r3
    108e:	2800      	cmp	r0, #0
    1090:	db57      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
						sign = 0;
    1092:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1094:	3501      	adds	r5, #1
						sign = 0;
    1096:	461e      	mov	r6, r3
					pad = '0';
    1098:	2330      	movs	r3, #48	; 0x30
    109a:	e056      	b.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
			if (conv->flag_plus) {
    109c:	071e      	lsls	r6, r3, #28
    109e:	d40f      	bmi.n	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
				sign = ' ';
    10a0:	f013 0610 	ands.w	r6, r3, #16
    10a4:	bf18      	it	ne
    10a6:	2620      	movne	r6, #32
			sint = value->sint;
    10a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10ac:	2b00      	cmp	r3, #0
    10ae:	f6bf af5f 	bge.w	f70 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    10b2:	4252      	negs	r2, r2
    10b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    10bc:	262d      	movs	r6, #45	; 0x2d
    10be:	e757      	b.n	f70 <cbvprintf+0x508>
				sign = '+';
    10c0:	262b      	movs	r6, #43	; 0x2b
    10c2:	e7f1      	b.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
		switch (conv->specifier) {
    10c4:	2600      	movs	r6, #0
    10c6:	e753      	b.n	f70 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    10c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    10ca:	b340      	cbz	r0, 111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10cc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10d0:	9300      	str	r3, [sp, #0]
    10d2:	aa0c      	add	r2, sp, #48	; 0x30
    10d4:	ab04      	add	r3, sp, #16
    10d6:	2100      	movs	r1, #0
    10d8:	f004 fc36 	bl	5948 <encode_uint>
				conv->altform_0c = true;
    10dc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    10e0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    10e4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    10e8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10ec:	4682      	mov	sl, r0
				conv->altform_0c = true;
    10ee:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    10f2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    10f4:	e746      	b.n	f84 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    10f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    10f8:	2907      	cmp	r1, #7
    10fa:	f63f aee1 	bhi.w	ec0 <cbvprintf+0x458>
    10fe:	e8df f001 	tbb	[pc, r1]
    1102:	040c      	.short	0x040c
    1104:	08080c06 	.word	0x08080c06
    1108:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    110a:	701d      	strb	r5, [r3, #0]
		break;
    110c:	e6d8      	b.n	ec0 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    110e:	801d      	strh	r5, [r3, #0]
		break;
    1110:	e6d6      	b.n	ec0 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1112:	17ea      	asrs	r2, r5, #31
    1114:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1118:	e6d2      	b.n	ec0 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    111a:	601d      	str	r5, [r3, #0]
		break;
    111c:	e6d0      	b.n	ec0 <cbvprintf+0x458>
			bps = "(nil)";
    111e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    1122:	4606      	mov	r6, r0
			bpe = bps + 5;
    1124:	f10a 0805 	add.w	r8, sl, #5
    1128:	e78e      	b.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
		} else if (conv->altform_0) {
    112a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    112c:	bf48      	it	mi
    112e:	3301      	addmi	r3, #1
    1130:	e793      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
					OUTC(pad);
    1132:	4618      	mov	r0, r3
    1134:	9303      	str	r3, [sp, #12]
    1136:	4659      	mov	r1, fp
    1138:	9b02      	ldr	r3, [sp, #8]
    113a:	4798      	blx	r3
    113c:	2800      	cmp	r0, #0
    113e:	9b03      	ldr	r3, [sp, #12]
    1140:	da04      	bge.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
#undef OUTS
#undef OUTC
}
    1142:	b011      	add	sp, #68	; 0x44
    1144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1148:	2320      	movs	r3, #32
    114a:	444d      	add	r5, r9
    114c:	464a      	mov	r2, r9
				while (width-- > 0) {
    114e:	2a00      	cmp	r2, #0
    1150:	eba5 0109 	sub.w	r1, r5, r9
    1154:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1158:	dceb      	bgt.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
    115a:	460d      	mov	r5, r1
		if (sign != 0) {
    115c:	b136      	cbz	r6, 116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
			OUTC(sign);
    115e:	9b02      	ldr	r3, [sp, #8]
    1160:	4659      	mov	r1, fp
    1162:	4630      	mov	r0, r6
    1164:	4798      	blx	r3
    1166:	2800      	cmp	r0, #0
    1168:	dbeb      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    116a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    116c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1170:	06d9      	lsls	r1, r3, #27
    1172:	d401      	bmi.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1174:	071a      	lsls	r2, r3, #28
    1176:	d506      	bpl.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
				OUTC('0');
    1178:	9b02      	ldr	r3, [sp, #8]
    117a:	4659      	mov	r1, fp
    117c:	2030      	movs	r0, #48	; 0x30
    117e:	4798      	blx	r3
    1180:	2800      	cmp	r0, #0
    1182:	dbde      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    1184:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1186:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    118a:	06db      	lsls	r3, r3, #27
    118c:	d507      	bpl.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
				OUTC(conv->specifier);
    118e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1192:	9b02      	ldr	r3, [sp, #8]
    1194:	4659      	mov	r1, fp
    1196:	4798      	blx	r3
    1198:	2800      	cmp	r0, #0
    119a:	dbd2      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    119c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    119e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11a0:	442e      	add	r6, r5
    11a2:	1b73      	subs	r3, r6, r5
    11a4:	2b00      	cmp	r3, #0
    11a6:	dc16      	bgt.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
			OUTS(bps, bpe);
    11a8:	9802      	ldr	r0, [sp, #8]
    11aa:	4643      	mov	r3, r8
    11ac:	4652      	mov	r2, sl
    11ae:	4659      	mov	r1, fp
    11b0:	f004 fc10 	bl	59d4 <outs>
    11b4:	2800      	cmp	r0, #0
    11b6:	dbc4      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    11b8:	4405      	add	r5, r0
		while (width > 0) {
    11ba:	44a9      	add	r9, r5
    11bc:	eba9 0305 	sub.w	r3, r9, r5
    11c0:	2b00      	cmp	r3, #0
    11c2:	f77f ae7d 	ble.w	ec0 <cbvprintf+0x458>
			OUTC(' ');
    11c6:	9b02      	ldr	r3, [sp, #8]
    11c8:	4659      	mov	r1, fp
    11ca:	2020      	movs	r0, #32
    11cc:	4798      	blx	r3
    11ce:	2800      	cmp	r0, #0
    11d0:	dbb7      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    11d2:	3501      	adds	r5, #1
			--width;
    11d4:	e7f2      	b.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
				OUTC('0');
    11d6:	9b02      	ldr	r3, [sp, #8]
    11d8:	4659      	mov	r1, fp
    11da:	2030      	movs	r0, #48	; 0x30
    11dc:	4798      	blx	r3
    11de:	2800      	cmp	r0, #0
    11e0:	dbaf      	blt.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    11e2:	3501      	adds	r5, #1
    11e4:	e7dd      	b.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
    11e6:	bf00      	nop
    11e8:	00006a89 	.word	0x00006a89

000011ec <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    11ec:	b508      	push	{r3, lr}
    11ee:	f04f 0220 	mov.w	r2, #32
    11f2:	f3ef 8311 	mrs	r3, BASEPRI
    11f6:	f382 8812 	msr	BASEPRI_MAX, r2
    11fa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    11fe:	f001 fb8b 	bl	2918 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1202:	4803      	ldr	r0, [pc, #12]	; (1210 <sys_reboot+0x24>)
    1204:	f004 fade 	bl	57c4 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1208:	f000 fda0 	bl	1d4c <arch_cpu_idle>
    120c:	e7fc      	b.n	1208 <sys_reboot+0x1c>
    120e:	bf00      	nop
    1210:	00006a8f 	.word	0x00006a8f

00001214 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    1214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1216:	4607      	mov	r7, r0
	struct log_backend const *backend;

	if (!bypass) {
    1218:	460c      	mov	r4, r1
    121a:	b929      	cbnz	r1, 1228 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    121c:	4d08      	ldr	r5, [pc, #32]	; (1240 <msg_process+0x2c>)
    121e:	4e09      	ldr	r6, [pc, #36]	; (1244 <msg_process+0x30>)
    1220:	1b76      	subs	r6, r6, r5
    1222:	1136      	asrs	r6, r6, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1224:	42b4      	cmp	r4, r6
    1226:	db00      	blt.n	122a <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    122a:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    122c:	795b      	ldrb	r3, [r3, #5]
    122e:	b123      	cbz	r3, 123a <msg_process+0x26>
	backend->api->process(backend, msg);
    1230:	682b      	ldr	r3, [r5, #0]
    1232:	4639      	mov	r1, r7
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	4628      	mov	r0, r5
    1238:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    123a:	3401      	adds	r4, #1
    123c:	3510      	adds	r5, #16
    123e:	e7f1      	b.n	1224 <msg_process+0x10>
    1240:	00006744 	.word	0x00006744
    1244:	00006764 	.word	0x00006764

00001248 <log_format_func_t_get>:
}
    1248:	4b01      	ldr	r3, [pc, #4]	; (1250 <log_format_func_t_get+0x8>)
    124a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    124e:	4770      	bx	lr
    1250:	00006798 	.word	0x00006798

00001254 <log_core_init>:
	panic_mode = false;
    1254:	4a05      	ldr	r2, [pc, #20]	; (126c <log_core_init+0x18>)
    1256:	2300      	movs	r3, #0
    1258:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    125a:	4a05      	ldr	r2, [pc, #20]	; (1270 <log_core_init+0x1c>)
    125c:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    125e:	4b05      	ldr	r3, [pc, #20]	; (1274 <log_core_init+0x20>)
    1260:	4a05      	ldr	r2, [pc, #20]	; (1278 <log_core_init+0x24>)
    1262:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1264:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1268:	f000 ba48 	b.w	16fc <log_output_timestamp_freq_set>
    126c:	20000bc9 	.word	0x20000bc9
    1270:	200002d4 	.word	0x200002d4
    1274:	20000004 	.word	0x20000004
    1278:	00005a03 	.word	0x00005a03

0000127c <log_init>:
{
    127c:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    127e:	4b12      	ldr	r3, [pc, #72]	; (12c8 <log_init+0x4c>)
    1280:	f3bf 8f5b 	dmb	ish
    1284:	e853 5f00 	ldrex	r5, [r3]
    1288:	1c6a      	adds	r2, r5, #1
    128a:	e843 2100 	strex	r1, r2, [r3]
    128e:	2900      	cmp	r1, #0
    1290:	d1f8      	bne.n	1284 <log_init+0x8>
    1292:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1296:	b92d      	cbnz	r5, 12a4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    1298:	4c0c      	ldr	r4, [pc, #48]	; (12cc <log_init+0x50>)
    129a:	4e0d      	ldr	r6, [pc, #52]	; (12d0 <log_init+0x54>)
    129c:	1b36      	subs	r6, r6, r4
    129e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    12a0:	42b5      	cmp	r5, r6
    12a2:	db00      	blt.n	12a6 <log_init+0x2a>
}
    12a4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    12a6:	7b23      	ldrb	r3, [r4, #12]
    12a8:	b153      	cbz	r3, 12c0 <log_init+0x44>
			if (backend->api->init != NULL) {
    12aa:	6823      	ldr	r3, [r4, #0]
    12ac:	699b      	ldr	r3, [r3, #24]
    12ae:	b10b      	cbz	r3, 12b4 <log_init+0x38>
				backend->api->init(backend);
    12b0:	4620      	mov	r0, r4
    12b2:	4798      	blx	r3
			log_backend_enable(backend,
    12b4:	6863      	ldr	r3, [r4, #4]
    12b6:	2204      	movs	r2, #4
    12b8:	6819      	ldr	r1, [r3, #0]
    12ba:	4620      	mov	r0, r4
    12bc:	f000 f86a 	bl	1394 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    12c0:	3501      	adds	r5, #1
    12c2:	3410      	adds	r4, #16
    12c4:	e7ec      	b.n	12a0 <log_init+0x24>
    12c6:	bf00      	nop
    12c8:	200002d8 	.word	0x200002d8
    12cc:	00006744 	.word	0x00006744
    12d0:	00006764 	.word	0x00006764

000012d4 <z_impl_log_panic>:
{
    12d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    12d6:	4f0c      	ldr	r7, [pc, #48]	; (1308 <z_impl_log_panic+0x34>)
    12d8:	783d      	ldrb	r5, [r7, #0]
    12da:	b94d      	cbnz	r5, 12f0 <z_impl_log_panic+0x1c>
    12dc:	4c0b      	ldr	r4, [pc, #44]	; (130c <z_impl_log_panic+0x38>)
    12de:	4e0c      	ldr	r6, [pc, #48]	; (1310 <z_impl_log_panic+0x3c>)
	log_init();
    12e0:	f7ff ffcc 	bl	127c <log_init>
    12e4:	1b36      	subs	r6, r6, r4
    12e6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    12e8:	42b5      	cmp	r5, r6
    12ea:	db02      	blt.n	12f2 <z_impl_log_panic+0x1e>
	panic_mode = true;
    12ec:	2301      	movs	r3, #1
    12ee:	703b      	strb	r3, [r7, #0]
}
    12f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    12f2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    12f4:	795b      	ldrb	r3, [r3, #5]
    12f6:	b11b      	cbz	r3, 1300 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    12f8:	6823      	ldr	r3, [r4, #0]
    12fa:	4620      	mov	r0, r4
    12fc:	695b      	ldr	r3, [r3, #20]
    12fe:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1300:	3501      	adds	r5, #1
    1302:	3410      	adds	r4, #16
    1304:	e7f0      	b.n	12e8 <z_impl_log_panic+0x14>
    1306:	bf00      	nop
    1308:	20000bc9 	.word	0x20000bc9
    130c:	00006744 	.word	0x00006744
    1310:	00006764 	.word	0x00006764

00001314 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1314:	4b01      	ldr	r3, [pc, #4]	; (131c <z_log_notify_backend_enabled+0x8>)
    1316:	2201      	movs	r2, #1
    1318:	701a      	strb	r2, [r3, #0]
}
    131a:	4770      	bx	lr
    131c:	20000bc8 	.word	0x20000bc8

00001320 <z_log_dropped>:
    1320:	4b0c      	ldr	r3, [pc, #48]	; (1354 <z_log_dropped+0x34>)
    1322:	f3bf 8f5b 	dmb	ish
    1326:	e853 2f00 	ldrex	r2, [r3]
    132a:	3201      	adds	r2, #1
    132c:	e843 2100 	strex	r1, r2, [r3]
    1330:	2900      	cmp	r1, #0
    1332:	d1f8      	bne.n	1326 <z_log_dropped+0x6>
    1334:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1338:	b158      	cbz	r0, 1352 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    133a:	f3bf 8f5b 	dmb	ish
    133e:	4b06      	ldr	r3, [pc, #24]	; (1358 <z_log_dropped+0x38>)
    1340:	e853 2f00 	ldrex	r2, [r3]
    1344:	3a01      	subs	r2, #1
    1346:	e843 2100 	strex	r1, r2, [r3]
    134a:	2900      	cmp	r1, #0
    134c:	d1f8      	bne.n	1340 <z_log_dropped+0x20>
    134e:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    1352:	4770      	bx	lr
    1354:	200002d4 	.word	0x200002d4
    1358:	200002d0 	.word	0x200002d0

0000135c <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    135c:	4b05      	ldr	r3, [pc, #20]	; (1374 <z_log_msg2_commit+0x18>)
{
    135e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1360:	681b      	ldr	r3, [r3, #0]
{
    1362:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1364:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1366:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    1368:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    136a:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    136c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    1370:	f7ff bf50 	b.w	1214 <msg_process>
    1374:	20000004 	.word	0x20000004

00001378 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1378:	4a04      	ldr	r2, [pc, #16]	; (138c <log_source_name_get+0x14>)
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <log_source_name_get+0x18>)
    137c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    137e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1382:	bf34      	ite	cc
    1384:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1388:	2000      	movcs	r0, #0
}
    138a:	4770      	bx	lr
    138c:	000066fc 	.word	0x000066fc
    1390:	00006744 	.word	0x00006744

00001394 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1394:	4a05      	ldr	r2, [pc, #20]	; (13ac <log_backend_enable+0x18>)
	backend->cb->id = id;
    1396:	6843      	ldr	r3, [r0, #4]
    1398:	1a80      	subs	r0, r0, r2
    139a:	1100      	asrs	r0, r0, #4
    139c:	3001      	adds	r0, #1
	backend->cb->active = true;
    139e:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    13a0:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    13a2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    13a4:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    13a6:	f7ff bfb5 	b.w	1314 <z_log_notify_backend_enabled>
    13aa:	bf00      	nop
    13ac:	00006744 	.word	0x00006744

000013b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    13b0:	b40e      	push	{r1, r2, r3}
    13b2:	b503      	push	{r0, r1, lr}
    13b4:	ab03      	add	r3, sp, #12
    13b6:	4601      	mov	r1, r0
    13b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    13bc:	4804      	ldr	r0, [pc, #16]	; (13d0 <print_formatted+0x20>)
	va_start(args, fmt);
    13be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    13c0:	f7ff fb52 	bl	a68 <cbvprintf>
	va_end(args);

	return length;
}
    13c4:	b002      	add	sp, #8
    13c6:	f85d eb04 	ldr.w	lr, [sp], #4
    13ca:	b003      	add	sp, #12
    13cc:	4770      	bx	lr
    13ce:	bf00      	nop
    13d0:	00005a35 	.word	0x00005a35

000013d4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    13d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13d8:	b087      	sub	sp, #28
    13da:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    13dc:	f001 0301 	and.w	r3, r1, #1
{
    13e0:	9205      	str	r2, [sp, #20]
    13e2:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    13e6:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    13ea:	9304      	str	r3, [sp, #16]
{
    13ec:	4607      	mov	r7, r0
    13ee:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    13f0:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    13f4:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    13f8:	f004 fb1a 	bl	5a30 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    13fc:	4602      	mov	r2, r0
    13fe:	2800      	cmp	r0, #0
    1400:	d044      	beq.n	148c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1402:	493a      	ldr	r1, [pc, #232]	; (14ec <prefix_print+0x118>)
    1404:	4638      	mov	r0, r7
    1406:	f7ff ffd3 	bl	13b0 <print_formatted>
    140a:	4605      	mov	r5, r0
	}

	if (stamp) {
    140c:	f1bb 0f00 	cmp.w	fp, #0
    1410:	d008      	beq.n	1424 <prefix_print+0x50>
	if (!format) {
    1412:	f018 0f44 	tst.w	r8, #68	; 0x44
    1416:	d13b      	bne.n	1490 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1418:	4935      	ldr	r1, [pc, #212]	; (14f0 <prefix_print+0x11c>)
    141a:	4622      	mov	r2, r4
    141c:	4638      	mov	r0, r7
    141e:	f7ff ffc7 	bl	13b0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1422:	4405      	add	r5, r0
	if (color) {
    1424:	9b04      	ldr	r3, [sp, #16]
    1426:	b153      	cbz	r3, 143e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1428:	4b32      	ldr	r3, [pc, #200]	; (14f4 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    142a:	4933      	ldr	r1, [pc, #204]	; (14f8 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    142c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1430:	4b32      	ldr	r3, [pc, #200]	; (14fc <prefix_print+0x128>)
    1432:	4638      	mov	r0, r7
    1434:	2a00      	cmp	r2, #0
    1436:	bf08      	it	eq
    1438:	461a      	moveq	r2, r3
    143a:	f7ff ffb9 	bl	13b0 <print_formatted>
	if (level_on) {
    143e:	b13e      	cbz	r6, 1450 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1440:	4b2f      	ldr	r3, [pc, #188]	; (1500 <prefix_print+0x12c>)
    1442:	4930      	ldr	r1, [pc, #192]	; (1504 <prefix_print+0x130>)
    1444:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1448:	4638      	mov	r0, r7
    144a:	f7ff ffb1 	bl	13b0 <print_formatted>
    144e:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1450:	f1ba 0f00 	cmp.w	sl, #0
    1454:	db16      	blt.n	1484 <prefix_print+0xb0>
		total += print_formatted(output,
    1456:	9b05      	ldr	r3, [sp, #20]
    1458:	2b00      	cmp	r3, #0
    145a:	d045      	beq.n	14e8 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    145c:	2301      	movs	r3, #1
    145e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1462:	4b29      	ldr	r3, [pc, #164]	; (1508 <prefix_print+0x134>)
    1464:	4c29      	ldr	r4, [pc, #164]	; (150c <prefix_print+0x138>)
    1466:	f019 0f10 	tst.w	r9, #16
    146a:	bf18      	it	ne
    146c:	461c      	movne	r4, r3
    146e:	4651      	mov	r1, sl
    1470:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1474:	f7ff ff80 	bl	1378 <log_source_name_get>
    1478:	4621      	mov	r1, r4
    147a:	4602      	mov	r2, r0
    147c:	4638      	mov	r0, r7
    147e:	f7ff ff97 	bl	13b0 <print_formatted>
    1482:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1484:	1970      	adds	r0, r6, r5
    1486:	b007      	add	sp, #28
    1488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    148c:	4605      	mov	r5, r0
    148e:	e7bd      	b.n	140c <prefix_print+0x38>
	} else if (freq != 0U) {
    1490:	4b1f      	ldr	r3, [pc, #124]	; (1510 <prefix_print+0x13c>)
    1492:	6818      	ldr	r0, [r3, #0]
    1494:	2800      	cmp	r0, #0
    1496:	d0c4      	beq.n	1422 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1498:	4b1e      	ldr	r3, [pc, #120]	; (1514 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    149a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    14a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    14a8:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    14ac:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    14b0:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    14b4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    14b8:	fbb3 f2f1 	udiv	r2, r3, r1
    14bc:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    14c0:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    14c4:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    14c8:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    14cc:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    14d0:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    14d4:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    14d6:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    14da:	490f      	ldr	r1, [pc, #60]	; (1518 <prefix_print+0x144>)
    14dc:	e9cd e001 	strd	lr, r0, [sp, #4]
    14e0:	4638      	mov	r0, r7
    14e2:	f7ff ff65 	bl	13b0 <print_formatted>
    14e6:	e79c      	b.n	1422 <prefix_print+0x4e>
		total += print_formatted(output,
    14e8:	4c08      	ldr	r4, [pc, #32]	; (150c <prefix_print+0x138>)
    14ea:	e7c0      	b.n	146e <prefix_print+0x9a>
    14ec:	00006aca 	.word	0x00006aca
    14f0:	00006ace 	.word	0x00006ace
    14f4:	000067a4 	.word	0x000067a4
    14f8:	00006af3 	.word	0x00006af3
    14fc:	00006abc 	.word	0x00006abc
    1500:	000067b8 	.word	0x000067b8
    1504:	00006af6 	.word	0x00006af6
    1508:	00006ac6 	.word	0x00006ac6
    150c:	00006ac1 	.word	0x00006ac1
    1510:	200002dc 	.word	0x200002dc
    1514:	200002e0 	.word	0x200002e0
    1518:	00006ad7 	.word	0x00006ad7

0000151c <hexdump_line_print>:
{
    151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1520:	461d      	mov	r5, r3
    1522:	9b08      	ldr	r3, [sp, #32]
    1524:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1526:	06da      	lsls	r2, r3, #27
{
    1528:	4604      	mov	r4, r0
    152a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    152c:	d405      	bmi.n	153a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    152e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1530:	bf4c      	ite	mi
    1532:	492a      	ldrmi	r1, [pc, #168]	; (15dc <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1534:	492a      	ldrpl	r1, [pc, #168]	; (15e0 <hexdump_line_print+0xc4>)
    1536:	f7ff ff3b 	bl	13b0 <print_formatted>
		print_formatted(output, " ");
    153a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 15e4 <hexdump_line_print+0xc8>
{
    153e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1542:	45a8      	cmp	r8, r5
    1544:	db2a      	blt.n	159c <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    1546:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 15e8 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    154a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 15ec <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    154e:	f8df a094 	ldr.w	sl, [pc, #148]	; 15e4 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1552:	2500      	movs	r5, #0
		if (i < length) {
    1554:	42bd      	cmp	r5, r7
    1556:	d22f      	bcs.n	15b8 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1558:	5d72      	ldrb	r2, [r6, r5]
    155a:	4649      	mov	r1, r9
    155c:	4620      	mov	r0, r4
    155e:	f7ff ff27 	bl	13b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1562:	3501      	adds	r5, #1
    1564:	2d10      	cmp	r5, #16
    1566:	d120      	bne.n	15aa <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    1568:	4921      	ldr	r1, [pc, #132]	; (15f0 <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    156a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 15e4 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    156e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15f4 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1572:	4620      	mov	r0, r4
    1574:	f7ff ff1c 	bl	13b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1578:	2500      	movs	r5, #0
		if (i < length) {
    157a:	42af      	cmp	r7, r5
    157c:	d928      	bls.n	15d0 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    157e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1580:	f1a2 0320 	sub.w	r3, r2, #32
    1584:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1586:	bf28      	it	cs
    1588:	222e      	movcs	r2, #46	; 0x2e
    158a:	4649      	mov	r1, r9
    158c:	4620      	mov	r0, r4
    158e:	f7ff ff0f 	bl	13b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1592:	3501      	adds	r5, #1
    1594:	2d10      	cmp	r5, #16
    1596:	d114      	bne.n	15c2 <hexdump_line_print+0xa6>
}
    1598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    159c:	4649      	mov	r1, r9
    159e:	4620      	mov	r0, r4
    15a0:	f7ff ff06 	bl	13b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    15a4:	f108 0801 	add.w	r8, r8, #1
    15a8:	e7cb      	b.n	1542 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    15aa:	076a      	lsls	r2, r5, #29
    15ac:	d1d2      	bne.n	1554 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    15ae:	4651      	mov	r1, sl
    15b0:	4620      	mov	r0, r4
    15b2:	f7ff fefd 	bl	13b0 <print_formatted>
    15b6:	e7cd      	b.n	1554 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    15b8:	4641      	mov	r1, r8
    15ba:	4620      	mov	r0, r4
    15bc:	f7ff fef8 	bl	13b0 <print_formatted>
    15c0:	e7cf      	b.n	1562 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    15c2:	076b      	lsls	r3, r5, #29
    15c4:	d1d9      	bne.n	157a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    15c6:	4641      	mov	r1, r8
    15c8:	4620      	mov	r0, r4
    15ca:	f7ff fef1 	bl	13b0 <print_formatted>
    15ce:	e7d4      	b.n	157a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    15d0:	4641      	mov	r1, r8
    15d2:	4620      	mov	r0, r4
    15d4:	f7ff feec 	bl	13b0 <print_formatted>
    15d8:	e7db      	b.n	1592 <hexdump_line_print+0x76>
    15da:	bf00      	nop
    15dc:	00006afd 	.word	0x00006afd
    15e0:	00006afc 	.word	0x00006afc
    15e4:	00006b07 	.word	0x00006b07
    15e8:	00006b05 	.word	0x00006b05
    15ec:	00006aff 	.word	0x00006aff
    15f0:	00006b09 	.word	0x00006b09
    15f4:	00006b0b 	.word	0x00006b0b

000015f8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    15f8:	b538      	push	{r3, r4, r5, lr}
    15fa:	460c      	mov	r4, r1
	if (color) {
    15fc:	07e1      	lsls	r1, r4, #31
{
    15fe:	4605      	mov	r5, r0
	if (color) {
    1600:	d503      	bpl.n	160a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1602:	4a08      	ldr	r2, [pc, #32]	; (1624 <postfix_print+0x2c>)
    1604:	4908      	ldr	r1, [pc, #32]	; (1628 <postfix_print+0x30>)
    1606:	f7ff fed3 	bl	13b0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    160a:	06e2      	lsls	r2, r4, #27
    160c:	d408      	bmi.n	1620 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    160e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1610:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1612:	bf4c      	ite	mi
    1614:	4905      	ldrmi	r1, [pc, #20]	; (162c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1616:	4906      	ldrpl	r1, [pc, #24]	; (1630 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    161c:	f7ff bec8 	b.w	13b0 <print_formatted>
}
    1620:	bd38      	pop	{r3, r4, r5, pc}
    1622:	bf00      	nop
    1624:	00006abc 	.word	0x00006abc
    1628:	00006af3 	.word	0x00006af3
    162c:	00006afd 	.word	0x00006afd
    1630:	00006afc 	.word	0x00006afc

00001634 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1638:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    163a:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    163e:	4606      	mov	r6, r0
    1640:	460c      	mov	r4, r1
    1642:	4690      	mov	r8, r2
    1644:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1648:	d04d      	beq.n	16e6 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    164a:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    164c:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    164e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1652:	2b00      	cmp	r3, #0
    1654:	d044      	beq.n	16e0 <log_output_msg2_process+0xac>
    1656:	4925      	ldr	r1, [pc, #148]	; (16ec <log_output_msg2_process+0xb8>)
    1658:	1a5b      	subs	r3, r3, r1
    165a:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    165e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1662:	f8cd 9000 	str.w	r9, [sp]
    1666:	68a3      	ldr	r3, [r4, #8]
    1668:	2200      	movs	r2, #0
    166a:	4641      	mov	r1, r8
    166c:	4630      	mov	r0, r6
    166e:	f7ff feb1 	bl	13d4 <prefix_print>
    1672:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1674:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1676:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    167a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    167e:	b153      	cbz	r3, 1696 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1680:	4f1b      	ldr	r7, [pc, #108]	; (16f0 <log_output_msg2_process+0xbc>)
    1682:	481c      	ldr	r0, [pc, #112]	; (16f4 <log_output_msg2_process+0xc0>)
    1684:	491c      	ldr	r1, [pc, #112]	; (16f8 <log_output_msg2_process+0xc4>)
    1686:	462b      	mov	r3, r5
    1688:	4632      	mov	r2, r6
    168a:	f1b9 0f00 	cmp.w	r9, #0
    168e:	bf08      	it	eq
    1690:	4638      	moveq	r0, r7
    1692:	f004 f84a 	bl	572a <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1696:	8867      	ldrh	r7, [r4, #2]
    1698:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    169c:	b197      	cbz	r7, 16c4 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    169e:	6823      	ldr	r3, [r4, #0]
    16a0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    16a4:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    16a6:	2f10      	cmp	r7, #16
    16a8:	463c      	mov	r4, r7
    16aa:	bf28      	it	cs
    16ac:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    16ae:	4629      	mov	r1, r5
    16b0:	f8cd 8000 	str.w	r8, [sp]
    16b4:	4653      	mov	r3, sl
    16b6:	4622      	mov	r2, r4
    16b8:	4630      	mov	r0, r6
    16ba:	f7ff ff2f 	bl	151c <hexdump_line_print>
	} while (len);
    16be:	1b3f      	subs	r7, r7, r4
		data += length;
    16c0:	4425      	add	r5, r4
	} while (len);
    16c2:	d1f0      	bne.n	16a6 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    16c4:	f1b9 0f00 	cmp.w	r9, #0
    16c8:	d004      	beq.n	16d4 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    16ca:	464a      	mov	r2, r9
    16cc:	4641      	mov	r1, r8
    16ce:	4630      	mov	r0, r6
    16d0:	f7ff ff92 	bl	15f8 <postfix_print>
	}

	log_output_flush(output);
    16d4:	4630      	mov	r0, r6
}
    16d6:	b004      	add	sp, #16
    16d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    16dc:	f004 b9d2 	b.w	5a84 <log_output_flush>
		int16_t source_id = source ?
    16e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16e4:	e7bb      	b.n	165e <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    16e6:	46ca      	mov	sl, r9
    16e8:	e7c4      	b.n	1674 <log_output_msg2_process+0x40>
    16ea:	bf00      	nop
    16ec:	000066fc 	.word	0x000066fc
    16f0:	00005a51 	.word	0x00005a51
    16f4:	00005a35 	.word	0x00005a35
    16f8:	00000a69 	.word	0x00000a69

000016fc <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    16fc:	4a08      	ldr	r2, [pc, #32]	; (1720 <log_output_timestamp_freq_set+0x24>)
{
    16fe:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1700:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1702:	4c08      	ldr	r4, [pc, #32]	; (1724 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1704:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1706:	2100      	movs	r1, #0
    1708:	42a0      	cmp	r0, r4
    170a:	d804      	bhi.n	1716 <log_output_timestamp_freq_set+0x1a>
    170c:	b101      	cbz	r1, 1710 <log_output_timestamp_freq_set+0x14>
    170e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1710:	4b05      	ldr	r3, [pc, #20]	; (1728 <log_output_timestamp_freq_set+0x2c>)
    1712:	6018      	str	r0, [r3, #0]
}
    1714:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1716:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1718:	005b      	lsls	r3, r3, #1
    171a:	2101      	movs	r1, #1
    171c:	e7f4      	b.n	1708 <log_output_timestamp_freq_set+0xc>
    171e:	bf00      	nop
    1720:	200002e0 	.word	0x200002e0
    1724:	000f4240 	.word	0x000f4240
    1728:	200002dc 	.word	0x200002dc

0000172c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    172c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1730:	b085      	sub	sp, #20
    1732:	af02      	add	r7, sp, #8
    1734:	4699      	mov	r9, r3
    1736:	e9d7 3a0e 	ldrd	r3, sl, [r7, #56]	; 0x38
    173a:	e9d7 6b0c 	ldrd	r6, fp, [r7, #48]	; 0x30
    173e:	4605      	mov	r5, r0
    1740:	4688      	mov	r8, r1
    1742:	4614      	mov	r4, r2
	int plen;

	if (fmt) {
    1744:	b393      	cbz	r3, 17ac <z_impl_z_log_msg2_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1746:	2110      	movs	r1, #16
    1748:	f8cd a000 	str.w	sl, [sp]
    174c:	465a      	mov	r2, fp
    174e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1750:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1754:	f7fe fe66 	bl	424 <cbvprintf_package>
    1758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    175a:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    175c:	f004 0207 	and.w	r2, r4, #7
    1760:	f005 0407 	and.w	r4, r5, #7
    1764:	00e4      	lsls	r4, r4, #3
    1766:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    176a:	4a11      	ldr	r2, [pc, #68]	; (17b0 <z_impl_z_log_msg2_runtime_vcreate+0x84>)
    176c:	4d11      	ldr	r5, [pc, #68]	; (17b4 <z_impl_z_log_msg2_runtime_vcreate+0x88>)
    176e:	ea02 42c6 	and.w	r2, r2, r6, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1772:	3617      	adds	r6, #23
    1774:	440e      	add	r6, r1
	struct log_msg2_desc desc =
    1776:	ea05 2541 	and.w	r5, r5, r1, lsl #9
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    177a:	f026 0607 	bic.w	r6, r6, #7
	struct log_msg2_desc desc =
    177e:	432c      	orrs	r4, r5
		msg = alloca(msg_wlen * sizeof(int));
    1780:	ebad 0d06 	sub.w	sp, sp, r6
	struct log_msg2_desc desc =
    1784:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    1786:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1788:	b133      	cbz	r3, 1798 <z_impl_z_log_msg2_runtime_vcreate+0x6c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    178a:	f8cd a000 	str.w	sl, [sp]
    178e:	465a      	mov	r2, fp
    1790:	f105 0010 	add.w	r0, r5, #16
    1794:	f7fe fe46 	bl	424 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1798:	464b      	mov	r3, r9
    179a:	4622      	mov	r2, r4
    179c:	4641      	mov	r1, r8
    179e:	4628      	mov	r0, r5
    17a0:	f004 f97d 	bl	5a9e <z_log_msg2_finalize>
	}
}
    17a4:	370c      	adds	r7, #12
    17a6:	46bd      	mov	sp, r7
    17a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    17ac:	4619      	mov	r1, r3
    17ae:	e7d5      	b.n	175c <z_impl_z_log_msg2_runtime_vcreate+0x30>
    17b0:	7ff80000 	.word	0x7ff80000
    17b4:	0007fe00 	.word	0x0007fe00

000017b8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    17b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    17ba:	4f07      	ldr	r7, [pc, #28]	; (17d8 <char_out+0x20>)
{
    17bc:	460d      	mov	r5, r1
    17be:	4604      	mov	r4, r0
    17c0:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    17c2:	42b4      	cmp	r4, r6
    17c4:	d101      	bne.n	17ca <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    17c6:	4628      	mov	r0, r5
    17c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    17ca:	6838      	ldr	r0, [r7, #0]
    17cc:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    17d0:	6883      	ldr	r3, [r0, #8]
    17d2:	685b      	ldr	r3, [r3, #4]
    17d4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    17d6:	e7f4      	b.n	17c2 <char_out+0xa>
    17d8:	200002fc 	.word	0x200002fc

000017dc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    17dc:	4b01      	ldr	r3, [pc, #4]	; (17e4 <format_set+0x8>)
	return 0;
}
    17de:	2000      	movs	r0, #0
	log_format_current = log_type;
    17e0:	6019      	str	r1, [r3, #0]
}
    17e2:	4770      	bx	lr
    17e4:	200002ec 	.word	0x200002ec

000017e8 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    17e8:	4b01      	ldr	r3, [pc, #4]	; (17f0 <log_backend_uart_init+0x8>)
    17ea:	4a02      	ldr	r2, [pc, #8]	; (17f4 <log_backend_uart_init+0xc>)
    17ec:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    17ee:	4770      	bx	lr
    17f0:	200002fc 	.word	0x200002fc
    17f4:	00006564 	.word	0x00006564

000017f8 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    17f8:	4b02      	ldr	r3, [pc, #8]	; (1804 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    17fa:	4803      	ldr	r0, [pc, #12]	; (1808 <panic+0x10>)
    17fc:	2201      	movs	r2, #1
    17fe:	701a      	strb	r2, [r3, #0]
    1800:	f004 b940 	b.w	5a84 <log_output_flush>
    1804:	20000bca 	.word	0x20000bca
    1808:	000067ec 	.word	0x000067ec

0000180c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <process+0x1c>)
{
    180e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1810:	6818      	ldr	r0, [r3, #0]
{
    1812:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1814:	f7ff fd18 	bl	1248 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1818:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    181a:	4603      	mov	r3, r0
}
    181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1820:	4802      	ldr	r0, [pc, #8]	; (182c <process+0x20>)
    1822:	220f      	movs	r2, #15
    1824:	4718      	bx	r3
    1826:	bf00      	nop
    1828:	200002ec 	.word	0x200002ec
    182c:	000067ec 	.word	0x000067ec

00001830 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1830:	4b01      	ldr	r3, [pc, #4]	; (1838 <log_backend_rtt_init+0x8>)
    1832:	2201      	movs	r2, #1
    1834:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1836:	4770      	bx	lr
    1838:	20000bcd 	.word	0x20000bcd

0000183c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    183c:	4b01      	ldr	r3, [pc, #4]	; (1844 <format_set+0x8>)
	return 0;
}
    183e:	2000      	movs	r0, #0
	log_format_current = log_type;
    1840:	6019      	str	r1, [r3, #0]
}
    1842:	4770      	bx	lr
    1844:	20000308 	.word	0x20000308

00001848 <panic>:
	panic_mode = true;
    1848:	4b02      	ldr	r3, [pc, #8]	; (1854 <panic+0xc>)
    184a:	4803      	ldr	r0, [pc, #12]	; (1858 <panic+0x10>)
    184c:	2201      	movs	r2, #1
    184e:	701a      	strb	r2, [r3, #0]
    1850:	f004 b918 	b.w	5a84 <log_output_flush>
    1854:	20000bce 	.word	0x20000bce
    1858:	0000681c 	.word	0x0000681c

0000185c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    185c:	4b06      	ldr	r3, [pc, #24]	; (1878 <process+0x1c>)
{
    185e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1860:	6818      	ldr	r0, [r3, #0]
{
    1862:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1864:	f7ff fcf0 	bl	1248 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1868:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    186a:	4603      	mov	r3, r0
}
    186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1870:	4802      	ldr	r0, [pc, #8]	; (187c <process+0x20>)
    1872:	220f      	movs	r2, #15
    1874:	4718      	bx	r3
    1876:	bf00      	nop
    1878:	20000308 	.word	0x20000308
    187c:	0000681c 	.word	0x0000681c

00001880 <data_out_block_mode>:
{
    1880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1882:	4d19      	ldr	r5, [pc, #100]	; (18e8 <data_out_block_mode+0x68>)
    1884:	4607      	mov	r7, r0
    1886:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1888:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    188a:	4632      	mov	r2, r6
    188c:	4639      	mov	r1, r7
    188e:	2000      	movs	r0, #0
    1890:	f002 fd2a 	bl	42e8 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    1894:	b1c8      	cbz	r0, 18ca <data_out_block_mode+0x4a>
	host_present = true;
    1896:	2301      	movs	r3, #1
    1898:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    189a:	4b14      	ldr	r3, [pc, #80]	; (18ec <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	b92b      	cbnz	r3, 18ac <data_out_block_mode+0x2c>
}
    18a0:	4630      	mov	r0, r6
    18a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    18a4:	b95c      	cbnz	r4, 18be <data_out_block_mode+0x3e>
		host_present = false;
    18a6:	702c      	strb	r4, [r5, #0]
    18a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    18ac:	2000      	movs	r0, #0
    18ae:	f002 fd67 	bl	4380 <SEGGER_RTT_HasDataUp>
    18b2:	2800      	cmp	r0, #0
    18b4:	d0f4      	beq.n	18a0 <data_out_block_mode+0x20>
    18b6:	782b      	ldrb	r3, [r5, #0]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d1f3      	bne.n	18a4 <data_out_block_mode+0x24>
    18bc:	e7f0      	b.n	18a0 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    18be:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    18c0:	f241 3088 	movw	r0, #5000	; 0x1388
    18c4:	f004 fde0 	bl	6488 <z_impl_k_busy_wait>
}
    18c8:	e7f0      	b.n	18ac <data_out_block_mode+0x2c>
		} else if (host_present) {
    18ca:	782b      	ldrb	r3, [r5, #0]
    18cc:	b113      	cbz	r3, 18d4 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    18ce:	3c01      	subs	r4, #1
    18d0:	d104      	bne.n	18dc <data_out_block_mode+0x5c>
		host_present = false;
    18d2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    18d4:	782b      	ldrb	r3, [r5, #0]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d1d7      	bne.n	188a <data_out_block_mode+0xa>
    18da:	e7e1      	b.n	18a0 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    18dc:	f241 3088 	movw	r0, #5000	; 0x1388
    18e0:	f004 fdd2 	bl	6488 <z_impl_k_busy_wait>
}
    18e4:	e7f6      	b.n	18d4 <data_out_block_mode+0x54>
    18e6:	bf00      	nop
    18e8:	20000bcd 	.word	0x20000bcd
    18ec:	20000bce 	.word	0x20000bce

000018f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    18f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18f4:	4605      	mov	r5, r0
    18f6:	f04f 0320 	mov.w	r3, #32
    18fa:	f3ef 8611 	mrs	r6, BASEPRI
    18fe:	f383 8812 	msr	BASEPRI_MAX, r3
    1902:	f3bf 8f6f 	isb	sy
	return list->head;
    1906:	4b0e      	ldr	r3, [pc, #56]	; (1940 <pm_state_notify+0x50>)
    1908:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    190a:	b19c      	cbz	r4, 1934 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    190c:	4f0d      	ldr	r7, [pc, #52]	; (1944 <pm_state_notify+0x54>)
    190e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1948 <pm_state_notify+0x58>
    1912:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1916:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    191a:	2d00      	cmp	r5, #0
    191c:	bf08      	it	eq
    191e:	4613      	moveq	r3, r2
		if (callback) {
    1920:	b12b      	cbz	r3, 192e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1922:	f898 2014 	ldrb.w	r2, [r8, #20]
    1926:	fb09 f202 	mul.w	r2, r9, r2
    192a:	5cb8      	ldrb	r0, [r7, r2]
    192c:	4798      	blx	r3
	return node->next;
    192e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1930:	2c00      	cmp	r4, #0
    1932:	d1f0      	bne.n	1916 <pm_state_notify+0x26>
	__asm__ volatile(
    1934:	f386 8811 	msr	BASEPRI, r6
    1938:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    193c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1940:	20000318 	.word	0x20000318
    1944:	20000320 	.word	0x20000320
    1948:	200009b8 	.word	0x200009b8

0000194c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    194c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    194e:	2301      	movs	r3, #1
    1950:	f000 001f 	and.w	r0, r0, #31
    1954:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1958:	4b07      	ldr	r3, [pc, #28]	; (1978 <atomic_clear_bit.constprop.0+0x2c>)
    195a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    195e:	43c0      	mvns	r0, r0
    1960:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1964:	e853 2f00 	ldrex	r2, [r3]
    1968:	4002      	ands	r2, r0
    196a:	e843 2100 	strex	r1, r2, [r3]
    196e:	2900      	cmp	r1, #0
    1970:	d1f8      	bne.n	1964 <atomic_clear_bit.constprop.0+0x18>
    1972:	f3bf 8f5b 	dmb	ish
}
    1976:	4770      	bx	lr
    1978:	2000032c 	.word	0x2000032c

0000197c <pm_system_resume>:

void pm_system_resume(void)
{
    197c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    197e:	4b1a      	ldr	r3, [pc, #104]	; (19e8 <pm_system_resume+0x6c>)
    1980:	7d1c      	ldrb	r4, [r3, #20]
    1982:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1986:	f004 031f 	and.w	r3, r4, #31
    198a:	2201      	movs	r2, #1
    198c:	409a      	lsls	r2, r3
    198e:	4b17      	ldr	r3, [pc, #92]	; (19ec <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1990:	0961      	lsrs	r1, r4, #5
    1992:	43d0      	mvns	r0, r2
    1994:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1998:	e853 1f00 	ldrex	r1, [r3]
    199c:	ea01 0500 	and.w	r5, r1, r0
    19a0:	e843 5c00 	strex	ip, r5, [r3]
    19a4:	f1bc 0f00 	cmp.w	ip, #0
    19a8:	d1f6      	bne.n	1998 <pm_system_resume+0x1c>
    19aa:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    19ae:	4211      	tst	r1, r2
    19b0:	d013      	beq.n	19da <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    19b2:	4b0f      	ldr	r3, [pc, #60]	; (19f0 <pm_system_resume+0x74>)
    19b4:	4d0f      	ldr	r5, [pc, #60]	; (19f4 <pm_system_resume+0x78>)
    19b6:	b18b      	cbz	r3, 19dc <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    19b8:	230c      	movs	r3, #12
    19ba:	4363      	muls	r3, r4
    19bc:	18ea      	adds	r2, r5, r3
    19be:	5ce8      	ldrb	r0, [r5, r3]
    19c0:	7851      	ldrb	r1, [r2, #1]
    19c2:	f004 f907 	bl	5bd4 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    19c6:	2000      	movs	r0, #0
    19c8:	f7ff ff92 	bl	18f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    19cc:	230c      	movs	r3, #12
    19ce:	435c      	muls	r4, r3
    19d0:	192a      	adds	r2, r5, r4
    19d2:	2300      	movs	r3, #0
    19d4:	512b      	str	r3, [r5, r4]
    19d6:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    19da:	bd38      	pop	{r3, r4, r5, pc}
    19dc:	f383 8811 	msr	BASEPRI, r3
    19e0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    19e4:	e7ef      	b.n	19c6 <pm_system_resume+0x4a>
    19e6:	bf00      	nop
    19e8:	200009b8 	.word	0x200009b8
    19ec:	20000330 	.word	0x20000330
    19f0:	00005bd5 	.word	0x00005bd5
    19f4:	20000320 	.word	0x20000320

000019f8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    19f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    19fc:	4b32      	ldr	r3, [pc, #200]	; (1ac8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    19fe:	4a33      	ldr	r2, [pc, #204]	; (1acc <pm_system_suspend+0xd4>)
    1a00:	7d1c      	ldrb	r4, [r3, #20]
    1a02:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a06:	0963      	lsrs	r3, r4, #5
    1a08:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a10:	4e2f      	ldr	r6, [pc, #188]	; (1ad0 <pm_system_suspend+0xd8>)
    1a12:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1a16:	f004 081f 	and.w	r8, r4, #31
    1a1a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1a1e:	f013 0f01 	tst.w	r3, #1
{
    1a22:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1a24:	d10a      	bne.n	1a3c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1a26:	4601      	mov	r1, r0
    1a28:	4620      	mov	r0, r4
    1a2a:	f000 f869 	bl	1b00 <pm_policy_next_state>
		if (info != NULL) {
    1a2e:	b128      	cbz	r0, 1a3c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1a30:	c807      	ldmia	r0, {r0, r1, r2}
    1a32:	230c      	movs	r3, #12
    1a34:	fb03 6304 	mla	r3, r3, r4, r6
    1a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1a3c:	230c      	movs	r3, #12
    1a3e:	4363      	muls	r3, r4
    1a40:	18f2      	adds	r2, r6, r3
    1a42:	5cf5      	ldrb	r5, [r6, r3]
    1a44:	b92d      	cbnz	r5, 1a52 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1a46:	4620      	mov	r0, r4
    1a48:	f7ff ff80 	bl	194c <atomic_clear_bit.constprop.0>
		ret = false;
    1a4c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1a52:	1c7b      	adds	r3, r7, #1
    1a54:	d00f      	beq.n	1a76 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1a56:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1a5a:	481e      	ldr	r0, [pc, #120]	; (1ad4 <pm_system_suspend+0xdc>)
    1a5c:	4a1e      	ldr	r2, [pc, #120]	; (1ad8 <pm_system_suspend+0xe0>)
    1a5e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1a62:	2100      	movs	r1, #0
    1a64:	2300      	movs	r3, #0
    1a66:	fbec 0105 	umlal	r0, r1, ip, r5
    1a6a:	f7fe fb49 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1a6e:	2101      	movs	r1, #1
    1a70:	1a38      	subs	r0, r7, r0
    1a72:	f004 fceb 	bl	644c <z_set_timeout_expiry>
	k_sched_lock();
    1a76:	f003 f82f 	bl	4ad8 <k_sched_lock>
	pm_state_notify(true);
    1a7a:	2001      	movs	r0, #1
    1a7c:	f7ff ff38 	bl	18f0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1a80:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a84:	2301      	movs	r3, #1
    1a86:	fa03 f808 	lsl.w	r8, r3, r8
    1a8a:	4b14      	ldr	r3, [pc, #80]	; (1adc <pm_system_suspend+0xe4>)
    1a8c:	4499      	add	r9, r3
    1a8e:	e859 3f00 	ldrex	r3, [r9]
    1a92:	ea43 0308 	orr.w	r3, r3, r8
    1a96:	e849 3200 	strex	r2, r3, [r9]
    1a9a:	2a00      	cmp	r2, #0
    1a9c:	d1f7      	bne.n	1a8e <pm_system_suspend+0x96>
    1a9e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1aa2:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <pm_system_suspend+0xe8>)
    1aa4:	b133      	cbz	r3, 1ab4 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1aa6:	230c      	movs	r3, #12
    1aa8:	4363      	muls	r3, r4
    1aaa:	18f2      	adds	r2, r6, r3
    1aac:	5cf0      	ldrb	r0, [r6, r3]
    1aae:	7851      	ldrb	r1, [r2, #1]
    1ab0:	f004 f884 	bl	5bbc <pm_state_set>
	pm_system_resume();
    1ab4:	f7ff ff62 	bl	197c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1ab8:	4620      	mov	r0, r4
    1aba:	f7ff ff47 	bl	194c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1abe:	f003 f9db 	bl	4e78 <k_sched_unlock>
	bool ret = true;
    1ac2:	2001      	movs	r0, #1
    1ac4:	e7c3      	b.n	1a4e <pm_system_suspend+0x56>
    1ac6:	bf00      	nop
    1ac8:	200009b8 	.word	0x200009b8
    1acc:	2000032c 	.word	0x2000032c
    1ad0:	20000320 	.word	0x20000320
    1ad4:	000f423f 	.word	0x000f423f
    1ad8:	000f4240 	.word	0x000f4240
    1adc:	20000330 	.word	0x20000330
    1ae0:	00005bbd 	.word	0x00005bbd

00001ae4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ae4:	4b05      	ldr	r3, [pc, #20]	; (1afc <pm_policy_state_lock_is_active+0x18>)
    1ae6:	f3bf 8f5b 	dmb	ish
    1aea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1aee:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1af2:	3800      	subs	r0, #0
    1af4:	bf18      	it	ne
    1af6:	2001      	movne	r0, #1
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop
    1afc:	20000334 	.word	0x20000334

00001b00 <pm_policy_next_state>:
{
    1b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b04:	b085      	sub	sp, #20
    1b06:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1b08:	a903      	add	r1, sp, #12
    1b0a:	f000 f847 	bl	1b9c <pm_state_cpu_get_all>
    1b0e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1b90 <pm_policy_next_state+0x90>
    1b12:	f8df a080 	ldr.w	sl, [pc, #128]	; 1b94 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1b16:	1e44      	subs	r4, r0, #1
    1b18:	b224      	sxth	r4, r4
    1b1a:	f04f 0b00 	mov.w	fp, #0
    1b1e:	1c63      	adds	r3, r4, #1
    1b20:	d104      	bne.n	1b2c <pm_policy_next_state+0x2c>
	return NULL;
    1b22:	2600      	movs	r6, #0
}
    1b24:	4630      	mov	r0, r6
    1b26:	b005      	add	sp, #20
    1b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1b2c:	9a03      	ldr	r2, [sp, #12]
    1b2e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1b32:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1b36:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1b3a:	f7ff ffd3 	bl	1ae4 <pm_policy_state_lock_is_active>
    1b3e:	4605      	mov	r5, r0
    1b40:	bb10      	cbnz	r0, 1b88 <pm_policy_next_state+0x88>
    1b42:	6870      	ldr	r0, [r6, #4]
    1b44:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1b48:	46c4      	mov	ip, r8
    1b4a:	4629      	mov	r1, r5
    1b4c:	fbe0 c109 	umlal	ip, r1, r0, r9
    1b50:	4652      	mov	r2, sl
    1b52:	465b      	mov	r3, fp
    1b54:	4660      	mov	r0, ip
    1b56:	f7fe fad3 	bl	100 <__aeabi_uldivmod>
    1b5a:	9001      	str	r0, [sp, #4]
    1b5c:	68b0      	ldr	r0, [r6, #8]
    1b5e:	46c4      	mov	ip, r8
    1b60:	4629      	mov	r1, r5
    1b62:	fbe0 c109 	umlal	ip, r1, r0, r9
    1b66:	465b      	mov	r3, fp
    1b68:	4652      	mov	r2, sl
    1b6a:	4660      	mov	r0, ip
    1b6c:	f7fe fac8 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1b70:	4b09      	ldr	r3, [pc, #36]	; (1b98 <pm_policy_next_state+0x98>)
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	1c59      	adds	r1, r3, #1
    1b76:	d001      	beq.n	1b7c <pm_policy_next_state+0x7c>
    1b78:	4283      	cmp	r3, r0
    1b7a:	d905      	bls.n	1b88 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1b7c:	1c7a      	adds	r2, r7, #1
    1b7e:	d0d1      	beq.n	1b24 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    1b80:	9b01      	ldr	r3, [sp, #4]
    1b82:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1b84:	42b8      	cmp	r0, r7
    1b86:	d9cd      	bls.n	1b24 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1b88:	3c01      	subs	r4, #1
    1b8a:	b224      	sxth	r4, r4
    1b8c:	e7c7      	b.n	1b1e <pm_policy_next_state+0x1e>
    1b8e:	bf00      	nop
    1b90:	000f423f 	.word	0x000f423f
    1b94:	000f4240 	.word	0x000f4240
    1b98:	20000008 	.word	0x20000008

00001b9c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1b9c:	b908      	cbnz	r0, 1ba2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1b9e:	4b02      	ldr	r3, [pc, #8]	; (1ba8 <pm_state_cpu_get_all+0xc>)
    1ba0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1ba2:	2000      	movs	r0, #0
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	0000682c 	.word	0x0000682c

00001bac <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1bac:	4801      	ldr	r0, [pc, #4]	; (1bb4 <nrf_cc3xx_platform_abort_init+0x8>)
    1bae:	f003 bc2b 	b.w	5408 <nrf_cc3xx_platform_set_abort>
    1bb2:	bf00      	nop
    1bb4:	0000682c 	.word	0x0000682c

00001bb8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1bb8:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1bba:	4604      	mov	r4, r0
    1bbc:	b918      	cbnz	r0, 1bc6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1bbe:	4b0d      	ldr	r3, [pc, #52]	; (1bf4 <mutex_free_platform+0x3c>)
    1bc0:	480d      	ldr	r0, [pc, #52]	; (1bf8 <mutex_free_platform+0x40>)
    1bc2:	685b      	ldr	r3, [r3, #4]
    1bc4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1bc6:	6861      	ldr	r1, [r4, #4]
    1bc8:	2908      	cmp	r1, #8
    1bca:	d00d      	beq.n	1be8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1bcc:	f031 0304 	bics.w	r3, r1, #4
    1bd0:	d00a      	beq.n	1be8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1bd2:	f011 0102 	ands.w	r1, r1, #2
    1bd6:	d008      	beq.n	1bea <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1bd8:	4808      	ldr	r0, [pc, #32]	; (1bfc <mutex_free_platform+0x44>)
    1bda:	4621      	mov	r1, r4
    1bdc:	f004 fb27 	bl	622e <k_mem_slab_free>
        mutex->mutex = NULL;
    1be0:	2300      	movs	r3, #0
    1be2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1be4:	2300      	movs	r3, #0
    1be6:	6063      	str	r3, [r4, #4]
}
    1be8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1bea:	6820      	ldr	r0, [r4, #0]
    1bec:	2214      	movs	r2, #20
    1bee:	f003 ffd9 	bl	5ba4 <memset>
    1bf2:	e7f7      	b.n	1be4 <mutex_free_platform+0x2c>
    1bf4:	200000e4 	.word	0x200000e4
    1bf8:	00006b5b 	.word	0x00006b5b
    1bfc:	20000350 	.word	0x20000350

00001c00 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1c00:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1c02:	b308      	cbz	r0, 1c48 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1c04:	6843      	ldr	r3, [r0, #4]
    1c06:	2b04      	cmp	r3, #4
    1c08:	d110      	bne.n	1c2c <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1c0a:	2201      	movs	r2, #1
    1c0c:	6803      	ldr	r3, [r0, #0]
    1c0e:	f3bf 8f5b 	dmb	ish
    1c12:	e853 1f00 	ldrex	r1, [r3]
    1c16:	2900      	cmp	r1, #0
    1c18:	d103      	bne.n	1c22 <mutex_lock_platform+0x22>
    1c1a:	e843 2000 	strex	r0, r2, [r3]
    1c1e:	2800      	cmp	r0, #0
    1c20:	d1f7      	bne.n	1c12 <mutex_lock_platform+0x12>
    1c22:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1c26:	d10b      	bne.n	1c40 <mutex_lock_platform+0x40>
    1c28:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1c2a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1c2c:	b153      	cbz	r3, 1c44 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1c2e:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1c38:	f002 fdf4 	bl	4824 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1c3c:	2800      	cmp	r0, #0
    1c3e:	d0f3      	beq.n	1c28 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1c40:	4803      	ldr	r0, [pc, #12]	; (1c50 <mutex_lock_platform+0x50>)
    1c42:	e7f2      	b.n	1c2a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1c44:	4803      	ldr	r0, [pc, #12]	; (1c54 <mutex_lock_platform+0x54>)
    1c46:	e7f0      	b.n	1c2a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1c48:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1c4c:	e7ed      	b.n	1c2a <mutex_lock_platform+0x2a>
    1c4e:	bf00      	nop
    1c50:	ffff8fe9 	.word	0xffff8fe9
    1c54:	ffff8fea 	.word	0xffff8fea

00001c58 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1c58:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1c5a:	b1d0      	cbz	r0, 1c92 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1c5c:	6843      	ldr	r3, [r0, #4]
    1c5e:	2b04      	cmp	r3, #4
    1c60:	d111      	bne.n	1c86 <mutex_unlock_platform+0x2e>
    1c62:	2200      	movs	r2, #0
    1c64:	6803      	ldr	r3, [r0, #0]
    1c66:	f3bf 8f5b 	dmb	ish
    1c6a:	e853 1f00 	ldrex	r1, [r3]
    1c6e:	2901      	cmp	r1, #1
    1c70:	d103      	bne.n	1c7a <mutex_unlock_platform+0x22>
    1c72:	e843 2000 	strex	r0, r2, [r3]
    1c76:	2800      	cmp	r0, #0
    1c78:	d1f7      	bne.n	1c6a <mutex_unlock_platform+0x12>
    1c7a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1c7e:	4807      	ldr	r0, [pc, #28]	; (1c9c <mutex_unlock_platform+0x44>)
    1c80:	bf08      	it	eq
    1c82:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1c84:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1c86:	b13b      	cbz	r3, 1c98 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1c88:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1c8a:	f002 fe43 	bl	4914 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1c8e:	2000      	movs	r0, #0
    1c90:	e7f8      	b.n	1c84 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1c92:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1c96:	e7f5      	b.n	1c84 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1c98:	4801      	ldr	r0, [pc, #4]	; (1ca0 <mutex_unlock_platform+0x48>)
    1c9a:	e7f3      	b.n	1c84 <mutex_unlock_platform+0x2c>
    1c9c:	ffff8fe9 	.word	0xffff8fe9
    1ca0:	ffff8fea 	.word	0xffff8fea

00001ca4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ca4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1ca6:	4604      	mov	r4, r0
    1ca8:	b918      	cbnz	r0, 1cb2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1caa:	4b16      	ldr	r3, [pc, #88]	; (1d04 <mutex_init_platform+0x60>)
    1cac:	4816      	ldr	r0, [pc, #88]	; (1d08 <mutex_init_platform+0x64>)
    1cae:	685b      	ldr	r3, [r3, #4]
    1cb0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1cb2:	6863      	ldr	r3, [r4, #4]
    1cb4:	2b04      	cmp	r3, #4
    1cb6:	d023      	beq.n	1d00 <mutex_init_platform+0x5c>
    1cb8:	2b08      	cmp	r3, #8
    1cba:	d021      	beq.n	1d00 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1cbc:	b9cb      	cbnz	r3, 1cf2 <mutex_init_platform+0x4e>
    1cbe:	6823      	ldr	r3, [r4, #0]
    1cc0:	b9bb      	cbnz	r3, 1cf2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1cc2:	4812      	ldr	r0, [pc, #72]	; (1d0c <mutex_init_platform+0x68>)
    1cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ccc:	4621      	mov	r1, r4
    1cce:	f002 fcd1 	bl	4674 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1cd2:	b908      	cbnz	r0, 1cd8 <mutex_init_platform+0x34>
    1cd4:	6823      	ldr	r3, [r4, #0]
    1cd6:	b91b      	cbnz	r3, 1ce0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1cd8:	4b0a      	ldr	r3, [pc, #40]	; (1d04 <mutex_init_platform+0x60>)
    1cda:	480d      	ldr	r0, [pc, #52]	; (1d10 <mutex_init_platform+0x6c>)
    1cdc:	685b      	ldr	r3, [r3, #4]
    1cde:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ce0:	6820      	ldr	r0, [r4, #0]
    1ce2:	2214      	movs	r2, #20
    1ce4:	2100      	movs	r1, #0
    1ce6:	f003 ff5d 	bl	5ba4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1cea:	6863      	ldr	r3, [r4, #4]
    1cec:	f043 0302 	orr.w	r3, r3, #2
    1cf0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1cf2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1cf4:	f004 fadb 	bl	62ae <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1cf8:	6863      	ldr	r3, [r4, #4]
    1cfa:	f043 0301 	orr.w	r3, r3, #1
    1cfe:	6063      	str	r3, [r4, #4]
}
    1d00:	bd10      	pop	{r4, pc}
    1d02:	bf00      	nop
    1d04:	200000e4 	.word	0x200000e4
    1d08:	00006b5b 	.word	0x00006b5b
    1d0c:	20000350 	.word	0x20000350
    1d10:	00006b81 	.word	0x00006b81

00001d14 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1d14:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1d16:	4906      	ldr	r1, [pc, #24]	; (1d30 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1d18:	4806      	ldr	r0, [pc, #24]	; (1d34 <nrf_cc3xx_platform_mutex_init+0x20>)
    1d1a:	2340      	movs	r3, #64	; 0x40
    1d1c:	2214      	movs	r2, #20
    1d1e:	f004 fa6b 	bl	61f8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1d26:	4904      	ldr	r1, [pc, #16]	; (1d38 <nrf_cc3xx_platform_mutex_init+0x24>)
    1d28:	4804      	ldr	r0, [pc, #16]	; (1d3c <nrf_cc3xx_platform_mutex_init+0x28>)
    1d2a:	f003 bbcd 	b.w	54c8 <nrf_cc3xx_platform_set_mutexes>
    1d2e:	bf00      	nop
    1d30:	2000036c 	.word	0x2000036c
    1d34:	20000350 	.word	0x20000350
    1d38:	00006844 	.word	0x00006844
    1d3c:	00006834 	.word	0x00006834

00001d40 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1d40:	4901      	ldr	r1, [pc, #4]	; (1d48 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1d42:	2210      	movs	r2, #16
	str	r2, [r1]
    1d44:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1d46:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1d48:	e000ed10 	.word	0xe000ed10

00001d4c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1d4c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1d4e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1d50:	f380 8811 	msr	BASEPRI, r0
	isb
    1d54:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1d58:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1d5c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1d5e:	b662      	cpsie	i
	isb
    1d60:	f3bf 8f6f 	isb	sy

	bx	lr
    1d64:	4770      	bx	lr
    1d66:	bf00      	nop

00001d68 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1d68:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1d6a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1d6c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1d70:	bf20      	wfe

	msr	BASEPRI, r0
    1d72:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1d76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1d78:	4770      	bx	lr
    1d7a:	bf00      	nop

00001d7c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	4606      	mov	r6, r0
    1d80:	b086      	sub	sp, #24

	if (esf != NULL) {
    1d82:	460d      	mov	r5, r1
    1d84:	2900      	cmp	r1, #0
    1d86:	d038      	beq.n	1dfa <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1d88:	688b      	ldr	r3, [r1, #8]
    1d8a:	9305      	str	r3, [sp, #20]
    1d8c:	684b      	ldr	r3, [r1, #4]
    1d8e:	9304      	str	r3, [sp, #16]
    1d90:	680b      	ldr	r3, [r1, #0]
    1d92:	9303      	str	r3, [sp, #12]
    1d94:	2400      	movs	r4, #0
    1d96:	4b1c      	ldr	r3, [pc, #112]	; (1e08 <z_arm_fatal_error+0x8c>)
    1d98:	491c      	ldr	r1, [pc, #112]	; (1e0c <z_arm_fatal_error+0x90>)
    1d9a:	9302      	str	r3, [sp, #8]
    1d9c:	2201      	movs	r2, #1
    1d9e:	4623      	mov	r3, r4
    1da0:	4620      	mov	r0, r4
    1da2:	e9cd 4400 	strd	r4, r4, [sp]
    1da6:	f003 fe99 	bl	5adc <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1daa:	696b      	ldr	r3, [r5, #20]
    1dac:	9305      	str	r3, [sp, #20]
    1dae:	692b      	ldr	r3, [r5, #16]
    1db0:	9304      	str	r3, [sp, #16]
    1db2:	68eb      	ldr	r3, [r5, #12]
    1db4:	9303      	str	r3, [sp, #12]
    1db6:	4b16      	ldr	r3, [pc, #88]	; (1e10 <z_arm_fatal_error+0x94>)
    1db8:	4914      	ldr	r1, [pc, #80]	; (1e0c <z_arm_fatal_error+0x90>)
    1dba:	9400      	str	r4, [sp, #0]
    1dbc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    1dc0:	2201      	movs	r2, #1
    1dc2:	4623      	mov	r3, r4
    1dc4:	4620      	mov	r0, r4
    1dc6:	f003 fe89 	bl	5adc <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1dca:	69eb      	ldr	r3, [r5, #28]
    1dcc:	9303      	str	r3, [sp, #12]
    1dce:	4b11      	ldr	r3, [pc, #68]	; (1e14 <z_arm_fatal_error+0x98>)
    1dd0:	490e      	ldr	r1, [pc, #56]	; (1e0c <z_arm_fatal_error+0x90>)
    1dd2:	9400      	str	r4, [sp, #0]
    1dd4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    1dd8:	2201      	movs	r2, #1
    1dda:	4623      	mov	r3, r4
    1ddc:	4620      	mov	r0, r4
    1dde:	f003 fe7d 	bl	5adc <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1de2:	69ab      	ldr	r3, [r5, #24]
    1de4:	9303      	str	r3, [sp, #12]
    1de6:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <z_arm_fatal_error+0x9c>)
    1de8:	4908      	ldr	r1, [pc, #32]	; (1e0c <z_arm_fatal_error+0x90>)
    1dea:	9400      	str	r4, [sp, #0]
    1dec:	e9cd 4301 	strd	r4, r3, [sp, #4]
    1df0:	2201      	movs	r2, #1
    1df2:	4623      	mov	r3, r4
    1df4:	4620      	mov	r0, r4
    1df6:	f003 fe71 	bl	5adc <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1dfa:	4629      	mov	r1, r5
    1dfc:	4630      	mov	r0, r6
}
    1dfe:	b006      	add	sp, #24
    1e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    1e04:	f002 bae6 	b.w	43d4 <z_fatal_error>
    1e08:	00006bae 	.word	0x00006bae
    1e0c:	00006724 	.word	0x00006724
    1e10:	00006bdd 	.word	0x00006bdd
    1e14:	00006c0c 	.word	0x00006c0c
    1e18:	00006c1b 	.word	0x00006c1b

00001e1c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1e1c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1e1e:	2b00      	cmp	r3, #0
    1e20:	db08      	blt.n	1e34 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e22:	2201      	movs	r2, #1
    1e24:	f000 001f 	and.w	r0, r0, #31
    1e28:	fa02 f000 	lsl.w	r0, r2, r0
    1e2c:	095b      	lsrs	r3, r3, #5
    1e2e:	4a02      	ldr	r2, [pc, #8]	; (1e38 <arch_irq_enable+0x1c>)
    1e30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop
    1e38:	e000e100 	.word	0xe000e100

00001e3c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <arch_irq_is_enabled+0x18>)
    1e3e:	0942      	lsrs	r2, r0, #5
    1e40:	f000 001f 	and.w	r0, r0, #31
    1e44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e48:	2301      	movs	r3, #1
    1e4a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1e4e:	4010      	ands	r0, r2
    1e50:	4770      	bx	lr
    1e52:	bf00      	nop
    1e54:	e000e100 	.word	0xe000e100

00001e58 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1e58:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1e5a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e5c:	bfa8      	it	ge
    1e5e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1e62:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e66:	bfb8      	it	lt
    1e68:	4b06      	ldrlt	r3, [pc, #24]	; (1e84 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e6a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1e6e:	bfac      	ite	ge
    1e70:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e74:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e78:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e7a:	bfb4      	ite	lt
    1e7c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e7e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1e82:	4770      	bx	lr
    1e84:	e000ed14 	.word	0xe000ed14

00001e88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1e88:	bf30      	wfi
    b z_SysNmiOnReset
    1e8a:	f7ff bffd 	b.w	1e88 <z_SysNmiOnReset>
    1e8e:	bf00      	nop

00001e90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e90:	4a0b      	ldr	r2, [pc, #44]	; (1ec0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1e92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e94:	4b0b      	ldr	r3, [pc, #44]	; (1ec4 <z_arm_prep_c+0x34>)
    1e96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ea0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1ea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1ea8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1eb0:	f002 fb0e 	bl	44d0 <z_bss_zero>
	z_data_copy();
    1eb4:	f003 f902 	bl	50bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1eb8:	f000 fb8c 	bl	25d4 <z_arm_interrupt_init>
	z_cstart();
    1ebc:	f002 fb4c 	bl	4558 <z_cstart>
    1ec0:	00000000 	.word	0x00000000
    1ec4:	e000ed00 	.word	0xe000ed00

00001ec8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1ec8:	4a09      	ldr	r2, [pc, #36]	; (1ef0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1eca:	490a      	ldr	r1, [pc, #40]	; (1ef4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1ecc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1ece:	6809      	ldr	r1, [r1, #0]
    1ed0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ed2:	4909      	ldr	r1, [pc, #36]	; (1ef8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1ed4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ed6:	684b      	ldr	r3, [r1, #4]
    1ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1edc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1ede:	2300      	movs	r3, #0
    1ee0:	f383 8811 	msr	BASEPRI, r3
    1ee4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1ee8:	6893      	ldr	r3, [r2, #8]
}
    1eea:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1eec:	4770      	bx	lr
    1eee:	bf00      	nop
    1ef0:	200009b8 	.word	0x200009b8
    1ef4:	0000698c 	.word	0x0000698c
    1ef8:	e000ed00 	.word	0xe000ed00

00001efc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1efc:	4912      	ldr	r1, [pc, #72]	; (1f48 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1efe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1f00:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1f04:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1f06:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1f0a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f0e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1f10:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1f14:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1f18:	4f0c      	ldr	r7, [pc, #48]	; (1f4c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1f1a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1f1e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1f20:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1f22:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1f24:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1f26:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1f28:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1f2a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1f2e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1f30:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1f32:	f000 fbeb 	bl	270c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1f36:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1f3a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1f3e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1f42:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1f46:	4770      	bx	lr
    ldr r1, =_kernel
    1f48:	200009b8 	.word	0x200009b8
    ldr v4, =_SCS_ICSR
    1f4c:	e000ed04 	.word	0xe000ed04

00001f50 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1f50:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1f54:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1f56:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1f5a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1f5e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1f60:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1f64:	2902      	cmp	r1, #2
    beq _oops
    1f66:	d0ff      	beq.n	1f68 <_oops>

00001f68 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1f68:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1f6a:	f003 fdc7 	bl	5afc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1f6e:	bd01      	pop	{r0, pc}

00001f70 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1f70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1f74:	9b00      	ldr	r3, [sp, #0]
    1f76:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1f7a:	490a      	ldr	r1, [pc, #40]	; (1fa4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1f7c:	9b01      	ldr	r3, [sp, #4]
    1f7e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1f82:	9b02      	ldr	r3, [sp, #8]
    1f84:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1f88:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1f90:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1f94:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1f98:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1f9a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1f9c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1f9e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	00005935 	.word	0x00005935

00001fa8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1fa8:	4a09      	ldr	r2, [pc, #36]	; (1fd0 <z_check_thread_stack_fail+0x28>)
{
    1faa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1fac:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1fae:	b170      	cbz	r0, 1fce <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1fb0:	f113 0f16 	cmn.w	r3, #22
    1fb4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1fb6:	d005      	beq.n	1fc4 <z_check_thread_stack_fail+0x1c>
    1fb8:	f1a0 0220 	sub.w	r2, r0, #32
    1fbc:	429a      	cmp	r2, r3
    1fbe:	d805      	bhi.n	1fcc <z_check_thread_stack_fail+0x24>
    1fc0:	4283      	cmp	r3, r0
    1fc2:	d203      	bcs.n	1fcc <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1fc4:	4281      	cmp	r1, r0
    1fc6:	bf28      	it	cs
    1fc8:	2000      	movcs	r0, #0
    1fca:	4770      	bx	lr
    1fcc:	2000      	movs	r0, #0
}
    1fce:	4770      	bx	lr
    1fd0:	200009b8 	.word	0x200009b8

00001fd4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1fd4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1fd6:	4b09      	ldr	r3, [pc, #36]	; (1ffc <arch_switch_to_main_thread+0x28>)
    1fd8:	6098      	str	r0, [r3, #8]
{
    1fda:	460d      	mov	r5, r1
    1fdc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1fde:	f000 fb95 	bl	270c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1fe2:	4620      	mov	r0, r4
    1fe4:	f385 8809 	msr	PSP, r5
    1fe8:	2100      	movs	r1, #0
    1fea:	b663      	cpsie	if
    1fec:	f381 8811 	msr	BASEPRI, r1
    1ff0:	f3bf 8f6f 	isb	sy
    1ff4:	2200      	movs	r2, #0
    1ff6:	2300      	movs	r3, #0
    1ff8:	f003 fc9c 	bl	5934 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1ffc:	200009b8 	.word	0x200009b8

00002000 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2000:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2002:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2004:	4a0b      	ldr	r2, [pc, #44]	; (2034 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2006:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2008:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    200a:	bf1e      	ittt	ne
	movne	r1, #0
    200c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    200e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2010:	f004 f93e 	blne	6290 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2014:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2016:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    201a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    201e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2022:	4905      	ldr	r1, [pc, #20]	; (2038 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2024:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2026:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2028:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    202a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    202e:	4903      	ldr	r1, [pc, #12]	; (203c <_isr_wrapper+0x3c>)
	bx r1
    2030:	4708      	bx	r1
    2032:	0000      	.short	0x0000
	ldr r2, =_kernel
    2034:	200009b8 	.word	0x200009b8
	ldr r1, =_sw_isr_table
    2038:	0000657c 	.word	0x0000657c
	ldr r1, =z_arm_int_exit
    203c:	00002041 	.word	0x00002041

00002040 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2040:	4b04      	ldr	r3, [pc, #16]	; (2054 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2042:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2044:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2046:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2048:	d003      	beq.n	2052 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    204a:	4903      	ldr	r1, [pc, #12]	; (2058 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    204c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2050:	600a      	str	r2, [r1, #0]

00002052 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2052:	4770      	bx	lr
	ldr r3, =_kernel
    2054:	200009b8 	.word	0x200009b8
	ldr r1, =_SCS_ICSR
    2058:	e000ed04 	.word	0xe000ed04

0000205c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    205c:	b5f0      	push	{r4, r5, r6, r7, lr}
    205e:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2060:	2400      	movs	r4, #0
    2062:	4b3b      	ldr	r3, [pc, #236]	; (2150 <bus_fault.constprop.0+0xf4>)
    2064:	9302      	str	r3, [sp, #8]
    2066:	e9cd 4400 	strd	r4, r4, [sp]
    206a:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    206c:	4607      	mov	r7, r0
    206e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2070:	2201      	movs	r2, #1
    2072:	4938      	ldr	r1, [pc, #224]	; (2154 <bus_fault.constprop.0+0xf8>)
    2074:	4620      	mov	r0, r4
    2076:	f003 fd50 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    207a:	4b37      	ldr	r3, [pc, #220]	; (2158 <bus_fault.constprop.0+0xfc>)
    207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    207e:	04db      	lsls	r3, r3, #19
    2080:	d509      	bpl.n	2096 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    2082:	4b36      	ldr	r3, [pc, #216]	; (215c <bus_fault.constprop.0+0x100>)
    2084:	4933      	ldr	r1, [pc, #204]	; (2154 <bus_fault.constprop.0+0xf8>)
    2086:	9400      	str	r4, [sp, #0]
    2088:	e9cd 4301 	strd	r4, r3, [sp, #4]
    208c:	2201      	movs	r2, #1
    208e:	4623      	mov	r3, r4
    2090:	4620      	mov	r0, r4
    2092:	f003 fd42 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2096:	4b30      	ldr	r3, [pc, #192]	; (2158 <bus_fault.constprop.0+0xfc>)
    2098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    209a:	051d      	lsls	r5, r3, #20
    209c:	d509      	bpl.n	20b2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    209e:	4b30      	ldr	r3, [pc, #192]	; (2160 <bus_fault.constprop.0+0x104>)
    20a0:	9302      	str	r3, [sp, #8]
    20a2:	2300      	movs	r3, #0
    20a4:	e9cd 3300 	strd	r3, r3, [sp]
    20a8:	492a      	ldr	r1, [pc, #168]	; (2154 <bus_fault.constprop.0+0xf8>)
    20aa:	2201      	movs	r2, #1
    20ac:	4618      	mov	r0, r3
    20ae:	f003 fd34 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    20b2:	4d29      	ldr	r5, [pc, #164]	; (2158 <bus_fault.constprop.0+0xfc>)
    20b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    20b6:	059c      	lsls	r4, r3, #22
    20b8:	d51e      	bpl.n	20f8 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    20ba:	2400      	movs	r4, #0
    20bc:	4b29      	ldr	r3, [pc, #164]	; (2164 <bus_fault.constprop.0+0x108>)
    20be:	9302      	str	r3, [sp, #8]
    20c0:	2201      	movs	r2, #1
    20c2:	4623      	mov	r3, r4
    20c4:	4620      	mov	r0, r4
    20c6:	e9cd 4400 	strd	r4, r4, [sp]
    20ca:	4922      	ldr	r1, [pc, #136]	; (2154 <bus_fault.constprop.0+0xf8>)
    20cc:	f003 fd25 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    20d0:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    20d2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    20d4:	0410      	lsls	r0, r2, #16
    20d6:	d50f      	bpl.n	20f8 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    20d8:	9303      	str	r3, [sp, #12]
    20da:	4b23      	ldr	r3, [pc, #140]	; (2168 <bus_fault.constprop.0+0x10c>)
    20dc:	491d      	ldr	r1, [pc, #116]	; (2154 <bus_fault.constprop.0+0xf8>)
    20de:	9400      	str	r4, [sp, #0]
    20e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    20e4:	2201      	movs	r2, #1
    20e6:	4623      	mov	r3, r4
    20e8:	4620      	mov	r0, r4
    20ea:	f003 fd16 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    20ee:	b11f      	cbz	r7, 20f8 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    20f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    20f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    20f6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    20f8:	4b17      	ldr	r3, [pc, #92]	; (2158 <bus_fault.constprop.0+0xfc>)
    20fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20fc:	0559      	lsls	r1, r3, #21
    20fe:	d509      	bpl.n	2114 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2100:	4b1a      	ldr	r3, [pc, #104]	; (216c <bus_fault.constprop.0+0x110>)
    2102:	9302      	str	r3, [sp, #8]
    2104:	2300      	movs	r3, #0
    2106:	e9cd 3300 	strd	r3, r3, [sp]
    210a:	4912      	ldr	r1, [pc, #72]	; (2154 <bus_fault.constprop.0+0xf8>)
    210c:	2201      	movs	r2, #1
    210e:	4618      	mov	r0, r3
    2110:	f003 fd03 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2114:	4a10      	ldr	r2, [pc, #64]	; (2158 <bus_fault.constprop.0+0xfc>)
    2116:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2118:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    211c:	d012      	beq.n	2144 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    211e:	4b14      	ldr	r3, [pc, #80]	; (2170 <bus_fault.constprop.0+0x114>)
    2120:	9302      	str	r3, [sp, #8]
    2122:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2124:	e9cd 3300 	strd	r3, r3, [sp]
    2128:	490a      	ldr	r1, [pc, #40]	; (2154 <bus_fault.constprop.0+0xf8>)
    212a:	2201      	movs	r2, #1
    212c:	4618      	mov	r0, r3
    212e:	f003 fcf4 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2132:	4a09      	ldr	r2, [pc, #36]	; (2158 <bus_fault.constprop.0+0xfc>)
    2134:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2136:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2138:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    213c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    213e:	7030      	strb	r0, [r6, #0]

	return reason;
}
    2140:	b005      	add	sp, #20
    2142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2144:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2146:	0492      	lsls	r2, r2, #18
    2148:	d5f3      	bpl.n	2132 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    214a:	4a0a      	ldr	r2, [pc, #40]	; (2174 <bus_fault.constprop.0+0x118>)
    214c:	9202      	str	r2, [sp, #8]
    214e:	e7e9      	b.n	2124 <bus_fault.constprop.0+0xc8>
    2150:	00006c49 	.word	0x00006c49
    2154:	00006724 	.word	0x00006724
    2158:	e000ed00 	.word	0xe000ed00
    215c:	00006c5f 	.word	0x00006c5f
    2160:	00006c70 	.word	0x00006c70
    2164:	00006c83 	.word	0x00006c83
    2168:	00006c9c 	.word	0x00006c9c
    216c:	00006cb1 	.word	0x00006cb1
    2170:	00006ccc 	.word	0x00006ccc
    2174:	00006ce4 	.word	0x00006ce4

00002178 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    217a:	2400      	movs	r4, #0
    217c:	4b33      	ldr	r3, [pc, #204]	; (224c <usage_fault.constprop.0+0xd4>)
    217e:	9302      	str	r3, [sp, #8]
    2180:	e9cd 4400 	strd	r4, r4, [sp]
    2184:	4623      	mov	r3, r4
    2186:	4932      	ldr	r1, [pc, #200]	; (2250 <usage_fault.constprop.0+0xd8>)
    2188:	2201      	movs	r2, #1
    218a:	4620      	mov	r0, r4
    218c:	f003 fcc5 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2190:	4b30      	ldr	r3, [pc, #192]	; (2254 <usage_fault.constprop.0+0xdc>)
    2192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2194:	019b      	lsls	r3, r3, #6
    2196:	d509      	bpl.n	21ac <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    2198:	4b2f      	ldr	r3, [pc, #188]	; (2258 <usage_fault.constprop.0+0xe0>)
    219a:	492d      	ldr	r1, [pc, #180]	; (2250 <usage_fault.constprop.0+0xd8>)
    219c:	9400      	str	r4, [sp, #0]
    219e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    21a2:	2201      	movs	r2, #1
    21a4:	4623      	mov	r3, r4
    21a6:	4620      	mov	r0, r4
    21a8:	f003 fcb7 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    21ac:	4b29      	ldr	r3, [pc, #164]	; (2254 <usage_fault.constprop.0+0xdc>)
    21ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21b0:	01dc      	lsls	r4, r3, #7
    21b2:	d509      	bpl.n	21c8 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    21b4:	4b29      	ldr	r3, [pc, #164]	; (225c <usage_fault.constprop.0+0xe4>)
    21b6:	9302      	str	r3, [sp, #8]
    21b8:	2300      	movs	r3, #0
    21ba:	e9cd 3300 	strd	r3, r3, [sp]
    21be:	4924      	ldr	r1, [pc, #144]	; (2250 <usage_fault.constprop.0+0xd8>)
    21c0:	2201      	movs	r2, #1
    21c2:	4618      	mov	r0, r3
    21c4:	f003 fca9 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21c8:	4b22      	ldr	r3, [pc, #136]	; (2254 <usage_fault.constprop.0+0xdc>)
    21ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21cc:	0318      	lsls	r0, r3, #12
    21ce:	d509      	bpl.n	21e4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    21d0:	4b23      	ldr	r3, [pc, #140]	; (2260 <usage_fault.constprop.0+0xe8>)
    21d2:	9302      	str	r3, [sp, #8]
    21d4:	2300      	movs	r3, #0
    21d6:	e9cd 3300 	strd	r3, r3, [sp]
    21da:	491d      	ldr	r1, [pc, #116]	; (2250 <usage_fault.constprop.0+0xd8>)
    21dc:	2201      	movs	r2, #1
    21de:	4618      	mov	r0, r3
    21e0:	f003 fc9b 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21e4:	4b1b      	ldr	r3, [pc, #108]	; (2254 <usage_fault.constprop.0+0xdc>)
    21e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21e8:	0359      	lsls	r1, r3, #13
    21ea:	d509      	bpl.n	2200 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    21ec:	4b1d      	ldr	r3, [pc, #116]	; (2264 <usage_fault.constprop.0+0xec>)
    21ee:	9302      	str	r3, [sp, #8]
    21f0:	2300      	movs	r3, #0
    21f2:	e9cd 3300 	strd	r3, r3, [sp]
    21f6:	4916      	ldr	r1, [pc, #88]	; (2250 <usage_fault.constprop.0+0xd8>)
    21f8:	2201      	movs	r2, #1
    21fa:	4618      	mov	r0, r3
    21fc:	f003 fc8d 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2200:	4b14      	ldr	r3, [pc, #80]	; (2254 <usage_fault.constprop.0+0xdc>)
    2202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2204:	039a      	lsls	r2, r3, #14
    2206:	d509      	bpl.n	221c <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2208:	4b17      	ldr	r3, [pc, #92]	; (2268 <usage_fault.constprop.0+0xf0>)
    220a:	9302      	str	r3, [sp, #8]
    220c:	2300      	movs	r3, #0
    220e:	e9cd 3300 	strd	r3, r3, [sp]
    2212:	490f      	ldr	r1, [pc, #60]	; (2250 <usage_fault.constprop.0+0xd8>)
    2214:	2201      	movs	r2, #1
    2216:	4618      	mov	r0, r3
    2218:	f003 fc7f 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    221c:	4b0d      	ldr	r3, [pc, #52]	; (2254 <usage_fault.constprop.0+0xdc>)
    221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2220:	03db      	lsls	r3, r3, #15
    2222:	d509      	bpl.n	2238 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2224:	4b11      	ldr	r3, [pc, #68]	; (226c <usage_fault.constprop.0+0xf4>)
    2226:	9302      	str	r3, [sp, #8]
    2228:	2300      	movs	r3, #0
    222a:	e9cd 3300 	strd	r3, r3, [sp]
    222e:	4908      	ldr	r1, [pc, #32]	; (2250 <usage_fault.constprop.0+0xd8>)
    2230:	2201      	movs	r2, #1
    2232:	4618      	mov	r0, r3
    2234:	f003 fc71 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2238:	4a06      	ldr	r2, [pc, #24]	; (2254 <usage_fault.constprop.0+0xdc>)
    223a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    223c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2240:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2244:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2246:	6293      	str	r3, [r2, #40]	; 0x28
}
    2248:	b004      	add	sp, #16
    224a:	bd10      	pop	{r4, pc}
    224c:	00006d13 	.word	0x00006d13
    2250:	00006724 	.word	0x00006724
    2254:	e000ed00 	.word	0xe000ed00
    2258:	00006d2b 	.word	0x00006d2b
    225c:	00006d3e 	.word	0x00006d3e
    2260:	00006d58 	.word	0x00006d58
    2264:	00006d76 	.word	0x00006d76
    2268:	00006d9b 	.word	0x00006d9b
    226c:	00006db5 	.word	0x00006db5

00002270 <mem_manage_fault>:
{
    2270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2274:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    2276:	2400      	movs	r4, #0
    2278:	4b49      	ldr	r3, [pc, #292]	; (23a0 <mem_manage_fault+0x130>)
    227a:	9302      	str	r3, [sp, #8]
    227c:	e9cd 4400 	strd	r4, r4, [sp]
    2280:	4623      	mov	r3, r4
{
    2282:	4680      	mov	r8, r0
    2284:	4689      	mov	r9, r1
    2286:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2288:	4946      	ldr	r1, [pc, #280]	; (23a4 <mem_manage_fault+0x134>)
    228a:	2201      	movs	r2, #1
    228c:	4620      	mov	r0, r4
    228e:	f003 fc44 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2292:	4b45      	ldr	r3, [pc, #276]	; (23a8 <mem_manage_fault+0x138>)
    2294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2296:	06dd      	lsls	r5, r3, #27
    2298:	d509      	bpl.n	22ae <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    229a:	4b44      	ldr	r3, [pc, #272]	; (23ac <mem_manage_fault+0x13c>)
    229c:	4941      	ldr	r1, [pc, #260]	; (23a4 <mem_manage_fault+0x134>)
    229e:	9400      	str	r4, [sp, #0]
    22a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    22a4:	2201      	movs	r2, #1
    22a6:	4623      	mov	r3, r4
    22a8:	4620      	mov	r0, r4
    22aa:	f003 fc36 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    22ae:	4b3e      	ldr	r3, [pc, #248]	; (23a8 <mem_manage_fault+0x138>)
    22b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22b2:	0718      	lsls	r0, r3, #28
    22b4:	d509      	bpl.n	22ca <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    22b6:	4b3e      	ldr	r3, [pc, #248]	; (23b0 <mem_manage_fault+0x140>)
    22b8:	9302      	str	r3, [sp, #8]
    22ba:	2300      	movs	r3, #0
    22bc:	e9cd 3300 	strd	r3, r3, [sp]
    22c0:	4938      	ldr	r1, [pc, #224]	; (23a4 <mem_manage_fault+0x134>)
    22c2:	2201      	movs	r2, #1
    22c4:	4618      	mov	r0, r3
    22c6:	f003 fc28 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    22ca:	4d37      	ldr	r5, [pc, #220]	; (23a8 <mem_manage_fault+0x138>)
    22cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    22ce:	0799      	lsls	r1, r3, #30
    22d0:	d436      	bmi.n	2340 <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
    22d2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    22d6:	4b34      	ldr	r3, [pc, #208]	; (23a8 <mem_manage_fault+0x138>)
    22d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22da:	07db      	lsls	r3, r3, #31
    22dc:	d509      	bpl.n	22f2 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    22de:	4b35      	ldr	r3, [pc, #212]	; (23b4 <mem_manage_fault+0x144>)
    22e0:	9302      	str	r3, [sp, #8]
    22e2:	2300      	movs	r3, #0
    22e4:	e9cd 3300 	strd	r3, r3, [sp]
    22e8:	492e      	ldr	r1, [pc, #184]	; (23a4 <mem_manage_fault+0x134>)
    22ea:	2201      	movs	r2, #1
    22ec:	4618      	mov	r0, r3
    22ee:	f003 fc14 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    22f2:	4b2d      	ldr	r3, [pc, #180]	; (23a8 <mem_manage_fault+0x138>)
    22f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22f6:	069d      	lsls	r5, r3, #26
    22f8:	d509      	bpl.n	230e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    22fa:	4b2f      	ldr	r3, [pc, #188]	; (23b8 <mem_manage_fault+0x148>)
    22fc:	9302      	str	r3, [sp, #8]
    22fe:	2300      	movs	r3, #0
    2300:	e9cd 3300 	strd	r3, r3, [sp]
    2304:	4927      	ldr	r1, [pc, #156]	; (23a4 <mem_manage_fault+0x134>)
    2306:	2201      	movs	r2, #1
    2308:	4618      	mov	r0, r3
    230a:	f003 fc06 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    230e:	4b26      	ldr	r3, [pc, #152]	; (23a8 <mem_manage_fault+0x138>)
    2310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2312:	06d4      	lsls	r4, r2, #27
    2314:	d436      	bmi.n	2384 <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2318:	0790      	lsls	r0, r2, #30
    231a:	d433      	bmi.n	2384 <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    231c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    231e:	4b22      	ldr	r3, [pc, #136]	; (23a8 <mem_manage_fault+0x138>)
    2320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2322:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2324:	bf42      	ittt	mi
    2326:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2328:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    232c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    232e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2330:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2334:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2336:	2300      	movs	r3, #0
    2338:	7033      	strb	r3, [r6, #0]
}
    233a:	b005      	add	sp, #20
    233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2340:	2400      	movs	r4, #0
    2342:	4b1e      	ldr	r3, [pc, #120]	; (23bc <mem_manage_fault+0x14c>)
    2344:	9302      	str	r3, [sp, #8]
    2346:	2201      	movs	r2, #1
    2348:	4623      	mov	r3, r4
    234a:	e9cd 4400 	strd	r4, r4, [sp]
    234e:	4915      	ldr	r1, [pc, #84]	; (23a4 <mem_manage_fault+0x134>)
    2350:	4620      	mov	r0, r4
    2352:	f003 fbe2 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2356:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2358:	6aab      	ldr	r3, [r5, #40]	; 0x28
    235a:	061a      	lsls	r2, r3, #24
    235c:	d5b9      	bpl.n	22d2 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    235e:	4b18      	ldr	r3, [pc, #96]	; (23c0 <mem_manage_fault+0x150>)
    2360:	4910      	ldr	r1, [pc, #64]	; (23a4 <mem_manage_fault+0x134>)
    2362:	9703      	str	r7, [sp, #12]
    2364:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2368:	9400      	str	r4, [sp, #0]
    236a:	4623      	mov	r3, r4
    236c:	2201      	movs	r2, #1
    236e:	4620      	mov	r0, r4
    2370:	f003 fbd3 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2374:	f1b9 0f00 	cmp.w	r9, #0
    2378:	d0ad      	beq.n	22d6 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    237a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    237c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2380:	62ab      	str	r3, [r5, #40]	; 0x28
    2382:	e7a8      	b.n	22d6 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2384:	685b      	ldr	r3, [r3, #4]
    2386:	0519      	lsls	r1, r3, #20
    2388:	d5c8      	bpl.n	231c <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    238a:	4641      	mov	r1, r8
    238c:	4638      	mov	r0, r7
    238e:	f7ff fe0b 	bl	1fa8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2392:	2800      	cmp	r0, #0
    2394:	d0c2      	beq.n	231c <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2396:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    239a:	2002      	movs	r0, #2
    239c:	e7bf      	b.n	231e <mem_manage_fault+0xae>
    239e:	bf00      	nop
    23a0:	00006de0 	.word	0x00006de0
    23a4:	00006724 	.word	0x00006724
    23a8:	e000ed00 	.word	0xe000ed00
    23ac:	00006df6 	.word	0x00006df6
    23b0:	00006c70 	.word	0x00006c70
    23b4:	00006e57 	.word	0x00006e57
    23b8:	00006ce4 	.word	0x00006ce4
    23bc:	00006e29 	.word	0x00006e29
    23c0:	00006e41 	.word	0x00006e41

000023c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    23c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23c8:	4b6d      	ldr	r3, [pc, #436]	; (2580 <z_arm_fault+0x1bc>)
    23ca:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    23ce:	b091      	sub	sp, #68	; 0x44
    23d0:	4688      	mov	r8, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23d2:	f3c9 0608 	ubfx	r6, r9, #0, #9
    23d6:	2700      	movs	r7, #0
    23d8:	f387 8811 	msr	BASEPRI, r7
    23dc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    23e0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    23e4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    23e8:	d10d      	bne.n	2406 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    23ea:	f002 030c 	and.w	r3, r2, #12
    23ee:	2b08      	cmp	r3, #8
    23f0:	d10b      	bne.n	240a <z_arm_fault+0x46>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    23f2:	4b64      	ldr	r3, [pc, #400]	; (2584 <z_arm_fault+0x1c0>)
    23f4:	4964      	ldr	r1, [pc, #400]	; (2588 <z_arm_fault+0x1c4>)
    23f6:	9700      	str	r7, [sp, #0]
    23f8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    23fc:	2201      	movs	r2, #1
    23fe:	463b      	mov	r3, r7
    2400:	4638      	mov	r0, r7
    2402:	f003 fb8a 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
		return NULL;
    2406:	46b8      	mov	r8, r7
    2408:	e003      	b.n	2412 <z_arm_fault+0x4e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    240a:	0712      	lsls	r2, r2, #28
    240c:	d401      	bmi.n	2412 <z_arm_fault+0x4e>
			ptr_esf = (z_arch_esf_t *)msp;
    240e:	4680      	mov	r8, r0
			*nested_exc = true;
    2410:	2701      	movs	r7, #1
	*recoverable = false;
    2412:	2500      	movs	r5, #0
	switch (fault) {
    2414:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    2416:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    241a:	2b09      	cmp	r3, #9
    241c:	f200 8096 	bhi.w	254c <z_arm_fault+0x188>
    2420:	e8df f003 	tbb	[pc, r3]
    2424:	878e8a05 	.word	0x878e8a05
    2428:	94949494 	.word	0x94949494
    242c:	9294      	.short	0x9294
	PR_FAULT_INFO("***** HARD FAULT *****");
    242e:	4b57      	ldr	r3, [pc, #348]	; (258c <z_arm_fault+0x1c8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2430:	4e53      	ldr	r6, [pc, #332]	; (2580 <z_arm_fault+0x1bc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2432:	4955      	ldr	r1, [pc, #340]	; (2588 <z_arm_fault+0x1c4>)
    2434:	9500      	str	r5, [sp, #0]
    2436:	e9cd 5301 	strd	r5, r3, [sp, #4]
    243a:	2300      	movs	r3, #0
    243c:	2201      	movs	r2, #1
    243e:	4618      	mov	r0, r3
    2440:	f003 fb6b 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2444:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    2446:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    244a:	f014 0402 	ands.w	r4, r4, #2
    244e:	d00b      	beq.n	2468 <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    2450:	4b4f      	ldr	r3, [pc, #316]	; (2590 <z_arm_fault+0x1cc>)
	PR_FAULT_INFO(
    2452:	494d      	ldr	r1, [pc, #308]	; (2588 <z_arm_fault+0x1c4>)
    2454:	9500      	str	r5, [sp, #0]
    2456:	e9cd 5301 	strd	r5, r3, [sp, #4]
    245a:	2300      	movs	r3, #0
    245c:	2201      	movs	r2, #1
    245e:	4618      	mov	r0, r3
    2460:	f003 fb5b 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2464:	2400      	movs	r4, #0
}
    2466:	e00c      	b.n	2482 <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2468:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    246a:	2b00      	cmp	r3, #0
    246c:	da24      	bge.n	24b8 <z_arm_fault+0xf4>
		PR_EXC("  Debug event");
    246e:	4b49      	ldr	r3, [pc, #292]	; (2594 <z_arm_fault+0x1d0>)
    2470:	4945      	ldr	r1, [pc, #276]	; (2588 <z_arm_fault+0x1c4>)
    2472:	9400      	str	r4, [sp, #0]
    2474:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2478:	2201      	movs	r2, #1
    247a:	4623      	mov	r3, r4
    247c:	4620      	mov	r0, r4
    247e:	f003 fb4c 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2482:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2486:	b9a3      	cbnz	r3, 24b2 <z_arm_fault+0xee>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2488:	2220      	movs	r2, #32
    248a:	4641      	mov	r1, r8
    248c:	eb0d 0002 	add.w	r0, sp, r2
    2490:	f003 fb7d 	bl	5b8e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2496:	2f00      	cmp	r7, #0
    2498:	d06d      	beq.n	2576 <z_arm_fault+0x1b2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    249a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    249e:	b922      	cbnz	r2, 24aa <z_arm_fault+0xe6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    24a0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    24a4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    24a8:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    24aa:	a908      	add	r1, sp, #32
    24ac:	4620      	mov	r0, r4
    24ae:	f7ff fc65 	bl	1d7c <z_arm_fatal_error>
}
    24b2:	b011      	add	sp, #68	; 0x44
    24b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    24b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    24ba:	005b      	lsls	r3, r3, #1
    24bc:	d5e1      	bpl.n	2482 <z_arm_fault+0xbe>
		PR_EXC("  Fault escalation (see below)");
    24be:	4b36      	ldr	r3, [pc, #216]	; (2598 <z_arm_fault+0x1d4>)
    24c0:	4931      	ldr	r1, [pc, #196]	; (2588 <z_arm_fault+0x1c4>)
    24c2:	9400      	str	r4, [sp, #0]
    24c4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    24c8:	2201      	movs	r2, #1
    24ca:	4623      	mov	r3, r4
    24cc:	4620      	mov	r0, r4
    24ce:	f003 fb24 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    24d2:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    24d6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    24da:	f64d 7302 	movw	r3, #57090	; 0xdf02
    24de:	429a      	cmp	r2, r3
    24e0:	d00a      	beq.n	24f8 <z_arm_fault+0x134>
		} else if (SCB_MMFSR != 0) {
    24e2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    24e6:	b1bb      	cbz	r3, 2518 <z_arm_fault+0x154>
			reason = mem_manage_fault(esf, 1, recoverable);
    24e8:	f10d 021f 	add.w	r2, sp, #31
    24ec:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    24ee:	4640      	mov	r0, r8
    24f0:	f7ff febe 	bl	2270 <mem_manage_fault>
    24f4:	4604      	mov	r4, r0
		break;
    24f6:	e7c4      	b.n	2482 <z_arm_fault+0xbe>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    24f8:	f8d8 3000 	ldr.w	r3, [r8]
    24fc:	9303      	str	r3, [sp, #12]
    24fe:	4b27      	ldr	r3, [pc, #156]	; (259c <z_arm_fault+0x1d8>)
    2500:	9400      	str	r4, [sp, #0]
    2502:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2506:	4620      	mov	r0, r4
    2508:	4623      	mov	r3, r4
    250a:	491f      	ldr	r1, [pc, #124]	; (2588 <z_arm_fault+0x1c4>)
    250c:	2201      	movs	r2, #1
    250e:	f003 fb04 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    2512:	f8d8 4000 	ldr.w	r4, [r8]
    2516:	e7b4      	b.n	2482 <z_arm_fault+0xbe>
		} else if (SCB_BFSR != 0) {
    2518:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    251c:	b12b      	cbz	r3, 252a <z_arm_fault+0x166>
			reason = bus_fault(esf, 1, recoverable);
    251e:	f10d 011f 	add.w	r1, sp, #31
    2522:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2524:	f7ff fd9a 	bl	205c <bus_fault.constprop.0>
    2528:	e7e4      	b.n	24f4 <z_arm_fault+0x130>
		} else if (SCB_UFSR != 0) {
    252a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    252c:	b29b      	uxth	r3, r3
    252e:	2b00      	cmp	r3, #0
    2530:	d0a7      	beq.n	2482 <z_arm_fault+0xbe>
		reason = usage_fault(esf);
    2532:	f7ff fe21 	bl	2178 <usage_fault.constprop.0>
    2536:	e7dd      	b.n	24f4 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    2538:	f10d 021f 	add.w	r2, sp, #31
    253c:	2100      	movs	r1, #0
    253e:	e7d6      	b.n	24ee <z_arm_fault+0x12a>
		reason = bus_fault(esf, 0, recoverable);
    2540:	f10d 011f 	add.w	r1, sp, #31
    2544:	2000      	movs	r0, #0
    2546:	e7ed      	b.n	2524 <z_arm_fault+0x160>
	PR_FAULT_INFO(
    2548:	4b15      	ldr	r3, [pc, #84]	; (25a0 <z_arm_fault+0x1dc>)
    254a:	e782      	b.n	2452 <z_arm_fault+0x8e>
	PR_FAULT_INFO("***** %s %d) *****",
    254c:	4a15      	ldr	r2, [pc, #84]	; (25a4 <z_arm_fault+0x1e0>)
    254e:	4b16      	ldr	r3, [pc, #88]	; (25a8 <z_arm_fault+0x1e4>)
    2550:	490d      	ldr	r1, [pc, #52]	; (2588 <z_arm_fault+0x1c4>)
    2552:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    2556:	bf18      	it	ne
    2558:	4613      	movne	r3, r2
    255a:	3e10      	subs	r6, #16
    255c:	2400      	movs	r4, #0
    255e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    2562:	4b12      	ldr	r3, [pc, #72]	; (25ac <z_arm_fault+0x1e8>)
    2564:	9302      	str	r3, [sp, #8]
    2566:	e9cd 4400 	strd	r4, r4, [sp]
    256a:	4623      	mov	r3, r4
    256c:	2201      	movs	r2, #1
    256e:	4620      	mov	r0, r4
    2570:	f003 fad3 	bl	5b1a <z_log_msg2_runtime_create.constprop.0>
}
    2574:	e785      	b.n	2482 <z_arm_fault+0xbe>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2576:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    257a:	f023 0301 	bic.w	r3, r3, #1
    257e:	e793      	b.n	24a8 <z_arm_fault+0xe4>
    2580:	e000ed00 	.word	0xe000ed00
    2584:	00006ea4 	.word	0x00006ea4
    2588:	00006724 	.word	0x00006724
    258c:	00006ecf 	.word	0x00006ecf
    2590:	00006ee6 	.word	0x00006ee6
    2594:	00006f07 	.word	0x00006f07
    2598:	00006f15 	.word	0x00006f15
    259c:	00006f34 	.word	0x00006f34
    25a0:	00006f50 	.word	0x00006f50
    25a4:	00006e8b 	.word	0x00006e8b
    25a8:	00006e76 	.word	0x00006e76
    25ac:	00006f74 	.word	0x00006f74

000025b0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    25b0:	4a02      	ldr	r2, [pc, #8]	; (25bc <z_arm_fault_init+0xc>)
    25b2:	6953      	ldr	r3, [r2, #20]
    25b4:	f043 0310 	orr.w	r3, r3, #16
    25b8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    25ba:	4770      	bx	lr
    25bc:	e000ed00 	.word	0xe000ed00

000025c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    25c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    25c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    25c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    25ca:	4672      	mov	r2, lr
	bl z_arm_fault
    25cc:	f7ff fefa 	bl	23c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    25d0:	bd01      	pop	{r0, pc}
    25d2:	bf00      	nop

000025d4 <z_arm_interrupt_init>:
    25d4:	4804      	ldr	r0, [pc, #16]	; (25e8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    25d6:	2300      	movs	r3, #0
    25d8:	2120      	movs	r1, #32
    25da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    25dc:	3301      	adds	r3, #1
    25de:	2b30      	cmp	r3, #48	; 0x30
    25e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    25e4:	d1f9      	bne.n	25da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    25e6:	4770      	bx	lr
    25e8:	e000e100 	.word	0xe000e100

000025ec <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    25ec:	2000      	movs	r0, #0
    msr CONTROL, r0
    25ee:	f380 8814 	msr	CONTROL, r0
    isb
    25f2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    25f6:	f003 ff4b 	bl	6490 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    25fa:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    25fc:	490d      	ldr	r1, [pc, #52]	; (2634 <__start+0x48>)
    str r0, [r1]
    25fe:	6008      	str	r0, [r1, #0]
    dsb
    2600:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2604:	480c      	ldr	r0, [pc, #48]	; (2638 <__start+0x4c>)
    msr msp, r0
    2606:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    260a:	f000 f82b 	bl	2664 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    260e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2610:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2614:	4809      	ldr	r0, [pc, #36]	; (263c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2616:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    261a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    261c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2620:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2624:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2626:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2628:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    262c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2630:	f7ff fc2e 	bl	1e90 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2634:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2638:	20001400 	.word	0x20001400
    ldr r0, =z_interrupt_stacks
    263c:	20001580 	.word	0x20001580

00002640 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2640:	4907      	ldr	r1, [pc, #28]	; (2660 <z_arm_clear_arm_mpu_config+0x20>)
    2642:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2646:	2300      	movs	r3, #0
	int num_regions =
    2648:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    264c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    264e:	4293      	cmp	r3, r2
    2650:	d100      	bne.n	2654 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2652:	4770      	bx	lr
  MPU->RNR = rnr;
    2654:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2658:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    265c:	3301      	adds	r3, #1
    265e:	e7f6      	b.n	264e <z_arm_clear_arm_mpu_config+0xe>
    2660:	e000ed00 	.word	0xe000ed00

00002664 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2664:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2666:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2668:	2300      	movs	r3, #0
    266a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    266e:	f7ff ffe7 	bl	2640 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2672:	4b14      	ldr	r3, [pc, #80]	; (26c4 <z_arm_init_arch_hw_at_boot+0x60>)
    2674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    267c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    268c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2694:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    269c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    26a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    26a4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    26a8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    26ac:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    26b0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    26b4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    26b8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    26ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26be:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    26c2:	bd08      	pop	{r3, pc}
    26c4:	e000e100 	.word	0xe000e100

000026c8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    26c8:	4b08      	ldr	r3, [pc, #32]	; (26ec <z_impl_k_thread_abort+0x24>)
    26ca:	689b      	ldr	r3, [r3, #8]
    26cc:	4283      	cmp	r3, r0
    26ce:	d10b      	bne.n	26e8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    26d0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    26d4:	b143      	cbz	r3, 26e8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26d6:	4b06      	ldr	r3, [pc, #24]	; (26f0 <z_impl_k_thread_abort+0x28>)
    26d8:	685a      	ldr	r2, [r3, #4]
    26da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    26de:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    26e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    26e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    26e6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    26e8:	f002 bc96 	b.w	5018 <z_thread_abort>
    26ec:	200009b8 	.word	0x200009b8
    26f0:	e000ed00 	.word	0xe000ed00

000026f4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    26f4:	4b02      	ldr	r3, [pc, #8]	; (2700 <z_arm_configure_static_mpu_regions+0xc>)
    26f6:	4a03      	ldr	r2, [pc, #12]	; (2704 <z_arm_configure_static_mpu_regions+0x10>)
    26f8:	4803      	ldr	r0, [pc, #12]	; (2708 <z_arm_configure_static_mpu_regions+0x14>)
    26fa:	2101      	movs	r1, #1
    26fc:	f000 b884 	b.w	2808 <arm_core_mpu_configure_static_mpu_regions>
    2700:	20040000 	.word	0x20040000
    2704:	20000000 	.word	0x20000000
    2708:	00006858 	.word	0x00006858

0000270c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    270c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    270e:	4b05      	ldr	r3, [pc, #20]	; (2724 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2710:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2712:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2714:	4a04      	ldr	r2, [pc, #16]	; (2728 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2716:	2120      	movs	r1, #32
    2718:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    271c:	4618      	mov	r0, r3
    271e:	2101      	movs	r1, #1
    2720:	f000 b87c 	b.w	281c <arm_core_mpu_configure_dynamic_mpu_regions>
    2724:	2000086c 	.word	0x2000086c
    2728:	150b0000 	.word	0x150b0000

0000272c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    272c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    272e:	4f27      	ldr	r7, [pc, #156]	; (27cc <mpu_configure_regions+0xa0>)
    2730:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2732:	2600      	movs	r6, #0
    2734:	428e      	cmp	r6, r1
    2736:	da15      	bge.n	2764 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    2738:	6844      	ldr	r4, [r0, #4]
    273a:	2c00      	cmp	r4, #0
    273c:	d043      	beq.n	27c6 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    273e:	b1d3      	cbz	r3, 2776 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2740:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2744:	ea14 0f0c 	tst.w	r4, ip
    2748:	d00f      	beq.n	276a <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    274a:	4b21      	ldr	r3, [pc, #132]	; (27d0 <mpu_configure_regions+0xa4>)
    274c:	9603      	str	r6, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    274e:	9302      	str	r3, [sp, #8]
    2750:	2300      	movs	r3, #0
    2752:	2201      	movs	r2, #1
    2754:	e9cd 3300 	strd	r3, r3, [sp]
    2758:	491e      	ldr	r1, [pc, #120]	; (27d4 <mpu_configure_regions+0xa8>)
    275a:	4618      	mov	r0, r3
    275c:	f003 f9ed 	bl	5b3a <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2760:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2764:	4610      	mov	r0, r2
    2766:	b005      	add	sp, #20
    2768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    276a:	2c1f      	cmp	r4, #31
    276c:	d9ed      	bls.n	274a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    276e:	6805      	ldr	r5, [r0, #0]
		&&
    2770:	ea1c 0f05 	tst.w	ip, r5
    2774:	d1e9      	bne.n	274a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2776:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2778:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    277a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    277e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2780:	d90f      	bls.n	27a2 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    2782:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2786:	d80e      	bhi.n	27a6 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2788:	3c01      	subs	r4, #1
    278a:	fab4 f484 	clz	r4, r4
    278e:	f1c4 041f 	rsb	r4, r4, #31
    2792:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2794:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2796:	ea4c 0404 	orr.w	r4, ip, r4
    279a:	d906      	bls.n	27aa <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    279c:	4b0e      	ldr	r3, [pc, #56]	; (27d8 <mpu_configure_regions+0xac>)
    279e:	9203      	str	r2, [sp, #12]
    27a0:	e7d5      	b.n	274e <mpu_configure_regions+0x22>
		return REGION_32B;
    27a2:	2408      	movs	r4, #8
    27a4:	e7f6      	b.n	2794 <mpu_configure_regions+0x68>
		return REGION_4G;
    27a6:	243e      	movs	r4, #62	; 0x3e
    27a8:	e7f4      	b.n	2794 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27aa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    27ae:	4315      	orrs	r5, r2
    27b0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    27b4:	f044 0401 	orr.w	r4, r4, #1
    27b8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27bc:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    27c0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    27c2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    27c6:	3601      	adds	r6, #1
    27c8:	300c      	adds	r0, #12
    27ca:	e7b3      	b.n	2734 <mpu_configure_regions+0x8>
    27cc:	e000ed00 	.word	0xe000ed00
    27d0:	00006f8b 	.word	0x00006f8b
    27d4:	0000671c 	.word	0x0000671c
    27d8:	00006fae 	.word	0x00006fae

000027dc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <arm_core_mpu_enable+0x14>)
    27de:	2205      	movs	r2, #5
    27e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    27e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27e8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    27ec:	4770      	bx	lr
    27ee:	bf00      	nop
    27f0:	e000ed00 	.word	0xe000ed00

000027f4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    27f4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    27f8:	4b02      	ldr	r3, [pc, #8]	; (2804 <arm_core_mpu_disable+0x10>)
    27fa:	2200      	movs	r2, #0
    27fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2800:	4770      	bx	lr
    2802:	bf00      	nop
    2804:	e000ed00 	.word	0xe000ed00

00002808 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2808:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    280a:	4c03      	ldr	r4, [pc, #12]	; (2818 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    280c:	2301      	movs	r3, #1
    280e:	7822      	ldrb	r2, [r4, #0]
    2810:	f7ff ff8c 	bl	272c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2814:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2816:	bd10      	pop	{r4, pc}
    2818:	20000bcf 	.word	0x20000bcf

0000281c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    281c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    281e:	4a09      	ldr	r2, [pc, #36]	; (2844 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2820:	2300      	movs	r3, #0
    2822:	7812      	ldrb	r2, [r2, #0]
    2824:	f7ff ff82 	bl	272c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2828:	f110 0f16 	cmn.w	r0, #22
    282c:	d003      	beq.n	2836 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    282e:	4b06      	ldr	r3, [pc, #24]	; (2848 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2830:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2832:	2807      	cmp	r0, #7
    2834:	dd00      	ble.n	2838 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2836:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2838:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    283c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2840:	3001      	adds	r0, #1
    2842:	e7f6      	b.n	2832 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2844:	20000bcf 	.word	0x20000bcf
    2848:	e000ed00 	.word	0xe000ed00

0000284c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    284c:	4914      	ldr	r1, [pc, #80]	; (28a0 <z_arm_mpu_init+0x54>)
    284e:	6808      	ldr	r0, [r1, #0]
    2850:	2808      	cmp	r0, #8
{
    2852:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2854:	d821      	bhi.n	289a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2856:	f7ff ffcd 	bl	27f4 <arm_core_mpu_disable>
    285a:	4c12      	ldr	r4, [pc, #72]	; (28a4 <z_arm_mpu_init+0x58>)
    285c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    285e:	2200      	movs	r2, #0
    2860:	4290      	cmp	r0, r2
    2862:	f101 010c 	add.w	r1, r1, #12
    2866:	d105      	bne.n	2874 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2868:	4b0f      	ldr	r3, [pc, #60]	; (28a8 <z_arm_mpu_init+0x5c>)
    286a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    286c:	f7ff ffb6 	bl	27dc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2870:	2000      	movs	r0, #0
}
    2872:	bd10      	pop	{r4, pc}
    2874:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2878:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    287c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2880:	4313      	orrs	r3, r2
    2882:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2886:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    288a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    288e:	f043 0301 	orr.w	r3, r3, #1
    2892:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2896:	3201      	adds	r2, #1
    2898:	e7e2      	b.n	2860 <z_arm_mpu_init+0x14>
		return -1;
    289a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    289e:	e7e8      	b.n	2872 <z_arm_mpu_init+0x26>
    28a0:	00006864 	.word	0x00006864
    28a4:	e000ed00 	.word	0xe000ed00
    28a8:	20000bcf 	.word	0x20000bcf

000028ac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    28ac:	4b01      	ldr	r3, [pc, #4]	; (28b4 <__stdout_hook_install+0x8>)
    28ae:	6018      	str	r0, [r3, #0]
}
    28b0:	4770      	bx	lr
    28b2:	bf00      	nop
    28b4:	2000002c 	.word	0x2000002c

000028b8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    28b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    28ba:	f04f 0320 	mov.w	r3, #32
    28be:	f3ef 8011 	mrs	r0, BASEPRI
    28c2:	f383 8812 	msr	BASEPRI_MAX, r3
    28c6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    28ca:	4a11      	ldr	r2, [pc, #68]	; (2910 <nordicsemi_nrf52_init+0x58>)
    28cc:	2301      	movs	r3, #1
    28ce:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    28d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    28d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    28da:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    28de:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    28e2:	2c08      	cmp	r4, #8
    28e4:	d108      	bne.n	28f8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    28e6:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    28ea:	2905      	cmp	r1, #5
    28ec:	d804      	bhi.n	28f8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    28ee:	4c09      	ldr	r4, [pc, #36]	; (2914 <nordicsemi_nrf52_init+0x5c>)
    28f0:	5c61      	ldrb	r1, [r4, r1]
    28f2:	b109      	cbz	r1, 28f8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    28f4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    28f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28fc:	2201      	movs	r2, #1
    28fe:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2902:	f380 8811 	msr	BASEPRI, r0
    2906:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    290a:	2000      	movs	r0, #0
    290c:	bd10      	pop	{r4, pc}
    290e:	bf00      	nop
    2910:	4001e000 	.word	0x4001e000
    2914:	00006fe7 	.word	0x00006fe7

00002918 <sys_arch_reboot>:
    *p_gpregret = val;
    2918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    291c:	b2c0      	uxtb	r0, r0
    291e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2922:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2926:	4905      	ldr	r1, [pc, #20]	; (293c <sys_arch_reboot+0x24>)
    2928:	4b05      	ldr	r3, [pc, #20]	; (2940 <sys_arch_reboot+0x28>)
    292a:	68ca      	ldr	r2, [r1, #12]
    292c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2930:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2932:	60cb      	str	r3, [r1, #12]
    2934:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2938:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    293a:	e7fd      	b.n	2938 <sys_arch_reboot+0x20>
    293c:	e000ed00 	.word	0xe000ed00
    2940:	05fa0004 	.word	0x05fa0004

00002944 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2944:	b120      	cbz	r0, 2950 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2946:	4b03      	ldr	r3, [pc, #12]	; (2954 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2948:	0180      	lsls	r0, r0, #6
    294a:	f043 0301 	orr.w	r3, r3, #1
    294e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2950:	4770      	bx	lr
    2952:	bf00      	nop
    2954:	00006790 	.word	0x00006790

00002958 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2958:	4b08      	ldr	r3, [pc, #32]	; (297c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    295a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    295c:	1ac3      	subs	r3, r0, r3
{
    295e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2960:	4907      	ldr	r1, [pc, #28]	; (2980 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2962:	109b      	asrs	r3, r3, #2
{
    2964:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2966:	4359      	muls	r1, r3
    2968:	4806      	ldr	r0, [pc, #24]	; (2984 <onoff_stop+0x2c>)
    296a:	2240      	movs	r2, #64	; 0x40
    296c:	f003 f954 	bl	5c18 <stop>
	notify(mgr, res);
    2970:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2972:	4601      	mov	r1, r0
	notify(mgr, res);
    2974:	4620      	mov	r0, r4
}
    2976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    297a:	4718      	bx	r3
    297c:	20000888 	.word	0x20000888
    2980:	b6db6db7 	.word	0xb6db6db7
    2984:	00006504 	.word	0x00006504

00002988 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2988:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    298a:	4c0c      	ldr	r4, [pc, #48]	; (29bc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    298c:	4a0c      	ldr	r2, [pc, #48]	; (29c0 <onoff_start+0x38>)
    298e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2990:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2992:	9300      	str	r3, [sp, #0]
{
    2994:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2996:	460b      	mov	r3, r1
    2998:	490a      	ldr	r1, [pc, #40]	; (29c4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    299a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    299c:	4361      	muls	r1, r4
{
    299e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    29a0:	4809      	ldr	r0, [pc, #36]	; (29c8 <onoff_start+0x40>)
    29a2:	f003 f966 	bl	5c72 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    29a6:	1e01      	subs	r1, r0, #0
    29a8:	da05      	bge.n	29b6 <onoff_start+0x2e>
		notify(mgr, err);
    29aa:	4630      	mov	r0, r6
    29ac:	462b      	mov	r3, r5
	}
}
    29ae:	b002      	add	sp, #8
    29b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    29b4:	4718      	bx	r3
}
    29b6:	b002      	add	sp, #8
    29b8:	bd70      	pop	{r4, r5, r6, pc}
    29ba:	bf00      	nop
    29bc:	20000888 	.word	0x20000888
    29c0:	00005ce1 	.word	0x00005ce1
    29c4:	b6db6db7 	.word	0xb6db6db7
    29c8:	00006504 	.word	0x00006504

000029cc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29cc:	2200      	movs	r2, #0
{
    29ce:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29d0:	2101      	movs	r1, #1
{
    29d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29d4:	4610      	mov	r0, r2
    29d6:	f7ff fa3f 	bl	1e58 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    29da:	480f      	ldr	r0, [pc, #60]	; (2a18 <clk_init+0x4c>)
    29dc:	f001 f8aa 	bl	3b34 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    29e0:	4b0e      	ldr	r3, [pc, #56]	; (2a1c <clk_init+0x50>)
    29e2:	4298      	cmp	r0, r3
    29e4:	d115      	bne.n	2a12 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    29e6:	f003 fb3f 	bl	6068 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    29ea:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    29ec:	490c      	ldr	r1, [pc, #48]	; (2a20 <clk_init+0x54>)
    29ee:	4630      	mov	r0, r6
    29f0:	f002 ff44 	bl	587c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    29f4:	2800      	cmp	r0, #0
    29f6:	db0b      	blt.n	2a10 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    29f8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    29fa:	4909      	ldr	r1, [pc, #36]	; (2a20 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    29fc:	2501      	movs	r5, #1
    29fe:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2a00:	f104 001c 	add.w	r0, r4, #28
    2a04:	f002 ff3a 	bl	587c <onoff_manager_init>
		if (err < 0) {
    2a08:	2800      	cmp	r0, #0
    2a0a:	db01      	blt.n	2a10 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2a0e:	2000      	movs	r0, #0
}
    2a10:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2a12:	f06f 0004 	mvn.w	r0, #4
    2a16:	e7fb      	b.n	2a10 <clk_init+0x44>
    2a18:	00002a59 	.word	0x00002a59
    2a1c:	0bad0000 	.word	0x0bad0000
    2a20:	000068b4 	.word	0x000068b4

00002a24 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2a24:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2a26:	230c      	movs	r3, #12
    2a28:	4809      	ldr	r0, [pc, #36]	; (2a50 <clkstarted_handle.constprop.0+0x2c>)
    2a2a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2a2c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2a2e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2a30:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2a34:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2a36:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2a38:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2a3a:	4418      	add	r0, r3
    2a3c:	f003 f8d9 	bl	5bf2 <set_on_state>
	if (callback) {
    2a40:	b12d      	cbz	r5, 2a4e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2a42:	4632      	mov	r2, r6
    2a44:	462b      	mov	r3, r5
    2a46:	4803      	ldr	r0, [pc, #12]	; (2a54 <clkstarted_handle.constprop.0+0x30>)
}
    2a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2a4c:	4718      	bx	r3
}
    2a4e:	bd70      	pop	{r4, r5, r6, pc}
    2a50:	20000888 	.word	0x20000888
    2a54:	00006504 	.word	0x00006504

00002a58 <clock_event_handler>:
	switch (event) {
    2a58:	b110      	cbz	r0, 2a60 <clock_event_handler+0x8>
    2a5a:	2801      	cmp	r0, #1
    2a5c:	d004      	beq.n	2a68 <clock_event_handler+0x10>
    2a5e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2a60:	4b03      	ldr	r3, [pc, #12]	; (2a70 <clock_event_handler+0x18>)
    2a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a64:	075b      	lsls	r3, r3, #29
    2a66:	d101      	bne.n	2a6c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2a68:	f7ff bfdc 	b.w	2a24 <clkstarted_handle.constprop.0>
}
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop
    2a70:	20000888 	.word	0x20000888

00002a74 <generic_hfclk_start>:
{
    2a74:	b508      	push	{r3, lr}
	__asm__ volatile(
    2a76:	f04f 0320 	mov.w	r3, #32
    2a7a:	f3ef 8111 	mrs	r1, BASEPRI
    2a7e:	f383 8812 	msr	BASEPRI_MAX, r3
    2a82:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2a86:	4a12      	ldr	r2, [pc, #72]	; (2ad0 <generic_hfclk_start+0x5c>)
    2a88:	6813      	ldr	r3, [r2, #0]
    2a8a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2a8e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2a92:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2a94:	d00c      	beq.n	2ab0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a9a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2a9e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2aa2:	f013 0301 	ands.w	r3, r3, #1
    2aa6:	d003      	beq.n	2ab0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2aa8:	480a      	ldr	r0, [pc, #40]	; (2ad4 <generic_hfclk_start+0x60>)
    2aaa:	f003 f8a2 	bl	5bf2 <set_on_state>
			already_started = true;
    2aae:	2301      	movs	r3, #1
	__asm__ volatile(
    2ab0:	f381 8811 	msr	BASEPRI, r1
    2ab4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2ab8:	b123      	cbz	r3, 2ac4 <generic_hfclk_start+0x50>
}
    2aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2abe:	2000      	movs	r0, #0
    2ac0:	f7ff bfb0 	b.w	2a24 <clkstarted_handle.constprop.0>
}
    2ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2ac8:	2001      	movs	r0, #1
    2aca:	f003 bada 	b.w	6082 <nrfx_clock_start>
    2ace:	bf00      	nop
    2ad0:	200008d8 	.word	0x200008d8
    2ad4:	200008c8 	.word	0x200008c8

00002ad8 <api_blocking_start>:
{
    2ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2ada:	2200      	movs	r2, #0
    2adc:	2301      	movs	r3, #1
    2ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ae2:	4a09      	ldr	r2, [pc, #36]	; (2b08 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2ae4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ae8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2aea:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2aee:	f003 f8f0 	bl	5cd2 <api_start>
	if (err < 0) {
    2af2:	2800      	cmp	r0, #0
    2af4:	db05      	blt.n	2b02 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2afa:	2300      	movs	r3, #0
    2afc:	4668      	mov	r0, sp
    2afe:	f001 ff6b 	bl	49d8 <z_impl_k_sem_take>
}
    2b02:	b005      	add	sp, #20
    2b04:	f85d fb04 	ldr.w	pc, [sp], #4
    2b08:	00005cff 	.word	0x00005cff

00002b0c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b0c:	4b09      	ldr	r3, [pc, #36]	; (2b34 <generic_hfclk_stop+0x28>)
    2b0e:	f3bf 8f5b 	dmb	ish
    2b12:	e853 2f00 	ldrex	r2, [r3]
    2b16:	f022 0102 	bic.w	r1, r2, #2
    2b1a:	e843 1000 	strex	r0, r1, [r3]
    2b1e:	2800      	cmp	r0, #0
    2b20:	d1f7      	bne.n	2b12 <generic_hfclk_stop+0x6>
    2b22:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2b26:	07d3      	lsls	r3, r2, #31
    2b28:	d402      	bmi.n	2b30 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2b2a:	2001      	movs	r0, #1
    2b2c:	f003 bae6 	b.w	60fc <nrfx_clock_stop>
}
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	200008d8 	.word	0x200008d8

00002b38 <z_nrf_clock_control_lf_on>:
{
    2b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2b3c:	4939      	ldr	r1, [pc, #228]	; (2c24 <z_nrf_clock_control_lf_on+0xec>)
    2b3e:	f3bf 8f5b 	dmb	ish
    2b42:	4607      	mov	r7, r0
    2b44:	2201      	movs	r2, #1
    2b46:	e851 3f00 	ldrex	r3, [r1]
    2b4a:	e841 2000 	strex	r0, r2, [r1]
    2b4e:	2800      	cmp	r0, #0
    2b50:	d1f9      	bne.n	2b46 <z_nrf_clock_control_lf_on+0xe>
    2b52:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2b56:	b933      	cbnz	r3, 2b66 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2b58:	4933      	ldr	r1, [pc, #204]	; (2c28 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2b5a:	4834      	ldr	r0, [pc, #208]	; (2c2c <z_nrf_clock_control_lf_on+0xf4>)
    2b5c:	604b      	str	r3, [r1, #4]
    2b5e:	60cb      	str	r3, [r1, #12]
    2b60:	608a      	str	r2, [r1, #8]
    2b62:	f002 fe9e 	bl	58a2 <onoff_request>
	switch (start_mode) {
    2b66:	1e7b      	subs	r3, r7, #1
    2b68:	2b01      	cmp	r3, #1
    2b6a:	d82f      	bhi.n	2bcc <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2b6c:	2f01      	cmp	r7, #1
    2b6e:	d107      	bne.n	2b80 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b74:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2b78:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2b7c:	2b01      	cmp	r3, #1
    2b7e:	d025      	beq.n	2bcc <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b80:	f003 fb7e 	bl	6280 <k_is_in_isr>
    2b84:	4604      	mov	r4, r0
    2b86:	b918      	cbnz	r0, 2b90 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2b88:	4b29      	ldr	r3, [pc, #164]	; (2c30 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d141      	bne.n	2c14 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2b90:	f04f 0320 	mov.w	r3, #32
    2b94:	f3ef 8611 	mrs	r6, BASEPRI
    2b98:	f383 8812 	msr	BASEPRI_MAX, r3
    2b9c:	f3bf 8f6f 	isb	sy
    2ba0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ba2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2c34 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ba6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2baa:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2bae:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2bb2:	03d2      	lsls	r2, r2, #15
    2bb4:	d50c      	bpl.n	2bd0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2bb6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2bba:	2b01      	cmp	r3, #1
    2bbc:	d001      	beq.n	2bc2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2bbe:	2f01      	cmp	r7, #1
    2bc0:	d106      	bne.n	2bd0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2bc2:	b30c      	cbz	r4, 2c08 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2bc4:	f386 8811 	msr	BASEPRI, r6
    2bc8:	f3bf 8f6f 	isb	sy
}
    2bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2bd0:	b1ac      	cbz	r4, 2bfe <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2bd2:	4630      	mov	r0, r6
    2bd4:	f7ff f8c8 	bl	1d68 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2bd8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d1e4      	bne.n	2baa <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2be0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2be4:	2a00      	cmp	r2, #0
    2be6:	d0e0      	beq.n	2baa <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2be8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2bec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2bf0:	2301      	movs	r3, #1
    2bf2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2bf6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bfa:	60ab      	str	r3, [r5, #8]
}
    2bfc:	e7d5      	b.n	2baa <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    2bfe:	2100      	movs	r1, #0
    2c00:	2021      	movs	r0, #33	; 0x21
    2c02:	f002 f9e9 	bl	4fd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c06:	e7e7      	b.n	2bd8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c0c:	2202      	movs	r2, #2
    2c0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2c12:	e7db      	b.n	2bcc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c18:	2202      	movs	r2, #2
    2c1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2c1e:	4606      	mov	r6, r0
}
    2c20:	e7bf      	b.n	2ba2 <z_nrf_clock_control_lf_on+0x6a>
    2c22:	bf00      	nop
    2c24:	200008dc 	.word	0x200008dc
    2c28:	20000878 	.word	0x20000878
    2c2c:	200008a4 	.word	0x200008a4
    2c30:	20000fe0 	.word	0x20000fe0
    2c34:	e000e100 	.word	0xe000e100

00002c38 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2c38:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2c3a:	4b08      	ldr	r3, [pc, #32]	; (2c5c <uart_console_init+0x24>)
    2c3c:	4808      	ldr	r0, [pc, #32]	; (2c60 <uart_console_init+0x28>)
    2c3e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2c40:	f003 fabc 	bl	61bc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2c44:	b138      	cbz	r0, 2c56 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2c46:	4807      	ldr	r0, [pc, #28]	; (2c64 <uart_console_init+0x2c>)
    2c48:	f7ff fe30 	bl	28ac <__stdout_hook_install>
	__printk_hook_install(console_out);
    2c4c:	4805      	ldr	r0, [pc, #20]	; (2c64 <uart_console_init+0x2c>)
    2c4e:	f7fd fe25 	bl	89c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2c52:	2000      	movs	r0, #0
}
    2c54:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2c56:	f06f 0012 	mvn.w	r0, #18
    2c5a:	e7fb      	b.n	2c54 <uart_console_init+0x1c>
    2c5c:	200008e0 	.word	0x200008e0
    2c60:	00006564 	.word	0x00006564
    2c64:	00002c69 	.word	0x00002c69

00002c68 <console_out>:
	if ('\n' == c) {
    2c68:	280a      	cmp	r0, #10
{
    2c6a:	b538      	push	{r3, r4, r5, lr}
    2c6c:	4d07      	ldr	r5, [pc, #28]	; (2c8c <console_out+0x24>)
    2c6e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2c70:	d104      	bne.n	2c7c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2c72:	6828      	ldr	r0, [r5, #0]
    2c74:	6883      	ldr	r3, [r0, #8]
    2c76:	210d      	movs	r1, #13
    2c78:	685b      	ldr	r3, [r3, #4]
    2c7a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2c7c:	6828      	ldr	r0, [r5, #0]
    2c7e:	6883      	ldr	r3, [r0, #8]
    2c80:	b2e1      	uxtb	r1, r4
    2c82:	685b      	ldr	r3, [r3, #4]
    2c84:	4798      	blx	r3
}
    2c86:	4620      	mov	r0, r4
    2c88:	bd38      	pop	{r3, r4, r5, pc}
    2c8a:	bf00      	nop
    2c8c:	200008e0 	.word	0x200008e0

00002c90 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2c90:	b530      	push	{r4, r5, lr}
	return port->config;
    2c92:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c94:	7b04      	ldrb	r4, [r0, #12]
    2c96:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2c9a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c9e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2ca2:	b085      	sub	sp, #20
    2ca4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ca8:	d104      	bne.n	2cb4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2caa:	4628      	mov	r0, r5
    2cac:	f001 f9c4 	bl	4038 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2cb0:	2000      	movs	r0, #0
    2cb2:	e032      	b.n	2d1a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2cb4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cb8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2cbc:	d12f      	bne.n	2d1e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2cc2:	bf0c      	ite	eq
    2cc4:	2304      	moveq	r3, #4
    2cc6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cc8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2ccc:	6883      	ldr	r3, [r0, #8]
    2cce:	fa23 f101 	lsr.w	r1, r3, r1
    2cd2:	07c9      	lsls	r1, r1, #31
    2cd4:	d42f      	bmi.n	2d36 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2cd6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2cda:	d12c      	bne.n	2d36 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2cdc:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2cde:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2ce0:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2ce4:	4a1c      	ldr	r2, [pc, #112]	; (2d58 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2ce6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2cea:	bf18      	it	ne
    2cec:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2cf4:	07db      	lsls	r3, r3, #31
    2cf6:	d41e      	bmi.n	2d36 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2cf8:	f10d 0407 	add.w	r4, sp, #7
    2cfc:	4621      	mov	r1, r4
    2cfe:	4628      	mov	r0, r5
    2d00:	f001 f8fe 	bl	3f00 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2d04:	4b15      	ldr	r3, [pc, #84]	; (2d5c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2d06:	4298      	cmp	r0, r3
    2d08:	d114      	bne.n	2d34 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2d0a:	4620      	mov	r0, r4
    2d0c:	f001 f946 	bl	3f9c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2d10:	4b13      	ldr	r3, [pc, #76]	; (2d60 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2d12:	4298      	cmp	r0, r3
    2d14:	d00e      	beq.n	2d34 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2d16:	f06f 000b 	mvn.w	r0, #11
}
    2d1a:	b005      	add	sp, #20
    2d1c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2d1e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2d22:	d005      	beq.n	2d30 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2d28:	bf0c      	ite	eq
    2d2a:	2302      	moveq	r3, #2
    2d2c:	2301      	movne	r3, #1
    2d2e:	e7cb      	b.n	2cc8 <gpio_nrfx_pin_interrupt_configure+0x38>
    2d30:	2303      	movs	r3, #3
    2d32:	e7c9      	b.n	2cc8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2d34:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d36:	2300      	movs	r3, #0
    2d38:	4619      	mov	r1, r3
    2d3a:	aa02      	add	r2, sp, #8
    2d3c:	4628      	mov	r0, r5
    2d3e:	f000 ffb9 	bl	3cb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d42:	4b07      	ldr	r3, [pc, #28]	; (2d60 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2d44:	4298      	cmp	r0, r3
    2d46:	d104      	bne.n	2d52 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2d48:	2101      	movs	r1, #1
    2d4a:	4628      	mov	r0, r5
    2d4c:	f001 f92c 	bl	3fa8 <nrfx_gpiote_trigger_enable>
    2d50:	e7ae      	b.n	2cb0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2d52:	f06f 0004 	mvn.w	r0, #4
    2d56:	e7e0      	b.n	2d1a <gpio_nrfx_pin_interrupt_configure+0x8a>
    2d58:	50000300 	.word	0x50000300
    2d5c:	0bad0004 	.word	0x0bad0004
    2d60:	0bad0000 	.word	0x0bad0000

00002d64 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2d64:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2d66:	f001 f909 	bl	3f7c <nrfx_gpiote_is_init>
    2d6a:	4604      	mov	r4, r0
    2d6c:	b968      	cbnz	r0, 2d8a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2d6e:	f001 f8dd 	bl	3f2c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2d72:	4b08      	ldr	r3, [pc, #32]	; (2d94 <gpio_nrfx_init+0x30>)
    2d74:	4298      	cmp	r0, r3
    2d76:	d10a      	bne.n	2d8e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2d78:	4807      	ldr	r0, [pc, #28]	; (2d98 <gpio_nrfx_init+0x34>)
    2d7a:	4621      	mov	r1, r4
    2d7c:	f001 f8ba 	bl	3ef4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2d80:	4622      	mov	r2, r4
    2d82:	2105      	movs	r1, #5
    2d84:	2006      	movs	r0, #6
    2d86:	f7ff f867 	bl	1e58 <z_arm_irq_priority_set>
		return 0;
    2d8a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2d8c:	bd10      	pop	{r4, pc}
		return -EIO;
    2d8e:	f06f 0004 	mvn.w	r0, #4
    2d92:	e7fb      	b.n	2d8c <gpio_nrfx_init+0x28>
    2d94:	0bad0000 	.word	0x0bad0000
    2d98:	00002d9d 	.word	0x00002d9d

00002d9c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d9c:	0942      	lsrs	r2, r0, #5
{
    2d9e:	b570      	push	{r4, r5, r6, lr}
    2da0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2da2:	d002      	beq.n	2daa <nrfx_gpio_handler+0xe>
    2da4:	2a01      	cmp	r2, #1
    2da6:	d015      	beq.n	2dd4 <nrfx_gpio_handler+0x38>
}
    2da8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2daa:	4e0b      	ldr	r6, [pc, #44]	; (2dd8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2dac:	6932      	ldr	r2, [r6, #16]
    2dae:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2db0:	2900      	cmp	r1, #0
    2db2:	d0f9      	beq.n	2da8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2db4:	f003 031f 	and.w	r3, r3, #31
    2db8:	2501      	movs	r5, #1
    2dba:	680c      	ldr	r4, [r1, #0]
    2dbc:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    2dbe:	688a      	ldr	r2, [r1, #8]
    2dc0:	402a      	ands	r2, r5
    2dc2:	d002      	beq.n	2dca <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2dc4:	684b      	ldr	r3, [r1, #4]
    2dc6:	4630      	mov	r0, r6
    2dc8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2dca:	2c00      	cmp	r4, #0
    2dcc:	d0ec      	beq.n	2da8 <nrfx_gpio_handler+0xc>
    2dce:	4621      	mov	r1, r4
    2dd0:	6824      	ldr	r4, [r4, #0]
    2dd2:	e7f4      	b.n	2dbe <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2dd4:	4e01      	ldr	r6, [pc, #4]	; (2ddc <nrfx_gpio_handler+0x40>)
    2dd6:	e7e9      	b.n	2dac <nrfx_gpio_handler+0x10>
    2dd8:	0000651c 	.word	0x0000651c
    2ddc:	00006534 	.word	0x00006534

00002de0 <gpio_nrfx_pin_configure>:
{
    2de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2de4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2de6:	7b3b      	ldrb	r3, [r7, #12]
    2de8:	f001 051f 	and.w	r5, r1, #31
{
    2dec:	b085      	sub	sp, #20
    2dee:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2df0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2df4:	4614      	mov	r4, r2
    2df6:	b9ca      	cbnz	r2, 2e2c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2df8:	a902      	add	r1, sp, #8
    2dfa:	4628      	mov	r0, r5
    2dfc:	f001 f880 	bl	3f00 <nrfx_gpiote_channel_get>
    2e00:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2e02:	4628      	mov	r0, r5
    2e04:	f001 f940 	bl	4088 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2e08:	4b4a      	ldr	r3, [pc, #296]	; (2f34 <gpio_nrfx_pin_configure+0x154>)
    2e0a:	4298      	cmp	r0, r3
    2e0c:	d004      	beq.n	2e18 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2e0e:	f06f 0004 	mvn.w	r0, #4
}
    2e12:	b005      	add	sp, #20
    2e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2e18:	4284      	cmp	r4, r0
    2e1a:	d105      	bne.n	2e28 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2e1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2e20:	f001 f8b6 	bl	3f90 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2e24:	42a0      	cmp	r0, r4
    2e26:	d1f2      	bne.n	2e0e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e28:	2000      	movs	r0, #0
    2e2a:	e7f2      	b.n	2e12 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e2c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e30:	f10d 0103 	add.w	r1, sp, #3
    2e34:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e36:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e3a:	f001 f861 	bl	3f00 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e3e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e40:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e42:	aa02      	add	r2, sp, #8
    2e44:	4649      	mov	r1, r9
    2e46:	4628      	mov	r0, r5
    2e48:	f000 ff34 	bl	3cb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e4c:	4b39      	ldr	r3, [pc, #228]	; (2f34 <gpio_nrfx_pin_configure+0x154>)
    2e4e:	4298      	cmp	r0, r3
    2e50:	d002      	beq.n	2e58 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e52:	f06f 0015 	mvn.w	r0, #21
    2e56:	e7dc      	b.n	2e12 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2e58:	4580      	cmp	r8, r0
    2e5a:	d103      	bne.n	2e64 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2e5c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2e60:	f001 f896 	bl	3f90 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2e64:	03a3      	lsls	r3, r4, #14
    2e66:	d551      	bpl.n	2f0c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e68:	f240 6306 	movw	r3, #1542	; 0x606
    2e6c:	4023      	ands	r3, r4
    2e6e:	f240 2206 	movw	r2, #518	; 0x206
    2e72:	4293      	cmp	r3, r2
    2e74:	d03b      	beq.n	2eee <gpio_nrfx_pin_configure+0x10e>
    2e76:	d80c      	bhi.n	2e92 <gpio_nrfx_pin_configure+0xb2>
    2e78:	2b06      	cmp	r3, #6
    2e7a:	d015      	beq.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
    2e7c:	d804      	bhi.n	2e88 <gpio_nrfx_pin_configure+0xa8>
    2e7e:	b19b      	cbz	r3, 2ea8 <gpio_nrfx_pin_configure+0xc8>
    2e80:	2b02      	cmp	r3, #2
    2e82:	d1e6      	bne.n	2e52 <gpio_nrfx_pin_configure+0x72>
    2e84:	2304      	movs	r3, #4
    2e86:	e00f      	b.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
    2e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2e8c:	d1e1      	bne.n	2e52 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2e8e:	2301      	movs	r3, #1
    2e90:	e00a      	b.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e92:	f240 4202 	movw	r2, #1026	; 0x402
    2e96:	4293      	cmp	r3, r2
    2e98:	d02b      	beq.n	2ef2 <gpio_nrfx_pin_configure+0x112>
    2e9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2e9e:	d02a      	beq.n	2ef6 <gpio_nrfx_pin_configure+0x116>
    2ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2ea4:	d1d5      	bne.n	2e52 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2ea6:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2ea8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2eac:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2eb0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2eb4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2eb6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2eba:	bf54      	ite	pl
    2ebc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2ec0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ec2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2ec4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ec8:	d517      	bpl.n	2efa <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	2101      	movs	r1, #1
    2ece:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2ed2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2ed6:	2200      	movs	r2, #0
    2ed8:	a901      	add	r1, sp, #4
    2eda:	4628      	mov	r0, r5
    2edc:	f000 ff98 	bl	3e10 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ee0:	4b14      	ldr	r3, [pc, #80]	; (2f34 <gpio_nrfx_pin_configure+0x154>)
    2ee2:	4298      	cmp	r0, r3
    2ee4:	bf14      	ite	ne
    2ee6:	f06f 0015 	mvnne.w	r0, #21
    2eea:	2000      	moveq	r0, #0
    2eec:	e791      	b.n	2e12 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2eee:	2307      	movs	r3, #7
    2ef0:	e7da      	b.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2ef2:	2305      	movs	r3, #5
    2ef4:	e7d8      	b.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2ef6:	2303      	movs	r3, #3
    2ef8:	e7d6      	b.n	2ea8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2efa:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2efc:	bf41      	itttt	mi
    2efe:	687b      	ldrmi	r3, [r7, #4]
    2f00:	2101      	movmi	r1, #1
    2f02:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2f06:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2f0a:	e7e4      	b.n	2ed6 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2f0c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f0e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2f12:	bf54      	ite	pl
    2f14:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2f18:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f1a:	461a      	mov	r2, r3
    2f1c:	a901      	add	r1, sp, #4
    2f1e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2f20:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f24:	f000 fec6 	bl	3cb4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f28:	4b02      	ldr	r3, [pc, #8]	; (2f34 <gpio_nrfx_pin_configure+0x154>)
    2f2a:	4298      	cmp	r0, r3
    2f2c:	f43f af7c 	beq.w	2e28 <gpio_nrfx_pin_configure+0x48>
    2f30:	e78f      	b.n	2e52 <gpio_nrfx_pin_configure+0x72>
    2f32:	bf00      	nop
    2f34:	0bad0000 	.word	0x0bad0000

00002f38 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    2f38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    2f3a:	ab0b      	add	r3, sp, #44	; 0x2c
    2f3c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    2f3e:	9303      	str	r3, [sp, #12]
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <z_log_msg2_runtime_create.constprop.0+0x20>)
    2f42:	9302      	str	r3, [sp, #8]
    2f44:	2300      	movs	r3, #0
    2f46:	e9cd 3300 	strd	r3, r3, [sp]
    2f4a:	2201      	movs	r2, #1
    2f4c:	4618      	mov	r0, r3
    2f4e:	f7fe fbed 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    2f52:	b007      	add	sp, #28
    2f54:	f85d fb04 	ldr.w	pc, [sp], #4
    2f58:	0000701b 	.word	0x0000701b

00002f5c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2f5e:	794b      	ldrb	r3, [r1, #5]
    2f60:	2b01      	cmp	r3, #1
    2f62:	d026      	beq.n	2fb2 <uarte_nrfx_configure+0x56>
    2f64:	2b03      	cmp	r3, #3
    2f66:	d121      	bne.n	2fac <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2f68:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2f6a:	798b      	ldrb	r3, [r1, #6]
    2f6c:	2b03      	cmp	r3, #3
    2f6e:	d11d      	bne.n	2fac <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2f70:	79cc      	ldrb	r4, [r1, #7]
    2f72:	b10c      	cbz	r4, 2f78 <uarte_nrfx_configure+0x1c>
    2f74:	2c01      	cmp	r4, #1
    2f76:	d119      	bne.n	2fac <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2f78:	790a      	ldrb	r2, [r1, #4]
    2f7a:	b112      	cbz	r2, 2f82 <uarte_nrfx_configure+0x26>
    2f7c:	2a02      	cmp	r2, #2
    2f7e:	d115      	bne.n	2fac <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2f80:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2f82:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2f84:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2f86:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2f8a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2f8c:	d065      	beq.n	305a <uarte_nrfx_configure+0xfe>
    2f8e:	d82d      	bhi.n	2fec <uarte_nrfx_configure+0x90>
    2f90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2f94:	d064      	beq.n	3060 <uarte_nrfx_configure+0x104>
    2f96:	d816      	bhi.n	2fc6 <uarte_nrfx_configure+0x6a>
    2f98:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2f9c:	d062      	beq.n	3064 <uarte_nrfx_configure+0x108>
    2f9e:	d80a      	bhi.n	2fb6 <uarte_nrfx_configure+0x5a>
    2fa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2fa4:	d061      	beq.n	306a <uarte_nrfx_configure+0x10e>
    2fa6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2faa:	d061      	beq.n	3070 <uarte_nrfx_configure+0x114>
    2fac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2fb0:	e052      	b.n	3058 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2fb2:	2600      	movs	r6, #0
    2fb4:	e7d9      	b.n	2f6a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2fb6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2fba:	d05c      	beq.n	3076 <uarte_nrfx_configure+0x11a>
    2fbc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2fc0:	d1f4      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2fc2:	4b37      	ldr	r3, [pc, #220]	; (30a0 <uarte_nrfx_configure+0x144>)
    2fc4:	e03c      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fc6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2fca:	d057      	beq.n	307c <uarte_nrfx_configure+0x120>
    2fcc:	d807      	bhi.n	2fde <uarte_nrfx_configure+0x82>
    2fce:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2fd2:	d055      	beq.n	3080 <uarte_nrfx_configure+0x124>
    2fd4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2fd8:	d1e8      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2fda:	4b32      	ldr	r3, [pc, #200]	; (30a4 <uarte_nrfx_configure+0x148>)
    2fdc:	e030      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fde:	f647 2712 	movw	r7, #31250	; 0x7a12
    2fe2:	42bb      	cmp	r3, r7
    2fe4:	d1e2      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2fe6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2fea:	e029      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2ff0:	d048      	beq.n	3084 <uarte_nrfx_configure+0x128>
    2ff2:	d813      	bhi.n	301c <uarte_nrfx_configure+0xc0>
    2ff4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2ff8:	d047      	beq.n	308a <uarte_nrfx_configure+0x12e>
    2ffa:	d809      	bhi.n	3010 <uarte_nrfx_configure+0xb4>
    2ffc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3000:	42bb      	cmp	r3, r7
    3002:	d044      	beq.n	308e <uarte_nrfx_configure+0x132>
    3004:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3008:	d1d0      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    300a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    300e:	e017      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3010:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3014:	d1ca      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3016:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    301a:	e011      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    301c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3020:	d038      	beq.n	3094 <uarte_nrfx_configure+0x138>
    3022:	d808      	bhi.n	3036 <uarte_nrfx_configure+0xda>
    3024:	4f20      	ldr	r7, [pc, #128]	; (30a8 <uarte_nrfx_configure+0x14c>)
    3026:	42bb      	cmp	r3, r7
    3028:	d037      	beq.n	309a <uarte_nrfx_configure+0x13e>
    302a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    302e:	d1bd      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3030:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3034:	e004      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3036:	4f1d      	ldr	r7, [pc, #116]	; (30ac <uarte_nrfx_configure+0x150>)
    3038:	42bb      	cmp	r3, r7
    303a:	d1b7      	bne.n	2fac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    303c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3040:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3042:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3046:	1d03      	adds	r3, r0, #4
    3048:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    304a:	4334      	orrs	r4, r6
    304c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    304e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3052:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3056:	2000      	movs	r0, #0
}
    3058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    305a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    305e:	e7ef      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3060:	4b13      	ldr	r3, [pc, #76]	; (30b0 <uarte_nrfx_configure+0x154>)
    3062:	e7ed      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3064:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3068:	e7ea      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    306a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    306e:	e7e7      	b.n	3040 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3070:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3074:	e7e4      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3076:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    307a:	e7e1      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    307c:	4b0d      	ldr	r3, [pc, #52]	; (30b4 <uarte_nrfx_configure+0x158>)
    307e:	e7df      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3080:	4b0d      	ldr	r3, [pc, #52]	; (30b8 <uarte_nrfx_configure+0x15c>)
    3082:	e7dd      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3084:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3088:	e7da      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    308a:	4b0c      	ldr	r3, [pc, #48]	; (30bc <uarte_nrfx_configure+0x160>)
    308c:	e7d8      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    308e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3092:	e7d5      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3094:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3098:	e7d2      	b.n	3040 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    309a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    309e:	e7cf      	b.n	3040 <uarte_nrfx_configure+0xe4>
    30a0:	0013b000 	.word	0x0013b000
    30a4:	004ea000 	.word	0x004ea000
    30a8:	0003d090 	.word	0x0003d090
    30ac:	000f4240 	.word	0x000f4240
    30b0:	00275000 	.word	0x00275000
    30b4:	0075c000 	.word	0x0075c000
    30b8:	003af000 	.word	0x003af000
    30bc:	013a9000 	.word	0x013a9000

000030c0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    30c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    30c4:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    30c8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    30ca:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    30ce:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    30d2:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    30d4:	2100      	movs	r1, #0
    30d6:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    30da:	4607      	mov	r7, r0
	data->dev = dev;
    30dc:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    30de:	aa05      	add	r2, sp, #20
    30e0:	4648      	mov	r0, r9
    30e2:	f002 feee 	bl	5ec2 <pinctrl_lookup_state>
	if (ret < 0) {
    30e6:	1e04      	subs	r4, r0, #0
    30e8:	db25      	blt.n	3136 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    30ea:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    30ec:	f8d9 2000 	ldr.w	r2, [r9]
    30f0:	7919      	ldrb	r1, [r3, #4]
    30f2:	6818      	ldr	r0, [r3, #0]
    30f4:	f002 ff02 	bl	5efc <pinctrl_configure_pins>
	if (err < 0) {
    30f8:	1e04      	subs	r4, r0, #0
    30fa:	db1c      	blt.n	3136 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    30fc:	1d31      	adds	r1, r6, #4
    30fe:	4638      	mov	r0, r7
    3100:	f7ff ff2c 	bl	2f5c <uarte_nrfx_configure>
	if (err) {
    3104:	4604      	mov	r4, r0
    3106:	b9b0      	cbnz	r0, 3136 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3108:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    310c:	0799      	lsls	r1, r3, #30
    310e:	d529      	bpl.n	3164 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3110:	f106 0012 	add.w	r0, r6, #18
    3114:	f001 f8b2 	bl	427c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3118:	4b27      	ldr	r3, [pc, #156]	; (31b8 <uarte_instance_init.constprop.0+0xf8>)
    311a:	4298      	cmp	r0, r3
    311c:	d00f      	beq.n	313e <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    311e:	4b27      	ldr	r3, [pc, #156]	; (31bc <uarte_instance_init.constprop.0+0xfc>)
    3120:	9400      	str	r4, [sp, #0]
    3122:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3126:	4620      	mov	r0, r4
    3128:	4623      	mov	r3, r4
    312a:	4925      	ldr	r1, [pc, #148]	; (31c0 <uarte_instance_init.constprop.0+0x100>)
    312c:	2201      	movs	r2, #1
    312e:	f7ff ff03 	bl	2f38 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    3132:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3136:	4620      	mov	r0, r4
    3138:	b007      	add	sp, #28
    313a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    313e:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3140:	00c3      	lsls	r3, r0, #3
    3142:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3146:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    314a:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    314e:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3152:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3156:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    315a:	4a1a      	ldr	r2, [pc, #104]	; (31c4 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    315c:	2301      	movs	r3, #1
    315e:	4083      	lsls	r3, r0
    3160:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3164:	2308      	movs	r3, #8
    3166:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    316a:	f898 3008 	ldrb.w	r3, [r8, #8]
    316e:	b95b      	cbnz	r3, 3188 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3170:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    3174:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3178:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    317c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3180:	2301      	movs	r3, #1
    3182:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3186:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3188:	f8d8 3004 	ldr.w	r3, [r8, #4]
    318c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    318e:	bf5c      	itt	pl
    3190:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3194:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3198:	06db      	lsls	r3, r3, #27
    319a:	bf44      	itt	mi
    319c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    31a0:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    31a4:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    31a6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    31a8:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    31ac:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31b0:	2301      	movs	r3, #1
    31b2:	60ab      	str	r3, [r5, #8]
    31b4:	60eb      	str	r3, [r5, #12]
	return 0;
    31b6:	e7be      	b.n	3136 <uarte_instance_init.constprop.0+0x76>
    31b8:	0bad0000 	.word	0x0bad0000
    31bc:	0000701b 	.word	0x0000701b
    31c0:	0000673c 	.word	0x0000673c
    31c4:	4001f000 	.word	0x4001f000

000031c8 <uarte_nrfx_poll_out>:
{
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    31ca:	6906      	ldr	r6, [r0, #16]
{
    31cc:	4605      	mov	r5, r0
    31ce:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31d0:	f003 f856 	bl	6280 <k_is_in_isr>
    31d4:	b910      	cbnz	r0, 31dc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    31d6:	4b2c      	ldr	r3, [pc, #176]	; (3288 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	b983      	cbnz	r3, 31fe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    31dc:	f04f 0320 	mov.w	r3, #32
    31e0:	f3ef 8411 	mrs	r4, BASEPRI
    31e4:	f383 8812 	msr	BASEPRI_MAX, r3
    31e8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    31ec:	6868      	ldr	r0, [r5, #4]
    31ee:	f002 fdfc 	bl	5dea <is_tx_ready.isra.0>
    31f2:	bb28      	cbnz	r0, 3240 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    31f4:	f384 8811 	msr	BASEPRI, r4
    31f8:	f3bf 8f6f 	isb	sy
}
    31fc:	e7ee      	b.n	31dc <uarte_nrfx_poll_out+0x14>
{
    31fe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3200:	6868      	ldr	r0, [r5, #4]
    3202:	f002 fdf2 	bl	5dea <is_tx_ready.isra.0>
    3206:	b970      	cbnz	r0, 3226 <uarte_nrfx_poll_out+0x5e>
    3208:	2001      	movs	r0, #1
    320a:	f002 ff2b 	bl	6064 <nrfx_busy_wait>
    320e:	3c01      	subs	r4, #1
    3210:	d1f6      	bne.n	3200 <uarte_nrfx_poll_out+0x38>
    3212:	2100      	movs	r1, #0
    3214:	2021      	movs	r0, #33	; 0x21
    3216:	f001 fedf 	bl	4fd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    321a:	e7f0      	b.n	31fe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    321c:	f384 8811 	msr	BASEPRI, r4
    3220:	f3bf 8f6f 	isb	sy
}
    3224:	e7f5      	b.n	3212 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3226:	f04f 0320 	mov.w	r3, #32
    322a:	f3ef 8411 	mrs	r4, BASEPRI
    322e:	f383 8812 	msr	BASEPRI_MAX, r3
    3232:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3236:	6868      	ldr	r0, [r5, #4]
    3238:	f002 fdd7 	bl	5dea <is_tx_ready.isra.0>
    323c:	2800      	cmp	r0, #0
    323e:	d0ed      	beq.n	321c <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    3240:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3244:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3246:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    3248:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    324a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    324e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3252:	2200      	movs	r2, #0
    3254:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3258:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    325c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3260:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3264:	684a      	ldr	r2, [r1, #4]
    3266:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3268:	bf41      	itttt	mi
    326a:	2208      	movmi	r2, #8
    326c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3270:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3274:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3278:	2201      	movs	r2, #1
    327a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    327c:	f384 8811 	msr	BASEPRI, r4
    3280:	f3bf 8f6f 	isb	sy
}
    3284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3286:	bf00      	nop
    3288:	20000fe0 	.word	0x20000fe0

0000328c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    328c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    328e:	2301      	movs	r3, #1
    3290:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3292:	4a11      	ldr	r2, [pc, #68]	; (32d8 <compare_int_lock+0x4c>)
    3294:	f3bf 8f5b 	dmb	ish
    3298:	43dc      	mvns	r4, r3
    329a:	e852 1f00 	ldrex	r1, [r2]
    329e:	ea01 0c04 	and.w	ip, r1, r4
    32a2:	e842 ce00 	strex	lr, ip, [r2]
    32a6:	f1be 0f00 	cmp.w	lr, #0
    32aa:	d1f6      	bne.n	329a <compare_int_lock+0xe>
    32ac:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    32b4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    32b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    32c0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    32c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32c8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    32cc:	420b      	tst	r3, r1
}
    32ce:	bf14      	ite	ne
    32d0:	2001      	movne	r0, #1
    32d2:	2000      	moveq	r0, #0
    32d4:	bd10      	pop	{r4, pc}
    32d6:	bf00      	nop
    32d8:	20000900 	.word	0x20000900

000032dc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32dc:	4919      	ldr	r1, [pc, #100]	; (3344 <sys_clock_timeout_handler+0x68>)
{
    32de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32e0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    32e2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32e6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    32e8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    32ec:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32f0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    32f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    32f6:	d222      	bcs.n	333e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    32f8:	4b13      	ldr	r3, [pc, #76]	; (3348 <sys_clock_timeout_handler+0x6c>)
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	0a1a      	lsrs	r2, r3, #8
    32fe:	061b      	lsls	r3, r3, #24
    3300:	195e      	adds	r6, r3, r5
    3302:	4b12      	ldr	r3, [pc, #72]	; (334c <sys_clock_timeout_handler+0x70>)
    3304:	f142 0700 	adc.w	r7, r2, #0
    3308:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    330c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    330e:	f001 ffb3 	bl	5278 <sys_clock_announce>
    return p_reg->CC[ch];
    3312:	00a3      	lsls	r3, r4, #2
    3314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3318:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    331c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3320:	42aa      	cmp	r2, r5
    3322:	d10b      	bne.n	333c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3324:	b91e      	cbnz	r6, 332e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3326:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    332a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    332e:	4b08      	ldr	r3, [pc, #32]	; (3350 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3330:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3334:	fa00 f404 	lsl.w	r4, r0, r4
    3338:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    333e:	2600      	movs	r6, #0
    3340:	e7e5      	b.n	330e <sys_clock_timeout_handler+0x32>
    3342:	bf00      	nop
    3344:	200001c0 	.word	0x200001c0
    3348:	20000904 	.word	0x20000904
    334c:	200001a8 	.word	0x200001a8
    3350:	40011000 	.word	0x40011000

00003354 <compare_int_unlock>:
	if (key) {
    3354:	b319      	cbz	r1, 339e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3356:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    335a:	2301      	movs	r3, #1
    335c:	4a10      	ldr	r2, [pc, #64]	; (33a0 <compare_int_unlock+0x4c>)
    335e:	4083      	lsls	r3, r0
    3360:	e852 1f00 	ldrex	r1, [r2]
    3364:	4319      	orrs	r1, r3
    3366:	e842 1c00 	strex	ip, r1, [r2]
    336a:	f1bc 0f00 	cmp.w	ip, #0
    336e:	d1f7      	bne.n	3360 <compare_int_unlock+0xc>
    3370:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3374:	4a0b      	ldr	r2, [pc, #44]	; (33a4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    337a:	4083      	lsls	r3, r0
    337c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3380:	4b09      	ldr	r3, [pc, #36]	; (33a8 <compare_int_unlock+0x54>)
    3382:	f3bf 8f5b 	dmb	ish
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    338c:	fa23 f000 	lsr.w	r0, r3, r0
    3390:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3392:	bf42      	ittt	mi
    3394:	4b05      	ldrmi	r3, [pc, #20]	; (33ac <compare_int_unlock+0x58>)
    3396:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    339a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    339e:	4770      	bx	lr
    33a0:	20000900 	.word	0x20000900
    33a4:	40011000 	.word	0x40011000
    33a8:	200008fc 	.word	0x200008fc
    33ac:	e000e100 	.word	0xe000e100

000033b0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    33b0:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <z_nrf_rtc_timer_read+0x38>)
    33b2:	6818      	ldr	r0, [r3, #0]
    33b4:	0a01      	lsrs	r1, r0, #8
    33b6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    33b8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    33bc:	4b0b      	ldr	r3, [pc, #44]	; (33ec <z_nrf_rtc_timer_read+0x3c>)
    33be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    33c2:	1818      	adds	r0, r3, r0
    33c4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    33c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    33cc:	d20a      	bcs.n	33e4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    33ce:	4b08      	ldr	r3, [pc, #32]	; (33f0 <z_nrf_rtc_timer_read+0x40>)
    33d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    33d4:	4290      	cmp	r0, r2
    33d6:	eb71 0303 	sbcs.w	r3, r1, r3
    33da:	d203      	bcs.n	33e4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    33dc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    33e0:	f141 0100 	adc.w	r1, r1, #0
}
    33e4:	4770      	bx	lr
    33e6:	bf00      	nop
    33e8:	20000904 	.word	0x20000904
    33ec:	40011000 	.word	0x40011000
    33f0:	200001a8 	.word	0x200001a8

000033f4 <compare_set>:
{
    33f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33f8:	b085      	sub	sp, #20
    33fa:	4616      	mov	r6, r2
    33fc:	4698      	mov	r8, r3
    33fe:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3400:	f7ff ff44 	bl	328c <compare_int_lock>
    3404:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3406:	f7ff ffd3 	bl	33b0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    340a:	42b0      	cmp	r0, r6
    340c:	eb71 0308 	sbcs.w	r3, r1, r8
    3410:	d278      	bcs.n	3504 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3412:	4b46      	ldr	r3, [pc, #280]	; (352c <compare_set+0x138>)
    3414:	1a30      	subs	r0, r6, r0
    3416:	eb68 0101 	sbc.w	r1, r8, r1
    341a:	4298      	cmp	r0, r3
    341c:	f171 0300 	sbcs.w	r3, r1, #0
    3420:	f080 8081 	bcs.w	3526 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3424:	4b42      	ldr	r3, [pc, #264]	; (3530 <compare_set+0x13c>)
    3426:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    342a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    342e:	45d8      	cmp	r8, fp
    3430:	bf08      	it	eq
    3432:	4556      	cmpeq	r6, sl
    3434:	d051      	beq.n	34da <compare_set+0xe6>
    3436:	ea4f 0985 	mov.w	r9, r5, lsl #2
    343a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    343e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3442:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3446:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3448:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    344c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3450:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3452:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3456:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    345a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    345c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3460:	4b34      	ldr	r3, [pc, #208]	; (3534 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3462:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3466:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3468:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    346c:	1a40      	subs	r0, r0, r1
    346e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3472:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3476:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3478:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    347c:	d107      	bne.n	348e <compare_set+0x9a>
    347e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3482:	2013      	movs	r0, #19
    3484:	f003 f800 	bl	6488 <z_impl_k_busy_wait>
    3488:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    348c:	4b29      	ldr	r3, [pc, #164]	; (3534 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    348e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3492:	eba4 000c 	sub.w	r0, r4, ip
    3496:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    349a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    349e:	bf88      	it	hi
    34a0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34a2:	2000      	movs	r0, #0
    34a4:	6038      	str	r0, [r7, #0]
    34a6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    34a8:	9801      	ldr	r0, [sp, #4]
    34aa:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    34ae:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    34b2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    34b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    34ba:	4281      	cmp	r1, r0
    34bc:	d006      	beq.n	34cc <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    34be:	1a20      	subs	r0, r4, r0
    34c0:	3802      	subs	r0, #2
    34c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    34c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34ca:	d819      	bhi.n	3500 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    34cc:	1aa4      	subs	r4, r4, r2
    34ce:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    34d2:	eb14 0a06 	adds.w	sl, r4, r6
    34d6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    34da:	4915      	ldr	r1, [pc, #84]	; (3530 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    34dc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    34de:	012b      	lsls	r3, r5, #4
    34e0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    34e4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    34e8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    34ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    34ec:	6053      	str	r3, [r2, #4]
	return ret;
    34ee:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    34f0:	4628      	mov	r0, r5
    34f2:	9900      	ldr	r1, [sp, #0]
    34f4:	f7ff ff2e 	bl	3354 <compare_int_unlock>
}
    34f8:	4620      	mov	r0, r4
    34fa:	b005      	add	sp, #20
    34fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3500:	4620      	mov	r0, r4
    3502:	e7b1      	b.n	3468 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3504:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3506:	4a0c      	ldr	r2, [pc, #48]	; (3538 <compare_set+0x144>)
    3508:	f3bf 8f5b 	dmb	ish
    350c:	40ab      	lsls	r3, r5
    350e:	e852 1f00 	ldrex	r1, [r2]
    3512:	4319      	orrs	r1, r3
    3514:	e842 1000 	strex	r0, r1, [r2]
    3518:	2800      	cmp	r0, #0
    351a:	d1f8      	bne.n	350e <compare_set+0x11a>
    351c:	f3bf 8f5b 	dmb	ish
    3520:	46b2      	mov	sl, r6
    3522:	46c3      	mov	fp, r8
    3524:	e7d9      	b.n	34da <compare_set+0xe6>
			return -EINVAL;
    3526:	f06f 0415 	mvn.w	r4, #21
    352a:	e7e1      	b.n	34f0 <compare_set+0xfc>
    352c:	01000001 	.word	0x01000001
    3530:	200001b0 	.word	0x200001b0
    3534:	40011000 	.word	0x40011000
    3538:	200008fc 	.word	0x200008fc

0000353c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    353c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    353e:	4b19      	ldr	r3, [pc, #100]	; (35a4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3540:	4d19      	ldr	r5, [pc, #100]	; (35a8 <sys_clock_driver_init+0x6c>)
    3542:	2400      	movs	r4, #0
    3544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    354c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3550:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3558:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    355c:	4b13      	ldr	r3, [pc, #76]	; (35ac <sys_clock_driver_init+0x70>)
    355e:	2602      	movs	r6, #2
    3560:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3564:	2101      	movs	r1, #1
    3566:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    356a:	2011      	movs	r0, #17
    356c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3570:	4622      	mov	r2, r4
    3572:	f7fe fc71 	bl	1e58 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3576:	2011      	movs	r0, #17
    3578:	f7fe fc50 	bl	1e1c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    357c:	4a0c      	ldr	r2, [pc, #48]	; (35b0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    357e:	2301      	movs	r3, #1
    3580:	60ab      	str	r3, [r5, #8]
    3582:	602b      	str	r3, [r5, #0]
    3584:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3586:	4b0b      	ldr	r3, [pc, #44]	; (35b4 <sys_clock_driver_init+0x78>)
    3588:	4a0b      	ldr	r2, [pc, #44]	; (35b8 <sys_clock_driver_init+0x7c>)
    358a:	9300      	str	r3, [sp, #0]
    358c:	9401      	str	r4, [sp, #4]
    358e:	2300      	movs	r3, #0
    3590:	4620      	mov	r0, r4
    3592:	f7ff ff2f 	bl	33f4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3596:	4630      	mov	r0, r6
    3598:	f7ff face 	bl	2b38 <z_nrf_clock_control_lf_on>

	return 0;
}
    359c:	4620      	mov	r0, r4
    359e:	b002      	add	sp, #8
    35a0:	bd70      	pop	{r4, r5, r6, pc}
    35a2:	bf00      	nop
    35a4:	200001b0 	.word	0x200001b0
    35a8:	40011000 	.word	0x40011000
    35ac:	e000e100 	.word	0xe000e100
    35b0:	20000900 	.word	0x20000900
    35b4:	000032dd 	.word	0x000032dd
    35b8:	007fffff 	.word	0x007fffff

000035bc <rtc_nrf_isr>:
{
    35bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    35c0:	4c35      	ldr	r4, [pc, #212]	; (3698 <rtc_nrf_isr+0xdc>)
    35c2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    35c6:	079a      	lsls	r2, r3, #30
    35c8:	d50b      	bpl.n	35e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    35ce:	b143      	cbz	r3, 35e2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    35d0:	4a32      	ldr	r2, [pc, #200]	; (369c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35d2:	2300      	movs	r3, #0
    35d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    35d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    35dc:	6813      	ldr	r3, [r2, #0]
    35de:	3301      	adds	r3, #1
    35e0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    35e2:	f04f 0320 	mov.w	r3, #32
    35e6:	f3ef 8211 	mrs	r2, BASEPRI
    35ea:	f383 8812 	msr	BASEPRI_MAX, r3
    35ee:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    35f2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    35f6:	03db      	lsls	r3, r3, #15
    35f8:	d512      	bpl.n	3620 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    35fa:	f3bf 8f5b 	dmb	ish
    35fe:	4b28      	ldr	r3, [pc, #160]	; (36a0 <rtc_nrf_isr+0xe4>)
    3600:	e853 1f00 	ldrex	r1, [r3]
    3604:	f021 0001 	bic.w	r0, r1, #1
    3608:	e843 0600 	strex	r6, r0, [r3]
    360c:	2e00      	cmp	r6, #0
    360e:	d1f7      	bne.n	3600 <rtc_nrf_isr+0x44>
    3610:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3614:	2900      	cmp	r1, #0
    3616:	d136      	bne.n	3686 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3618:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    361c:	2b00      	cmp	r3, #0
    361e:	d132      	bne.n	3686 <rtc_nrf_isr+0xca>
{
    3620:	2300      	movs	r3, #0
	__asm__ volatile(
    3622:	f382 8811 	msr	BASEPRI, r2
    3626:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    362a:	b34b      	cbz	r3, 3680 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    362c:	f7ff fec0 	bl	33b0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3630:	f04f 0320 	mov.w	r3, #32
    3634:	f3ef 8c11 	mrs	ip, BASEPRI
    3638:	f383 8812 	msr	BASEPRI_MAX, r3
    363c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3640:	4b18      	ldr	r3, [pc, #96]	; (36a4 <rtc_nrf_isr+0xe8>)
    3642:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3646:	42b0      	cmp	r0, r6
    3648:	eb71 0207 	sbcs.w	r2, r1, r7
    364c:	f04f 0200 	mov.w	r2, #0
    3650:	d320      	bcc.n	3694 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3652:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3656:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    365a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    365e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3662:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3668:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    366c:	f38c 8811 	msr	BASEPRI, ip
    3670:	f3bf 8f6f 	isb	sy
		if (handler) {
    3674:	b121      	cbz	r1, 3680 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3676:	9500      	str	r5, [sp, #0]
    3678:	4632      	mov	r2, r6
    367a:	463b      	mov	r3, r7
    367c:	2000      	movs	r0, #0
    367e:	4788      	blx	r1
}
    3680:	b003      	add	sp, #12
    3682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3686:	2300      	movs	r3, #0
    3688:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    368c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3690:	2301      	movs	r3, #1
}
    3692:	e7c6      	b.n	3622 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3694:	4611      	mov	r1, r2
    3696:	e7e9      	b.n	366c <rtc_nrf_isr+0xb0>
    3698:	40011000 	.word	0x40011000
    369c:	20000904 	.word	0x20000904
    36a0:	200008fc 	.word	0x200008fc
    36a4:	200001b0 	.word	0x200001b0

000036a8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36a8:	1c43      	adds	r3, r0, #1
{
    36aa:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36ac:	d021      	beq.n	36f2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    36ae:	2801      	cmp	r0, #1
    36b0:	dd21      	ble.n	36f6 <sys_clock_set_timeout+0x4e>
    36b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36b6:	da20      	bge.n	36fa <sys_clock_set_timeout+0x52>
    36b8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    36ba:	f7ff fe79 	bl	33b0 <z_nrf_rtc_timer_read>
    36be:	4b10      	ldr	r3, [pc, #64]	; (3700 <sys_clock_set_timeout+0x58>)
    36c0:	e9d3 1300 	ldrd	r1, r3, [r3]
    36c4:	1a40      	subs	r0, r0, r1
		ticks = 0;
    36c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36ca:	bf28      	it	cs
    36cc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    36ce:	3001      	adds	r0, #1
    36d0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    36d2:	480c      	ldr	r0, [pc, #48]	; (3704 <sys_clock_set_timeout+0x5c>)
    36d4:	4282      	cmp	r2, r0
    36d6:	bf28      	it	cs
    36d8:	4602      	movcs	r2, r0
    36da:	1852      	adds	r2, r2, r1
    36dc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    36e0:	4909      	ldr	r1, [pc, #36]	; (3708 <sys_clock_set_timeout+0x60>)
    36e2:	9001      	str	r0, [sp, #4]
    36e4:	9100      	str	r1, [sp, #0]
    36e6:	f143 0300 	adc.w	r3, r3, #0
    36ea:	f7ff fe83 	bl	33f4 <compare_set>
}
    36ee:	b002      	add	sp, #8
    36f0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36f2:	4804      	ldr	r0, [pc, #16]	; (3704 <sys_clock_set_timeout+0x5c>)
    36f4:	e7e0      	b.n	36b8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    36f6:	2400      	movs	r4, #0
    36f8:	e7df      	b.n	36ba <sys_clock_set_timeout+0x12>
    36fa:	4c02      	ldr	r4, [pc, #8]	; (3704 <sys_clock_set_timeout+0x5c>)
    36fc:	e7dd      	b.n	36ba <sys_clock_set_timeout+0x12>
    36fe:	bf00      	nop
    3700:	200001c0 	.word	0x200001c0
    3704:	007fffff 	.word	0x007fffff
    3708:	000032dd 	.word	0x000032dd

0000370c <sys_clock_elapsed>:
{
    370c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    370e:	f7ff fe4f 	bl	33b0 <z_nrf_rtc_timer_read>
    3712:	4b02      	ldr	r3, [pc, #8]	; (371c <sys_clock_elapsed+0x10>)
    3714:	681b      	ldr	r3, [r3, #0]
}
    3716:	1ac0      	subs	r0, r0, r3
    3718:	bd08      	pop	{r3, pc}
    371a:	bf00      	nop
    371c:	200001c0 	.word	0x200001c0

00003720 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3720:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3724:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3726:	2801      	cmp	r0, #1
    3728:	4b04      	ldr	r3, [pc, #16]	; (373c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    372a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    372e:	bf18      	it	ne
    3730:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3734:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3736:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    373a:	4770      	bx	lr
    373c:	50000300 	.word	0x50000300

00003740 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3740:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3744:	2b00      	cmp	r3, #0
{
    3746:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3748:	bf07      	ittee	eq
    374a:	4614      	moveq	r4, r2
    374c:	460d      	moveq	r5, r1
    374e:	2401      	movne	r4, #1
    3750:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3752:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3756:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    375a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    375e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3762:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3768:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    376c:	bf08      	it	eq
    376e:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3772:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3776:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    377a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    377e:	bd30      	pop	{r4, r5, pc}
    3780:	50000300 	.word	0x50000300

00003784 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3784:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3788:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    378a:	2801      	cmp	r0, #1
    378c:	4b04      	ldr	r3, [pc, #16]	; (37a0 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    378e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3792:	bf18      	it	ne
    3794:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3798:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    379a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    379e:	4770      	bx	lr
    37a0:	50000300 	.word	0x50000300

000037a4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    37a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    37a6:	ab0b      	add	r3, sp, #44	; 0x2c
    37a8:	9305      	str	r3, [sp, #20]
    37aa:	9303      	str	r3, [sp, #12]
    37ac:	4b05      	ldr	r3, [pc, #20]	; (37c4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    37ae:	9302      	str	r3, [sp, #8]
    37b0:	2300      	movs	r3, #0
    37b2:	e9cd 3300 	strd	r3, r3, [sp]
    37b6:	2201      	movs	r2, #1
    37b8:	4618      	mov	r0, r3
    37ba:	f7fd ffb7 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    37be:	b007      	add	sp, #28
    37c0:	f85d fb04 	ldr.w	pc, [sp], #4
    37c4:	00007058 	.word	0x00007058

000037c8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    37c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    37ca:	f7fd fd83 	bl	12d4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    37ce:	2400      	movs	r4, #0
    37d0:	4b06      	ldr	r3, [pc, #24]	; (37ec <k_sys_fatal_error_handler+0x24>)
    37d2:	9302      	str	r3, [sp, #8]
    37d4:	4620      	mov	r0, r4
    37d6:	e9cd 4400 	strd	r4, r4, [sp]
    37da:	4905      	ldr	r1, [pc, #20]	; (37f0 <k_sys_fatal_error_handler+0x28>)
    37dc:	4623      	mov	r3, r4
    37de:	2201      	movs	r2, #1
    37e0:	f7ff ffe0 	bl	37a4 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    37e4:	4620      	mov	r0, r4
    37e6:	f7ff f897 	bl	2918 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    37ea:	bf00      	nop
    37ec:	00007058 	.word	0x00007058
    37f0:	00006704 	.word	0x00006704

000037f4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    37f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    37fc:	2a08      	cmp	r2, #8
    37fe:	d106      	bne.n	380e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3800:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3804:	2b05      	cmp	r3, #5
    3806:	d802      	bhi.n	380e <nrf52_errata_103+0x1a>
    3808:	4a02      	ldr	r2, [pc, #8]	; (3814 <nrf52_errata_103+0x20>)
    380a:	5cd0      	ldrb	r0, [r2, r3]
    380c:	4770      	bx	lr
        return false;
    380e:	2000      	movs	r0, #0
}
    3810:	4770      	bx	lr
    3812:	bf00      	nop
    3814:	0000707b 	.word	0x0000707b

00003818 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3818:	4a02      	ldr	r2, [pc, #8]	; (3824 <nvmc_wait+0xc>)
    381a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    381e:	2b00      	cmp	r3, #0
    3820:	d0fb      	beq.n	381a <nvmc_wait+0x2>
}
    3822:	4770      	bx	lr
    3824:	4001e000 	.word	0x4001e000

00003828 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3828:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    382a:	f002 fc11 	bl	6050 <nrf52_errata_136>
    382e:	b140      	cbz	r0, 3842 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3834:	2200      	movs	r2, #0
    3836:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    383a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    383e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3842:	f002 fc05 	bl	6050 <nrf52_errata_136>
    3846:	2800      	cmp	r0, #0
    3848:	d046      	beq.n	38d8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    384e:	4b60      	ldr	r3, [pc, #384]	; (39d0 <SystemInit+0x1a8>)
    3850:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3854:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3858:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    385c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3860:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3864:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3868:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    386c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3870:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3874:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3878:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    387c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3880:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3884:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3888:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    388c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3890:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3894:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3898:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    389c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    38a0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    38a4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    38a8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    38ac:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    38b0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    38b4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    38b8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    38bc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    38c0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    38c4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    38c8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    38cc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    38d0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    38d4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    38d8:	f7ff ff8c 	bl	37f4 <nrf52_errata_103>
    38dc:	b118      	cbz	r0, 38e6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    38de:	4b3d      	ldr	r3, [pc, #244]	; (39d4 <SystemInit+0x1ac>)
    38e0:	4a3d      	ldr	r2, [pc, #244]	; (39d8 <SystemInit+0x1b0>)
    38e2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    38e6:	f7ff ff85 	bl	37f4 <nrf52_errata_103>
    38ea:	b118      	cbz	r0, 38f4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    38ec:	4b3b      	ldr	r3, [pc, #236]	; (39dc <SystemInit+0x1b4>)
    38ee:	22fb      	movs	r2, #251	; 0xfb
    38f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    38f4:	f7ff ff7e 	bl	37f4 <nrf52_errata_103>
    38f8:	b170      	cbz	r0, 3918 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    38fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    38fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3902:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3906:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    390a:	f022 020f 	bic.w	r2, r2, #15
    390e:	f003 030f 	and.w	r3, r3, #15
    3912:	4313      	orrs	r3, r2
    3914:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3918:	f7ff ff6c 	bl	37f4 <nrf52_errata_103>
    391c:	b120      	cbz	r0, 3928 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    391e:	4b30      	ldr	r3, [pc, #192]	; (39e0 <SystemInit+0x1b8>)
    3920:	f44f 7200 	mov.w	r2, #512	; 0x200
    3924:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3928:	f002 fb92 	bl	6050 <nrf52_errata_136>
    392c:	b148      	cbz	r0, 3942 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    392e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3932:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3936:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3938:	bf44      	itt	mi
    393a:	f06f 0201 	mvnmi.w	r2, #1
    393e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3946:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    394a:	2a08      	cmp	r2, #8
    394c:	d10e      	bne.n	396c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    394e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    3952:	2b05      	cmp	r3, #5
    3954:	d802      	bhi.n	395c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3956:	4a23      	ldr	r2, [pc, #140]	; (39e4 <SystemInit+0x1bc>)
    3958:	5cd3      	ldrb	r3, [r2, r3]
    395a:	b13b      	cbz	r3, 396c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    395c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3960:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3968:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    396c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3970:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3974:	2a00      	cmp	r2, #0
    3976:	db03      	blt.n	3980 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    397c:	2b00      	cmp	r3, #0
    397e:	da22      	bge.n	39c6 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3980:	4919      	ldr	r1, [pc, #100]	; (39e8 <SystemInit+0x1c0>)
    3982:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3984:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3988:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    398c:	2412      	movs	r4, #18
    nvmc_wait();
    398e:	f7ff ff43 	bl	3818 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3992:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3996:	f7ff ff3f 	bl	3818 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    399a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    399e:	f7ff ff3b 	bl	3818 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    39a2:	2300      	movs	r3, #0
    39a4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    39a8:	f7ff ff36 	bl	3818 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    39ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    39b0:	490e      	ldr	r1, [pc, #56]	; (39ec <SystemInit+0x1c4>)
    39b2:	4b0f      	ldr	r3, [pc, #60]	; (39f0 <SystemInit+0x1c8>)
    39b4:	68ca      	ldr	r2, [r1, #12]
    39b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    39ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    39bc:	60cb      	str	r3, [r1, #12]
    39be:	f3bf 8f4f 	dsb	sy
    __NOP();
    39c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    39c4:	e7fd      	b.n	39c2 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    39c6:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <SystemInit+0x1cc>)
    39c8:	4a0b      	ldr	r2, [pc, #44]	; (39f8 <SystemInit+0x1d0>)
    39ca:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    39cc:	bd10      	pop	{r4, pc}
    39ce:	bf00      	nop
    39d0:	4000c000 	.word	0x4000c000
    39d4:	40005000 	.word	0x40005000
    39d8:	00038148 	.word	0x00038148
    39dc:	4000f000 	.word	0x4000f000
    39e0:	40029000 	.word	0x40029000
    39e4:	00007075 	.word	0x00007075
    39e8:	4001e000 	.word	0x4001e000
    39ec:	e000ed00 	.word	0xe000ed00
    39f0:	05fa0004 	.word	0x05fa0004
    39f4:	20000058 	.word	0x20000058
    39f8:	03d09000 	.word	0x03d09000

000039fc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    39fc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    39fe:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3a00:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3a02:	fab2 f382 	clz	r3, r2
    3a06:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    3a0a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    3a0c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    3a0e:	d014      	beq.n	3a3a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a10:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a14:	fa05 f303 	lsl.w	r3, r5, r3
    3a18:	ea22 0303 	bic.w	r3, r2, r3
    3a1c:	e850 6f00 	ldrex	r6, [r0]
    3a20:	4296      	cmp	r6, r2
    3a22:	d104      	bne.n	3a2e <nrfx_flag32_alloc+0x32>
    3a24:	e840 3c00 	strex	ip, r3, [r0]
    3a28:	f1bc 0f00 	cmp.w	ip, #0
    3a2c:	d1f6      	bne.n	3a1c <nrfx_flag32_alloc+0x20>
    3a2e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a32:	d1e5      	bne.n	3a00 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3a34:	4802      	ldr	r0, [pc, #8]	; (3a40 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3a36:	700c      	strb	r4, [r1, #0]
}
    3a38:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3a3a:	4802      	ldr	r0, [pc, #8]	; (3a44 <nrfx_flag32_alloc+0x48>)
    3a3c:	e7fc      	b.n	3a38 <nrfx_flag32_alloc+0x3c>
    3a3e:	bf00      	nop
    3a40:	0bad0000 	.word	0x0bad0000
    3a44:	0bad0002 	.word	0x0bad0002

00003a48 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3a48:	6803      	ldr	r3, [r0, #0]
    3a4a:	40cb      	lsrs	r3, r1
    3a4c:	07db      	lsls	r3, r3, #31
{
    3a4e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3a50:	d415      	bmi.n	3a7e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3a52:	2301      	movs	r3, #1
    3a54:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3a58:	6803      	ldr	r3, [r0, #0]
    3a5a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3a5e:	ea41 0203 	orr.w	r2, r1, r3
    3a62:	e850 4f00 	ldrex	r4, [r0]
    3a66:	429c      	cmp	r4, r3
    3a68:	d104      	bne.n	3a74 <nrfx_flag32_free+0x2c>
    3a6a:	e840 2c00 	strex	ip, r2, [r0]
    3a6e:	f1bc 0f00 	cmp.w	ip, #0
    3a72:	d1f6      	bne.n	3a62 <nrfx_flag32_free+0x1a>
    3a74:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a78:	d1ee      	bne.n	3a58 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3a7a:	4802      	ldr	r0, [pc, #8]	; (3a84 <nrfx_flag32_free+0x3c>)
}
    3a7c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3a7e:	4802      	ldr	r0, [pc, #8]	; (3a88 <nrfx_flag32_free+0x40>)
    3a80:	e7fc      	b.n	3a7c <nrfx_flag32_free+0x34>
    3a82:	bf00      	nop
    3a84:	0bad0000 	.word	0x0bad0000
    3a88:	0bad0004 	.word	0x0bad0004

00003a8c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3a8e:	4604      	mov	r4, r0
    3a90:	b118      	cbz	r0, 3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a92:	2801      	cmp	r0, #1
    3a94:	d029      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3a96:	b003      	add	sp, #12
    3a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    3a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a9e:	2202      	movs	r2, #2
    3aa0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aa4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3aa8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3aac:	2201      	movs	r2, #1
    3aae:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3ab0:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3ab2:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3ab4:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3ab8:	bf14      	ite	ne
    3aba:	2500      	movne	r5, #0
    3abc:	f10d 0507 	addeq.w	r5, sp, #7
    3ac0:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ac4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3ac8:	b1d4      	cbz	r4, 3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    3aca:	2c01      	cmp	r4, #1
    3acc:	d1e3      	bne.n	3a96 <clock_stop+0xa>
            if (p_clk_src != NULL)
    3ace:	b125      	cbz	r5, 3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3ad0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3ad4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3ad8:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ada:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3ade:	03db      	lsls	r3, r3, #15
    3ae0:	d418      	bmi.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
            m_clock_cb.hfclk_started = false;
    3ae2:	4b13      	ldr	r3, [pc, #76]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3ae4:	2200      	movs	r2, #0
    3ae6:	715a      	strb	r2, [r3, #5]
    3ae8:	e7d5      	b.n	3a96 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    3aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aee:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3af0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3af4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3af8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3afc:	6058      	str	r0, [r3, #4]
}
    3afe:	e7d7      	b.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
            if (p_clk_src != NULL)
    3b00:	b125      	cbz	r5, 3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3b02:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3b06:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3b0a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b0c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3b10:	03da      	lsls	r2, r3, #15
    3b12:	d5c0      	bpl.n	3a96 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3b14:	b92d      	cbnz	r5, 3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b16:	2001      	movs	r0, #1
    3b18:	f002 faa4 	bl	6064 <nrfx_busy_wait>
    3b1c:	3f01      	subs	r7, #1
    3b1e:	d1d3      	bne.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    3b20:	e003      	b.n	3b2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x92>
    3b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3b26:	2b01      	cmp	r3, #1
    3b28:	d0f5      	beq.n	3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3b2a:	2c01      	cmp	r4, #1
    3b2c:	d0d9      	beq.n	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
    3b2e:	e7b2      	b.n	3a96 <clock_stop+0xa>
    3b30:	20000908 	.word	0x20000908

00003b34 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3b34:	4b04      	ldr	r3, [pc, #16]	; (3b48 <nrfx_clock_init+0x14>)
    3b36:	791a      	ldrb	r2, [r3, #4]
    3b38:	b922      	cbnz	r2, 3b44 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3b3a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3b3c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3b3e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3b40:	4802      	ldr	r0, [pc, #8]	; (3b4c <nrfx_clock_init+0x18>)
    3b42:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3b44:	4802      	ldr	r0, [pc, #8]	; (3b50 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3b46:	4770      	bx	lr
    3b48:	20000908 	.word	0x20000908
    3b4c:	0bad0000 	.word	0x0bad0000
    3b50:	0bad000c 	.word	0x0bad000c

00003b54 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3b58:	b510      	push	{r4, lr}
    3b5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3b5e:	b16a      	cbz	r2, 3b7c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b60:	2200      	movs	r2, #0
    3b62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3b66:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3b6a:	2201      	movs	r2, #1
    3b6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3b70:	4b11      	ldr	r3, [pc, #68]	; (3bb8 <nrfx_power_clock_irq_handler+0x64>)
    3b72:	7958      	ldrb	r0, [r3, #5]
    3b74:	b910      	cbnz	r0, 3b7c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3b76:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b80:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3b84:	b172      	cbz	r2, 3ba4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b86:	2200      	movs	r2, #0
    3b88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3b8c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3b90:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b94:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3b98:	0792      	lsls	r2, r2, #30
    3b9a:	d104      	bne.n	3ba6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3b9c:	2201      	movs	r2, #1
    3b9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ba2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3ba4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3ba6:	2202      	movs	r2, #2
    3ba8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3bac:	4b02      	ldr	r3, [pc, #8]	; (3bb8 <nrfx_power_clock_irq_handler+0x64>)
}
    3bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	2001      	movs	r0, #1
    3bb6:	4718      	bx	r3
    3bb8:	20000908 	.word	0x20000908

00003bbc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3bbc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3bbe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3bc2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3bc4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3bc6:	6002      	str	r2, [r0, #0]
}
    3bc8:	4802      	ldr	r0, [pc, #8]	; (3bd4 <nrf_gpio_pin_port_decode+0x18>)
    3bca:	bf18      	it	ne
    3bcc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3bd0:	4770      	bx	lr
    3bd2:	bf00      	nop
    3bd4:	50000300 	.word	0x50000300

00003bd8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3bd8:	4b03      	ldr	r3, [pc, #12]	; (3be8 <pin_in_use_by_te+0x10>)
    3bda:	3008      	adds	r0, #8
    3bdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3be0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3be4:	4770      	bx	lr
    3be6:	bf00      	nop
    3be8:	2000005c 	.word	0x2000005c

00003bec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3bec:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bee:	f100 0308 	add.w	r3, r0, #8
    3bf2:	4c0c      	ldr	r4, [pc, #48]	; (3c24 <call_handler+0x38>)
    3bf4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3bf8:	05da      	lsls	r2, r3, #23
{
    3bfa:	4605      	mov	r5, r0
    3bfc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bfe:	d507      	bpl.n	3c10 <call_handler+0x24>
    3c00:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3c04:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3c08:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3c0c:	6852      	ldr	r2, [r2, #4]
    3c0e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3c10:	68a3      	ldr	r3, [r4, #8]
    3c12:	b12b      	cbz	r3, 3c20 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3c14:	68e2      	ldr	r2, [r4, #12]
    3c16:	4631      	mov	r1, r6
    3c18:	4628      	mov	r0, r5
    }
}
    3c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3c1e:	4718      	bx	r3
}
    3c20:	bd70      	pop	{r4, r5, r6, pc}
    3c22:	bf00      	nop
    3c24:	2000005c 	.word	0x2000005c

00003c28 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3c28:	4a12      	ldr	r2, [pc, #72]	; (3c74 <release_handler+0x4c>)
    3c2a:	3008      	adds	r0, #8
{
    3c2c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3c2e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3c32:	05d9      	lsls	r1, r3, #23
    3c34:	d51b      	bpl.n	3c6e <release_handler+0x46>
    3c36:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3c3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3c3e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3c42:	f102 0410 	add.w	r4, r2, #16
    3c46:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3c48:	f834 3b02 	ldrh.w	r3, [r4], #2
    3c4c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3c50:	d003      	beq.n	3c5a <release_handler+0x32>
    3c52:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3c56:	4299      	cmp	r1, r3
    3c58:	d009      	beq.n	3c6e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3c5a:	3001      	adds	r0, #1
    3c5c:	2830      	cmp	r0, #48	; 0x30
    3c5e:	d1f3      	bne.n	3c48 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3c60:	2300      	movs	r3, #0
    3c62:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3c66:	4804      	ldr	r0, [pc, #16]	; (3c78 <release_handler+0x50>)
}
    3c68:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3c6a:	f7ff beed 	b.w	3a48 <nrfx_flag32_free>
}
    3c6e:	bc10      	pop	{r4}
    3c70:	4770      	bx	lr
    3c72:	bf00      	nop
    3c74:	2000005c 	.word	0x2000005c
    3c78:	200000d0 	.word	0x200000d0

00003c7c <pin_handler_trigger_uninit>:
{
    3c7c:	b538      	push	{r3, r4, r5, lr}
    3c7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3c80:	f7ff ffaa 	bl	3bd8 <pin_in_use_by_te>
    3c84:	4c09      	ldr	r4, [pc, #36]	; (3cac <pin_handler_trigger_uninit+0x30>)
    3c86:	f102 0508 	add.w	r5, r2, #8
    3c8a:	b140      	cbz	r0, 3c9e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c8c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3c90:	4907      	ldr	r1, [pc, #28]	; (3cb0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3c92:	0b5b      	lsrs	r3, r3, #13
    3c94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3c98:	2000      	movs	r0, #0
    3c9a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3c9e:	4610      	mov	r0, r2
    3ca0:	f7ff ffc2 	bl	3c28 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3ca4:	2300      	movs	r3, #0
    3ca6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3caa:	bd38      	pop	{r3, r4, r5, pc}
    3cac:	2000005c 	.word	0x2000005c
    3cb0:	40006000 	.word	0x40006000

00003cb4 <nrfx_gpiote_input_configure>:
{
    3cb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3cb8:	4604      	mov	r4, r0
    3cba:	4617      	mov	r7, r2
    3cbc:	461d      	mov	r5, r3
    if (p_input_config)
    3cbe:	b321      	cbz	r1, 3d0a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cc0:	4e4e      	ldr	r6, [pc, #312]	; (3dfc <nrfx_gpiote_input_configure+0x148>)
    3cc2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3cc6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3cca:	079b      	lsls	r3, r3, #30
    3ccc:	d506      	bpl.n	3cdc <nrfx_gpiote_input_configure+0x28>
    3cce:	f7ff ff83 	bl	3bd8 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    3cd2:	b118      	cbz	r0, 3cdc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    3cd4:	484a      	ldr	r0, [pc, #296]	; (3e00 <nrfx_gpiote_input_configure+0x14c>)
}
    3cd6:	b004      	add	sp, #16
    3cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3cdc:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3cde:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3ce2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3ce6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3cea:	f10d 020f 	add.w	r2, sp, #15
    3cee:	460b      	mov	r3, r1
    3cf0:	4620      	mov	r0, r4
    3cf2:	f10d 010e 	add.w	r1, sp, #14
    3cf6:	f002 fa03 	bl	6100 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3cfa:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3cfe:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3d02:	f043 0301 	orr.w	r3, r3, #1
    3d06:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    3d0a:	b197      	cbz	r7, 3d32 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d0c:	4b3b      	ldr	r3, [pc, #236]	; (3dfc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3d0e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3d10:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d12:	f104 0008 	add.w	r0, r4, #8
    3d16:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3d1a:	078f      	lsls	r7, r1, #30
    3d1c:	d50c      	bpl.n	3d38 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    3d1e:	2a00      	cmp	r2, #0
    3d20:	d1d8      	bne.n	3cd4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3d22:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3d26:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3d2a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3d2e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3d32:	bbcd      	cbnz	r5, 3da8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    3d34:	4833      	ldr	r0, [pc, #204]	; (3e04 <nrfx_gpiote_input_configure+0x150>)
    3d36:	e7ce      	b.n	3cd6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3d38:	f021 0120 	bic.w	r1, r1, #32
    3d3c:	04c9      	lsls	r1, r1, #19
    3d3e:	0cc9      	lsrs	r1, r1, #19
    3d40:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3d44:	2a00      	cmp	r2, #0
    3d46:	d0ec      	beq.n	3d22 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    3d48:	2e03      	cmp	r6, #3
    3d4a:	d8c3      	bhi.n	3cd4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3d4c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3d4e:	b92e      	cbnz	r6, 3d5c <nrfx_gpiote_input_configure+0xa8>
    3d50:	4a2d      	ldr	r2, [pc, #180]	; (3e08 <nrfx_gpiote_input_configure+0x154>)
    3d52:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3d56:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3d5a:	e7e2      	b.n	3d22 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d5c:	00ba      	lsls	r2, r7, #2
    3d5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3d62:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d66:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3d6a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d6e:	f02c 0c03 	bic.w	ip, ip, #3
    3d72:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3d76:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d7a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3d7e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3d82:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d86:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3d8a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3d8e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3d92:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3d96:	ea4c 0c0e 	orr.w	ip, ip, lr
    3d9a:	f041 0120 	orr.w	r1, r1, #32
    3d9e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3da2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3da6:	e7bc      	b.n	3d22 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3da8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3dac:	4620      	mov	r0, r4
    3dae:	f7ff ff3b 	bl	3c28 <release_handler>
    if (!handler)
    3db2:	2e00      	cmp	r6, #0
    3db4:	d0be      	beq.n	3d34 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3db6:	4d11      	ldr	r5, [pc, #68]	; (3dfc <nrfx_gpiote_input_configure+0x148>)
    3db8:	682b      	ldr	r3, [r5, #0]
    3dba:	429e      	cmp	r6, r3
    3dbc:	d104      	bne.n	3dc8 <nrfx_gpiote_input_configure+0x114>
    3dbe:	686b      	ldr	r3, [r5, #4]
    3dc0:	429f      	cmp	r7, r3
    3dc2:	d101      	bne.n	3dc8 <nrfx_gpiote_input_configure+0x114>
    3dc4:	2200      	movs	r2, #0
    3dc6:	e00a      	b.n	3dde <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3dc8:	4810      	ldr	r0, [pc, #64]	; (3e0c <nrfx_gpiote_input_configure+0x158>)
    3dca:	f10d 010f 	add.w	r1, sp, #15
    3dce:	f7ff fe15 	bl	39fc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3dd2:	4b0c      	ldr	r3, [pc, #48]	; (3e04 <nrfx_gpiote_input_configure+0x150>)
    3dd4:	4298      	cmp	r0, r3
    3dd6:	f47f af7e 	bne.w	3cd6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    3dda:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3dde:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3de2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3de6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3de8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3dea:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3dee:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3df6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3dfa:	e79b      	b.n	3d34 <nrfx_gpiote_input_configure+0x80>
    3dfc:	2000005c 	.word	0x2000005c
    3e00:	0bad0004 	.word	0x0bad0004
    3e04:	0bad0000 	.word	0x0bad0000
    3e08:	40006000 	.word	0x40006000
    3e0c:	200000d0 	.word	0x200000d0

00003e10 <nrfx_gpiote_output_configure>:
{
    3e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e12:	4604      	mov	r4, r0
    3e14:	b085      	sub	sp, #20
    3e16:	4615      	mov	r5, r2
    if (p_config)
    3e18:	b319      	cbz	r1, 3e62 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e1a:	4e33      	ldr	r6, [pc, #204]	; (3ee8 <nrfx_gpiote_output_configure+0xd8>)
    3e1c:	f100 0708 	add.w	r7, r0, #8
    3e20:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3e24:	0793      	lsls	r3, r2, #30
    3e26:	d403      	bmi.n	3e30 <nrfx_gpiote_output_configure+0x20>
    3e28:	f7ff fed6 	bl	3bd8 <pin_in_use_by_te>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d158      	bne.n	3ee2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3e30:	f012 0f1c 	tst.w	r2, #28
    3e34:	d002      	beq.n	3e3c <nrfx_gpiote_output_configure+0x2c>
    3e36:	784b      	ldrb	r3, [r1, #1]
    3e38:	2b01      	cmp	r3, #1
    3e3a:	d052      	beq.n	3ee2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3e3c:	2301      	movs	r3, #1
    3e3e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3e42:	2300      	movs	r3, #0
    3e44:	e9cd 1300 	strd	r1, r3, [sp]
    3e48:	1c4a      	adds	r2, r1, #1
    3e4a:	1c8b      	adds	r3, r1, #2
    3e4c:	4620      	mov	r0, r4
    3e4e:	f10d 010f 	add.w	r1, sp, #15
    3e52:	f002 f955 	bl	6100 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3e56:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3e5a:	f043 0303 	orr.w	r3, r3, #3
    3e5e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3e62:	b915      	cbnz	r5, 3e6a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3e64:	4821      	ldr	r0, [pc, #132]	; (3eec <nrfx_gpiote_output_configure+0xdc>)
}
    3e66:	b005      	add	sp, #20
    3e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e6a:	4e1f      	ldr	r6, [pc, #124]	; (3ee8 <nrfx_gpiote_output_configure+0xd8>)
    3e6c:	f104 0708 	add.w	r7, r4, #8
    3e70:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3e74:	0783      	lsls	r3, r0, #30
    3e76:	d534      	bpl.n	3ee2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3e78:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3e7c:	4661      	mov	r1, ip
    3e7e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3e80:	f020 0020 	bic.w	r0, r0, #32
    3e84:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3e88:	04c0      	lsls	r0, r0, #19
    3e8a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3e8e:	0cc0      	lsrs	r0, r0, #19
    3e90:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e94:	2300      	movs	r3, #0
    3e96:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3e9a:	786a      	ldrb	r2, [r5, #1]
    3e9c:	2a00      	cmp	r2, #0
    3e9e:	d0e1      	beq.n	3e64 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3ea0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3ea4:	78ad      	ldrb	r5, [r5, #2]
    3ea6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3eaa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3eae:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3eb2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3eb6:	0223      	lsls	r3, r4, #8
    3eb8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3ebc:	0412      	lsls	r2, r2, #16
    3ebe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3ec2:	ea43 030e 	orr.w	r3, r3, lr
    3ec6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3ec8:	052a      	lsls	r2, r5, #20
    3eca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3ece:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3ed2:	4313      	orrs	r3, r2
    3ed4:	f040 0020 	orr.w	r0, r0, #32
    3ed8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3edc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3ee0:	e7c0      	b.n	3e64 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    3ee2:	4803      	ldr	r0, [pc, #12]	; (3ef0 <nrfx_gpiote_output_configure+0xe0>)
    3ee4:	e7bf      	b.n	3e66 <nrfx_gpiote_output_configure+0x56>
    3ee6:	bf00      	nop
    3ee8:	2000005c 	.word	0x2000005c
    3eec:	0bad0000 	.word	0x0bad0000
    3ef0:	0bad0004 	.word	0x0bad0004

00003ef4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3ef4:	4b01      	ldr	r3, [pc, #4]	; (3efc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3ef6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3efa:	4770      	bx	lr
    3efc:	2000005c 	.word	0x2000005c

00003f00 <nrfx_gpiote_channel_get>:
{
    3f00:	b508      	push	{r3, lr}
    3f02:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3f04:	f7ff fe68 	bl	3bd8 <pin_in_use_by_te>
    3f08:	b138      	cbz	r0, 3f1a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f0a:	4b05      	ldr	r3, [pc, #20]	; (3f20 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3f0c:	4805      	ldr	r0, [pc, #20]	; (3f24 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f0e:	3208      	adds	r2, #8
    3f10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3f14:	0b5b      	lsrs	r3, r3, #13
    3f16:	700b      	strb	r3, [r1, #0]
}
    3f18:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f1a:	4803      	ldr	r0, [pc, #12]	; (3f28 <nrfx_gpiote_channel_get+0x28>)
    3f1c:	e7fc      	b.n	3f18 <nrfx_gpiote_channel_get+0x18>
    3f1e:	bf00      	nop
    3f20:	2000005c 	.word	0x2000005c
    3f24:	0bad0000 	.word	0x0bad0000
    3f28:	0bad0004 	.word	0x0bad0004

00003f2c <nrfx_gpiote_init>:
{
    3f2c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3f2e:	4c0f      	ldr	r4, [pc, #60]	; (3f6c <nrfx_gpiote_init+0x40>)
    3f30:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3f34:	b9bd      	cbnz	r5, 3f66 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3f36:	2260      	movs	r2, #96	; 0x60
    3f38:	4629      	mov	r1, r5
    3f3a:	f104 0010 	add.w	r0, r4, #16
    3f3e:	f001 fe31 	bl	5ba4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3f42:	2006      	movs	r0, #6
    3f44:	f7fd ff6a 	bl	1e1c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f48:	4b09      	ldr	r3, [pc, #36]	; (3f70 <nrfx_gpiote_init+0x44>)
    return err_code;
    3f4a:	480a      	ldr	r0, [pc, #40]	; (3f74 <nrfx_gpiote_init+0x48>)
    3f4c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3f50:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3f54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3f58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3f5c:	2301      	movs	r3, #1
    3f5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3f62:	6763      	str	r3, [r4, #116]	; 0x74
}
    3f64:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3f66:	4804      	ldr	r0, [pc, #16]	; (3f78 <nrfx_gpiote_init+0x4c>)
    3f68:	e7fc      	b.n	3f64 <nrfx_gpiote_init+0x38>
    3f6a:	bf00      	nop
    3f6c:	2000005c 	.word	0x2000005c
    3f70:	40006000 	.word	0x40006000
    3f74:	0bad0000 	.word	0x0bad0000
    3f78:	0bad0005 	.word	0x0bad0005

00003f7c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3f7c:	4b03      	ldr	r3, [pc, #12]	; (3f8c <nrfx_gpiote_is_init+0x10>)
    3f7e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3f82:	3800      	subs	r0, #0
    3f84:	bf18      	it	ne
    3f86:	2001      	movne	r0, #1
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	2000005c 	.word	0x2000005c

00003f90 <nrfx_gpiote_channel_free>:
{
    3f90:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3f92:	4801      	ldr	r0, [pc, #4]	; (3f98 <nrfx_gpiote_channel_free+0x8>)
    3f94:	f7ff bd58 	b.w	3a48 <nrfx_flag32_free>
    3f98:	200000cc 	.word	0x200000cc

00003f9c <nrfx_gpiote_channel_alloc>:
{
    3f9c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3f9e:	4801      	ldr	r0, [pc, #4]	; (3fa4 <nrfx_gpiote_channel_alloc+0x8>)
    3fa0:	f7ff bd2c 	b.w	39fc <nrfx_flag32_alloc>
    3fa4:	200000cc 	.word	0x200000cc

00003fa8 <nrfx_gpiote_trigger_enable>:
{
    3fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3faa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3fac:	f7ff fe14 	bl	3bd8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3fb0:	f104 0208 	add.w	r2, r4, #8
    3fb4:	4b1e      	ldr	r3, [pc, #120]	; (4030 <nrfx_gpiote_trigger_enable+0x88>)
    3fb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3fba:	b1e8      	cbz	r0, 3ff8 <nrfx_gpiote_trigger_enable+0x50>
    3fbc:	f013 0502 	ands.w	r5, r3, #2
    3fc0:	d11a      	bne.n	3ff8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fc2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3fc4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3fc6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3fca:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3fce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3fd2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fd6:	6005      	str	r5, [r0, #0]
    3fd8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3fda:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3fde:	f040 0001 	orr.w	r0, r0, #1
    3fe2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3fe6:	b129      	cbz	r1, 3ff4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3fe8:	2201      	movs	r2, #1
    3fea:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3fee:	4a11      	ldr	r2, [pc, #68]	; (4034 <nrfx_gpiote_trigger_enable+0x8c>)
    3ff0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3ff4:	b003      	add	sp, #12
    3ff6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ff8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3ffc:	2b04      	cmp	r3, #4
    3ffe:	d012      	beq.n	4026 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4000:	2b05      	cmp	r3, #5
    4002:	d012      	beq.n	402a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4004:	a801      	add	r0, sp, #4
    4006:	9401      	str	r4, [sp, #4]
    4008:	f7ff fdd8 	bl	3bbc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    400c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    400e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4012:	40d9      	lsrs	r1, r3
    4014:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4018:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    401a:	4620      	mov	r0, r4
}
    401c:	b003      	add	sp, #12
    401e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4022:	f002 b8b4 	b.w	618e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4026:	2103      	movs	r1, #3
    4028:	e7f7      	b.n	401a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    402a:	2102      	movs	r1, #2
    402c:	e7f5      	b.n	401a <nrfx_gpiote_trigger_enable+0x72>
    402e:	bf00      	nop
    4030:	2000005c 	.word	0x2000005c
    4034:	40006000 	.word	0x40006000

00004038 <nrfx_gpiote_trigger_disable>:
{
    4038:	b508      	push	{r3, lr}
    403a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    403c:	f7ff fdcc 	bl	3bd8 <pin_in_use_by_te>
    4040:	b1c0      	cbz	r0, 4074 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4042:	f102 0108 	add.w	r1, r2, #8
    4046:	4b0e      	ldr	r3, [pc, #56]	; (4080 <nrfx_gpiote_trigger_disable+0x48>)
    4048:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    404c:	0799      	lsls	r1, r3, #30
    404e:	d411      	bmi.n	4074 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4050:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4052:	2201      	movs	r2, #1
    4054:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4056:	009b      	lsls	r3, r3, #2
    4058:	490a      	ldr	r1, [pc, #40]	; (4084 <nrfx_gpiote_trigger_disable+0x4c>)
    405a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    405e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4062:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4066:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    406a:	f022 0203 	bic.w	r2, r2, #3
    406e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4072:	bd08      	pop	{r3, pc}
    4074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4078:	2100      	movs	r1, #0
    407a:	4610      	mov	r0, r2
    407c:	f002 b887 	b.w	618e <nrf_gpio_cfg_sense_set>
    4080:	2000005c 	.word	0x2000005c
    4084:	40006000 	.word	0x40006000

00004088 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4088:	4b0e      	ldr	r3, [pc, #56]	; (40c4 <nrfx_gpiote_pin_uninit+0x3c>)
    408a:	f100 0208 	add.w	r2, r0, #8
{
    408e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4090:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4094:	07db      	lsls	r3, r3, #31
{
    4096:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4098:	d511      	bpl.n	40be <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    409a:	f7ff ffcd 	bl	4038 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    409e:	4620      	mov	r0, r4
    40a0:	f7ff fdec 	bl	3c7c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40a4:	a801      	add	r0, sp, #4
    40a6:	9401      	str	r4, [sp, #4]
    40a8:	f7ff fd88 	bl	3bbc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40ac:	9b01      	ldr	r3, [sp, #4]
    40ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    40b2:	2202      	movs	r2, #2
    40b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    40b8:	4803      	ldr	r0, [pc, #12]	; (40c8 <nrfx_gpiote_pin_uninit+0x40>)
}
    40ba:	b002      	add	sp, #8
    40bc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    40be:	4803      	ldr	r0, [pc, #12]	; (40cc <nrfx_gpiote_pin_uninit+0x44>)
    40c0:	e7fb      	b.n	40ba <nrfx_gpiote_pin_uninit+0x32>
    40c2:	bf00      	nop
    40c4:	2000005c 	.word	0x2000005c
    40c8:	0bad0000 	.word	0x0bad0000
    40cc:	0bad0004 	.word	0x0bad0004

000040d0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    40d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d4:	4b64      	ldr	r3, [pc, #400]	; (4268 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    40d6:	4865      	ldr	r0, [pc, #404]	; (426c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40d8:	4965      	ldr	r1, [pc, #404]	; (4270 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    40da:	2600      	movs	r6, #0
{
    40dc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    40de:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40e0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40e2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    40e4:	b135      	cbz	r5, 40f4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    40e6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    40ea:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40ec:	bf1e      	ittt	ne
    40ee:	601c      	strne	r4, [r3, #0]
    40f0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    40f2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40f4:	3304      	adds	r3, #4
    40f6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    40f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40fc:	d1f1      	bne.n	40e2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40fe:	f8df 816c 	ldr.w	r8, [pc, #364]	; 426c <nrfx_gpiote_irq_handler+0x19c>
    4102:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4106:	2b00      	cmp	r3, #0
    4108:	f000 8091 	beq.w	422e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    410c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4110:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4114:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4116:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    411a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    411e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4120:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4124:	2700      	movs	r7, #0
            while (latch[i])
    4126:	f10d 0910 	add.w	r9, sp, #16
    412a:	017b      	lsls	r3, r7, #5
    412c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    412e:	f04f 0a01 	mov.w	sl, #1
    4132:	e049      	b.n	41c8 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    4134:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4136:	4a4f      	ldr	r2, [pc, #316]	; (4274 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4138:	fa94 f4a4 	rbit	r4, r4
    413c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4140:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4142:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4146:	08e0      	lsrs	r0, r4, #3
    4148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    414c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    414e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4152:	fa0a fc02 	lsl.w	ip, sl, r2
    4156:	f819 2000 	ldrb.w	r2, [r9, r0]
    415a:	ea22 020c 	bic.w	r2, r2, ip
    415e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4162:	a803      	add	r0, sp, #12
    4164:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4168:	0899      	lsrs	r1, r3, #2
    416a:	f7ff fd27 	bl	3bbc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    416e:	9a03      	ldr	r2, [sp, #12]
    4170:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4174:	074b      	lsls	r3, r1, #29
    4176:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    417a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    417c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4180:	d529      	bpl.n	41d6 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4182:	4620      	mov	r0, r4
    4184:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4186:	b2d5      	uxtb	r5, r2
    4188:	f7ff fd30 	bl	3bec <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    418c:	a803      	add	r0, sp, #12
    418e:	9403      	str	r4, [sp, #12]
    4190:	f7ff fd14 	bl	3bbc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4194:	9b03      	ldr	r3, [sp, #12]
    4196:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    419a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    419e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    41a2:	429d      	cmp	r5, r3
    41a4:	d107      	bne.n	41b6 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    41a6:	2100      	movs	r1, #0
    41a8:	4620      	mov	r0, r4
    41aa:	f001 fff0 	bl	618e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    41ae:	4629      	mov	r1, r5
    41b0:	4620      	mov	r0, r4
    41b2:	f001 ffec 	bl	618e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41b6:	a803      	add	r0, sp, #12
    41b8:	9403      	str	r4, [sp, #12]
    41ba:	f7ff fcff 	bl	3bbc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    41be:	9b03      	ldr	r3, [sp, #12]
    41c0:	fa0a f303 	lsl.w	r3, sl, r3
    41c4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    41c8:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    41cc:	2c00      	cmp	r4, #0
    41ce:	d1b1      	bne.n	4134 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    41d0:	b9cf      	cbnz	r7, 4206 <nrfx_gpiote_irq_handler+0x136>
    41d2:	2701      	movs	r7, #1
    41d4:	e7a9      	b.n	412a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    41d6:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    41d8:	bf0c      	ite	eq
    41da:	2103      	moveq	r1, #3
    41dc:	2102      	movne	r1, #2
    41de:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    41e0:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    41e2:	f001 ffd4 	bl	618e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    41e6:	2d03      	cmp	r5, #3
    41e8:	d004      	beq.n	41f4 <nrfx_gpiote_irq_handler+0x124>
    41ea:	9a01      	ldr	r2, [sp, #4]
    41ec:	2a02      	cmp	r2, #2
    41ee:	d106      	bne.n	41fe <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    41f0:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    41f2:	d1e0      	bne.n	41b6 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    41f4:	4659      	mov	r1, fp
    41f6:	4620      	mov	r0, r4
    41f8:	f7ff fcf8 	bl	3bec <call_handler>
    41fc:	e7db      	b.n	41b6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    41fe:	2a03      	cmp	r2, #3
    4200:	d1d9      	bne.n	41b6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4202:	2d02      	cmp	r5, #2
    4204:	e7f5      	b.n	41f2 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4206:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    420a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    420e:	491a      	ldr	r1, [pc, #104]	; (4278 <nrfx_gpiote_irq_handler+0x1a8>)
    4210:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4214:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4218:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    421a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    421e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    4222:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4224:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4228:	4313      	orrs	r3, r2
    422a:	f47f af7b 	bne.w	4124 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    422e:	2401      	movs	r4, #1
    while (mask)
    4230:	b916      	cbnz	r6, 4238 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4232:	b007      	add	sp, #28
    4234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4238:	fa96 f3a6 	rbit	r3, r6
    423c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4240:	fa04 f203 	lsl.w	r2, r4, r3
    4244:	009b      	lsls	r3, r3, #2
    4246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    424a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    424e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4252:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4256:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    425a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    425e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4262:	f7ff fcc3 	bl	3bec <call_handler>
    4266:	e7e3      	b.n	4230 <nrfx_gpiote_irq_handler+0x160>
    4268:	40006100 	.word	0x40006100
    426c:	40006000 	.word	0x40006000
    4270:	40006120 	.word	0x40006120
    4274:	2000005c 	.word	0x2000005c
    4278:	50000300 	.word	0x50000300

0000427c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    427c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    427e:	4801      	ldr	r0, [pc, #4]	; (4284 <nrfx_ppi_channel_alloc+0x8>)
    4280:	f7ff bbbc 	b.w	39fc <nrfx_flag32_alloc>
    4284:	200000d8 	.word	0x200000d8

00004288 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4288:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    428a:	4c11      	ldr	r4, [pc, #68]	; (42d0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    428c:	4a11      	ldr	r2, [pc, #68]	; (42d4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    428e:	4912      	ldr	r1, [pc, #72]	; (42d8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4290:	2303      	movs	r3, #3
    4292:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4294:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4296:	4b11      	ldr	r3, [pc, #68]	; (42dc <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4298:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    429a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    429c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    42a0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    42a2:	2300      	movs	r3, #0
    42a4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    42a6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    42a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    42aa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    42ac:	4a0c      	ldr	r2, [pc, #48]	; (42e0 <_DoInit+0x58>)
    42ae:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    42b0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    42b2:	2210      	movs	r2, #16
    42b4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    42b6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    42b8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    42ba:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    42bc:	f001 fc4d 	bl	5b5a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    42c0:	4908      	ldr	r1, [pc, #32]	; (42e4 <_DoInit+0x5c>)
    42c2:	4620      	mov	r0, r4
    42c4:	f001 fc49 	bl	5b5a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    42c8:	2320      	movs	r3, #32
    42ca:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    42cc:	bd10      	pop	{r4, pc}
    42ce:	bf00      	nop
    42d0:	20000910 	.word	0x20000910
    42d4:	00007081 	.word	0x00007081
    42d8:	0000708a 	.word	0x0000708a
    42dc:	20000be0 	.word	0x20000be0
    42e0:	20000bd0 	.word	0x20000bd0
    42e4:	0000708e 	.word	0x0000708e

000042e8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    42e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    42ec:	4f23      	ldr	r7, [pc, #140]	; (437c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    42ee:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    42f2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    42f4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    42f8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    42fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    42fc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    42fe:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4300:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4302:	d834      	bhi.n	436e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4304:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4308:	ebaa 0905 	sub.w	r9, sl, r5
    430c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4310:	4294      	cmp	r4, r2
    4312:	d811      	bhi.n	4338 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4314:	f04f 0918 	mov.w	r9, #24
    4318:	fb06 9309 	mla	r3, r6, r9, r9
    431c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    431e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4320:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4322:	4641      	mov	r1, r8
    4324:	4428      	add	r0, r5
    4326:	f001 fc32 	bl	5b8e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    432a:	fb09 7606 	mla	r6, r9, r6, r7
    432e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4330:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4332:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4338:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    433a:	429c      	cmp	r4, r3
    433c:	d81b      	bhi.n	4376 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    433e:	fb00 bb0b 	mla	fp, r0, fp, fp
    4342:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4344:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4346:	f8db 0004 	ldr.w	r0, [fp, #4]
    434a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    434c:	4428      	add	r0, r5
    434e:	f001 fc1e 	bl	5b8e <memcpy>
      if (NumBytes) {
    4352:	ebb4 040a 	subs.w	r4, r4, sl
    4356:	d006      	beq.n	4366 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    4358:	f8db 0004 	ldr.w	r0, [fp, #4]
    435c:	4622      	mov	r2, r4
    435e:	eb08 0109 	add.w	r1, r8, r9
    4362:	f001 fc14 	bl	5b8e <memcpy>
      pRing->WrOff = NumBytes;
    4366:	2018      	movs	r0, #24
    4368:	fb00 7606 	mla	r6, r0, r6, r7
    436c:	e7e0      	b.n	4330 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    436e:	3b01      	subs	r3, #1
    4370:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4372:	42a3      	cmp	r3, r4
    4374:	d2ce      	bcs.n	4314 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4376:	2000      	movs	r0, #0
    4378:	e7dc      	b.n	4334 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    437a:	bf00      	nop
    437c:	20000910 	.word	0x20000910

00004380 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4380:	4b03      	ldr	r3, [pc, #12]	; (4390 <SEGGER_RTT_HasDataUp+0x10>)
    4382:	2218      	movs	r2, #24
    4384:	fb02 3300 	mla	r3, r2, r0, r3
    4388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    438a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    438c:	1a80      	subs	r0, r0, r2
    438e:	4770      	bx	lr
    4390:	20000910 	.word	0x20000910

00004394 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4394:	4b0e      	ldr	r3, [pc, #56]	; (43d0 <z_sys_init_run_level+0x3c>)
{
    4396:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4398:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    439c:	3001      	adds	r0, #1
    439e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    43a2:	42a6      	cmp	r6, r4
    43a4:	d800      	bhi.n	43a8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    43a6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    43a8:	e9d4 3500 	ldrd	r3, r5, [r4]
    43ac:	4628      	mov	r0, r5
    43ae:	4798      	blx	r3
		if (dev != NULL) {
    43b0:	b165      	cbz	r5, 43cc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    43b2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    43b4:	b130      	cbz	r0, 43c4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    43b6:	2800      	cmp	r0, #0
    43b8:	bfb8      	it	lt
    43ba:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    43bc:	28ff      	cmp	r0, #255	; 0xff
    43be:	bfa8      	it	ge
    43c0:	20ff      	movge	r0, #255	; 0xff
    43c2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    43c4:	785a      	ldrb	r2, [r3, #1]
    43c6:	f042 0201 	orr.w	r2, r2, #1
    43ca:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    43cc:	3408      	adds	r4, #8
    43ce:	e7e8      	b.n	43a2 <z_sys_init_run_level+0xe>
    43d0:	00006978 	.word	0x00006978

000043d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43d8:	4606      	mov	r6, r0
    43da:	b086      	sub	sp, #24
    43dc:	460f      	mov	r7, r1
	__asm__ volatile(
    43de:	f04f 0320 	mov.w	r3, #32
    43e2:	f3ef 8811 	mrs	r8, BASEPRI
    43e6:	f383 8812 	msr	BASEPRI_MAX, r3
    43ea:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    43ee:	f000 fe0d 	bl	500c <z_impl_z_current_get>
    43f2:	2e04      	cmp	r6, #4
    43f4:	bf96      	itet	ls
    43f6:	4b22      	ldrls	r3, [pc, #136]	; (4480 <z_fatal_error+0xac>)
    43f8:	4b22      	ldrhi	r3, [pc, #136]	; (4484 <z_fatal_error+0xb0>)
    43fa:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    43fe:	4922      	ldr	r1, [pc, #136]	; (4488 <z_fatal_error+0xb4>)
    4400:	9603      	str	r6, [sp, #12]
    4402:	2400      	movs	r4, #0
    4404:	e9cd 3404 	strd	r3, r4, [sp, #16]
    4408:	4b20      	ldr	r3, [pc, #128]	; (448c <z_fatal_error+0xb8>)
    440a:	9400      	str	r4, [sp, #0]
    440c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4410:	4605      	mov	r5, r0
    4412:	4623      	mov	r3, r4
    4414:	2201      	movs	r2, #1
    4416:	4620      	mov	r0, r4
    4418:	f001 feda 	bl	61d0 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    441c:	b16f      	cbz	r7, 443a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    441e:	69fb      	ldr	r3, [r7, #28]
    4420:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4424:	b14b      	cbz	r3, 443a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    4426:	4b1a      	ldr	r3, [pc, #104]	; (4490 <z_fatal_error+0xbc>)
    4428:	4917      	ldr	r1, [pc, #92]	; (4488 <z_fatal_error+0xb4>)
    442a:	9400      	str	r4, [sp, #0]
    442c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4430:	2201      	movs	r2, #1
    4432:	4623      	mov	r3, r4
    4434:	4620      	mov	r0, r4
    4436:	f001 fecb 	bl	61d0 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    443a:	b12d      	cbz	r5, 4448 <z_fatal_error+0x74>
    443c:	4628      	mov	r0, r5
    443e:	f001 ff25 	bl	628c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4442:	b108      	cbz	r0, 4448 <z_fatal_error+0x74>
    4444:	7803      	ldrb	r3, [r0, #0]
    4446:	b903      	cbnz	r3, 444a <z_fatal_error+0x76>
		thread_name = "unknown";
    4448:	4812      	ldr	r0, [pc, #72]	; (4494 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    444a:	4b13      	ldr	r3, [pc, #76]	; (4498 <z_fatal_error+0xc4>)
    444c:	9302      	str	r3, [sp, #8]
    444e:	2300      	movs	r3, #0
    4450:	e9cd 5003 	strd	r5, r0, [sp, #12]
    4454:	e9cd 3300 	strd	r3, r3, [sp]
    4458:	4618      	mov	r0, r3
    445a:	2201      	movs	r2, #1
    445c:	490a      	ldr	r1, [pc, #40]	; (4488 <z_fatal_error+0xb4>)
    445e:	f001 feb7 	bl	61d0 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4462:	4639      	mov	r1, r7
    4464:	4630      	mov	r0, r6
    4466:	f7ff f9af 	bl	37c8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    446a:	f388 8811 	msr	BASEPRI, r8
    446e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4472:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4474:	b006      	add	sp, #24
    4476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    447a:	f7fe b925 	b.w	26c8 <z_impl_k_thread_abort>
    447e:	bf00      	nop
    4480:	00006990 	.word	0x00006990
    4484:	00007095 	.word	0x00007095
    4488:	00006724 	.word	0x00006724
    448c:	000070ab 	.word	0x000070ab
    4490:	000070d3 	.word	0x000070d3
    4494:	000070a3 	.word	0x000070a3
    4498:	000070f4 	.word	0x000070f4

0000449c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    449c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    449e:	4b0a      	ldr	r3, [pc, #40]	; (44c8 <bg_thread_main+0x2c>)
    44a0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    44a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    44a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    44a6:	f7ff ff75 	bl	4394 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    44aa:	f000 ff59 	bl	5360 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    44ae:	2003      	movs	r0, #3
    44b0:	f7ff ff70 	bl	4394 <z_sys_init_run_level>

	z_init_static_threads();
    44b4:	f000 f93e 	bl	4734 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    44b8:	f7fb ff90 	bl	3dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    44bc:	4a03      	ldr	r2, [pc, #12]	; (44cc <bg_thread_main+0x30>)
    44be:	7b13      	ldrb	r3, [r2, #12]
    44c0:	f023 0301 	bic.w	r3, r3, #1
    44c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    44c6:	bd08      	pop	{r3, pc}
    44c8:	20000fe0 	.word	0x20000fe0
    44cc:	20000248 	.word	0x20000248

000044d0 <z_bss_zero>:
{
    44d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    44d2:	4803      	ldr	r0, [pc, #12]	; (44e0 <z_bss_zero+0x10>)
    44d4:	4a03      	ldr	r2, [pc, #12]	; (44e4 <z_bss_zero+0x14>)
    44d6:	2100      	movs	r1, #0
    44d8:	1a12      	subs	r2, r2, r0
    44da:	f001 fe89 	bl	61f0 <z_early_memset>
}
    44de:	bd08      	pop	{r3, pc}
    44e0:	200001a8 	.word	0x200001a8
    44e4:	20000fe4 	.word	0x20000fe4

000044e8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    44e8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    44ea:	2300      	movs	r3, #0
{
    44ec:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    44ee:	2201      	movs	r2, #1
    44f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    44f4:	4e13      	ldr	r6, [pc, #76]	; (4544 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    44f6:	4d14      	ldr	r5, [pc, #80]	; (4548 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    44f8:	9301      	str	r3, [sp, #4]
    44fa:	220f      	movs	r2, #15
    44fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4500:	4912      	ldr	r1, [pc, #72]	; (454c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4502:	2318      	movs	r3, #24
    4504:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4508:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    450c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    450e:	f44f 70b0 	mov.w	r0, #352	; 0x160
    4512:	fb00 1104 	mla	r1, r0, r4, r1
    4516:	4b0e      	ldr	r3, [pc, #56]	; (4550 <z_init_cpu+0x68>)
    4518:	9500      	str	r5, [sp, #0]
    451a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    451e:	4630      	mov	r0, r6
    4520:	f000 f8d6 	bl	46d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4524:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4526:	480b      	ldr	r0, [pc, #44]	; (4554 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4528:	752c      	strb	r4, [r5, #20]
    452a:	f023 0304 	bic.w	r3, r3, #4
    452e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4530:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4534:	fb03 0404 	mla	r4, r3, r4, r0
    4538:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    453a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    453c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    453e:	b006      	add	sp, #24
    4540:	bd70      	pop	{r4, r5, r6, pc}
    4542:	bf00      	nop
    4544:	200001c8 	.word	0x200001c8
    4548:	200009b8 	.word	0x200009b8
    454c:	20001420 	.word	0x20001420
    4550:	000047ed 	.word	0x000047ed
    4554:	20001580 	.word	0x20001580

00004558 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4558:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    455a:	4b2e      	ldr	r3, [pc, #184]	; (4614 <z_cstart+0xbc>)
    455c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    455e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4562:	4d2d      	ldr	r5, [pc, #180]	; (4618 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4564:	4e2d      	ldr	r6, [pc, #180]	; (461c <z_cstart+0xc4>)
    4566:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4568:	4f2d      	ldr	r7, [pc, #180]	; (4620 <z_cstart+0xc8>)
    456a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    456e:	2400      	movs	r4, #0
    4570:	616b      	str	r3, [r5, #20]
    4572:	23e0      	movs	r3, #224	; 0xe0
    4574:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4578:	77ec      	strb	r4, [r5, #31]
    457a:	762c      	strb	r4, [r5, #24]
    457c:	766c      	strb	r4, [r5, #25]
    457e:	76ac      	strb	r4, [r5, #26]
    4580:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4584:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4586:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    458a:	626b      	str	r3, [r5, #36]	; 0x24
    458c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4590:	f7fe f80e 	bl	25b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4594:	f7fd fbd4 	bl	1d40 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    459c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    459e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    45a0:	f7fe f954 	bl	284c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    45a4:	f7fe f8a6 	bl	26f4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    45a8:	f7fc fe54 	bl	1254 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    45ac:	f240 1301 	movw	r3, #257	; 0x101
    45b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    45b4:	ab06      	add	r3, sp, #24
    45b6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    45b8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    45bc:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    45be:	f001 fdfc 	bl	61ba <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    45c2:	4620      	mov	r0, r4
    45c4:	f7ff fee6 	bl	4394 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    45c8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    45ca:	4d16      	ldr	r5, [pc, #88]	; (4624 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    45cc:	f7ff fee2 	bl	4394 <z_sys_init_run_level>
	z_sched_init();
    45d0:	f000 fc6e 	bl	4eb0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    45d4:	4b14      	ldr	r3, [pc, #80]	; (4628 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    45d6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    45d8:	9305      	str	r3, [sp, #20]
    45da:	2301      	movs	r3, #1
    45dc:	4913      	ldr	r1, [pc, #76]	; (462c <z_cstart+0xd4>)
    45de:	9400      	str	r4, [sp, #0]
    45e0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    45e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    45e8:	463b      	mov	r3, r7
    45ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
    45ee:	4628      	mov	r0, r5
    45f0:	f000 f86e 	bl	46d0 <z_setup_new_thread>
    45f4:	7b6a      	ldrb	r2, [r5, #13]
    45f6:	4606      	mov	r6, r0
    45f8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    45fc:	4628      	mov	r0, r5
    45fe:	736a      	strb	r2, [r5, #13]
    4600:	f001 fe8a 	bl	6318 <z_ready_thread>
	z_init_cpu(0);
    4604:	4620      	mov	r0, r4
    4606:	f7ff ff6f 	bl	44e8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    460a:	463a      	mov	r2, r7
    460c:	4631      	mov	r1, r6
    460e:	4628      	mov	r0, r5
    4610:	f7fd fce0 	bl	1fd4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4614:	20001da0 	.word	0x20001da0
    4618:	e000ed00 	.word	0xe000ed00
    461c:	200009b8 	.word	0x200009b8
    4620:	0000449d 	.word	0x0000449d
    4624:	20000248 	.word	0x20000248
    4628:	00007156 	.word	0x00007156
    462c:	20001000 	.word	0x20001000

00004630 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4630:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4632:	4b0e      	ldr	r3, [pc, #56]	; (466c <init_mem_slab_module+0x3c>)
    4634:	4c0e      	ldr	r4, [pc, #56]	; (4670 <init_mem_slab_module+0x40>)
    4636:	42a3      	cmp	r3, r4
    4638:	d301      	bcc.n	463e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    463a:	2000      	movs	r0, #0
	return rc;
}
    463c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    463e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4642:	ea41 0200 	orr.w	r2, r1, r0
    4646:	f012 0203 	ands.w	r2, r2, #3
    464a:	d10b      	bne.n	4664 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    464c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    464e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4650:	42aa      	cmp	r2, r5
    4652:	d101      	bne.n	4658 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4654:	331c      	adds	r3, #28
    4656:	e7ee      	b.n	4636 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4658:	695e      	ldr	r6, [r3, #20]
    465a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    465c:	3201      	adds	r2, #1
		slab->free_list = p;
    465e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4660:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4662:	e7f5      	b.n	4650 <init_mem_slab_module+0x20>
	return rc;
    4664:	f06f 0015 	mvn.w	r0, #21
    4668:	e7e8      	b.n	463c <init_mem_slab_module+0xc>
    466a:	bf00      	nop
    466c:	20000158 	.word	0x20000158
    4670:	20000158 	.word	0x20000158

00004674 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4676:	460c      	mov	r4, r1
	__asm__ volatile(
    4678:	f04f 0520 	mov.w	r5, #32
    467c:	f3ef 8111 	mrs	r1, BASEPRI
    4680:	f385 8812 	msr	BASEPRI_MAX, r5
    4684:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4688:	6945      	ldr	r5, [r0, #20]
    468a:	b15d      	cbz	r5, 46a4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    468c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    468e:	682b      	ldr	r3, [r5, #0]
    4690:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4692:	6983      	ldr	r3, [r0, #24]
    4694:	3301      	adds	r3, #1
    4696:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4698:	2000      	movs	r0, #0
	__asm__ volatile(
    469a:	f381 8811 	msr	BASEPRI, r1
    469e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    46a2:	e011      	b.n	46c8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    46a4:	ea52 0c03 	orrs.w	ip, r2, r3
    46a8:	d103      	bne.n	46b2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    46aa:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    46ac:	f06f 000b 	mvn.w	r0, #11
    46b0:	e7f3      	b.n	469a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    46b2:	e9cd 2300 	strd	r2, r3, [sp]
    46b6:	4602      	mov	r2, r0
    46b8:	3008      	adds	r0, #8
    46ba:	f000 fb4f 	bl	4d5c <z_pend_curr>
		if (result == 0) {
    46be:	b918      	cbnz	r0, 46c8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    46c0:	4b02      	ldr	r3, [pc, #8]	; (46cc <k_mem_slab_alloc+0x58>)
    46c2:	689b      	ldr	r3, [r3, #8]
    46c4:	695b      	ldr	r3, [r3, #20]
    46c6:	6023      	str	r3, [r4, #0]
}
    46c8:	b003      	add	sp, #12
    46ca:	bd30      	pop	{r4, r5, pc}
    46cc:	200009b8 	.word	0x200009b8

000046d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    46d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    46d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    46d6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    46d8:	2604      	movs	r6, #4
    46da:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    46dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    46de:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    46e0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    46e4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    46e6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    46e8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    46ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    46ee:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    46f0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    46f4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    46f6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    46fa:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    46fe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4700:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4702:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4704:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4708:	9202      	str	r2, [sp, #8]
    470a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    470c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    470e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4712:	9200      	str	r2, [sp, #0]
    4714:	4642      	mov	r2, r8
{
    4716:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4718:	f7fd fc2a 	bl	1f70 <arch_new_thread>
	if (!_current) {
    471c:	4b04      	ldr	r3, [pc, #16]	; (4730 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    471e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4720:	689b      	ldr	r3, [r3, #8]
    4722:	b103      	cbz	r3, 4726 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4726:	6723      	str	r3, [r4, #112]	; 0x70
}
    4728:	4640      	mov	r0, r8
    472a:	b004      	add	sp, #16
    472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4730:	200009b8 	.word	0x200009b8

00004734 <z_init_static_threads>:
{
    4734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4738:	4c29      	ldr	r4, [pc, #164]	; (47e0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    473a:	4d2a      	ldr	r5, [pc, #168]	; (47e4 <z_init_static_threads+0xb0>)
{
    473c:	b087      	sub	sp, #28
    473e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4740:	42ae      	cmp	r6, r5
    4742:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4746:	d30f      	bcc.n	4768 <z_init_static_threads+0x34>
	k_sched_lock();
    4748:	f000 f9c6 	bl	4ad8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    474c:	4c24      	ldr	r4, [pc, #144]	; (47e0 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    474e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 47e8 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4752:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4756:	f240 37e7 	movw	r7, #999	; 0x3e7
    475a:	42ac      	cmp	r4, r5
    475c:	d320      	bcc.n	47a0 <z_init_static_threads+0x6c>
}
    475e:	b007      	add	sp, #28
    4760:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4764:	f000 bb88 	b.w	4e78 <k_sched_unlock>
		z_setup_new_thread(
    4768:	f854 3c04 	ldr.w	r3, [r4, #-4]
    476c:	9305      	str	r3, [sp, #20]
    476e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4772:	9304      	str	r3, [sp, #16]
    4774:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4778:	9303      	str	r3, [sp, #12]
    477a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    477e:	9302      	str	r3, [sp, #8]
    4780:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4784:	9301      	str	r3, [sp, #4]
    4786:	f854 3c20 	ldr.w	r3, [r4, #-32]
    478a:	9300      	str	r3, [sp, #0]
    478c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4790:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4794:	f7ff ff9c 	bl	46d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4798:	f854 3c30 	ldr.w	r3, [r4, #-48]
    479c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    479e:	e7ce      	b.n	473e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    47a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47a2:	1c5a      	adds	r2, r3, #1
    47a4:	d00d      	beq.n	47c2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    47a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    47aa:	2100      	movs	r1, #0
    47ac:	4638      	mov	r0, r7
    47ae:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    47b2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    47b6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    47ba:	d104      	bne.n	47c6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    47bc:	4640      	mov	r0, r8
    47be:	f000 fa71 	bl	4ca4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    47c2:	3430      	adds	r4, #48	; 0x30
    47c4:	e7c9      	b.n	475a <z_init_static_threads+0x26>
    47c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47ca:	2300      	movs	r3, #0
    47cc:	f7fb fc98 	bl	100 <__aeabi_uldivmod>
    47d0:	4602      	mov	r2, r0
    47d2:	460b      	mov	r3, r1
    47d4:	f108 0018 	add.w	r0, r8, #24
    47d8:	4649      	mov	r1, r9
    47da:	f000 fcd3 	bl	5184 <z_add_timeout>
    47de:	e7f0      	b.n	47c2 <z_init_static_threads+0x8e>
    47e0:	20000158 	.word	0x20000158
    47e4:	20000158 	.word	0x20000158
    47e8:	00006339 	.word	0x00006339

000047ec <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    47ec:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    47ee:	4c0b      	ldr	r4, [pc, #44]	; (481c <idle+0x30>)
	return !z_sys_post_kernel;
    47f0:	4d0b      	ldr	r5, [pc, #44]	; (4820 <idle+0x34>)
	__asm__ volatile(
    47f2:	f04f 0220 	mov.w	r2, #32
    47f6:	f3ef 8311 	mrs	r3, BASEPRI
    47fa:	f382 8812 	msr	BASEPRI_MAX, r2
    47fe:	f3bf 8f6f 	isb	sy
    4802:	f001 fe13 	bl	642c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4806:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4808:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    480a:	b913      	cbnz	r3, 4812 <idle+0x26>
	arch_cpu_idle();
    480c:	f7fd fa9e 	bl	1d4c <arch_cpu_idle>
}
    4810:	e7ef      	b.n	47f2 <idle+0x6>
    4812:	f7fd f8f1 	bl	19f8 <pm_system_suspend>
    4816:	2800      	cmp	r0, #0
    4818:	d1eb      	bne.n	47f2 <idle+0x6>
    481a:	e7f7      	b.n	480c <idle+0x20>
    481c:	200009b8 	.word	0x200009b8
    4820:	20000fe0 	.word	0x20000fe0

00004824 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4828:	4604      	mov	r4, r0
    482a:	4617      	mov	r7, r2
    482c:	461e      	mov	r6, r3
    482e:	f04f 0320 	mov.w	r3, #32
    4832:	f3ef 8811 	mrs	r8, BASEPRI
    4836:	f383 8812 	msr	BASEPRI_MAX, r3
    483a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    483e:	68c3      	ldr	r3, [r0, #12]
    4840:	4a32      	ldr	r2, [pc, #200]	; (490c <z_impl_k_mutex_lock+0xe8>)
    4842:	b16b      	cbz	r3, 4860 <z_impl_k_mutex_lock+0x3c>
    4844:	6880      	ldr	r0, [r0, #8]
    4846:	6891      	ldr	r1, [r2, #8]
    4848:	4288      	cmp	r0, r1
    484a:	d019      	beq.n	4880 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    484c:	ea57 0306 	orrs.w	r3, r7, r6
    4850:	d118      	bne.n	4884 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4852:	f388 8811 	msr	BASEPRI, r8
    4856:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    485a:	f06f 000f 	mvn.w	r0, #15
    485e:	e00c      	b.n	487a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4860:	6891      	ldr	r1, [r2, #8]
    4862:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4866:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4868:	3301      	adds	r3, #1
    486a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    486c:	6893      	ldr	r3, [r2, #8]
    486e:	60a3      	str	r3, [r4, #8]
    4870:	f388 8811 	msr	BASEPRI, r8
    4874:	f3bf 8f6f 	isb	sy
		return 0;
    4878:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    487a:	b002      	add	sp, #8
    487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4880:	6921      	ldr	r1, [r4, #16]
    4882:	e7f0      	b.n	4866 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4884:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4888:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    488c:	4299      	cmp	r1, r3
    488e:	bfa8      	it	ge
    4890:	4619      	movge	r1, r3
    4892:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4896:	4291      	cmp	r1, r2
    4898:	bfb8      	it	lt
    489a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    489c:	428b      	cmp	r3, r1
    489e:	dd2e      	ble.n	48fe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    48a0:	f001 fcfd 	bl	629e <adjust_owner_prio.isra.0>
    48a4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    48a6:	e9cd 7600 	strd	r7, r6, [sp]
    48aa:	4819      	ldr	r0, [pc, #100]	; (4910 <z_impl_k_mutex_lock+0xec>)
    48ac:	4622      	mov	r2, r4
    48ae:	4641      	mov	r1, r8
    48b0:	f000 fa54 	bl	4d5c <z_pend_curr>
	if (got_mutex == 0) {
    48b4:	2800      	cmp	r0, #0
    48b6:	d0e0      	beq.n	487a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    48b8:	f04f 0320 	mov.w	r3, #32
    48bc:	f3ef 8611 	mrs	r6, BASEPRI
    48c0:	f383 8812 	msr	BASEPRI_MAX, r3
    48c4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    48c8:	6823      	ldr	r3, [r4, #0]
    48ca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48cc:	42a3      	cmp	r3, r4
    48ce:	d00a      	beq.n	48e6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    48d0:	b14b      	cbz	r3, 48e6 <z_impl_k_mutex_lock+0xc2>
    48d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    48d6:	4299      	cmp	r1, r3
    48d8:	bfa8      	it	ge
    48da:	4619      	movge	r1, r3
    48dc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    48e0:	4299      	cmp	r1, r3
    48e2:	bfb8      	it	lt
    48e4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    48e6:	68a0      	ldr	r0, [r4, #8]
    48e8:	f001 fcd9 	bl	629e <adjust_owner_prio.isra.0>
    48ec:	b900      	cbnz	r0, 48f0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    48ee:	b145      	cbz	r5, 4902 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    48f0:	4807      	ldr	r0, [pc, #28]	; (4910 <z_impl_k_mutex_lock+0xec>)
    48f2:	4631      	mov	r1, r6
    48f4:	f000 f8de 	bl	4ab4 <z_reschedule>
	return -EAGAIN;
    48f8:	f06f 000a 	mvn.w	r0, #10
    48fc:	e7bd      	b.n	487a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    48fe:	2500      	movs	r5, #0
    4900:	e7d1      	b.n	48a6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    4902:	f386 8811 	msr	BASEPRI, r6
    4906:	f3bf 8f6f 	isb	sy
    490a:	e7f5      	b.n	48f8 <z_impl_k_mutex_lock+0xd4>
    490c:	200009b8 	.word	0x200009b8
    4910:	20000fe1 	.word	0x20000fe1

00004914 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4914:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4916:	6883      	ldr	r3, [r0, #8]
{
    4918:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    491a:	2b00      	cmp	r3, #0
    491c:	d032      	beq.n	4984 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    491e:	4a1c      	ldr	r2, [pc, #112]	; (4990 <z_impl_k_mutex_unlock+0x7c>)
    4920:	6892      	ldr	r2, [r2, #8]
    4922:	4293      	cmp	r3, r2
    4924:	d131      	bne.n	498a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4926:	7bda      	ldrb	r2, [r3, #15]
    4928:	3a01      	subs	r2, #1
    492a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    492c:	68c3      	ldr	r3, [r0, #12]
    492e:	2b01      	cmp	r3, #1
    4930:	d905      	bls.n	493e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4932:	3b01      	subs	r3, #1
    4934:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4936:	f000 fa9f 	bl	4e78 <k_sched_unlock>

	return 0;
    493a:	2000      	movs	r0, #0
}
    493c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    493e:	f04f 0320 	mov.w	r3, #32
    4942:	f3ef 8511 	mrs	r5, BASEPRI
    4946:	f383 8812 	msr	BASEPRI_MAX, r3
    494a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    494e:	6901      	ldr	r1, [r0, #16]
    4950:	6880      	ldr	r0, [r0, #8]
    4952:	f001 fca4 	bl	629e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4956:	4620      	mov	r0, r4
    4958:	f001 fd3a 	bl	63d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    495c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    495e:	b158      	cbz	r0, 4978 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4960:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4964:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4966:	2200      	movs	r2, #0
    4968:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    496a:	f001 fcd5 	bl	6318 <z_ready_thread>
		z_reschedule(&lock, key);
    496e:	4809      	ldr	r0, [pc, #36]	; (4994 <z_impl_k_mutex_unlock+0x80>)
    4970:	4629      	mov	r1, r5
    4972:	f000 f89f 	bl	4ab4 <z_reschedule>
    4976:	e7de      	b.n	4936 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4978:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    497a:	f385 8811 	msr	BASEPRI, r5
    497e:	f3bf 8f6f 	isb	sy
    4982:	e7d8      	b.n	4936 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4984:	f06f 0015 	mvn.w	r0, #21
    4988:	e7d8      	b.n	493c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    498a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    498e:	e7d5      	b.n	493c <z_impl_k_mutex_unlock+0x28>
    4990:	200009b8 	.word	0x200009b8
    4994:	20000fe1 	.word	0x20000fe1

00004998 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4998:	b538      	push	{r3, r4, r5, lr}
    499a:	4604      	mov	r4, r0
	__asm__ volatile(
    499c:	f04f 0320 	mov.w	r3, #32
    49a0:	f3ef 8511 	mrs	r5, BASEPRI
    49a4:	f383 8812 	msr	BASEPRI_MAX, r3
    49a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    49ac:	f001 fd10 	bl	63d0 <z_unpend_first_thread>

	if (thread != NULL) {
    49b0:	b148      	cbz	r0, 49c6 <z_impl_k_sem_give+0x2e>
    49b2:	2200      	movs	r2, #0
    49b4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    49b6:	f001 fcaf 	bl	6318 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    49ba:	4629      	mov	r1, r5
    49bc:	4805      	ldr	r0, [pc, #20]	; (49d4 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    49be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    49c2:	f000 b877 	b.w	4ab4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    49c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    49ca:	429a      	cmp	r2, r3
    49cc:	bf18      	it	ne
    49ce:	3301      	addne	r3, #1
    49d0:	60a3      	str	r3, [r4, #8]
}
    49d2:	e7f2      	b.n	49ba <z_impl_k_sem_give+0x22>
    49d4:	20000fe1 	.word	0x20000fe1

000049d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    49d8:	b513      	push	{r0, r1, r4, lr}
    49da:	f04f 0420 	mov.w	r4, #32
    49de:	f3ef 8111 	mrs	r1, BASEPRI
    49e2:	f384 8812 	msr	BASEPRI_MAX, r4
    49e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    49ea:	6884      	ldr	r4, [r0, #8]
    49ec:	b144      	cbz	r4, 4a00 <z_impl_k_sem_take+0x28>
		sem->count--;
    49ee:	3c01      	subs	r4, #1
    49f0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    49f2:	f381 8811 	msr	BASEPRI, r1
    49f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    49fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    49fc:	b002      	add	sp, #8
    49fe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4a00:	ea52 0403 	orrs.w	r4, r2, r3
    4a04:	d106      	bne.n	4a14 <z_impl_k_sem_take+0x3c>
    4a06:	f381 8811 	msr	BASEPRI, r1
    4a0a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4a0e:	f06f 000f 	mvn.w	r0, #15
    4a12:	e7f3      	b.n	49fc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4a14:	e9cd 2300 	strd	r2, r3, [sp]
    4a18:	4602      	mov	r2, r0
    4a1a:	4802      	ldr	r0, [pc, #8]	; (4a24 <z_impl_k_sem_take+0x4c>)
    4a1c:	f000 f99e 	bl	4d5c <z_pend_curr>
	return ret;
    4a20:	e7ec      	b.n	49fc <z_impl_k_sem_take+0x24>
    4a22:	bf00      	nop
    4a24:	20000fe1 	.word	0x20000fe1

00004a28 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    4a28:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    4a2a:	4d07      	ldr	r5, [pc, #28]	; (4a48 <z_reset_time_slice+0x20>)
    4a2c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    4a2e:	b154      	cbz	r4, 4a46 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4a30:	f7fe fe6c 	bl	370c <sys_clock_elapsed>
    4a34:	4b05      	ldr	r3, [pc, #20]	; (4a4c <z_reset_time_slice+0x24>)
    4a36:	4404      	add	r4, r0
    4a38:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4a3a:	6828      	ldr	r0, [r5, #0]
    4a3c:	2100      	movs	r1, #0
	}
}
    4a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    4a42:	f001 bd03 	b.w	644c <z_set_timeout_expiry>
}
    4a46:	bd38      	pop	{r3, r4, r5, pc}
    4a48:	200009e8 	.word	0x200009e8
    4a4c:	200009b8 	.word	0x200009b8

00004a50 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a52:	4604      	mov	r4, r0
    4a54:	460d      	mov	r5, r1
	__asm__ volatile(
    4a56:	f04f 0320 	mov.w	r3, #32
    4a5a:	f3ef 8711 	mrs	r7, BASEPRI
    4a5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4a66:	4e10      	ldr	r6, [pc, #64]	; (4aa8 <k_sched_time_slice_set+0x58>)
    4a68:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    4a6a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    4a6e:	f240 30e7 	movw	r0, #999	; 0x3e7
    4a72:	6131      	str	r1, [r6, #16]
    4a74:	2300      	movs	r3, #0
    4a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a7a:	fbe4 010c 	umlal	r0, r1, r4, ip
    4a7e:	f7fb fb3f 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4a82:	2c00      	cmp	r4, #0
    4a84:	4b09      	ldr	r3, [pc, #36]	; (4aac <k_sched_time_slice_set+0x5c>)
    4a86:	dc0a      	bgt.n	4a9e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    4a88:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    4a8c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    4a8e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4a90:	f7ff ffca 	bl	4a28 <z_reset_time_slice>
	__asm__ volatile(
    4a94:	f387 8811 	msr	BASEPRI, r7
    4a98:	f3bf 8f6f 	isb	sy
	}
}
    4a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    4a9e:	2802      	cmp	r0, #2
    4aa0:	bfb8      	it	lt
    4aa2:	2002      	movlt	r0, #2
    4aa4:	e7f0      	b.n	4a88 <k_sched_time_slice_set+0x38>
    4aa6:	bf00      	nop
    4aa8:	200009b8 	.word	0x200009b8
    4aac:	200009e8 	.word	0x200009e8
    4ab0:	200009e4 	.word	0x200009e4

00004ab4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4ab4:	b949      	cbnz	r1, 4aca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4ab6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    4aba:	b930      	cbnz	r0, 4aca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4abc:	4b05      	ldr	r3, [pc, #20]	; (4ad4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4abe:	69da      	ldr	r2, [r3, #28]
    4ac0:	689b      	ldr	r3, [r3, #8]
    4ac2:	429a      	cmp	r2, r3
    4ac4:	d001      	beq.n	4aca <z_reschedule+0x16>
	ret = arch_swap(key);
    4ac6:	f7fd b9ff 	b.w	1ec8 <arch_swap>
    4aca:	f381 8811 	msr	BASEPRI, r1
    4ace:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4ad2:	4770      	bx	lr
    4ad4:	200009b8 	.word	0x200009b8

00004ad8 <k_sched_lock>:
	__asm__ volatile(
    4ad8:	f04f 0320 	mov.w	r3, #32
    4adc:	f3ef 8111 	mrs	r1, BASEPRI
    4ae0:	f383 8812 	msr	BASEPRI_MAX, r3
    4ae4:	f3bf 8f6f 	isb	sy
    4ae8:	4b04      	ldr	r3, [pc, #16]	; (4afc <k_sched_lock+0x24>)
    4aea:	689a      	ldr	r2, [r3, #8]
    4aec:	7bd3      	ldrb	r3, [r2, #15]
    4aee:	3b01      	subs	r3, #1
    4af0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4af2:	f381 8811 	msr	BASEPRI, r1
    4af6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4afa:	4770      	bx	lr
    4afc:	200009b8 	.word	0x200009b8

00004b00 <update_cache>:
{
    4b00:	b538      	push	{r3, r4, r5, lr}
    4b02:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4b04:	480c      	ldr	r0, [pc, #48]	; (4b38 <update_cache+0x38>)
    4b06:	4d0d      	ldr	r5, [pc, #52]	; (4b3c <update_cache+0x3c>)
    4b08:	f001 fc00 	bl	630c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4b0c:	4604      	mov	r4, r0
    4b0e:	b900      	cbnz	r0, 4b12 <update_cache+0x12>
    4b10:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    4b12:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4b14:	b94a      	cbnz	r2, 4b2a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    4b16:	7b5a      	ldrb	r2, [r3, #13]
    4b18:	06d2      	lsls	r2, r2, #27
    4b1a:	d106      	bne.n	4b2a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4b1c:	69a2      	ldr	r2, [r4, #24]
    4b1e:	b922      	cbnz	r2, 4b2a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    4b20:	89da      	ldrh	r2, [r3, #14]
    4b22:	2a7f      	cmp	r2, #127	; 0x7f
    4b24:	d901      	bls.n	4b2a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    4b26:	61eb      	str	r3, [r5, #28]
}
    4b28:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4b2a:	429c      	cmp	r4, r3
    4b2c:	d002      	beq.n	4b34 <update_cache+0x34>
			z_reset_time_slice(thread);
    4b2e:	4620      	mov	r0, r4
    4b30:	f7ff ff7a 	bl	4a28 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4b34:	61ec      	str	r4, [r5, #28]
}
    4b36:	e7f7      	b.n	4b28 <update_cache+0x28>
    4b38:	200009d8 	.word	0x200009d8
    4b3c:	200009b8 	.word	0x200009b8

00004b40 <move_thread_to_end_of_prio_q>:
{
    4b40:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4b42:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4b46:	7b43      	ldrb	r3, [r0, #13]
    4b48:	2a00      	cmp	r2, #0
{
    4b4a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4b4c:	da04      	bge.n	4b58 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b52:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4b54:	f001 fbb2 	bl	62bc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4b58:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4b5a:	4a15      	ldr	r2, [pc, #84]	; (4bb0 <move_thread_to_end_of_prio_q+0x70>)
    4b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b60:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4b62:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b66:	f102 0520 	add.w	r5, r2, #32
    4b6a:	42ab      	cmp	r3, r5
    4b6c:	d01b      	beq.n	4ba6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b6e:	b1d3      	cbz	r3, 4ba6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    4b70:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4b74:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4b78:	4286      	cmp	r6, r0
    4b7a:	d00f      	beq.n	4b9c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    4b7c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b7e:	2800      	cmp	r0, #0
    4b80:	dd0c      	ble.n	4b9c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4b82:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4b84:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4b88:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4b8a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4b8c:	6890      	ldr	r0, [r2, #8]
    4b8e:	1a43      	subs	r3, r0, r1
    4b90:	4258      	negs	r0, r3
}
    4b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4b96:	4158      	adcs	r0, r3
    4b98:	f7ff bfb2 	b.w	4b00 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4b9c:	42a3      	cmp	r3, r4
    4b9e:	d002      	beq.n	4ba6 <move_thread_to_end_of_prio_q+0x66>
    4ba0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d1e6      	bne.n	4b74 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    4ba6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    4baa:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4bac:	6251      	str	r1, [r2, #36]	; 0x24
}
    4bae:	e7ed      	b.n	4b8c <move_thread_to_end_of_prio_q+0x4c>
    4bb0:	200009b8 	.word	0x200009b8

00004bb4 <z_time_slice>:
{
    4bb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4bb6:	f04f 0320 	mov.w	r3, #32
    4bba:	f3ef 8511 	mrs	r5, BASEPRI
    4bbe:	f383 8812 	msr	BASEPRI_MAX, r3
    4bc2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4bc6:	4b17      	ldr	r3, [pc, #92]	; (4c24 <z_time_slice+0x70>)
    4bc8:	4a17      	ldr	r2, [pc, #92]	; (4c28 <z_time_slice+0x74>)
    4bca:	689c      	ldr	r4, [r3, #8]
    4bcc:	6811      	ldr	r1, [r2, #0]
    4bce:	428c      	cmp	r4, r1
    4bd0:	d107      	bne.n	4be2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4bd2:	4620      	mov	r0, r4
    4bd4:	f7ff ff28 	bl	4a28 <z_reset_time_slice>
	__asm__ volatile(
    4bd8:	f385 8811 	msr	BASEPRI, r5
    4bdc:	f3bf 8f6f 	isb	sy
}
    4be0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4be2:	2100      	movs	r1, #0
    4be4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    4be6:	4a11      	ldr	r2, [pc, #68]	; (4c2c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    4be8:	6812      	ldr	r2, [r2, #0]
    4bea:	b1c2      	cbz	r2, 4c1e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4bec:	89e2      	ldrh	r2, [r4, #14]
    4bee:	2a7f      	cmp	r2, #127	; 0x7f
    4bf0:	d815      	bhi.n	4c1e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4bf2:	7b62      	ldrb	r2, [r4, #13]
    4bf4:	06d2      	lsls	r2, r2, #27
    4bf6:	d112      	bne.n	4c1e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4bf8:	4a0d      	ldr	r2, [pc, #52]	; (4c30 <z_time_slice+0x7c>)
    4bfa:	f994 100e 	ldrsb.w	r1, [r4, #14]
    4bfe:	6812      	ldr	r2, [r2, #0]
    4c00:	4291      	cmp	r1, r2
    4c02:	db0c      	blt.n	4c1e <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    4c04:	4a0b      	ldr	r2, [pc, #44]	; (4c34 <z_time_slice+0x80>)
    4c06:	4294      	cmp	r4, r2
    4c08:	d009      	beq.n	4c1e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    4c0a:	691a      	ldr	r2, [r3, #16]
    4c0c:	4282      	cmp	r2, r0
    4c0e:	dc03      	bgt.n	4c18 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    4c10:	4620      	mov	r0, r4
    4c12:	f7ff ff95 	bl	4b40 <move_thread_to_end_of_prio_q>
    4c16:	e7dc      	b.n	4bd2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    4c18:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    4c1a:	611a      	str	r2, [r3, #16]
    4c1c:	e7dc      	b.n	4bd8 <z_time_slice+0x24>
    4c1e:	2200      	movs	r2, #0
    4c20:	e7fb      	b.n	4c1a <z_time_slice+0x66>
    4c22:	bf00      	nop
    4c24:	200009b8 	.word	0x200009b8
    4c28:	200009e0 	.word	0x200009e0
    4c2c:	200009e8 	.word	0x200009e8
    4c30:	200009e4 	.word	0x200009e4
    4c34:	200001c8 	.word	0x200001c8

00004c38 <ready_thread>:
{
    4c38:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4c3a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4c3e:	7b43      	ldrb	r3, [r0, #13]
    4c40:	2a00      	cmp	r2, #0
    4c42:	db2a      	blt.n	4c9a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c44:	06da      	lsls	r2, r3, #27
    4c46:	d128      	bne.n	4c9a <ready_thread+0x62>
    4c48:	6982      	ldr	r2, [r0, #24]
    4c4a:	bb32      	cbnz	r2, 4c9a <ready_thread+0x62>
	return list->head == list;
    4c4c:	4a14      	ldr	r2, [pc, #80]	; (4ca0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c52:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    4c54:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c58:	f102 0520 	add.w	r5, r2, #32
    4c5c:	42ab      	cmp	r3, r5
    4c5e:	d017      	beq.n	4c90 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c60:	b1b3      	cbz	r3, 4c90 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    4c62:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4c66:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4c6a:	428e      	cmp	r6, r1
    4c6c:	d00b      	beq.n	4c86 <ready_thread+0x4e>
		return b2 - b1;
    4c6e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c70:	2900      	cmp	r1, #0
    4c72:	dd08      	ble.n	4c86 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    4c74:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4c76:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4c7a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4c7c:	6058      	str	r0, [r3, #4]
}
    4c7e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4c80:	2000      	movs	r0, #0
    4c82:	f7ff bf3d 	b.w	4b00 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4c86:	42a3      	cmp	r3, r4
    4c88:	d002      	beq.n	4c90 <ready_thread+0x58>
    4c8a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d1ea      	bne.n	4c66 <ready_thread+0x2e>
	node->prev = tail;
    4c90:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    4c94:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4c96:	6250      	str	r0, [r2, #36]	; 0x24
}
    4c98:	e7f1      	b.n	4c7e <ready_thread+0x46>
}
    4c9a:	bc70      	pop	{r4, r5, r6}
    4c9c:	4770      	bx	lr
    4c9e:	bf00      	nop
    4ca0:	200009b8 	.word	0x200009b8

00004ca4 <z_sched_start>:
{
    4ca4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4ca6:	f04f 0220 	mov.w	r2, #32
    4caa:	f3ef 8411 	mrs	r4, BASEPRI
    4cae:	f382 8812 	msr	BASEPRI_MAX, r2
    4cb2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4cb6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4cb8:	0751      	lsls	r1, r2, #29
    4cba:	d404      	bmi.n	4cc6 <z_sched_start+0x22>
	__asm__ volatile(
    4cbc:	f384 8811 	msr	BASEPRI, r4
    4cc0:	f3bf 8f6f 	isb	sy
}
    4cc4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4cc6:	f022 0204 	bic.w	r2, r2, #4
    4cca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4ccc:	f7ff ffb4 	bl	4c38 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4cd0:	4621      	mov	r1, r4
    4cd2:	4802      	ldr	r0, [pc, #8]	; (4cdc <z_sched_start+0x38>)
}
    4cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4cd8:	f7ff beec 	b.w	4ab4 <z_reschedule>
    4cdc:	20000fe1 	.word	0x20000fe1

00004ce0 <unready_thread>:
{
    4ce0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4ce2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4ce6:	7b43      	ldrb	r3, [r0, #13]
    4ce8:	2a00      	cmp	r2, #0
{
    4cea:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4cec:	da04      	bge.n	4cf8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4cf2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4cf4:	f001 fae2 	bl	62bc <sys_dlist_remove>
	update_cache(thread == _current);
    4cf8:	4b04      	ldr	r3, [pc, #16]	; (4d0c <unready_thread+0x2c>)
    4cfa:	6898      	ldr	r0, [r3, #8]
    4cfc:	1a43      	subs	r3, r0, r1
    4cfe:	4258      	negs	r0, r3
    4d00:	4158      	adcs	r0, r3
}
    4d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4d06:	f7ff befb 	b.w	4b00 <update_cache>
    4d0a:	bf00      	nop
    4d0c:	200009b8 	.word	0x200009b8

00004d10 <pend>:
{
    4d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d14:	4606      	mov	r6, r0
    4d16:	4615      	mov	r5, r2
    4d18:	461c      	mov	r4, r3
	__asm__ volatile(
    4d1a:	f04f 0320 	mov.w	r3, #32
    4d1e:	f3ef 8711 	mrs	r7, BASEPRI
    4d22:	f383 8812 	msr	BASEPRI_MAX, r3
    4d26:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4d2a:	f001 fb27 	bl	637c <add_to_waitq_locked>
	__asm__ volatile(
    4d2e:	f387 8811 	msr	BASEPRI, r7
    4d32:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d36:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4d3a:	bf08      	it	eq
    4d3c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4d40:	d008      	beq.n	4d54 <pend+0x44>
    4d42:	462a      	mov	r2, r5
    4d44:	4623      	mov	r3, r4
    4d46:	f106 0018 	add.w	r0, r6, #24
    4d4a:	4903      	ldr	r1, [pc, #12]	; (4d58 <pend+0x48>)
}
    4d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d50:	f000 ba18 	b.w	5184 <z_add_timeout>
    4d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d58:	00006339 	.word	0x00006339

00004d5c <z_pend_curr>:
{
    4d5c:	b510      	push	{r4, lr}
	pending_current = _current;
    4d5e:	4b07      	ldr	r3, [pc, #28]	; (4d7c <z_pend_curr+0x20>)
    4d60:	6898      	ldr	r0, [r3, #8]
    4d62:	4b07      	ldr	r3, [pc, #28]	; (4d80 <z_pend_curr+0x24>)
{
    4d64:	460c      	mov	r4, r1
	pending_current = _current;
    4d66:	6018      	str	r0, [r3, #0]
{
    4d68:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d6e:	f7ff ffcf 	bl	4d10 <pend>
    4d72:	4620      	mov	r0, r4
}
    4d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d78:	f7fd b8a6 	b.w	1ec8 <arch_swap>
    4d7c:	200009b8 	.word	0x200009b8
    4d80:	200009e0 	.word	0x200009e0

00004d84 <z_set_prio>:
{
    4d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d86:	4604      	mov	r4, r0
	__asm__ volatile(
    4d88:	f04f 0320 	mov.w	r3, #32
    4d8c:	f3ef 8611 	mrs	r6, BASEPRI
    4d90:	f383 8812 	msr	BASEPRI_MAX, r3
    4d94:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4d98:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4d9a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    4d9c:	b249      	sxtb	r1, r1
    4d9e:	d133      	bne.n	4e08 <z_set_prio+0x84>
		if (need_sched) {
    4da0:	6982      	ldr	r2, [r0, #24]
    4da2:	bb8a      	cbnz	r2, 4e08 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4da8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4daa:	f001 fa87 	bl	62bc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4dae:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    4db0:	4a17      	ldr	r2, [pc, #92]	; (4e10 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    4db2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4db8:	7343      	strb	r3, [r0, #13]
    4dba:	4610      	mov	r0, r2
    4dbc:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dc0:	4283      	cmp	r3, r0
    4dc2:	d01b      	beq.n	4dfc <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dc4:	b1d3      	cbz	r3, 4dfc <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    4dc6:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    4dc8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4dcc:	42a9      	cmp	r1, r5
    4dce:	d010      	beq.n	4df2 <z_set_prio+0x6e>
		return b2 - b1;
    4dd0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4dd2:	2d00      	cmp	r5, #0
    4dd4:	dd0d      	ble.n	4df2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4dd6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4dd8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4ddc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4dde:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4de0:	2001      	movs	r0, #1
    4de2:	f7ff fe8d 	bl	4b00 <update_cache>
    4de6:	2001      	movs	r0, #1
	__asm__ volatile(
    4de8:	f386 8811 	msr	BASEPRI, r6
    4dec:	f3bf 8f6f 	isb	sy
}
    4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4df2:	42bb      	cmp	r3, r7
    4df4:	d002      	beq.n	4dfc <z_set_prio+0x78>
    4df6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d1e5      	bne.n	4dc8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    4dfc:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    4dfe:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    4e02:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4e04:	6254      	str	r4, [r2, #36]	; 0x24
}
    4e06:	e7eb      	b.n	4de0 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4e08:	73a1      	strb	r1, [r4, #14]
    4e0a:	2000      	movs	r0, #0
    4e0c:	e7ec      	b.n	4de8 <z_set_prio+0x64>
    4e0e:	bf00      	nop
    4e10:	200009b8 	.word	0x200009b8

00004e14 <z_impl_k_thread_suspend>:
{
    4e14:	b570      	push	{r4, r5, r6, lr}
    4e16:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4e18:	3018      	adds	r0, #24
    4e1a:	f001 faf1 	bl	6400 <z_abort_timeout>
	__asm__ volatile(
    4e1e:	f04f 0320 	mov.w	r3, #32
    4e22:	f3ef 8611 	mrs	r6, BASEPRI
    4e26:	f383 8812 	msr	BASEPRI_MAX, r3
    4e2a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4e2e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4e32:	7b63      	ldrb	r3, [r4, #13]
    4e34:	2a00      	cmp	r2, #0
    4e36:	da05      	bge.n	4e44 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e3c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e3e:	4620      	mov	r0, r4
    4e40:	f001 fa3c 	bl	62bc <sys_dlist_remove>
		update_cache(thread == _current);
    4e44:	4d0b      	ldr	r5, [pc, #44]	; (4e74 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4e46:	7b63      	ldrb	r3, [r4, #13]
    4e48:	68a8      	ldr	r0, [r5, #8]
    4e4a:	f043 0310 	orr.w	r3, r3, #16
    4e4e:	7363      	strb	r3, [r4, #13]
    4e50:	1b03      	subs	r3, r0, r4
    4e52:	4258      	negs	r0, r3
    4e54:	4158      	adcs	r0, r3
    4e56:	f7ff fe53 	bl	4b00 <update_cache>
	__asm__ volatile(
    4e5a:	f386 8811 	msr	BASEPRI, r6
    4e5e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4e62:	68ab      	ldr	r3, [r5, #8]
    4e64:	42a3      	cmp	r3, r4
    4e66:	d103      	bne.n	4e70 <z_impl_k_thread_suspend+0x5c>
}
    4e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4e6c:	f001 ba44 	b.w	62f8 <z_reschedule_unlocked>
}
    4e70:	bd70      	pop	{r4, r5, r6, pc}
    4e72:	bf00      	nop
    4e74:	200009b8 	.word	0x200009b8

00004e78 <k_sched_unlock>:
{
    4e78:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e7a:	f04f 0320 	mov.w	r3, #32
    4e7e:	f3ef 8411 	mrs	r4, BASEPRI
    4e82:	f383 8812 	msr	BASEPRI_MAX, r3
    4e86:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4e8a:	4b08      	ldr	r3, [pc, #32]	; (4eac <k_sched_unlock+0x34>)
    4e8c:	689a      	ldr	r2, [r3, #8]
    4e8e:	7bd3      	ldrb	r3, [r2, #15]
    4e90:	3301      	adds	r3, #1
    4e92:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4e94:	2000      	movs	r0, #0
    4e96:	f7ff fe33 	bl	4b00 <update_cache>
	__asm__ volatile(
    4e9a:	f384 8811 	msr	BASEPRI, r4
    4e9e:	f3bf 8f6f 	isb	sy
}
    4ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4ea6:	f001 ba27 	b.w	62f8 <z_reschedule_unlocked>
    4eaa:	bf00      	nop
    4eac:	200009b8 	.word	0x200009b8

00004eb0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4eb2:	2100      	movs	r1, #0
    4eb4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4eb8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4ebc:	4608      	mov	r0, r1
    4ebe:	f7ff bdc7 	b.w	4a50 <k_sched_time_slice_set>
    4ec2:	bf00      	nop
    4ec4:	200009b8 	.word	0x200009b8

00004ec8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4eca:	f04f 0320 	mov.w	r3, #32
    4ece:	f3ef 8511 	mrs	r5, BASEPRI
    4ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ed6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4eda:	491a      	ldr	r1, [pc, #104]	; (4f44 <z_impl_k_yield+0x7c>)
    4edc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ede:	7b43      	ldrb	r3, [r0, #13]
    4ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ee4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4ee6:	f001 f9e9 	bl	62bc <sys_dlist_remove>
	}
	queue_thread(_current);
    4eea:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4eec:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4eee:	4608      	mov	r0, r1
    4ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4ef4:	735a      	strb	r2, [r3, #13]
    4ef6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4efa:	4282      	cmp	r2, r0
    4efc:	d01c      	beq.n	4f38 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4efe:	b1da      	cbz	r2, 4f38 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    4f00:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    4f02:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4f06:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4f0a:	42a6      	cmp	r6, r4
    4f0c:	d00f      	beq.n	4f2e <z_impl_k_yield+0x66>
		return b2 - b1;
    4f0e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4f10:	2c00      	cmp	r4, #0
    4f12:	dd0c      	ble.n	4f2e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    4f14:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4f16:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4f1a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4f1c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4f1e:	2001      	movs	r0, #1
    4f20:	f7ff fdee 	bl	4b00 <update_cache>
    4f24:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f2a:	f7fc bfcd 	b.w	1ec8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4f2e:	42ba      	cmp	r2, r7
    4f30:	d002      	beq.n	4f38 <z_impl_k_yield+0x70>
    4f32:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f34:	2a00      	cmp	r2, #0
    4f36:	d1e6      	bne.n	4f06 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    4f38:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    4f3a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4f3e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4f40:	624b      	str	r3, [r1, #36]	; 0x24
}
    4f42:	e7ec      	b.n	4f1e <z_impl_k_yield+0x56>
    4f44:	200009b8 	.word	0x200009b8

00004f48 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4f48:	ea50 0301 	orrs.w	r3, r0, r1
{
    4f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f50:	4605      	mov	r5, r0
    4f52:	460e      	mov	r6, r1
	if (ticks == 0) {
    4f54:	d103      	bne.n	4f5e <z_tick_sleep+0x16>
	z_impl_k_yield();
    4f56:	f7ff ffb7 	bl	4ec8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4f5a:	2000      	movs	r0, #0
    4f5c:	e033      	b.n	4fc6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4f5e:	f06f 0401 	mvn.w	r4, #1
    4f62:	1a24      	subs	r4, r4, r0
    4f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f68:	eb63 0301 	sbc.w	r3, r3, r1
    4f6c:	2c01      	cmp	r4, #1
    4f6e:	f173 0300 	sbcs.w	r3, r3, #0
    4f72:	da02      	bge.n	4f7a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4f74:	f001 fa84 	bl	6480 <sys_clock_tick_get_32>
    4f78:	1944      	adds	r4, r0, r5
    4f7a:	f04f 0320 	mov.w	r3, #32
    4f7e:	f3ef 8811 	mrs	r8, BASEPRI
    4f82:	f383 8812 	msr	BASEPRI_MAX, r3
    4f86:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4f8a:	4f10      	ldr	r7, [pc, #64]	; (4fcc <z_tick_sleep+0x84>)
    4f8c:	4b10      	ldr	r3, [pc, #64]	; (4fd0 <z_tick_sleep+0x88>)
    4f8e:	68b8      	ldr	r0, [r7, #8]
    4f90:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4f92:	f7ff fea5 	bl	4ce0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4f96:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4f98:	490e      	ldr	r1, [pc, #56]	; (4fd4 <z_tick_sleep+0x8c>)
    4f9a:	462a      	mov	r2, r5
    4f9c:	4633      	mov	r3, r6
    4f9e:	3018      	adds	r0, #24
    4fa0:	f000 f8f0 	bl	5184 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4fa4:	68ba      	ldr	r2, [r7, #8]
    4fa6:	7b53      	ldrb	r3, [r2, #13]
    4fa8:	f043 0310 	orr.w	r3, r3, #16
    4fac:	7353      	strb	r3, [r2, #13]
    4fae:	4640      	mov	r0, r8
    4fb0:	f7fc ff8a 	bl	1ec8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4fb4:	f001 fa64 	bl	6480 <sys_clock_tick_get_32>
    4fb8:	1a20      	subs	r0, r4, r0
    4fba:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4fbe:	2801      	cmp	r0, #1
    4fc0:	f173 0300 	sbcs.w	r3, r3, #0
    4fc4:	dbc9      	blt.n	4f5a <z_tick_sleep+0x12>
}
    4fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fca:	bf00      	nop
    4fcc:	200009b8 	.word	0x200009b8
    4fd0:	200009e0 	.word	0x200009e0
    4fd4:	00006339 	.word	0x00006339

00004fd8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4fd8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4fdc:	bf08      	it	eq
    4fde:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4fe2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4fe4:	d106      	bne.n	4ff4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4fe6:	4b08      	ldr	r3, [pc, #32]	; (5008 <z_impl_k_sleep+0x30>)
    4fe8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4fea:	f7ff ff13 	bl	4e14 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4ff2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4ff4:	f7ff ffa8 	bl	4f48 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4ffc:	fb80 0303 	smull	r0, r3, r0, r3
    5000:	0bc0      	lsrs	r0, r0, #15
    5002:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5006:	e7f4      	b.n	4ff2 <z_impl_k_sleep+0x1a>
    5008:	200009b8 	.word	0x200009b8

0000500c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    500c:	4b01      	ldr	r3, [pc, #4]	; (5014 <z_impl_z_current_get+0x8>)
    500e:	6898      	ldr	r0, [r3, #8]
    5010:	4770      	bx	lr
    5012:	bf00      	nop
    5014:	200009b8 	.word	0x200009b8

00005018 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    501c:	4604      	mov	r4, r0
    501e:	f04f 0320 	mov.w	r3, #32
    5022:	f3ef 8611 	mrs	r6, BASEPRI
    5026:	f383 8812 	msr	BASEPRI_MAX, r3
    502a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    502e:	7b43      	ldrb	r3, [r0, #13]
    5030:	071a      	lsls	r2, r3, #28
    5032:	d505      	bpl.n	5040 <z_thread_abort+0x28>
	__asm__ volatile(
    5034:	f386 8811 	msr	BASEPRI, r6
    5038:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5040:	f023 0220 	bic.w	r2, r3, #32
    5044:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5048:	09d2      	lsrs	r2, r2, #7
    504a:	d120      	bne.n	508e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    504c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    504e:	68a3      	ldr	r3, [r4, #8]
    5050:	b113      	cbz	r3, 5058 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    5052:	4620      	mov	r0, r4
    5054:	f001 f93a 	bl	62cc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5058:	f104 0018 	add.w	r0, r4, #24
    505c:	f001 f9d0 	bl	6400 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5060:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5064:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5068:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    506a:	42bd      	cmp	r5, r7
    506c:	d000      	beq.n	5070 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    506e:	b9b5      	cbnz	r5, 509e <z_thread_abort+0x86>
		update_cache(1);
    5070:	2001      	movs	r0, #1
    5072:	f7ff fd45 	bl	4b00 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5076:	4b10      	ldr	r3, [pc, #64]	; (50b8 <z_thread_abort+0xa0>)
    5078:	689b      	ldr	r3, [r3, #8]
    507a:	42a3      	cmp	r3, r4
    507c:	d1da      	bne.n	5034 <z_thread_abort+0x1c>
    507e:	f3ef 8305 	mrs	r3, IPSR
    5082:	2b00      	cmp	r3, #0
    5084:	d1d6      	bne.n	5034 <z_thread_abort+0x1c>
    5086:	4630      	mov	r0, r6
    5088:	f7fc ff1e 	bl	1ec8 <arch_swap>
	return ret;
    508c:	e7d2      	b.n	5034 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    508e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5092:	f043 0308 	orr.w	r3, r3, #8
    5096:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5098:	f001 f910 	bl	62bc <sys_dlist_remove>
}
    509c:	e7d7      	b.n	504e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    509e:	4628      	mov	r0, r5
    50a0:	f001 f914 	bl	62cc <unpend_thread_no_timeout>
    50a4:	f105 0018 	add.w	r0, r5, #24
    50a8:	f001 f9aa 	bl	6400 <z_abort_timeout>
    50ac:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    50b0:	4628      	mov	r0, r5
    50b2:	f7ff fdc1 	bl	4c38 <ready_thread>
    50b6:	e7d7      	b.n	5068 <z_thread_abort+0x50>
    50b8:	200009b8 	.word	0x200009b8

000050bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    50bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    50be:	4806      	ldr	r0, [pc, #24]	; (50d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    50c0:	4a06      	ldr	r2, [pc, #24]	; (50dc <z_data_copy+0x20>)
    50c2:	4907      	ldr	r1, [pc, #28]	; (50e0 <z_data_copy+0x24>)
    50c4:	1a12      	subs	r2, r2, r0
    50c6:	f001 f895 	bl	61f4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    50ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    50ce:	4a05      	ldr	r2, [pc, #20]	; (50e4 <z_data_copy+0x28>)
    50d0:	4905      	ldr	r1, [pc, #20]	; (50e8 <z_data_copy+0x2c>)
    50d2:	4806      	ldr	r0, [pc, #24]	; (50ec <z_data_copy+0x30>)
    50d4:	f001 b88e 	b.w	61f4 <z_early_memcpy>
    50d8:	20000000 	.word	0x20000000
    50dc:	200001a8 	.word	0x200001a8
    50e0:	00007194 	.word	0x00007194
    50e4:	00000000 	.word	0x00000000
    50e8:	00007194 	.word	0x00007194
    50ec:	20000000 	.word	0x20000000

000050f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    50f0:	4b03      	ldr	r3, [pc, #12]	; (5100 <elapsed+0x10>)
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	b90b      	cbnz	r3, 50fa <elapsed+0xa>
    50f6:	f7fe bb09 	b.w	370c <sys_clock_elapsed>
}
    50fa:	2000      	movs	r0, #0
    50fc:	4770      	bx	lr
    50fe:	bf00      	nop
    5100:	200009ec 	.word	0x200009ec

00005104 <next_timeout>:
	return list->head == list;
    5104:	4b10      	ldr	r3, [pc, #64]	; (5148 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5106:	b510      	push	{r4, lr}
    5108:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    510a:	429c      	cmp	r4, r3
    510c:	bf08      	it	eq
    510e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5110:	f7ff ffee 	bl	50f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5114:	b1a4      	cbz	r4, 5140 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5116:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    511a:	1a1b      	subs	r3, r3, r0
    511c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5124:	f170 0200 	sbcs.w	r2, r0, #0
    5128:	da0a      	bge.n	5140 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    512a:	2800      	cmp	r0, #0
    512c:	bfac      	ite	ge
    512e:	4618      	movge	r0, r3
    5130:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5132:	4b06      	ldr	r3, [pc, #24]	; (514c <next_timeout+0x48>)
    5134:	691b      	ldr	r3, [r3, #16]
    5136:	b113      	cbz	r3, 513e <next_timeout+0x3a>
    5138:	4298      	cmp	r0, r3
    513a:	bfa8      	it	ge
    513c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    513e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5140:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5144:	e7f5      	b.n	5132 <next_timeout+0x2e>
    5146:	bf00      	nop
    5148:	200000dc 	.word	0x200000dc
    514c:	200009b8 	.word	0x200009b8

00005150 <remove_timeout>:
{
    5150:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5152:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5154:	b168      	cbz	r0, 5172 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5156:	4a0a      	ldr	r2, [pc, #40]	; (5180 <remove_timeout+0x30>)
    5158:	6852      	ldr	r2, [r2, #4]
    515a:	4290      	cmp	r0, r2
    515c:	d009      	beq.n	5172 <remove_timeout+0x22>
	if (next(t) != NULL) {
    515e:	b143      	cbz	r3, 5172 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5160:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5164:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5168:	1912      	adds	r2, r2, r4
    516a:	eb41 0105 	adc.w	r1, r1, r5
    516e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5172:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5174:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5176:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5178:	2300      	movs	r3, #0
	node->prev = NULL;
    517a:	e9c0 3300 	strd	r3, r3, [r0]
}
    517e:	bd30      	pop	{r4, r5, pc}
    5180:	200000dc 	.word	0x200000dc

00005184 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5188:	bf08      	it	eq
    518a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    518e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5190:	4604      	mov	r4, r0
    5192:	461f      	mov	r7, r3
    5194:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5196:	d067      	beq.n	5268 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5198:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    519a:	f04f 0320 	mov.w	r3, #32
    519e:	f3ef 8611 	mrs	r6, BASEPRI
    51a2:	f383 8812 	msr	BASEPRI_MAX, r3
    51a6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    51aa:	f06f 0201 	mvn.w	r2, #1
    51ae:	1b53      	subs	r3, r2, r5
    51b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    51b4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    51b8:	2b00      	cmp	r3, #0
    51ba:	db1b      	blt.n	51f4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    51bc:	4b2b      	ldr	r3, [pc, #172]	; (526c <z_add_timeout+0xe8>)
    51be:	e9d3 1300 	ldrd	r1, r3, [r3]
    51c2:	1a52      	subs	r2, r2, r1
    51c4:	eb6c 0303 	sbc.w	r3, ip, r3
    51c8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    51ca:	eb63 0307 	sbc.w	r3, r3, r7
    51ce:	2d01      	cmp	r5, #1
    51d0:	f173 0200 	sbcs.w	r2, r3, #0
    51d4:	bfbc      	itt	lt
    51d6:	2501      	movlt	r5, #1
    51d8:	2300      	movlt	r3, #0
    51da:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    51de:	4824      	ldr	r0, [pc, #144]	; (5270 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    51e0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51e4:	4283      	cmp	r3, r0
    51e6:	d118      	bne.n	521a <z_add_timeout+0x96>
	node->prev = tail;
    51e8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    51ec:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    51f0:	6044      	str	r4, [r0, #4]
}
    51f2:	e026      	b.n	5242 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    51f4:	f7ff ff7c 	bl	50f0 <elapsed>
    51f8:	3501      	adds	r5, #1
    51fa:	f147 0700 	adc.w	r7, r7, #0
    51fe:	182d      	adds	r5, r5, r0
    5200:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5204:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5208:	e7e9      	b.n	51de <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    520a:	1a52      	subs	r2, r2, r1
    520c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5210:	459c      	cmp	ip, r3
    5212:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5216:	d0e7      	beq.n	51e8 <z_add_timeout+0x64>
    5218:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    521a:	2b00      	cmp	r3, #0
    521c:	d0e4      	beq.n	51e8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    521e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5222:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5226:	428a      	cmp	r2, r1
    5228:	eb75 0e07 	sbcs.w	lr, r5, r7
    522c:	daed      	bge.n	520a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    522e:	1a8a      	subs	r2, r1, r2
    5230:	eb67 0505 	sbc.w	r5, r7, r5
    5234:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5238:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    523a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    523e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5240:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5242:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5244:	4283      	cmp	r3, r0
    5246:	d00b      	beq.n	5260 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5248:	429c      	cmp	r4, r3
    524a:	d109      	bne.n	5260 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    524c:	f7ff ff5a 	bl	5104 <next_timeout>

			if (next_time == 0 ||
    5250:	b118      	cbz	r0, 525a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5252:	4b08      	ldr	r3, [pc, #32]	; (5274 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5254:	691b      	ldr	r3, [r3, #16]
    5256:	4283      	cmp	r3, r0
    5258:	d002      	beq.n	5260 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    525a:	2100      	movs	r1, #0
    525c:	f7fe fa24 	bl	36a8 <sys_clock_set_timeout>
	__asm__ volatile(
    5260:	f386 8811 	msr	BASEPRI, r6
    5264:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    526a:	bf00      	nop
    526c:	200002c8 	.word	0x200002c8
    5270:	200000dc 	.word	0x200000dc
    5274:	200009b8 	.word	0x200009b8

00005278 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    527c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    527e:	f7ff fc99 	bl	4bb4 <z_time_slice>
	__asm__ volatile(
    5282:	f04f 0320 	mov.w	r3, #32
    5286:	f3ef 8411 	mrs	r4, BASEPRI
    528a:	f383 8812 	msr	BASEPRI_MAX, r3
    528e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5292:	4e24      	ldr	r6, [pc, #144]	; (5324 <sys_clock_announce+0xac>)
	return list->head == list;
    5294:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5328 <sys_clock_announce+0xb0>
    5298:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    529a:	4d24      	ldr	r5, [pc, #144]	; (532c <sys_clock_announce+0xb4>)
    529c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    52a0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52a2:	4540      	cmp	r0, r8
		curr_tick += dt;
    52a4:	e9d5 1e00 	ldrd	r1, lr, [r5]
    52a8:	ea4f 77e2 	mov.w	r7, r2, asr #31
    52ac:	d00b      	beq.n	52c6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    52ae:	b150      	cbz	r0, 52c6 <sys_clock_announce+0x4e>
    52b0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    52b4:	429a      	cmp	r2, r3
    52b6:	eb77 090c 	sbcs.w	r9, r7, ip
    52ba:	da16      	bge.n	52ea <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    52bc:	1a9b      	subs	r3, r3, r2
    52be:	eb6c 0c07 	sbc.w	ip, ip, r7
    52c2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    52c6:	1852      	adds	r2, r2, r1
    52c8:	eb4e 0707 	adc.w	r7, lr, r7
    52cc:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    52d0:	2500      	movs	r5, #0
    52d2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    52d4:	f7ff ff16 	bl	5104 <next_timeout>
    52d8:	4629      	mov	r1, r5
    52da:	f7fe f9e5 	bl	36a8 <sys_clock_set_timeout>
	__asm__ volatile(
    52de:	f384 8811 	msr	BASEPRI, r4
    52e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    52e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    52ea:	1859      	adds	r1, r3, r1
    52ec:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    52f0:	1ad3      	subs	r3, r2, r3
    52f2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    52f4:	2200      	movs	r2, #0
    52f6:	2300      	movs	r3, #0
    52f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    52fc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5300:	f7ff ff26 	bl	5150 <remove_timeout>
    5304:	f384 8811 	msr	BASEPRI, r4
    5308:	f3bf 8f6f 	isb	sy
		t->fn(t);
    530c:	6883      	ldr	r3, [r0, #8]
    530e:	4798      	blx	r3
	__asm__ volatile(
    5310:	f04f 0320 	mov.w	r3, #32
    5314:	f3ef 8411 	mrs	r4, BASEPRI
    5318:	f383 8812 	msr	BASEPRI_MAX, r3
    531c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5320:	e7bc      	b.n	529c <sys_clock_announce+0x24>
    5322:	bf00      	nop
    5324:	200009ec 	.word	0x200009ec
    5328:	200000dc 	.word	0x200000dc
    532c:	200002c8 	.word	0x200002c8

00005330 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5330:	b510      	push	{r4, lr}
    5332:	f04f 0320 	mov.w	r3, #32
    5336:	f3ef 8411 	mrs	r4, BASEPRI
    533a:	f383 8812 	msr	BASEPRI_MAX, r3
    533e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5342:	f7fe f9e3 	bl	370c <sys_clock_elapsed>
    5346:	4a05      	ldr	r2, [pc, #20]	; (535c <sys_clock_tick_get+0x2c>)
    5348:	e9d2 3100 	ldrd	r3, r1, [r2]
    534c:	18c0      	adds	r0, r0, r3
    534e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5352:	f384 8811 	msr	BASEPRI, r4
    5356:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    535a:	bd10      	pop	{r4, pc}
    535c:	200002c8 	.word	0x200002c8

00005360 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5360:	4a02      	ldr	r2, [pc, #8]	; (536c <boot_banner+0xc>)
    5362:	4903      	ldr	r1, [pc, #12]	; (5370 <boot_banner+0x10>)
    5364:	4803      	ldr	r0, [pc, #12]	; (5374 <boot_banner+0x14>)
    5366:	f000 ba2d 	b.w	57c4 <printk>
    536a:	bf00      	nop
    536c:	00006afe 	.word	0x00006afe
    5370:	0000715e 	.word	0x0000715e
    5374:	0000716b 	.word	0x0000716b

00005378 <nrf_cc3xx_platform_init_no_rng>:
    5378:	b510      	push	{r4, lr}
    537a:	4c0a      	ldr	r4, [pc, #40]	; (53a4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    537c:	6823      	ldr	r3, [r4, #0]
    537e:	b11b      	cbz	r3, 5388 <nrf_cc3xx_platform_init_no_rng+0x10>
    5380:	2301      	movs	r3, #1
    5382:	6023      	str	r3, [r4, #0]
    5384:	2000      	movs	r0, #0
    5386:	bd10      	pop	{r4, pc}
    5388:	f000 f8ce 	bl	5528 <CC_LibInitNoRng>
    538c:	2800      	cmp	r0, #0
    538e:	d0f7      	beq.n	5380 <nrf_cc3xx_platform_init_no_rng+0x8>
    5390:	3801      	subs	r0, #1
    5392:	2806      	cmp	r0, #6
    5394:	d803      	bhi.n	539e <nrf_cc3xx_platform_init_no_rng+0x26>
    5396:	4b04      	ldr	r3, [pc, #16]	; (53a8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5398:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    539c:	bd10      	pop	{r4, pc}
    539e:	4803      	ldr	r0, [pc, #12]	; (53ac <nrf_cc3xx_platform_init_no_rng+0x34>)
    53a0:	bd10      	pop	{r4, pc}
    53a2:	bf00      	nop
    53a4:	200009f0 	.word	0x200009f0
    53a8:	000069a4 	.word	0x000069a4
    53ac:	ffff8ffe 	.word	0xffff8ffe

000053b0 <nrf_cc3xx_platform_abort>:
    53b0:	f3bf 8f4f 	dsb	sy
    53b4:	4905      	ldr	r1, [pc, #20]	; (53cc <nrf_cc3xx_platform_abort+0x1c>)
    53b6:	4b06      	ldr	r3, [pc, #24]	; (53d0 <nrf_cc3xx_platform_abort+0x20>)
    53b8:	68ca      	ldr	r2, [r1, #12]
    53ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    53be:	4313      	orrs	r3, r2
    53c0:	60cb      	str	r3, [r1, #12]
    53c2:	f3bf 8f4f 	dsb	sy
    53c6:	bf00      	nop
    53c8:	e7fd      	b.n	53c6 <nrf_cc3xx_platform_abort+0x16>
    53ca:	bf00      	nop
    53cc:	e000ed00 	.word	0xe000ed00
    53d0:	05fa0004 	.word	0x05fa0004

000053d4 <CC_PalAbort>:
    53d4:	b410      	push	{r4}
    53d6:	4b09      	ldr	r3, [pc, #36]	; (53fc <CC_PalAbort+0x28>)
    53d8:	4909      	ldr	r1, [pc, #36]	; (5400 <CC_PalAbort+0x2c>)
    53da:	4c0a      	ldr	r4, [pc, #40]	; (5404 <CC_PalAbort+0x30>)
    53dc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    53e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    53e4:	6849      	ldr	r1, [r1, #4]
    53e6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    53ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    53ee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    53f2:	2300      	movs	r3, #0
    53f4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    53f8:	bc10      	pop	{r4}
    53fa:	4708      	bx	r1
    53fc:	5002b000 	.word	0x5002b000
    5400:	200000e4 	.word	0x200000e4
    5404:	5002a000 	.word	0x5002a000

00005408 <nrf_cc3xx_platform_set_abort>:
    5408:	e9d0 1200 	ldrd	r1, r2, [r0]
    540c:	4b01      	ldr	r3, [pc, #4]	; (5414 <nrf_cc3xx_platform_set_abort+0xc>)
    540e:	e9c3 1200 	strd	r1, r2, [r3]
    5412:	4770      	bx	lr
    5414:	200000e4 	.word	0x200000e4

00005418 <mutex_free>:
    5418:	b510      	push	{r4, lr}
    541a:	4604      	mov	r4, r0
    541c:	b130      	cbz	r0, 542c <mutex_free+0x14>
    541e:	6863      	ldr	r3, [r4, #4]
    5420:	06db      	lsls	r3, r3, #27
    5422:	d502      	bpl.n	542a <mutex_free+0x12>
    5424:	2300      	movs	r3, #0
    5426:	6023      	str	r3, [r4, #0]
    5428:	6063      	str	r3, [r4, #4]
    542a:	bd10      	pop	{r4, pc}
    542c:	4b02      	ldr	r3, [pc, #8]	; (5438 <mutex_free+0x20>)
    542e:	4803      	ldr	r0, [pc, #12]	; (543c <mutex_free+0x24>)
    5430:	685b      	ldr	r3, [r3, #4]
    5432:	4798      	blx	r3
    5434:	e7f3      	b.n	541e <mutex_free+0x6>
    5436:	bf00      	nop
    5438:	200000e4 	.word	0x200000e4
    543c:	000069c0 	.word	0x000069c0

00005440 <mutex_lock>:
    5440:	b1b0      	cbz	r0, 5470 <mutex_lock+0x30>
    5442:	6843      	ldr	r3, [r0, #4]
    5444:	b193      	cbz	r3, 546c <mutex_lock+0x2c>
    5446:	06db      	lsls	r3, r3, #27
    5448:	d50e      	bpl.n	5468 <mutex_lock+0x28>
    544a:	2301      	movs	r3, #1
    544c:	e850 2f00 	ldrex	r2, [r0]
    5450:	4619      	mov	r1, r3
    5452:	e840 1c00 	strex	ip, r1, [r0]
    5456:	f09c 0f00 	teq	ip, #0
    545a:	d1f7      	bne.n	544c <mutex_lock+0xc>
    545c:	2a01      	cmp	r2, #1
    545e:	d0f5      	beq.n	544c <mutex_lock+0xc>
    5460:	f3bf 8f5f 	dmb	sy
    5464:	2000      	movs	r0, #0
    5466:	4770      	bx	lr
    5468:	4803      	ldr	r0, [pc, #12]	; (5478 <mutex_lock+0x38>)
    546a:	4770      	bx	lr
    546c:	4803      	ldr	r0, [pc, #12]	; (547c <mutex_lock+0x3c>)
    546e:	4770      	bx	lr
    5470:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5474:	4770      	bx	lr
    5476:	bf00      	nop
    5478:	ffff8fe9 	.word	0xffff8fe9
    547c:	ffff8fea 	.word	0xffff8fea

00005480 <mutex_unlock>:
    5480:	b168      	cbz	r0, 549e <mutex_unlock+0x1e>
    5482:	6843      	ldr	r3, [r0, #4]
    5484:	b13b      	cbz	r3, 5496 <mutex_unlock+0x16>
    5486:	06db      	lsls	r3, r3, #27
    5488:	d507      	bpl.n	549a <mutex_unlock+0x1a>
    548a:	f3bf 8f5f 	dmb	sy
    548e:	2300      	movs	r3, #0
    5490:	6003      	str	r3, [r0, #0]
    5492:	4618      	mov	r0, r3
    5494:	4770      	bx	lr
    5496:	4803      	ldr	r0, [pc, #12]	; (54a4 <mutex_unlock+0x24>)
    5498:	4770      	bx	lr
    549a:	4803      	ldr	r0, [pc, #12]	; (54a8 <mutex_unlock+0x28>)
    549c:	4770      	bx	lr
    549e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    54a2:	4770      	bx	lr
    54a4:	ffff8fea 	.word	0xffff8fea
    54a8:	ffff8fe9 	.word	0xffff8fe9

000054ac <mutex_init>:
    54ac:	b510      	push	{r4, lr}
    54ae:	4604      	mov	r4, r0
    54b0:	b120      	cbz	r0, 54bc <mutex_init+0x10>
    54b2:	2200      	movs	r2, #0
    54b4:	2311      	movs	r3, #17
    54b6:	6022      	str	r2, [r4, #0]
    54b8:	6063      	str	r3, [r4, #4]
    54ba:	bd10      	pop	{r4, pc}
    54bc:	4801      	ldr	r0, [pc, #4]	; (54c4 <mutex_init+0x18>)
    54be:	f7ff ff89 	bl	53d4 <CC_PalAbort>
    54c2:	e7f6      	b.n	54b2 <mutex_init+0x6>
    54c4:	000069e8 	.word	0x000069e8

000054c8 <nrf_cc3xx_platform_set_mutexes>:
    54c8:	b570      	push	{r4, r5, r6, lr}
    54ca:	e9d0 2300 	ldrd	r2, r3, [r0]
    54ce:	4c13      	ldr	r4, [pc, #76]	; (551c <nrf_cc3xx_platform_set_mutexes+0x54>)
    54d0:	4d13      	ldr	r5, [pc, #76]	; (5520 <nrf_cc3xx_platform_set_mutexes+0x58>)
    54d2:	6063      	str	r3, [r4, #4]
    54d4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    54d8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    54dc:	6022      	str	r2, [r4, #0]
    54de:	4b11      	ldr	r3, [pc, #68]	; (5524 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    54e0:	6808      	ldr	r0, [r1, #0]
    54e2:	6018      	str	r0, [r3, #0]
    54e4:	6848      	ldr	r0, [r1, #4]
    54e6:	6058      	str	r0, [r3, #4]
    54e8:	6888      	ldr	r0, [r1, #8]
    54ea:	6098      	str	r0, [r3, #8]
    54ec:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    54f0:	60d8      	str	r0, [r3, #12]
    54f2:	6119      	str	r1, [r3, #16]
    54f4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    54f8:	06db      	lsls	r3, r3, #27
    54fa:	d50d      	bpl.n	5518 <nrf_cc3xx_platform_set_mutexes+0x50>
    54fc:	2300      	movs	r3, #0
    54fe:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    5502:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    5506:	f505 708a 	add.w	r0, r5, #276	; 0x114
    550a:	4790      	blx	r2
    550c:	6823      	ldr	r3, [r4, #0]
    550e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5516:	4718      	bx	r3
    5518:	bd70      	pop	{r4, r5, r6, pc}
    551a:	bf00      	nop
    551c:	200000f4 	.word	0x200000f4
    5520:	20000a08 	.word	0x20000a08
    5524:	20000104 	.word	0x20000104

00005528 <CC_LibInitNoRng>:
    5528:	b538      	push	{r3, r4, r5, lr}
    552a:	f000 f82f 	bl	558c <CC_HalInit>
    552e:	b120      	cbz	r0, 553a <CC_LibInitNoRng+0x12>
    5530:	2403      	movs	r4, #3
    5532:	f000 f863 	bl	55fc <CC_PalTerminate>
    5536:	4620      	mov	r0, r4
    5538:	bd38      	pop	{r3, r4, r5, pc}
    553a:	f000 f831 	bl	55a0 <CC_PalInit>
    553e:	b998      	cbnz	r0, 5568 <CC_LibInitNoRng+0x40>
    5540:	f000 f8ac 	bl	569c <CC_PalPowerSaveModeSelect>
    5544:	b998      	cbnz	r0, 556e <CC_LibInitNoRng+0x46>
    5546:	4d0f      	ldr	r5, [pc, #60]	; (5584 <CC_LibInitNoRng+0x5c>)
    5548:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    554c:	0e1b      	lsrs	r3, r3, #24
    554e:	2bf0      	cmp	r3, #240	; 0xf0
    5550:	d108      	bne.n	5564 <CC_LibInitNoRng+0x3c>
    5552:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5556:	4b0c      	ldr	r3, [pc, #48]	; (5588 <CC_LibInitNoRng+0x60>)
    5558:	429a      	cmp	r2, r3
    555a:	d00a      	beq.n	5572 <CC_LibInitNoRng+0x4a>
    555c:	2407      	movs	r4, #7
    555e:	f000 f817 	bl	5590 <CC_HalTerminate>
    5562:	e7e6      	b.n	5532 <CC_LibInitNoRng+0xa>
    5564:	2406      	movs	r4, #6
    5566:	e7fa      	b.n	555e <CC_LibInitNoRng+0x36>
    5568:	2404      	movs	r4, #4
    556a:	4620      	mov	r0, r4
    556c:	bd38      	pop	{r3, r4, r5, pc}
    556e:	2400      	movs	r4, #0
    5570:	e7f5      	b.n	555e <CC_LibInitNoRng+0x36>
    5572:	2001      	movs	r0, #1
    5574:	f000 f892 	bl	569c <CC_PalPowerSaveModeSelect>
    5578:	4604      	mov	r4, r0
    557a:	2800      	cmp	r0, #0
    557c:	d1f7      	bne.n	556e <CC_LibInitNoRng+0x46>
    557e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5582:	e7d8      	b.n	5536 <CC_LibInitNoRng+0xe>
    5584:	5002b000 	.word	0x5002b000
    5588:	20e00000 	.word	0x20e00000

0000558c <CC_HalInit>:
    558c:	2000      	movs	r0, #0
    558e:	4770      	bx	lr

00005590 <CC_HalTerminate>:
    5590:	2000      	movs	r0, #0
    5592:	4770      	bx	lr

00005594 <CC_HalMaskInterrupt>:
    5594:	4b01      	ldr	r3, [pc, #4]	; (559c <CC_HalMaskInterrupt+0x8>)
    5596:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    559a:	4770      	bx	lr
    559c:	5002b000 	.word	0x5002b000

000055a0 <CC_PalInit>:
    55a0:	b510      	push	{r4, lr}
    55a2:	4811      	ldr	r0, [pc, #68]	; (55e8 <CC_PalInit+0x48>)
    55a4:	f000 f848 	bl	5638 <CC_PalMutexCreate>
    55a8:	b100      	cbz	r0, 55ac <CC_PalInit+0xc>
    55aa:	bd10      	pop	{r4, pc}
    55ac:	480f      	ldr	r0, [pc, #60]	; (55ec <CC_PalInit+0x4c>)
    55ae:	f000 f843 	bl	5638 <CC_PalMutexCreate>
    55b2:	2800      	cmp	r0, #0
    55b4:	d1f9      	bne.n	55aa <CC_PalInit+0xa>
    55b6:	4c0e      	ldr	r4, [pc, #56]	; (55f0 <CC_PalInit+0x50>)
    55b8:	4620      	mov	r0, r4
    55ba:	f000 f83d 	bl	5638 <CC_PalMutexCreate>
    55be:	2800      	cmp	r0, #0
    55c0:	d1f3      	bne.n	55aa <CC_PalInit+0xa>
    55c2:	4b0c      	ldr	r3, [pc, #48]	; (55f4 <CC_PalInit+0x54>)
    55c4:	480c      	ldr	r0, [pc, #48]	; (55f8 <CC_PalInit+0x58>)
    55c6:	601c      	str	r4, [r3, #0]
    55c8:	f000 f836 	bl	5638 <CC_PalMutexCreate>
    55cc:	4601      	mov	r1, r0
    55ce:	2800      	cmp	r0, #0
    55d0:	d1eb      	bne.n	55aa <CC_PalInit+0xa>
    55d2:	f000 f82d 	bl	5630 <CC_PalDmaInit>
    55d6:	4604      	mov	r4, r0
    55d8:	b108      	cbz	r0, 55de <CC_PalInit+0x3e>
    55da:	4620      	mov	r0, r4
    55dc:	bd10      	pop	{r4, pc}
    55de:	f000 f83f 	bl	5660 <CC_PalPowerSaveModeInit>
    55e2:	4620      	mov	r0, r4
    55e4:	e7fa      	b.n	55dc <CC_PalInit+0x3c>
    55e6:	bf00      	nop
    55e8:	2000013c 	.word	0x2000013c
    55ec:	20000130 	.word	0x20000130
    55f0:	20000138 	.word	0x20000138
    55f4:	20000140 	.word	0x20000140
    55f8:	20000134 	.word	0x20000134

000055fc <CC_PalTerminate>:
    55fc:	b508      	push	{r3, lr}
    55fe:	4808      	ldr	r0, [pc, #32]	; (5620 <CC_PalTerminate+0x24>)
    5600:	f000 f824 	bl	564c <CC_PalMutexDestroy>
    5604:	4807      	ldr	r0, [pc, #28]	; (5624 <CC_PalTerminate+0x28>)
    5606:	f000 f821 	bl	564c <CC_PalMutexDestroy>
    560a:	4807      	ldr	r0, [pc, #28]	; (5628 <CC_PalTerminate+0x2c>)
    560c:	f000 f81e 	bl	564c <CC_PalMutexDestroy>
    5610:	4806      	ldr	r0, [pc, #24]	; (562c <CC_PalTerminate+0x30>)
    5612:	f000 f81b 	bl	564c <CC_PalMutexDestroy>
    5616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    561a:	f000 b80b 	b.w	5634 <CC_PalDmaTerminate>
    561e:	bf00      	nop
    5620:	2000013c 	.word	0x2000013c
    5624:	20000130 	.word	0x20000130
    5628:	20000138 	.word	0x20000138
    562c:	20000134 	.word	0x20000134

00005630 <CC_PalDmaInit>:
    5630:	2000      	movs	r0, #0
    5632:	4770      	bx	lr

00005634 <CC_PalDmaTerminate>:
    5634:	4770      	bx	lr
    5636:	bf00      	nop

00005638 <CC_PalMutexCreate>:
    5638:	b508      	push	{r3, lr}
    563a:	4b03      	ldr	r3, [pc, #12]	; (5648 <CC_PalMutexCreate+0x10>)
    563c:	6802      	ldr	r2, [r0, #0]
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	6810      	ldr	r0, [r2, #0]
    5642:	4798      	blx	r3
    5644:	2000      	movs	r0, #0
    5646:	bd08      	pop	{r3, pc}
    5648:	200000f4 	.word	0x200000f4

0000564c <CC_PalMutexDestroy>:
    564c:	b508      	push	{r3, lr}
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <CC_PalMutexDestroy+0x10>)
    5650:	6802      	ldr	r2, [r0, #0]
    5652:	685b      	ldr	r3, [r3, #4]
    5654:	6810      	ldr	r0, [r2, #0]
    5656:	4798      	blx	r3
    5658:	2000      	movs	r0, #0
    565a:	bd08      	pop	{r3, pc}
    565c:	200000f4 	.word	0x200000f4

00005660 <CC_PalPowerSaveModeInit>:
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	4c09      	ldr	r4, [pc, #36]	; (5688 <CC_PalPowerSaveModeInit+0x28>)
    5664:	4d09      	ldr	r5, [pc, #36]	; (568c <CC_PalPowerSaveModeInit+0x2c>)
    5666:	6920      	ldr	r0, [r4, #16]
    5668:	68ab      	ldr	r3, [r5, #8]
    566a:	4798      	blx	r3
    566c:	b118      	cbz	r0, 5676 <CC_PalPowerSaveModeInit+0x16>
    566e:	4b08      	ldr	r3, [pc, #32]	; (5690 <CC_PalPowerSaveModeInit+0x30>)
    5670:	4808      	ldr	r0, [pc, #32]	; (5694 <CC_PalPowerSaveModeInit+0x34>)
    5672:	685b      	ldr	r3, [r3, #4]
    5674:	4798      	blx	r3
    5676:	4a08      	ldr	r2, [pc, #32]	; (5698 <CC_PalPowerSaveModeInit+0x38>)
    5678:	68eb      	ldr	r3, [r5, #12]
    567a:	6920      	ldr	r0, [r4, #16]
    567c:	2100      	movs	r1, #0
    567e:	6011      	str	r1, [r2, #0]
    5680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5684:	4718      	bx	r3
    5686:	bf00      	nop
    5688:	20000104 	.word	0x20000104
    568c:	200000f4 	.word	0x200000f4
    5690:	200000e4 	.word	0x200000e4
    5694:	00006a0c 	.word	0x00006a0c
    5698:	20000a04 	.word	0x20000a04

0000569c <CC_PalPowerSaveModeSelect>:
    569c:	b570      	push	{r4, r5, r6, lr}
    569e:	4d1b      	ldr	r5, [pc, #108]	; (570c <CC_PalPowerSaveModeSelect+0x70>)
    56a0:	4e1b      	ldr	r6, [pc, #108]	; (5710 <CC_PalPowerSaveModeSelect+0x74>)
    56a2:	4604      	mov	r4, r0
    56a4:	68b2      	ldr	r2, [r6, #8]
    56a6:	6928      	ldr	r0, [r5, #16]
    56a8:	4790      	blx	r2
    56aa:	b9f8      	cbnz	r0, 56ec <CC_PalPowerSaveModeSelect+0x50>
    56ac:	b15c      	cbz	r4, 56c6 <CC_PalPowerSaveModeSelect+0x2a>
    56ae:	4c19      	ldr	r4, [pc, #100]	; (5714 <CC_PalPowerSaveModeSelect+0x78>)
    56b0:	6823      	ldr	r3, [r4, #0]
    56b2:	b1b3      	cbz	r3, 56e2 <CC_PalPowerSaveModeSelect+0x46>
    56b4:	2b01      	cmp	r3, #1
    56b6:	d01b      	beq.n	56f0 <CC_PalPowerSaveModeSelect+0x54>
    56b8:	3b01      	subs	r3, #1
    56ba:	6023      	str	r3, [r4, #0]
    56bc:	6928      	ldr	r0, [r5, #16]
    56be:	68f3      	ldr	r3, [r6, #12]
    56c0:	4798      	blx	r3
    56c2:	2000      	movs	r0, #0
    56c4:	bd70      	pop	{r4, r5, r6, pc}
    56c6:	4c13      	ldr	r4, [pc, #76]	; (5714 <CC_PalPowerSaveModeSelect+0x78>)
    56c8:	6821      	ldr	r1, [r4, #0]
    56ca:	b941      	cbnz	r1, 56de <CC_PalPowerSaveModeSelect+0x42>
    56cc:	4b12      	ldr	r3, [pc, #72]	; (5718 <CC_PalPowerSaveModeSelect+0x7c>)
    56ce:	2201      	movs	r2, #1
    56d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    56d4:	4a11      	ldr	r2, [pc, #68]	; (571c <CC_PalPowerSaveModeSelect+0x80>)
    56d6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    56da:	2b00      	cmp	r3, #0
    56dc:	d1fb      	bne.n	56d6 <CC_PalPowerSaveModeSelect+0x3a>
    56de:	3101      	adds	r1, #1
    56e0:	6021      	str	r1, [r4, #0]
    56e2:	68f3      	ldr	r3, [r6, #12]
    56e4:	6928      	ldr	r0, [r5, #16]
    56e6:	4798      	blx	r3
    56e8:	2000      	movs	r0, #0
    56ea:	bd70      	pop	{r4, r5, r6, pc}
    56ec:	480c      	ldr	r0, [pc, #48]	; (5720 <CC_PalPowerSaveModeSelect+0x84>)
    56ee:	bd70      	pop	{r4, r5, r6, pc}
    56f0:	4a0a      	ldr	r2, [pc, #40]	; (571c <CC_PalPowerSaveModeSelect+0x80>)
    56f2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    56f6:	2b00      	cmp	r3, #0
    56f8:	d1fb      	bne.n	56f2 <CC_PalPowerSaveModeSelect+0x56>
    56fa:	4a07      	ldr	r2, [pc, #28]	; (5718 <CC_PalPowerSaveModeSelect+0x7c>)
    56fc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5700:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5704:	f7ff ff46 	bl	5594 <CC_HalMaskInterrupt>
    5708:	6823      	ldr	r3, [r4, #0]
    570a:	e7d5      	b.n	56b8 <CC_PalPowerSaveModeSelect+0x1c>
    570c:	20000104 	.word	0x20000104
    5710:	200000f4 	.word	0x200000f4
    5714:	20000a04 	.word	0x20000a04
    5718:	5002a000 	.word	0x5002a000
    571c:	5002b000 	.word	0x5002b000
    5720:	ffff8fe9 	.word	0xffff8fe9

00005724 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5724:	4770      	bx	lr

00005726 <MyAdd>:
#include "MyMath.h"

int MyAdd(int x, int y)
{
	return (x+y);
}
    5726:	4408      	add	r0, r1
    5728:	4770      	bx	lr

0000572a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    572a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    572e:	4607      	mov	r7, r0
    5730:	460e      	mov	r6, r1
    5732:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    5734:	461d      	mov	r5, r3
    5736:	b30b      	cbz	r3, 577c <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    5738:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    573a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    573c:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    5740:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    5742:	441c      	add	r4, r3
    5744:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    5748:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    574a:	f04f 0900 	mov.w	r9, #0
    574e:	45d1      	cmp	r9, sl
    5750:	d308      	bcc.n	5764 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    5752:	686a      	ldr	r2, [r5, #4]
    5754:	f105 0308 	add.w	r3, r5, #8
    5758:	4641      	mov	r1, r8
    575a:	4638      	mov	r0, r7
    575c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    575e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    5762:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    5764:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    5768:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    576c:	4620      	mov	r0, r4
    576e:	f000 f9fe 	bl	5b6e <strlen>
    5772:	3001      	adds	r0, #1
    5774:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    5776:	f109 0901 	add.w	r9, r9, #1
    577a:	e7e8      	b.n	574e <cbpprintf_external+0x24>
}
    577c:	f06f 0015 	mvn.w	r0, #21
    5780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005784 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5784:	4603      	mov	r3, r0
    5786:	b158      	cbz	r0, 57a0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5788:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    578a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    578e:	2a01      	cmp	r2, #1
    5790:	d003      	beq.n	579a <sys_notify_validate+0x16>
    5792:	2a03      	cmp	r2, #3
    5794:	d104      	bne.n	57a0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5796:	6802      	ldr	r2, [r0, #0]
    5798:	b112      	cbz	r2, 57a0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    579a:	2000      	movs	r0, #0
    579c:	6098      	str	r0, [r3, #8]
    579e:	4770      	bx	lr
		return -EINVAL;
    57a0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    57a4:	4770      	bx	lr

000057a6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    57a6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    57a8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    57aa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    57ae:	2a03      	cmp	r2, #3
    57b0:	f04f 0200 	mov.w	r2, #0
{
    57b4:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    57b6:	bf0c      	ite	eq
    57b8:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    57ba:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    57bc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    57be:	4770      	bx	lr

000057c0 <arch_printk_char_out>:
}
    57c0:	2000      	movs	r0, #0
    57c2:	4770      	bx	lr

000057c4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    57c4:	b40f      	push	{r0, r1, r2, r3}
    57c6:	b507      	push	{r0, r1, r2, lr}
    57c8:	a904      	add	r1, sp, #16
    57ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    57ce:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    57d0:	f000 f91b 	bl	5a0a <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    57d4:	b003      	add	sp, #12
    57d6:	f85d eb04 	ldr.w	lr, [sp], #4
    57da:	b004      	add	sp, #16
    57dc:	4770      	bx	lr

000057de <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    57de:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    57e0:	f013 0307 	ands.w	r3, r3, #7
    57e4:	d105      	bne.n	57f2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    57e6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    57e8:	2b00      	cmp	r3, #0
    57ea:	bf0c      	ite	eq
    57ec:	2000      	moveq	r0, #0
    57ee:	2003      	movne	r0, #3
    57f0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    57f2:	2b02      	cmp	r3, #2
    57f4:	d105      	bne.n	5802 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    57f6:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    57f8:	2b00      	cmp	r3, #0
    57fa:	bf14      	ite	ne
    57fc:	2000      	movne	r0, #0
    57fe:	2004      	moveq	r0, #4
    5800:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5802:	2b01      	cmp	r3, #1
    5804:	d105      	bne.n	5812 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5806:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5808:	2b00      	cmp	r3, #0
    580a:	bf0c      	ite	eq
    580c:	2000      	moveq	r0, #0
    580e:	2005      	movne	r0, #5
    5810:	4770      	bx	lr
	int evt = EVT_NOP;
    5812:	2000      	movs	r0, #0
}
    5814:	4770      	bx	lr

00005816 <notify_one>:
{
    5816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    581a:	460d      	mov	r5, r1
    581c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    581e:	4619      	mov	r1, r3
    5820:	1d28      	adds	r0, r5, #4
{
    5822:	4690      	mov	r8, r2
    5824:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5826:	f7ff ffbe 	bl	57a6 <sys_notify_finalize>
	if (cb) {
    582a:	4604      	mov	r4, r0
    582c:	b138      	cbz	r0, 583e <notify_one+0x28>
		cb(mgr, cli, state, res);
    582e:	4633      	mov	r3, r6
    5830:	4642      	mov	r2, r8
    5832:	4629      	mov	r1, r5
    5834:	4638      	mov	r0, r7
    5836:	46a4      	mov	ip, r4
}
    5838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    583c:	4760      	bx	ip
}
    583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005842 <transition_complete>:
{
    5842:	b410      	push	{r4}
	__asm__ volatile(
    5844:	f04f 0420 	mov.w	r4, #32
    5848:	f3ef 8211 	mrs	r2, BASEPRI
    584c:	f384 8812 	msr	BASEPRI_MAX, r4
    5850:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5854:	6141      	str	r1, [r0, #20]
}
    5856:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5858:	2101      	movs	r1, #1
    585a:	f7fb b825 	b.w	8a8 <process_event>

0000585e <validate_args>:
{
    585e:	b510      	push	{r4, lr}
    5860:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5862:	b140      	cbz	r0, 5876 <validate_args+0x18>
    5864:	b139      	cbz	r1, 5876 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5866:	1d08      	adds	r0, r1, #4
    5868:	f7ff ff8c 	bl	5784 <sys_notify_validate>
	if ((rv == 0)
    586c:	b928      	cbnz	r0, 587a <validate_args+0x1c>
	    && ((cli->notify.flags
    586e:	68a3      	ldr	r3, [r4, #8]
    5870:	f033 0303 	bics.w	r3, r3, #3
    5874:	d001      	beq.n	587a <validate_args+0x1c>
		rv = -EINVAL;
    5876:	f06f 0015 	mvn.w	r0, #21
}
    587a:	bd10      	pop	{r4, pc}

0000587c <onoff_manager_init>:
{
    587c:	b538      	push	{r3, r4, r5, lr}
    587e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5880:	4605      	mov	r5, r0
    5882:	b158      	cbz	r0, 589c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5884:	b151      	cbz	r1, 589c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5886:	680b      	ldr	r3, [r1, #0]
    5888:	b143      	cbz	r3, 589c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    588a:	684b      	ldr	r3, [r1, #4]
    588c:	b133      	cbz	r3, 589c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    588e:	221c      	movs	r2, #28
    5890:	2100      	movs	r1, #0
    5892:	f000 f987 	bl	5ba4 <memset>
    5896:	612c      	str	r4, [r5, #16]
	return 0;
    5898:	2000      	movs	r0, #0
}
    589a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    589c:	f06f 0015 	mvn.w	r0, #21
    58a0:	e7fb      	b.n	589a <onoff_manager_init+0x1e>

000058a2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    58a2:	b570      	push	{r4, r5, r6, lr}
    58a4:	4604      	mov	r4, r0
    58a6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    58a8:	f7ff ffd9 	bl	585e <validate_args>

	if (rv < 0) {
    58ac:	1e05      	subs	r5, r0, #0
    58ae:	db31      	blt.n	5914 <onoff_request+0x72>
    58b0:	f04f 0320 	mov.w	r3, #32
    58b4:	f3ef 8111 	mrs	r1, BASEPRI
    58b8:	f383 8812 	msr	BASEPRI_MAX, r3
    58bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    58c0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    58c2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    58c4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    58c8:	42ab      	cmp	r3, r5
    58ca:	f000 0207 	and.w	r2, r0, #7
    58ce:	d02e      	beq.n	592e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    58d0:	2a02      	cmp	r2, #2
    58d2:	d10e      	bne.n	58f2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    58d4:	3301      	adds	r3, #1
    58d6:	8363      	strh	r3, [r4, #26]
	rv = state;
    58d8:	4615      	mov	r5, r2
		notify = true;
    58da:	2301      	movs	r3, #1
	__asm__ volatile(
    58dc:	f381 8811 	msr	BASEPRI, r1
    58e0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    58e4:	b1b3      	cbz	r3, 5914 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    58e6:	2300      	movs	r3, #0
    58e8:	4631      	mov	r1, r6
    58ea:	4620      	mov	r0, r4
    58ec:	f7ff ff93 	bl	5816 <notify_one>
    58f0:	e010      	b.n	5914 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    58f2:	0783      	lsls	r3, r0, #30
    58f4:	d001      	beq.n	58fa <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    58f6:	2a06      	cmp	r2, #6
    58f8:	d10e      	bne.n	5918 <onoff_request+0x76>
	parent->next = child;
    58fa:	2300      	movs	r3, #0
    58fc:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    58fe:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5900:	b993      	cbnz	r3, 5928 <onoff_request+0x86>
	list->head = node;
    5902:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5906:	4615      	mov	r5, r2
    5908:	b962      	cbnz	r2, 5924 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    590a:	460a      	mov	r2, r1
    590c:	4620      	mov	r0, r4
    590e:	2102      	movs	r1, #2
    5910:	f7fa ffca 	bl	8a8 <process_event>
		}
	}

	return rv;
}
    5914:	4628      	mov	r0, r5
    5916:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5918:	2a05      	cmp	r2, #5
    591a:	bf0c      	ite	eq
    591c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    5920:	f06f 0504 	mvnne.w	r5, #4
    5924:	2300      	movs	r3, #0
    5926:	e7d9      	b.n	58dc <onoff_request+0x3a>
	parent->next = child;
    5928:	601e      	str	r6, [r3, #0]
	list->tail = node;
    592a:	6066      	str	r6, [r4, #4]
}
    592c:	e7eb      	b.n	5906 <onoff_request+0x64>
		rv = -EAGAIN;
    592e:	f06f 050a 	mvn.w	r5, #10
    5932:	e7f7      	b.n	5924 <onoff_request+0x82>

00005934 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5934:	4604      	mov	r4, r0
    5936:	b508      	push	{r3, lr}
    5938:	4608      	mov	r0, r1
    593a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    593c:	461a      	mov	r2, r3
    593e:	47a0      	blx	r4
	return z_impl_z_current_get();
    5940:	f7ff fb64 	bl	500c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5944:	f7fc fec0 	bl	26c8 <z_impl_k_thread_abort>

00005948 <encode_uint>:
{
    5948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    594c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    594e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    5950:	2b6f      	cmp	r3, #111	; 0x6f
{
    5952:	4680      	mov	r8, r0
    5954:	460f      	mov	r7, r1
    5956:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5958:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    595c:	d029      	beq.n	59b2 <encode_uint+0x6a>
    595e:	d824      	bhi.n	59aa <encode_uint+0x62>
		return 16;
    5960:	2b58      	cmp	r3, #88	; 0x58
    5962:	bf14      	ite	ne
    5964:	260a      	movne	r6, #10
    5966:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    5968:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    596c:	4632      	mov	r2, r6
    596e:	2300      	movs	r3, #0
    5970:	4640      	mov	r0, r8
    5972:	4639      	mov	r1, r7
    5974:	f7fa fbc4 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5978:	2a09      	cmp	r2, #9
    597a:	b2d4      	uxtb	r4, r2
    597c:	d81e      	bhi.n	59bc <encode_uint+0x74>
    597e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5980:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5982:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5984:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5988:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    598c:	d301      	bcc.n	5992 <encode_uint+0x4a>
    598e:	45d1      	cmp	r9, sl
    5990:	d811      	bhi.n	59b6 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5992:	782b      	ldrb	r3, [r5, #0]
    5994:	069b      	lsls	r3, r3, #26
    5996:	d505      	bpl.n	59a4 <encode_uint+0x5c>
		if (radix == 8) {
    5998:	2e08      	cmp	r6, #8
    599a:	d115      	bne.n	59c8 <encode_uint+0x80>
			conv->altform_0 = true;
    599c:	78ab      	ldrb	r3, [r5, #2]
    599e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    59a2:	70ab      	strb	r3, [r5, #2]
}
    59a4:	4648      	mov	r0, r9
    59a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    59aa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    59ae:	2b70      	cmp	r3, #112	; 0x70
    59b0:	e7d7      	b.n	5962 <encode_uint+0x1a>
	switch (specifier) {
    59b2:	2608      	movs	r6, #8
    59b4:	e7d8      	b.n	5968 <encode_uint+0x20>
		value /= radix;
    59b6:	4680      	mov	r8, r0
    59b8:	460f      	mov	r7, r1
    59ba:	e7d7      	b.n	596c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59bc:	f1bb 0f19 	cmp.w	fp, #25
    59c0:	bf94      	ite	ls
    59c2:	3437      	addls	r4, #55	; 0x37
    59c4:	3457      	addhi	r4, #87	; 0x57
    59c6:	e7db      	b.n	5980 <encode_uint+0x38>
		} else if (radix == 16) {
    59c8:	2e10      	cmp	r6, #16
    59ca:	d1eb      	bne.n	59a4 <encode_uint+0x5c>
			conv->altform_0c = true;
    59cc:	78ab      	ldrb	r3, [r5, #2]
    59ce:	f043 0310 	orr.w	r3, r3, #16
    59d2:	e7e6      	b.n	59a2 <encode_uint+0x5a>

000059d4 <outs>:
{
    59d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59d8:	4607      	mov	r7, r0
    59da:	4688      	mov	r8, r1
    59dc:	4615      	mov	r5, r2
    59de:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    59e0:	4614      	mov	r4, r2
    59e2:	42b4      	cmp	r4, r6
    59e4:	eba4 0005 	sub.w	r0, r4, r5
    59e8:	d302      	bcc.n	59f0 <outs+0x1c>
    59ea:	b93e      	cbnz	r6, 59fc <outs+0x28>
    59ec:	7823      	ldrb	r3, [r4, #0]
    59ee:	b12b      	cbz	r3, 59fc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    59f0:	f814 0b01 	ldrb.w	r0, [r4], #1
    59f4:	4641      	mov	r1, r8
    59f6:	47b8      	blx	r7
		if (rc < 0) {
    59f8:	2800      	cmp	r0, #0
    59fa:	daf2      	bge.n	59e2 <outs+0xe>
}
    59fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a00 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    5a00:	4770      	bx	lr

00005a02 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    5a02:	f000 ba5a 	b.w	5eba <sys_clock_cycle_get_32>

00005a06 <dummy_timestamp>:
    5a06:	2000      	movs	r0, #0
    5a08:	4770      	bx	lr

00005a0a <z_log_vprintk>:
{
    5a0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5a0c:	2300      	movs	r3, #0
    5a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5a12:	e9cd 3300 	strd	r3, r3, [sp]
    5a16:	461a      	mov	r2, r3
    5a18:	4619      	mov	r1, r3
    5a1a:	4618      	mov	r0, r3
    5a1c:	f7fb fe86 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    5a20:	b005      	add	sp, #20
    5a22:	f85d fb04 	ldr.w	pc, [sp], #4

00005a26 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5a26:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    5a28:	f7fb fc28 	bl	127c <log_init>
	}

	return 0;
}
    5a2c:	2000      	movs	r0, #0
    5a2e:	bd08      	pop	{r3, pc}

00005a30 <z_log_get_tag>:
}
    5a30:	2000      	movs	r0, #0
    5a32:	4770      	bx	lr

00005a34 <out_func>:
{
    5a34:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    5a36:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    5a3a:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    5a3e:	6852      	ldr	r2, [r2, #4]
    5a40:	2101      	movs	r1, #1
    5a42:	f10d 0007 	add.w	r0, sp, #7
    5a46:	4798      	blx	r3
}
    5a48:	2000      	movs	r0, #0
    5a4a:	b003      	add	sp, #12
    5a4c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a50 <cr_out_func>:
{
    5a50:	b538      	push	{r3, r4, r5, lr}
    5a52:	4605      	mov	r5, r0
    5a54:	460c      	mov	r4, r1
	out_func(c, ctx);
    5a56:	f7ff ffed 	bl	5a34 <out_func>
	if (c == '\n') {
    5a5a:	2d0a      	cmp	r5, #10
    5a5c:	d103      	bne.n	5a66 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    5a5e:	4621      	mov	r1, r4
    5a60:	200d      	movs	r0, #13
    5a62:	f7ff ffe7 	bl	5a34 <out_func>
}
    5a66:	2000      	movs	r0, #0
    5a68:	bd38      	pop	{r3, r4, r5, pc}

00005a6a <buffer_write>:
{
    5a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a6c:	4606      	mov	r6, r0
    5a6e:	460d      	mov	r5, r1
    5a70:	4614      	mov	r4, r2
    5a72:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    5a74:	4621      	mov	r1, r4
    5a76:	4628      	mov	r0, r5
    5a78:	463a      	mov	r2, r7
    5a7a:	47b0      	blx	r6
	} while (len != 0);
    5a7c:	1a24      	subs	r4, r4, r0
		buf += processed;
    5a7e:	4405      	add	r5, r0
	} while (len != 0);
    5a80:	d1f8      	bne.n	5a74 <buffer_write+0xa>
}
    5a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005a84 <log_output_flush>:
		     output->control_block->offset,
    5a84:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    5a86:	6881      	ldr	r1, [r0, #8]
{
    5a88:	b510      	push	{r4, lr}
    5a8a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    5a8c:	e9d2 2300 	ldrd	r2, r3, [r2]
    5a90:	6800      	ldr	r0, [r0, #0]
    5a92:	f7ff ffea 	bl	5a6a <buffer_write>
	output->control_block->offset = 0;
    5a96:	6863      	ldr	r3, [r4, #4]
    5a98:	2200      	movs	r2, #0
    5a9a:	601a      	str	r2, [r3, #0]
}
    5a9c:	bd10      	pop	{r4, pc}

00005a9e <z_log_msg2_finalize>:
{
    5a9e:	b570      	push	{r4, r5, r6, lr}
    5aa0:	460e      	mov	r6, r1
    5aa2:	4615      	mov	r5, r2
    5aa4:	4619      	mov	r1, r3
	if (!msg) {
    5aa6:	4604      	mov	r4, r0
    5aa8:	b918      	cbnz	r0, 5ab2 <z_log_msg2_finalize+0x14>
}
    5aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    5aae:	f7fb bc37 	b.w	1320 <z_log_dropped>
	if (data) {
    5ab2:	b143      	cbz	r3, 5ac6 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    5ab4:	f100 0310 	add.w	r3, r0, #16
    5ab8:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    5abc:	4418      	add	r0, r3
    5abe:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    5ac2:	f000 f864 	bl	5b8e <memcpy>
	msg->hdr.source = source;
    5ac6:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    5aca:	4620      	mov	r0, r4
}
    5acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    5ad0:	f7fb bc44 	b.w	135c <z_log_msg2_commit>

00005ad4 <abort_function>:
{
    5ad4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5ad6:	2000      	movs	r0, #0
    5ad8:	f7fb fb88 	bl	11ec <sys_reboot>

00005adc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5ade:	ab0b      	add	r3, sp, #44	; 0x2c
    5ae0:	9305      	str	r3, [sp, #20]
    5ae2:	9303      	str	r3, [sp, #12]
    5ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ae6:	9302      	str	r3, [sp, #8]
    5ae8:	2300      	movs	r3, #0
    5aea:	e9cd 3300 	strd	r3, r3, [sp]
    5aee:	2201      	movs	r2, #1
    5af0:	4618      	mov	r0, r3
    5af2:	f7fb fe1b 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    5af6:	b007      	add	sp, #28
    5af8:	f85d fb04 	ldr.w	pc, [sp], #4

00005afc <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5afc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5afe:	6800      	ldr	r0, [r0, #0]
    5b00:	f7fc b93c 	b.w	1d7c <z_arm_fatal_error>

00005b04 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5b04:	2100      	movs	r1, #0
    5b06:	2001      	movs	r0, #1
    5b08:	f7fc b938 	b.w	1d7c <z_arm_fatal_error>

00005b0c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5b0c:	b508      	push	{r3, lr}
	handler();
    5b0e:	f7fc f9bb 	bl	1e88 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5b16:	f7fc ba93 	b.w	2040 <z_arm_exc_exit>

00005b1a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5b1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5b1c:	ab0b      	add	r3, sp, #44	; 0x2c
    5b1e:	9305      	str	r3, [sp, #20]
    5b20:	9303      	str	r3, [sp, #12]
    5b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b24:	9302      	str	r3, [sp, #8]
    5b26:	2300      	movs	r3, #0
    5b28:	e9cd 3300 	strd	r3, r3, [sp]
    5b2c:	2201      	movs	r2, #1
    5b2e:	4618      	mov	r0, r3
    5b30:	f7fb fdfc 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    5b34:	b007      	add	sp, #28
    5b36:	f85d fb04 	ldr.w	pc, [sp], #4

00005b3a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5b3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5b3c:	ab0b      	add	r3, sp, #44	; 0x2c
    5b3e:	9305      	str	r3, [sp, #20]
    5b40:	9303      	str	r3, [sp, #12]
    5b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b44:	9302      	str	r3, [sp, #8]
    5b46:	2300      	movs	r3, #0
    5b48:	e9cd 3300 	strd	r3, r3, [sp]
    5b4c:	2201      	movs	r2, #1
    5b4e:	4618      	mov	r0, r3
    5b50:	f7fb fdec 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    5b54:	b007      	add	sp, #28
    5b56:	f85d fb04 	ldr.w	pc, [sp], #4

00005b5a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5b5a:	3901      	subs	r1, #1
    5b5c:	4603      	mov	r3, r0
    5b5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5b62:	b90a      	cbnz	r2, 5b68 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5b64:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5b66:	4770      	bx	lr
		*d = *s;
    5b68:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5b6c:	e7f7      	b.n	5b5e <strcpy+0x4>

00005b6e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5b6e:	4603      	mov	r3, r0
	size_t n = 0;
    5b70:	2000      	movs	r0, #0

	while (*s != '\0') {
    5b72:	5c1a      	ldrb	r2, [r3, r0]
    5b74:	b902      	cbnz	r2, 5b78 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5b76:	4770      	bx	lr
		n++;
    5b78:	3001      	adds	r0, #1
    5b7a:	e7fa      	b.n	5b72 <strlen+0x4>

00005b7c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5b7c:	4603      	mov	r3, r0
	size_t n = 0;
    5b7e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5b80:	5c1a      	ldrb	r2, [r3, r0]
    5b82:	b10a      	cbz	r2, 5b88 <strnlen+0xc>
    5b84:	4288      	cmp	r0, r1
    5b86:	d100      	bne.n	5b8a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5b88:	4770      	bx	lr
		n++;
    5b8a:	3001      	adds	r0, #1
    5b8c:	e7f8      	b.n	5b80 <strnlen+0x4>

00005b8e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5b8e:	b510      	push	{r4, lr}
    5b90:	1e43      	subs	r3, r0, #1
    5b92:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5b94:	4291      	cmp	r1, r2
    5b96:	d100      	bne.n	5b9a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5b98:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
    5b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5ba2:	e7f7      	b.n	5b94 <memcpy+0x6>

00005ba4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5ba4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5ba6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5ba8:	4603      	mov	r3, r0
	while (n > 0) {
    5baa:	4293      	cmp	r3, r2
    5bac:	d100      	bne.n	5bb0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5bae:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5bb0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5bb4:	e7f9      	b.n	5baa <memset+0x6>

00005bb6 <_stdout_hook_default>:
}
    5bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5bba:	4770      	bx	lr

00005bbc <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5bbc:	2806      	cmp	r0, #6
    5bbe:	d108      	bne.n	5bd2 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bc4:	2201      	movs	r2, #1
    5bc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5bca:	f3bf 8f4f 	dsb	sy
        __WFE();
    5bce:	bf20      	wfe
    while (true)
    5bd0:	e7fd      	b.n	5bce <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    5bd2:	4770      	bx	lr

00005bd4 <pm_state_exit_post_ops>:
    5bd4:	2300      	movs	r3, #0
    5bd6:	f383 8811 	msr	BASEPRI, r3
    5bda:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5bde:	4770      	bx	lr

00005be0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5be0:	6903      	ldr	r3, [r0, #16]
    5be2:	b2c9      	uxtb	r1, r1
    5be4:	220c      	movs	r2, #12
    5be6:	fb01 3302 	mla	r3, r1, r2, r3
    5bea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5bec:	f000 0007 	and.w	r0, r0, #7
    5bf0:	4770      	bx	lr

00005bf2 <set_on_state>:
	__asm__ volatile(
    5bf2:	f04f 0320 	mov.w	r3, #32
    5bf6:	f3ef 8211 	mrs	r2, BASEPRI
    5bfa:	f383 8812 	msr	BASEPRI_MAX, r3
    5bfe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5c02:	6803      	ldr	r3, [r0, #0]
    5c04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5c08:	f043 0302 	orr.w	r3, r3, #2
    5c0c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5c0e:	f382 8811 	msr	BASEPRI, r2
    5c12:	f3bf 8f6f 	isb	sy
}
    5c16:	4770      	bx	lr

00005c18 <stop>:
{
    5c18:	4603      	mov	r3, r0
    5c1a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    5c1c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5c1e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5c20:	f04f 0420 	mov.w	r4, #32
    5c24:	f3ef 8611 	mrs	r6, BASEPRI
    5c28:	f384 8812 	msr	BASEPRI_MAX, r4
    5c2c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5c30:	250c      	movs	r5, #12
    5c32:	fb05 0401 	mla	r4, r5, r1, r0
    5c36:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5c38:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5c3c:	d001      	beq.n	5c42 <stop+0x2a>
    5c3e:	42a2      	cmp	r2, r4
    5c40:	d111      	bne.n	5c66 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5c42:	fb05 0001 	mla	r0, r5, r1, r0
    5c46:	2201      	movs	r2, #1
    5c48:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    5c4a:	2000      	movs	r0, #0
	__asm__ volatile(
    5c4c:	f386 8811 	msr	BASEPRI, r6
    5c50:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5c54:	b930      	cbnz	r0, 5c64 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    5c56:	685b      	ldr	r3, [r3, #4]
    5c58:	220c      	movs	r2, #12
    5c5a:	fb02 3101 	mla	r1, r2, r1, r3
    5c5e:	684b      	ldr	r3, [r1, #4]
    5c60:	4798      	blx	r3
	return 0;
    5c62:	2000      	movs	r0, #0
}
    5c64:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    5c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5c6a:	e7ef      	b.n	5c4c <stop+0x34>

00005c6c <api_stop>:
	return stop(dev, subsys, CTX_API);
    5c6c:	2280      	movs	r2, #128	; 0x80
    5c6e:	f7ff bfd3 	b.w	5c18 <stop>

00005c72 <async_start>:
{
    5c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c74:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5c76:	6904      	ldr	r4, [r0, #16]
{
    5c78:	4605      	mov	r5, r0
    5c7a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5c7c:	f04f 0020 	mov.w	r0, #32
    5c80:	f3ef 8c11 	mrs	ip, BASEPRI
    5c84:	f380 8812 	msr	BASEPRI_MAX, r0
    5c88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5c8c:	260c      	movs	r6, #12
    5c8e:	fb06 4601 	mla	r6, r6, r1, r4
    5c92:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5c94:	f000 0e07 	and.w	lr, r0, #7
    5c98:	f1be 0f01 	cmp.w	lr, #1
    5c9c:	d110      	bne.n	5cc0 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5c9e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    5ca0:	2600      	movs	r6, #0
	__asm__ volatile(
    5ca2:	f38c 8811 	msr	BASEPRI, ip
    5ca6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5caa:	b93e      	cbnz	r6, 5cbc <async_start+0x4a>
	subdata->cb = cb;
    5cac:	200c      	movs	r0, #12
    5cae:	4341      	muls	r1, r0
    5cb0:	440c      	add	r4, r1
	subdata->user_data = user_data;
    5cb2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5cb6:	686b      	ldr	r3, [r5, #4]
    5cb8:	585b      	ldr	r3, [r3, r1]
    5cba:	4798      	blx	r3
}
    5cbc:	4630      	mov	r0, r6
    5cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5cc0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    5cc4:	4287      	cmp	r7, r0
    5cc6:	bf14      	ite	ne
    5cc8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    5ccc:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    5cd0:	e7e7      	b.n	5ca2 <async_start+0x30>

00005cd2 <api_start>:
{
    5cd2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5cd4:	2480      	movs	r4, #128	; 0x80
    5cd6:	9400      	str	r4, [sp, #0]
    5cd8:	f7ff ffcb 	bl	5c72 <async_start>
}
    5cdc:	b002      	add	sp, #8
    5cde:	bd10      	pop	{r4, pc}

00005ce0 <onoff_started_callback>:
	return &data->mgr[type];
    5ce0:	6900      	ldr	r0, [r0, #16]
{
    5ce2:	b410      	push	{r4}
	return &data->mgr[type];
    5ce4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5ce6:	241c      	movs	r4, #28
    5ce8:	fb03 0004 	mla	r0, r3, r4, r0
    5cec:	2100      	movs	r1, #0
}
    5cee:	bc10      	pop	{r4}
	notify(mgr, 0);
    5cf0:	4710      	bx	r2

00005cf2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5cf2:	2000      	movs	r0, #0
    5cf4:	f000 b9c5 	b.w	6082 <nrfx_clock_start>

00005cf8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5cf8:	2000      	movs	r0, #0
    5cfa:	f000 b9ff 	b.w	60fc <nrfx_clock_stop>

00005cfe <blocking_start_callback>:
{
    5cfe:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5d00:	f7fe be4a 	b.w	4998 <z_impl_k_sem_give>

00005d04 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5d04:	6843      	ldr	r3, [r0, #4]
    5d06:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5d08:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5d0c:	600b      	str	r3, [r1, #0]
}
    5d0e:	2000      	movs	r0, #0
    5d10:	4770      	bx	lr

00005d12 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5d12:	6843      	ldr	r3, [r0, #4]
    5d14:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5d16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5d1a:	4042      	eors	r2, r0
    5d1c:	400a      	ands	r2, r1
    5d1e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5d20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5d24:	2000      	movs	r0, #0
    5d26:	4770      	bx	lr

00005d28 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5d28:	6843      	ldr	r3, [r0, #4]
    5d2a:	685b      	ldr	r3, [r3, #4]
}
    5d2c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5d2e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5d32:	4770      	bx	lr

00005d34 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5d34:	6843      	ldr	r3, [r0, #4]
    5d36:	685b      	ldr	r3, [r3, #4]
}
    5d38:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5d3a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5d3e:	4770      	bx	lr

00005d40 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5d40:	6843      	ldr	r3, [r0, #4]
    5d42:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5d44:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5d48:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5d4a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5d4e:	2000      	movs	r0, #0
    5d50:	4770      	bx	lr

00005d52 <gpio_nrfx_manage_callback>:
	return port->data;
    5d52:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5d54:	6858      	ldr	r0, [r3, #4]
{
    5d56:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5d58:	b158      	cbz	r0, 5d72 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5d5a:	2400      	movs	r4, #0
    5d5c:	4281      	cmp	r1, r0
    5d5e:	d112      	bne.n	5d86 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    5d60:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    5d62:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    5d64:	b954      	cbnz	r4, 5d7c <gpio_nrfx_manage_callback+0x2a>
    5d66:	428d      	cmp	r5, r1
	list->head = node;
    5d68:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5d6a:	d100      	bne.n	5d6e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5d6c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5d6e:	2000      	movs	r0, #0
    5d70:	6008      	str	r0, [r1, #0]
	if (set) {
    5d72:	b96a      	cbnz	r2, 5d90 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    5d74:	2000      	movs	r0, #0
}
    5d76:	bd30      	pop	{r4, r5, pc}
    5d78:	4628      	mov	r0, r5
    5d7a:	e7ef      	b.n	5d5c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    5d7c:	428d      	cmp	r5, r1
	parent->next = child;
    5d7e:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5d80:	bf08      	it	eq
    5d82:	609c      	streq	r4, [r3, #8]
}
    5d84:	e7f3      	b.n	5d6e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    5d86:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5d88:	4604      	mov	r4, r0
    5d8a:	2d00      	cmp	r5, #0
    5d8c:	d1f4      	bne.n	5d78 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5d8e:	b13a      	cbz	r2, 5da0 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    5d90:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    5d92:	685a      	ldr	r2, [r3, #4]
    5d94:	600a      	str	r2, [r1, #0]
	list->head = node;
    5d96:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5d98:	2800      	cmp	r0, #0
    5d9a:	d1eb      	bne.n	5d74 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5d9c:	6099      	str	r1, [r3, #8]
}
    5d9e:	e7ea      	b.n	5d76 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5da0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5da4:	e7e7      	b.n	5d76 <gpio_nrfx_manage_callback+0x24>

00005da6 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    5da6:	6902      	ldr	r2, [r0, #16]
{
    5da8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    5daa:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5dae:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5db2:	2000      	movs	r0, #0
    5db4:	4770      	bx	lr

00005db6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5db6:	6843      	ldr	r3, [r0, #4]
    5db8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5dba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5dbe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5dc2:	4770      	bx	lr

00005dc4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5dc4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    5dc6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5dc8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5dce:	b148      	cbz	r0, 5de4 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5dd0:	7c52      	ldrb	r2, [r2, #17]
    5dd2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dd4:	2000      	movs	r0, #0
    5dd6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5dda:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dde:	2201      	movs	r2, #1
    5de0:	601a      	str	r2, [r3, #0]
	return 0;
    5de2:	4770      	bx	lr
		return -1;
    5de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5de8:	4770      	bx	lr

00005dea <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5dea:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5dec:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dee:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5df2:	b940      	cbnz	r0, 5e06 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5df4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5df6:	079b      	lsls	r3, r3, #30
    5df8:	d406      	bmi.n	5e08 <is_tx_ready.isra.0+0x1e>
    5dfa:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5dfe:	3800      	subs	r0, #0
    5e00:	bf18      	it	ne
    5e02:	2001      	movne	r0, #1
    5e04:	4770      	bx	lr
    5e06:	2001      	movs	r0, #1
}
    5e08:	4770      	bx	lr

00005e0a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    5e0a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5e0c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5e0e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5e12:	05c9      	lsls	r1, r1, #23
    5e14:	d518      	bpl.n	5e48 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e16:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5e1a:	b1a9      	cbz	r1, 5e48 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5e1c:	f04f 0020 	mov.w	r0, #32
    5e20:	f3ef 8111 	mrs	r1, BASEPRI
    5e24:	f380 8812 	msr	BASEPRI_MAX, r0
    5e28:	f3bf 8f6f 	isb	sy
    5e2c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5e30:	b130      	cbz	r0, 5e40 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e32:	2000      	movs	r0, #0
    5e34:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5e38:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e3c:	2001      	movs	r0, #1
    5e3e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    5e40:	f381 8811 	msr	BASEPRI, r1
    5e44:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e48:	6852      	ldr	r2, [r2, #4]
    5e4a:	06d2      	lsls	r2, r2, #27
    5e4c:	d515      	bpl.n	5e7a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    5e4e:	f04f 0120 	mov.w	r1, #32
    5e52:	f3ef 8211 	mrs	r2, BASEPRI
    5e56:	f381 8812 	msr	BASEPRI_MAX, r1
    5e5a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e5e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5e62:	b111      	cbz	r1, 5e6a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5e64:	2100      	movs	r1, #0
    5e66:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5e6e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5e72:	f382 8811 	msr	BASEPRI, r2
    5e76:	f3bf 8f6f 	isb	sy
}
    5e7a:	4770      	bx	lr

00005e7c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5e7c:	b510      	push	{r4, lr}
    5e7e:	2200      	movs	r2, #0
    5e80:	4604      	mov	r4, r0
    5e82:	2101      	movs	r1, #1
    5e84:	2028      	movs	r0, #40	; 0x28
    5e86:	f7fb ffe7 	bl	1e58 <z_arm_irq_priority_set>
    5e8a:	2028      	movs	r0, #40	; 0x28
    5e8c:	f7fb ffc6 	bl	1e1c <arch_irq_enable>
    5e90:	4620      	mov	r0, r4
    5e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e96:	f7fd b913 	b.w	30c0 <uarte_instance_init.constprop.0>

00005e9a <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    5e9a:	b510      	push	{r4, lr}
    5e9c:	2200      	movs	r2, #0
    5e9e:	4604      	mov	r4, r0
    5ea0:	2101      	movs	r1, #1
    5ea2:	2002      	movs	r0, #2
    5ea4:	f7fb ffd8 	bl	1e58 <z_arm_irq_priority_set>
    5ea8:	2002      	movs	r0, #2
    5eaa:	f7fb ffb7 	bl	1e1c <arch_irq_enable>
    5eae:	4620      	mov	r0, r4
    5eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5eb4:	f7fd b904 	b.w	30c0 <uarte_instance_init.constprop.0>

00005eb8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5eb8:	4770      	bx	lr

00005eba <sys_clock_cycle_get_32>:
{
    5eba:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    5ebc:	f7fd fa78 	bl	33b0 <z_nrf_rtc_timer_read>
}
    5ec0:	bd08      	pop	{r3, pc}

00005ec2 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5ec2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5ec4:	6843      	ldr	r3, [r0, #4]
    5ec6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5ec8:	7a03      	ldrb	r3, [r0, #8]
    5eca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5ece:	3b01      	subs	r3, #1
    5ed0:	00db      	lsls	r3, r3, #3
    5ed2:	6845      	ldr	r5, [r0, #4]
    5ed4:	6814      	ldr	r4, [r2, #0]
    5ed6:	441d      	add	r5, r3
    5ed8:	42ac      	cmp	r4, r5
    5eda:	d902      	bls.n	5ee2 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    5edc:	f06f 0001 	mvn.w	r0, #1
}
    5ee0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5ee2:	7965      	ldrb	r5, [r4, #5]
    5ee4:	428d      	cmp	r5, r1
    5ee6:	d002      	beq.n	5eee <pinctrl_lookup_state+0x2c>
		(*state)++;
    5ee8:	3408      	adds	r4, #8
    5eea:	6014      	str	r4, [r2, #0]
    5eec:	e7f1      	b.n	5ed2 <pinctrl_lookup_state+0x10>
			return 0;
    5eee:	2000      	movs	r0, #0
    5ef0:	e7f6      	b.n	5ee0 <pinctrl_lookup_state+0x1e>

00005ef2 <nrf_gpio_pin_write>:
    if (value == 0)
    5ef2:	b909      	cbnz	r1, 5ef8 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    5ef4:	f7fd bc14 	b.w	3720 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    5ef8:	f7fd bc44 	b.w	3784 <nrf_gpio_pin_set>

00005efc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	4615      	mov	r5, r2
    5f00:	4604      	mov	r4, r0
    5f02:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5f06:	42a6      	cmp	r6, r4
    5f08:	d101      	bne.n	5f0e <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5f0a:	2000      	movs	r0, #0
}
    5f0c:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    5f0e:	6823      	ldr	r3, [r4, #0]
    5f10:	0c1a      	lsrs	r2, r3, #16
    5f12:	2a22      	cmp	r2, #34	; 0x22
    5f14:	f200 808e 	bhi.w	6034 <pinctrl_configure_pins+0x138>
    5f18:	e8df f002 	tbb	[pc, r2]
    5f1c:	43241d12 	.word	0x43241d12
    5f20:	8c433929 	.word	0x8c433929
    5f24:	488c8c8c 	.word	0x488c8c8c
    5f28:	8c8c8c4d 	.word	0x8c8c8c4d
    5f2c:	8c8c8c8c 	.word	0x8c8c8c8c
    5f30:	5e528c8c 	.word	0x5e528c8c
    5f34:	8c8c6863 	.word	0x8c8c6863
    5f38:	78736d8c 	.word	0x78736d8c
    5f3c:	827d      	.short	0x827d
    5f3e:	87          	.byte	0x87
    5f3f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f44:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5f48:	6820      	ldr	r0, [r4, #0]
    5f4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5f4e:	f7fd fc19 	bl	3784 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5f52:	2201      	movs	r2, #1
    5f54:	e015      	b.n	5f82 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f5a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5f5e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5f60:	2100      	movs	r1, #0
    5f62:	e00f      	b.n	5f84 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    5f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f68:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    5f6c:	e7ec      	b.n	5f48 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    5f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f72:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5f76:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    5f78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5f7c:	f7fd fbd0 	bl	3720 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5f80:	2200      	movs	r2, #0
    5f82:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5f84:	6820      	ldr	r0, [r4, #0]
    5f86:	f7fd fbdb 	bl	3740 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5f8a:	3404      	adds	r4, #4
    5f8c:	e7bb      	b.n	5f06 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f92:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5f96:	6820      	ldr	r0, [r4, #0]
    5f98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5f9c:	f7fd fbc0 	bl	3720 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5fa0:	e7d7      	b.n	5f52 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fa6:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5faa:	e7d8      	b.n	5f5e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    5fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fb0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5fb4:	e7d3      	b.n	5f5e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fba:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    5fbe:	e7ce      	b.n	5f5e <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    5fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fc4:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5fc8:	6820      	ldr	r0, [r4, #0]
    5fca:	f3c0 3140 	ubfx	r1, r0, #13, #1
    5fce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5fd2:	f7ff ff8e 	bl	5ef2 <nrf_gpio_pin_write>
    5fd6:	e7bc      	b.n	5f52 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fdc:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5fe0:	e7f2      	b.n	5fc8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    5fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fe6:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5fea:	e7ed      	b.n	5fc8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ff0:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    5ff4:	e7e8      	b.n	5fc8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ffa:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5ffe:	2201      	movs	r2, #1
    6000:	e7ae      	b.n	5f60 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    6002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6006:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    600a:	e7f8      	b.n	5ffe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    600c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6010:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6014:	e7f3      	b.n	5ffe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    601a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    601e:	e7ee      	b.n	5ffe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6024:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6028:	e7e9      	b.n	5ffe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    602a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    602e:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    6032:	e7e4      	b.n	5ffe <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    6034:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6038:	e768      	b.n	5f0c <pinctrl_configure_pins+0x10>

0000603a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    603a:	f7ff b99d 	b.w	5378 <nrf_cc3xx_platform_init_no_rng>

0000603e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    603e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6040:	f7fb fdb4 	bl	1bac <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6044:	f7fb fe66 	bl	1d14 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    604c:	f7ff b994 	b.w	5378 <nrf_cc3xx_platform_init_no_rng>

00006050 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6054:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    6058:	f1a0 0308 	sub.w	r3, r0, #8
    605c:	4258      	negs	r0, r3
    605e:	4158      	adcs	r0, r3
    6060:	4770      	bx	lr

00006062 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6062:	4700      	bx	r0

00006064 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6064:	f000 ba10 	b.w	6488 <z_impl_k_busy_wait>

00006068 <nrfx_clock_enable>:
{
    6068:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    606a:	2000      	movs	r0, #0
    606c:	f7fb fee6 	bl	1e3c <arch_irq_is_enabled>
    6070:	b908      	cbnz	r0, 6076 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6072:	f7fb fed3 	bl	1e1c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    607a:	2200      	movs	r2, #0
    607c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6080:	bd08      	pop	{r3, pc}

00006082 <nrfx_clock_start>:
{
    6082:	b508      	push	{r3, lr}
    switch (domain)
    6084:	b110      	cbz	r0, 608c <nrfx_clock_start+0xa>
    6086:	2801      	cmp	r0, #1
    6088:	d02d      	beq.n	60e6 <nrfx_clock_start+0x64>
}
    608a:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    608c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6090:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6094:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6098:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    609c:	d10b      	bne.n	60b6 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    609e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    60a2:	07c9      	lsls	r1, r1, #31
    60a4:	d510      	bpl.n	60c8 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    60a6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    60aa:	079b      	lsls	r3, r3, #30
    60ac:	d408      	bmi.n	60c0 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    60ae:	2302      	movs	r3, #2
    60b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    60b4:	e7e9      	b.n	608a <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    60b6:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    60ba:	2b01      	cmp	r3, #1
    60bc:	d004      	beq.n	60c8 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    60be:	b11b      	cbz	r3, 60c8 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    60c0:	2000      	movs	r0, #0
    60c2:	f7fd fce3 	bl	3a8c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    60c6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    60c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    60cc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60d0:	2300      	movs	r3, #0
    60d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    60d6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    60da:	2302      	movs	r3, #2
    60dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60e0:	2301      	movs	r3, #1
    60e2:	6093      	str	r3, [r2, #8]
}
    60e4:	e7d1      	b.n	608a <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60ea:	2200      	movs	r2, #0
    60ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    60f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    60f4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60f8:	6018      	str	r0, [r3, #0]
}
    60fa:	e7c6      	b.n	608a <nrfx_clock_start+0x8>

000060fc <nrfx_clock_stop>:
    clock_stop(domain);
    60fc:	f7fd bcc6 	b.w	3a8c <clock_stop>

00006100 <nrf_gpio_reconfigure>:
{
    6100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6102:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6104:	a801      	add	r0, sp, #4
{
    6106:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    610a:	4617      	mov	r7, r2
    610c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    610e:	f7fd fd55 	bl	3bbc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6112:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6114:	2f00      	cmp	r7, #0
    6116:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    611a:	bf14      	ite	ne
    611c:	2302      	movne	r3, #2
    611e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6120:	2900      	cmp	r1, #0
    6122:	bf18      	it	ne
    6124:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6128:	2d00      	cmp	r5, #0
    612a:	bf14      	ite	ne
    612c:	f04f 0c0c 	movne.w	ip, #12
    6130:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6134:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6136:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    613a:	bf14      	ite	ne
    613c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6140:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6144:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6146:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    614a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    614e:	bf14      	ite	ne
    6150:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6154:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6158:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    615c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6160:	b101      	cbz	r1, 6164 <nrf_gpio_reconfigure+0x64>
    6162:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6164:	b10f      	cbz	r7, 616a <nrf_gpio_reconfigure+0x6a>
    6166:	783f      	ldrb	r7, [r7, #0]
    6168:	007f      	lsls	r7, r7, #1
    616a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    616c:	b10d      	cbz	r5, 6172 <nrf_gpio_reconfigure+0x72>
    616e:	782d      	ldrb	r5, [r5, #0]
    6170:	00ad      	lsls	r5, r5, #2
    6172:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6174:	b10c      	cbz	r4, 617a <nrf_gpio_reconfigure+0x7a>
    6176:	7822      	ldrb	r2, [r4, #0]
    6178:	0214      	lsls	r4, r2, #8
    617a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    617c:	b10e      	cbz	r6, 6182 <nrf_gpio_reconfigure+0x82>
    617e:	7836      	ldrb	r6, [r6, #0]
    6180:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6182:	432c      	orrs	r4, r5
    6184:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    6186:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    618a:	b003      	add	sp, #12
    618c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000618e <nrf_gpio_cfg_sense_set>:
{
    618e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6190:	f10d 030f 	add.w	r3, sp, #15
    6194:	9301      	str	r3, [sp, #4]
    6196:	2300      	movs	r3, #0
{
    6198:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    619c:	9300      	str	r3, [sp, #0]
    619e:	461a      	mov	r2, r3
    61a0:	4619      	mov	r1, r3
    61a2:	f7ff ffad 	bl	6100 <nrf_gpio_reconfigure>
}
    61a6:	b005      	add	sp, #20
    61a8:	f85d fb04 	ldr.w	pc, [sp], #4

000061ac <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    61ac:	f7fe b86c 	b.w	4288 <_DoInit>

000061b0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    61b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    61b2:	f7ff fffb 	bl	61ac <SEGGER_RTT_Init>

	return 0;
}
    61b6:	2000      	movs	r0, #0
    61b8:	bd08      	pop	{r3, pc}

000061ba <z_device_state_init>:
}
    61ba:	4770      	bx	lr

000061bc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    61bc:	b138      	cbz	r0, 61ce <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    61be:	68c3      	ldr	r3, [r0, #12]
    61c0:	8818      	ldrh	r0, [r3, #0]
    61c2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    61c6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    61ca:	4258      	negs	r0, r3
    61cc:	4158      	adcs	r0, r3
}
    61ce:	4770      	bx	lr

000061d0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    61d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    61d2:	ab0b      	add	r3, sp, #44	; 0x2c
    61d4:	9305      	str	r3, [sp, #20]
    61d6:	9303      	str	r3, [sp, #12]
    61d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    61da:	9302      	str	r3, [sp, #8]
    61dc:	2300      	movs	r3, #0
    61de:	e9cd 3300 	strd	r3, r3, [sp]
    61e2:	2201      	movs	r2, #1
    61e4:	4618      	mov	r0, r3
    61e6:	f7fb faa1 	bl	172c <z_impl_z_log_msg2_runtime_vcreate>
}
    61ea:	b007      	add	sp, #28
    61ec:	f85d fb04 	ldr.w	pc, [sp], #4

000061f0 <z_early_memset>:
	(void) memset(dst, c, n);
    61f0:	f7ff bcd8 	b.w	5ba4 <memset>

000061f4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    61f4:	f7ff bccb 	b.w	5b8e <memcpy>

000061f8 <k_mem_slab_init>:
{
    61f8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    61fa:	2400      	movs	r4, #0
    61fc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    61fe:	ea41 0402 	orr.w	r4, r1, r2
    6202:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6206:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    620a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    620c:	d10c      	bne.n	6228 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    620e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6210:	42a3      	cmp	r3, r4
    6212:	d103      	bne.n	621c <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    6214:	e9c0 0000 	strd	r0, r0, [r0]
}
    6218:	2000      	movs	r0, #0
}
    621a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    621c:	6945      	ldr	r5, [r0, #20]
    621e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6220:	3401      	adds	r4, #1
		slab->free_list = p;
    6222:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    6224:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6226:	e7f3      	b.n	6210 <k_mem_slab_init+0x18>
		return -EINVAL;
    6228:	f06f 0015 	mvn.w	r0, #21
	return rc;
    622c:	e7f5      	b.n	621a <k_mem_slab_init+0x22>

0000622e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6230:	4604      	mov	r4, r0
    6232:	460d      	mov	r5, r1
	__asm__ volatile(
    6234:	f04f 0320 	mov.w	r3, #32
    6238:	f3ef 8611 	mrs	r6, BASEPRI
    623c:	f383 8812 	msr	BASEPRI_MAX, r3
    6240:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6244:	6947      	ldr	r7, [r0, #20]
    6246:	b977      	cbnz	r7, 6266 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6248:	f000 f8c2 	bl	63d0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    624c:	b158      	cbz	r0, 6266 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    624e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6250:	6142      	str	r2, [r0, #20]
    6252:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6254:	f000 f860 	bl	6318 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6258:	4631      	mov	r1, r6
    625a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    625e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6262:	f7fe bc27 	b.w	4ab4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6266:	682b      	ldr	r3, [r5, #0]
    6268:	6962      	ldr	r2, [r4, #20]
    626a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    626c:	682b      	ldr	r3, [r5, #0]
    626e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6270:	69a3      	ldr	r3, [r4, #24]
    6272:	3b01      	subs	r3, #1
    6274:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6276:	f386 8811 	msr	BASEPRI, r6
    627a:	f3bf 8f6f 	isb	sy
}
    627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006280 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6280:	f3ef 8005 	mrs	r0, IPSR
}
    6284:	3800      	subs	r0, #0
    6286:	bf18      	it	ne
    6288:	2001      	movne	r0, #1
    628a:	4770      	bx	lr

0000628c <k_thread_name_get>:
}
    628c:	2000      	movs	r0, #0
    628e:	4770      	bx	lr

00006290 <z_pm_save_idle_exit>:
{
    6290:	b508      	push	{r3, lr}
	pm_system_resume();
    6292:	f7fb fb73 	bl	197c <pm_system_resume>
}
    6296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    629a:	f7ff be0d 	b.w	5eb8 <sys_clock_idle_exit>

0000629e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    629e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    62a2:	428b      	cmp	r3, r1
    62a4:	d001      	beq.n	62aa <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    62a6:	f7fe bd6d 	b.w	4d84 <z_set_prio>
}
    62aa:	2000      	movs	r0, #0
    62ac:	4770      	bx	lr

000062ae <z_impl_k_mutex_init>:
{
    62ae:	4603      	mov	r3, r0
	mutex->owner = NULL;
    62b0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    62b2:	e9c3 0002 	strd	r0, r0, [r3, #8]
    62b6:	e9c3 3300 	strd	r3, r3, [r3]
}
    62ba:	4770      	bx	lr

000062bc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    62bc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    62c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    62c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    62c4:	2300      	movs	r3, #0
	node->prev = NULL;
    62c6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    62ca:	4770      	bx	lr

000062cc <unpend_thread_no_timeout>:
{
    62cc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    62ce:	f7ff fff5 	bl	62bc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    62d2:	7b43      	ldrb	r3, [r0, #13]
    62d4:	f023 0302 	bic.w	r3, r3, #2
    62d8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    62da:	2300      	movs	r3, #0
    62dc:	6083      	str	r3, [r0, #8]
}
    62de:	bd08      	pop	{r3, pc}

000062e0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    62e0:	4603      	mov	r3, r0
    62e2:	b920      	cbnz	r0, 62ee <z_reschedule_irqlock+0xe>
    62e4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    62e8:	b90a      	cbnz	r2, 62ee <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    62ea:	f7fb bded 	b.w	1ec8 <arch_swap>
    62ee:	f383 8811 	msr	BASEPRI, r3
    62f2:	f3bf 8f6f 	isb	sy
}
    62f6:	4770      	bx	lr

000062f8 <z_reschedule_unlocked>:
	__asm__ volatile(
    62f8:	f04f 0320 	mov.w	r3, #32
    62fc:	f3ef 8011 	mrs	r0, BASEPRI
    6300:	f383 8812 	msr	BASEPRI_MAX, r3
    6304:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6308:	f7ff bfea 	b.w	62e0 <z_reschedule_irqlock>

0000630c <z_priq_dumb_best>:
{
    630c:	4603      	mov	r3, r0
	return list->head == list;
    630e:	6800      	ldr	r0, [r0, #0]
}
    6310:	4283      	cmp	r3, r0
    6312:	bf08      	it	eq
    6314:	2000      	moveq	r0, #0
    6316:	4770      	bx	lr

00006318 <z_ready_thread>:
{
    6318:	b510      	push	{r4, lr}
    631a:	f04f 0320 	mov.w	r3, #32
    631e:	f3ef 8411 	mrs	r4, BASEPRI
    6322:	f383 8812 	msr	BASEPRI_MAX, r3
    6326:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    632a:	f7fe fc85 	bl	4c38 <ready_thread>
	__asm__ volatile(
    632e:	f384 8811 	msr	BASEPRI, r4
    6332:	f3bf 8f6f 	isb	sy
}
    6336:	bd10      	pop	{r4, pc}

00006338 <z_thread_timeout>:
{
    6338:	b510      	push	{r4, lr}
    633a:	4601      	mov	r1, r0
	__asm__ volatile(
    633c:	f04f 0320 	mov.w	r3, #32
    6340:	f3ef 8411 	mrs	r4, BASEPRI
    6344:	f383 8812 	msr	BASEPRI_MAX, r3
    6348:	f3bf 8f6f 	isb	sy
		if (!killed) {
    634c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6350:	f013 0f28 	tst.w	r3, #40	; 0x28
    6354:	d10d      	bne.n	6372 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6356:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    635a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    635c:	b10b      	cbz	r3, 6362 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    635e:	f7ff ffb5 	bl	62cc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6362:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6366:	f023 0314 	bic.w	r3, r3, #20
    636a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    636e:	f7fe fc63 	bl	4c38 <ready_thread>
	__asm__ volatile(
    6372:	f384 8811 	msr	BASEPRI, r4
    6376:	f3bf 8f6f 	isb	sy
}
    637a:	bd10      	pop	{r4, pc}

0000637c <add_to_waitq_locked>:
{
    637c:	b538      	push	{r3, r4, r5, lr}
    637e:	4604      	mov	r4, r0
    6380:	460d      	mov	r5, r1
	unready_thread(thread);
    6382:	f7fe fcad 	bl	4ce0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6386:	7b63      	ldrb	r3, [r4, #13]
    6388:	f043 0302 	orr.w	r3, r3, #2
    638c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    638e:	b195      	cbz	r5, 63b6 <add_to_waitq_locked+0x3a>
    6390:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6392:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6394:	429d      	cmp	r5, r3
    6396:	d015      	beq.n	63c4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6398:	b1a3      	cbz	r3, 63c4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    639a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    639e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    63a2:	4291      	cmp	r1, r2
    63a4:	d008      	beq.n	63b8 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    63a6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    63a8:	2a00      	cmp	r2, #0
    63aa:	dd05      	ble.n	63b8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    63ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    63ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    63b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    63b4:	605c      	str	r4, [r3, #4]
}
    63b6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    63b8:	686a      	ldr	r2, [r5, #4]
    63ba:	4293      	cmp	r3, r2
    63bc:	d002      	beq.n	63c4 <add_to_waitq_locked+0x48>
    63be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63c0:	2b00      	cmp	r3, #0
    63c2:	d1ec      	bne.n	639e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    63c4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    63c6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    63ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    63cc:	606c      	str	r4, [r5, #4]
}
    63ce:	e7f2      	b.n	63b6 <add_to_waitq_locked+0x3a>

000063d0 <z_unpend_first_thread>:
{
    63d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    63d2:	f04f 0320 	mov.w	r3, #32
    63d6:	f3ef 8511 	mrs	r5, BASEPRI
    63da:	f383 8812 	msr	BASEPRI_MAX, r3
    63de:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    63e2:	f7ff ff93 	bl	630c <z_priq_dumb_best>
		if (thread != NULL) {
    63e6:	4604      	mov	r4, r0
    63e8:	b120      	cbz	r0, 63f4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    63ea:	f7ff ff6f 	bl	62cc <unpend_thread_no_timeout>
    63ee:	3018      	adds	r0, #24
    63f0:	f000 f806 	bl	6400 <z_abort_timeout>
	__asm__ volatile(
    63f4:	f385 8811 	msr	BASEPRI, r5
    63f8:	f3bf 8f6f 	isb	sy
}
    63fc:	4620      	mov	r0, r4
    63fe:	bd38      	pop	{r3, r4, r5, pc}

00006400 <z_abort_timeout>:
{
    6400:	b510      	push	{r4, lr}
	__asm__ volatile(
    6402:	f04f 0220 	mov.w	r2, #32
    6406:	f3ef 8411 	mrs	r4, BASEPRI
    640a:	f382 8812 	msr	BASEPRI_MAX, r2
    640e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6412:	6803      	ldr	r3, [r0, #0]
    6414:	b13b      	cbz	r3, 6426 <z_abort_timeout+0x26>
			remove_timeout(to);
    6416:	f7fe fe9b 	bl	5150 <remove_timeout>
			ret = 0;
    641a:	2000      	movs	r0, #0
	__asm__ volatile(
    641c:	f384 8811 	msr	BASEPRI, r4
    6420:	f3bf 8f6f 	isb	sy
}
    6424:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6426:	f06f 0015 	mvn.w	r0, #21
    642a:	e7f7      	b.n	641c <z_abort_timeout+0x1c>

0000642c <z_get_next_timeout_expiry>:
{
    642c:	b510      	push	{r4, lr}
	__asm__ volatile(
    642e:	f04f 0320 	mov.w	r3, #32
    6432:	f3ef 8411 	mrs	r4, BASEPRI
    6436:	f383 8812 	msr	BASEPRI_MAX, r3
    643a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    643e:	f7fe fe61 	bl	5104 <next_timeout>
	__asm__ volatile(
    6442:	f384 8811 	msr	BASEPRI, r4
    6446:	f3bf 8f6f 	isb	sy
}
    644a:	bd10      	pop	{r4, pc}

0000644c <z_set_timeout_expiry>:
{
    644c:	b570      	push	{r4, r5, r6, lr}
    644e:	4604      	mov	r4, r0
    6450:	460d      	mov	r5, r1
	__asm__ volatile(
    6452:	f04f 0320 	mov.w	r3, #32
    6456:	f3ef 8611 	mrs	r6, BASEPRI
    645a:	f383 8812 	msr	BASEPRI_MAX, r3
    645e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6462:	f7fe fe4f 	bl	5104 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6466:	2801      	cmp	r0, #1
    6468:	dd05      	ble.n	6476 <z_set_timeout_expiry+0x2a>
    646a:	42a0      	cmp	r0, r4
    646c:	db03      	blt.n	6476 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    646e:	4629      	mov	r1, r5
    6470:	4620      	mov	r0, r4
    6472:	f7fd f919 	bl	36a8 <sys_clock_set_timeout>
	__asm__ volatile(
    6476:	f386 8811 	msr	BASEPRI, r6
    647a:	f3bf 8f6f 	isb	sy
}
    647e:	bd70      	pop	{r4, r5, r6, pc}

00006480 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6480:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6482:	f7fe ff55 	bl	5330 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6486:	bd08      	pop	{r3, pc}

00006488 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6488:	b108      	cbz	r0, 648e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    648a:	f7fc ba5b 	b.w	2944 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    648e:	4770      	bx	lr

00006490 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6490:	f7fd b9ca 	b.w	3828 <SystemInit>
