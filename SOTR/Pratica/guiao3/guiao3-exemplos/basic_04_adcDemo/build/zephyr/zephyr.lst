
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 14 00 20 79 2a 00 00 45 65 00 00 4d 2a 00 00     ... y*..Ee..M*..
  10:	4d 2a 00 00 4d 2a 00 00 4d 2a 00 00 00 00 00 00     M*..M*..M*......
	...
  2c:	dd 23 00 00 4d 2a 00 00 00 00 00 00 89 23 00 00     .#..M*.......#..
  3c:	4d 2a 00 00                                         M*..

00000040 <_irq_vector_table>:
  40:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  50:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  60:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  70:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  80:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  90:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  a0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  b0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  c0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  d0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  e0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..
  f0:	8d 24 00 00 8d 24 00 00 8d 24 00 00 8d 24 00 00     .$...$...$...$..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <main>:
	return ret;
}


void main(void)
{
     7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int err=0;

    /* Welcome message */
    printk("\n\r Simple adc demo for  \n\r");
     7a4:	4832      	ldr	r0, [pc, #200]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
{
     7a6:	b086      	sub	sp, #24
    printk("\n\r Simple adc demo for  \n\r");
     7a8:	f005 fd28 	bl	61fc <printk>
    printk(" Reads an analog input connected to AN%d and prints its raw and mV value \n\r", ADC_CHANNEL_ID);
     7ac:	2101      	movs	r1, #1
     7ae:	4831      	ldr	r0, [pc, #196]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7b0:	f005 fd24 	bl	61fc <printk>
    printk(" *** ASSURE THAT ANx IS BETWEEN [0...3V]\n\r");
     7b4:	4830      	ldr	r0, [pc, #192]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7b6:	f005 fd21 	bl	61fc <printk>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     7ba:	4830      	ldr	r0, [pc, #192]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
         
    /* ADC setup: bind and initialize */
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     7bc:	4d30      	ldr	r5, [pc, #192]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7be:	f004 fa65 	bl	4c8c <z_impl_device_get_binding>
     7c2:	6028      	str	r0, [r5, #0]
	if (!adc_dev) {
     7c4:	b910      	cbnz	r0, 7cc <main+0x2c>
        printk("ADC device_get_binding() failed\n");
     7c6:	482f      	ldr	r0, [pc, #188]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7c8:	f005 fd18 	bl	61fc <printk>
    } 
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     7cc:	6828      	ldr	r0, [r5, #0]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     7ce:	6883      	ldr	r3, [r0, #8]
     7d0:	492d      	ldr	r1, [pc, #180]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	4798      	blx	r3
    if (err) {
     7d6:	4601      	mov	r1, r0
     7d8:	b110      	cbz	r0, 7e0 <main+0x40>
        printk("adc_channel_setup() failed with error code %d\n", err);
     7da:	482c      	ldr	r0, [pc, #176]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     7dc:	f005 fd0e 	bl	61fc <printk>
    }
    
    /* It is recommended to calibrate the SAADC at least once before use, and whenever the ambient temperature has changed by more than 10 °C */
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     7e0:	4b2b      	ldr	r3, [pc, #172]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
	const struct adc_sequence sequence = {
     7e2:	4e2c      	ldr	r6, [pc, #176]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
    /* Main loop */
    while(true){
        /* Get one sample, checks for errors and prints the values */
        err=adc_sample();
        if(err) {
            printk("adc_sample() failed with error code %d\n\r",err);
     7e4:	4f2c      	ldr	r7, [pc, #176]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
            if(adc_sample_buffer[0] > 1023) {
                printk("adc reading out of range\n\r");
            }
            else {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r",adc_sample_buffer[0],(uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023)));
     7e6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 89c <CONFIG_ISR_STACK_SIZE+0x9c>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     7ea:	2201      	movs	r2, #1
     7ec:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
     7ee:	2214      	movs	r2, #20
     7f0:	2100      	movs	r1, #0
     7f2:	a801      	add	r0, sp, #4
     7f4:	f005 fefe 	bl	65f4 <memset>
     7f8:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     7fa:	6828      	ldr	r0, [r5, #0]
	const struct adc_sequence sequence = {
     7fc:	9304      	str	r3, [sp, #16]
     7fe:	e9cd 3602 	strd	r3, r6, [sp, #8]
     802:	230a      	movs	r3, #10
     804:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     808:	b970      	cbnz	r0, 828 <CONFIG_ISR_STACK_SIZE+0x28>
            printk("adc_sample(): error, must bind to adc first \n\r");
     80a:	4825      	ldr	r0, [pc, #148]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     80c:	f005 fcf6 	bl	61fc <printk>
            return -1;
     810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            printk("adc_sample() failed with error code %d\n\r",err);
     814:	4621      	mov	r1, r4
     816:	4638      	mov	r0, r7
     818:	f005 fcf0 	bl	61fc <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     81c:	2100      	movs	r1, #0
     81e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     822:	f005 f85f 	bl	58e4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     826:	e7e2      	b.n	7ee <main+0x4e>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     828:	6883      	ldr	r3, [r0, #8]
     82a:	a901      	add	r1, sp, #4
     82c:	685b      	ldr	r3, [r3, #4]
     82e:	4798      	blx	r3
	if (ret) {
     830:	4604      	mov	r4, r0
     832:	b140      	cbz	r0, 846 <CONFIG_ISR_STACK_SIZE+0x46>
            printk("adc_read() failed with code %d\n", ret);
     834:	4601      	mov	r1, r0
     836:	481b      	ldr	r0, [pc, #108]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     838:	f005 fce0 	bl	61fc <printk>
        if(err) {
     83c:	e7ea      	b.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
                printk("adc reading out of range\n\r");
     83e:	481a      	ldr	r0, [pc, #104]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     840:	f005 fcdc 	bl	61fc <printk>
     844:	e7ea      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
            if(adc_sample_buffer[0] > 1023) {
     846:	8834      	ldrh	r4, [r6, #0]
     848:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     84c:	d2f7      	bcs.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
                printk("adc reading: raw:%4u / %4u mV: \n\r",adc_sample_buffer[0],(uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023)));
     84e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     852:	4360      	muls	r0, r4
     854:	f7ff fdc2 	bl	3dc <__aeabi_i2f>
     858:	4641      	mov	r1, r8
     85a:	f7ff fc51 	bl	100 <__aeabi_fmul>
     85e:	f7ff fe11 	bl	484 <__aeabi_f2uiz>
     862:	4621      	mov	r1, r4
     864:	b282      	uxth	r2, r0
     866:	4811      	ldr	r0, [pc, #68]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     868:	f005 fcc8 	bl	61fc <printk>
     86c:	e7d6      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     86e:	bf00      	nop
     870:	00007590 	.word	0x00007590
     874:	000075ab 	.word	0x000075ab
     878:	000075f7 	.word	0x000075f7
     87c:	00007622 	.word	0x00007622
     880:	20000370 	.word	0x20000370
     884:	00007628 	.word	0x00007628
     888:	00007588 	.word	0x00007588
     88c:	00007649 	.word	0x00007649
     890:	40007000 	.word	0x40007000
     894:	20000c6c 	.word	0x20000c6c
     898:	000076c7 	.word	0x000076c7
     89c:	3b40300c 	.word	0x3b40300c
     8a0:	00007678 	.word	0x00007678
     8a4:	000076a7 	.word	0x000076a7
     8a8:	000076f0 	.word	0x000076f0
     8ac:	0000770b 	.word	0x0000770b

000008b0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b4:	b08d      	sub	sp, #52	; 0x34
     8b6:	461f      	mov	r7, r3
     8b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
     8ba:	9202      	str	r2, [sp, #8]
     8bc:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     8be:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     8c2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     8c6:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     8c8:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     8ca:	0782      	lsls	r2, r0, #30
{
     8cc:	4605      	mov	r5, r0
     8ce:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     8d0:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     8d2:	f040 8221 	bne.w	d18 <cbvprintf_package+0x468>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     8d6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     8d8:	2800      	cmp	r0, #0
     8da:	f040 8220 	bne.w	d1e <cbvprintf_package+0x46e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     8de:	f001 0607 	and.w	r6, r1, #7
     8e2:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     8e4:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     8e8:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     8ec:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     8f0:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     8f2:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     8f6:	4652      	mov	r2, sl
	bool parsing = false;
     8f8:	46d1      	mov	r9, sl
	size = sizeof(char *);
     8fa:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     8fc:	b105      	cbz	r5, 900 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     8fe:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     900:	9804      	ldr	r0, [sp, #16]
     902:	2800      	cmp	r0, #0
     904:	dc07      	bgt.n	916 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     906:	48cb      	ldr	r0, [pc, #812]	; (c34 <cbvprintf_package+0x384>)
     908:	4287      	cmp	r7, r0
     90a:	f0c0 8141 	bcc.w	b90 <cbvprintf_package+0x2e0>
     90e:	48ca      	ldr	r0, [pc, #808]	; (c38 <cbvprintf_package+0x388>)
     910:	4287      	cmp	r7, r0
     912:	f080 813d 	bcs.w	b90 <cbvprintf_package+0x2e0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     916:	9802      	ldr	r0, [sp, #8]
     918:	f010 0e02 	ands.w	lr, r0, #2
     91c:	f000 8151 	beq.w	bc2 <cbvprintf_package+0x312>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     920:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     924:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     926:	f1be 0f00 	cmp.w	lr, #0
     92a:	f000 8137 	beq.w	b9c <cbvprintf_package+0x2ec>
     92e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     932:	f0c0 8133 	bcc.w	b9c <cbvprintf_package+0x2ec>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     936:	f06f 0015 	mvn.w	r0, #21
     93a:	e0fe      	b.n	b3a <cbvprintf_package+0x28a>
		if (!parsing) {
     93c:	f1b9 0f00 	cmp.w	r9, #0
     940:	d108      	bne.n	954 <cbvprintf_package+0xa4>
			if (*fmt == '%') {
     942:	2825      	cmp	r0, #37	; 0x25
     944:	f040 8141 	bne.w	bca <cbvprintf_package+0x31a>
				parsing = true;
     948:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     94c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     950:	4641      	mov	r1, r8
     952:	e13a      	b.n	bca <cbvprintf_package+0x31a>
		switch (*fmt) {
     954:	282b      	cmp	r0, #43	; 0x2b
     956:	d825      	bhi.n	9a4 <cbvprintf_package+0xf4>
     958:	281f      	cmp	r0, #31
     95a:	d802      	bhi.n	962 <cbvprintf_package+0xb2>
			parsing = false;
     95c:	f04f 0900 	mov.w	r9, #0
     960:	e133      	b.n	bca <cbvprintf_package+0x31a>
		switch (*fmt) {
     962:	f1a0 0c20 	sub.w	ip, r0, #32
     966:	f1bc 0f0b 	cmp.w	ip, #11
     96a:	d8f7      	bhi.n	95c <cbvprintf_package+0xac>
     96c:	f20f 0e04 	addw	lr, pc, #4
     970:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     974:	00000bcb 	.word	0x00000bcb
     978:	0000095d 	.word	0x0000095d
     97c:	0000095d 	.word	0x0000095d
     980:	00000bcb 	.word	0x00000bcb
     984:	0000095d 	.word	0x0000095d
     988:	0000095d 	.word	0x0000095d
     98c:	0000095d 	.word	0x0000095d
     990:	0000095d 	.word	0x0000095d
     994:	0000095d 	.word	0x0000095d
     998:	0000095d 	.word	0x0000095d
     99c:	00000b5b 	.word	0x00000b5b
     9a0:	00000bcb 	.word	0x00000bcb
     9a4:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     9a8:	fa5f fe8c 	uxtb.w	lr, ip
     9ac:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     9b0:	d8d4      	bhi.n	95c <cbvprintf_package+0xac>
     9b2:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     9b6:	d8d1      	bhi.n	95c <cbvprintf_package+0xac>
     9b8:	f20f 0e04 	addw	lr, pc, #4
     9bc:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     9c0:	00000bcb 	.word	0x00000bcb
     9c4:	00000bcb 	.word	0x00000bcb
     9c8:	0000095d 	.word	0x0000095d
     9cc:	00000bcb 	.word	0x00000bcb
     9d0:	00000bcb 	.word	0x00000bcb
     9d4:	00000bcb 	.word	0x00000bcb
     9d8:	00000bcb 	.word	0x00000bcb
     9dc:	00000bcb 	.word	0x00000bcb
     9e0:	00000bcb 	.word	0x00000bcb
     9e4:	00000bcb 	.word	0x00000bcb
     9e8:	00000bcb 	.word	0x00000bcb
     9ec:	00000bcb 	.word	0x00000bcb
     9f0:	00000bcb 	.word	0x00000bcb
     9f4:	0000095d 	.word	0x0000095d
     9f8:	0000095d 	.word	0x0000095d
     9fc:	0000095d 	.word	0x0000095d
     a00:	0000095d 	.word	0x0000095d
     a04:	0000095d 	.word	0x0000095d
     a08:	0000095d 	.word	0x0000095d
     a0c:	0000095d 	.word	0x0000095d
     a10:	00000b17 	.word	0x00000b17
     a14:	0000095d 	.word	0x0000095d
     a18:	0000095d 	.word	0x0000095d
     a1c:	0000095d 	.word	0x0000095d
     a20:	00000b17 	.word	0x00000b17
     a24:	00000b17 	.word	0x00000b17
     a28:	00000b17 	.word	0x00000b17
     a2c:	0000095d 	.word	0x0000095d
     a30:	0000095d 	.word	0x0000095d
     a34:	0000095d 	.word	0x0000095d
     a38:	0000095d 	.word	0x0000095d
     a3c:	00000bcb 	.word	0x00000bcb
     a40:	0000095d 	.word	0x0000095d
     a44:	0000095d 	.word	0x0000095d
     a48:	0000095d 	.word	0x0000095d
     a4c:	0000095d 	.word	0x0000095d
     a50:	0000095d 	.word	0x0000095d
     a54:	0000095d 	.word	0x0000095d
     a58:	0000095d 	.word	0x0000095d
     a5c:	0000095d 	.word	0x0000095d
     a60:	0000095d 	.word	0x0000095d
     a64:	0000095d 	.word	0x0000095d
     a68:	0000095d 	.word	0x0000095d
     a6c:	00000af9 	.word	0x00000af9
     a70:	0000095d 	.word	0x0000095d
     a74:	0000095d 	.word	0x0000095d
     a78:	0000095d 	.word	0x0000095d
     a7c:	0000095d 	.word	0x0000095d
     a80:	0000095d 	.word	0x0000095d
     a84:	0000095d 	.word	0x0000095d
     a88:	0000095d 	.word	0x0000095d
     a8c:	0000095d 	.word	0x0000095d
     a90:	00000b17 	.word	0x00000b17
     a94:	0000095d 	.word	0x0000095d
     a98:	00000af9 	.word	0x00000af9
     a9c:	00000af9 	.word	0x00000af9
     aa0:	00000b17 	.word	0x00000b17
     aa4:	00000b17 	.word	0x00000b17
     aa8:	00000b17 	.word	0x00000b17
     aac:	00000bcb 	.word	0x00000bcb
     ab0:	00000af9 	.word	0x00000af9
     ab4:	00000b4b 	.word	0x00000b4b
     ab8:	0000095d 	.word	0x0000095d
     abc:	00000bcb 	.word	0x00000bcb
     ac0:	0000095d 	.word	0x0000095d
     ac4:	00000b51 	.word	0x00000b51
     ac8:	00000af9 	.word	0x00000af9
     acc:	00000b51 	.word	0x00000b51
     ad0:	0000095d 	.word	0x0000095d
     ad4:	0000095d 	.word	0x0000095d
     ad8:	00000b51 	.word	0x00000b51
     adc:	0000094d 	.word	0x0000094d
     ae0:	00000af9 	.word	0x00000af9
     ae4:	0000095d 	.word	0x0000095d
     ae8:	0000095d 	.word	0x0000095d
     aec:	00000af9 	.word	0x00000af9
     af0:	0000095d 	.word	0x0000095d
     af4:	0000094d 	.word	0x0000094d
			if (fmt[-1] == 'l') {
     af8:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     afc:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     b00:	d129      	bne.n	b56 <cbvprintf_package+0x2a6>
				if (fmt[-2] == 'l') {
     b02:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     b06:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     b08:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     b0c:	d03d      	beq.n	b8a <cbvprintf_package+0x2da>
			align = VA_STACK_ALIGN(void *);
     b0e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     b12:	4641      	mov	r1, r8
     b14:	e021      	b.n	b5a <cbvprintf_package+0x2aa>
				v.ld = va_arg(ap, long double);
     b16:	9800      	ldr	r0, [sp, #0]
     b18:	f100 0b07 	add.w	fp, r0, #7
     b1c:	f02b 0007 	bic.w	r0, fp, #7
     b20:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     b24:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     b26:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     b28:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     b2c:	b155      	cbz	r5, b44 <cbvprintf_package+0x294>
				if (BUF_OFFSET + size > len) {
     b2e:	9805      	ldr	r0, [sp, #20]
     b30:	4420      	add	r0, r4
     b32:	42b0      	cmp	r0, r6
     b34:	d904      	bls.n	b40 <cbvprintf_package+0x290>
					return -ENOSPC;
     b36:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     b3a:	b00d      	add	sp, #52	; 0x34
     b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     b40:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     b44:	3408      	adds	r4, #8
			parsing = false;
     b46:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     b4a:	f04f 0808 	mov.w	r8, #8
     b4e:	e6ff      	b.n	950 <cbvprintf_package+0xa0>
			parsing = false;
     b50:	f04f 0900 	mov.w	r9, #0
     b54:	e7db      	b.n	b0e <cbvprintf_package+0x25e>
			parsing = false;
     b56:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     b5a:	3c01      	subs	r4, #1
     b5c:	4444      	add	r4, r8
     b5e:	f1c8 0c00 	rsb	ip, r8, #0
     b62:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     b66:	b125      	cbz	r5, b72 <cbvprintf_package+0x2c2>
     b68:	eba1 0c05 	sub.w	ip, r1, r5
     b6c:	44a4      	add	ip, r4
     b6e:	45b4      	cmp	ip, r6
     b70:	d8e1      	bhi.n	b36 <cbvprintf_package+0x286>
		if (*fmt == 's') {
     b72:	2873      	cmp	r0, #115	; 0x73
     b74:	d152      	bne.n	c1c <cbvprintf_package+0x36c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     b76:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     b78:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     b7c:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     b7e:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     b82:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     b84:	f8cd b000 	str.w	fp, [sp]
     b88:	e6b8      	b.n	8fc <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     b8a:	f04f 0808 	mov.w	r8, #8
     b8e:	e7c0      	b.n	b12 <cbvprintf_package+0x262>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     b90:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     b92:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     b96:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     b9a:	e6c3      	b.n	924 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     b9c:	2a0f      	cmp	r2, #15
     b9e:	f63f aeca 	bhi.w	936 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     ba2:	b345      	cbz	r5, bf6 <cbvprintf_package+0x346>
					str_ptr_pos[s_idx] = s_ptr_idx;
     ba4:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     ba8:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     bac:	4496      	add	lr, r2
     bae:	f1bc 0f00 	cmp.w	ip, #0
     bb2:	d01a      	beq.n	bea <cbvprintf_package+0x33a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     bb4:	f060 007f 	orn	r0, r0, #127	; 0x7f
     bb8:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     bbc:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     bc0:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     bc2:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     bc6:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     bc8:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     bca:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     bce:	2800      	cmp	r0, #0
     bd0:	f47f aeb4 	bne.w	93c <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     bd4:	1b61      	subs	r1, r4, r5
     bd6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     bda:	f4bf aeac 	bcs.w	936 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     bde:	2d00      	cmp	r5, #0
     be0:	d13e      	bne.n	c60 <cbvprintf_package+0x3b0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     be2:	f1a6 0408 	sub.w	r4, r6, #8
     be6:	1860      	adds	r0, r4, r1
     be8:	e7a7      	b.n	b3a <cbvprintf_package+0x28a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     bea:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     bee:	9803      	ldr	r0, [sp, #12]
     bf0:	3001      	adds	r0, #1
     bf2:	9003      	str	r0, [sp, #12]
     bf4:	e7e4      	b.n	bc0 <cbvprintf_package+0x310>
				} else if (is_ro || rws_pos_en) {
     bf6:	f1bc 0f00 	cmp.w	ip, #0
     bfa:	d101      	bne.n	c00 <cbvprintf_package+0x350>
     bfc:	9801      	ldr	r0, [sp, #4]
     bfe:	b108      	cbz	r0, c04 <cbvprintf_package+0x354>
					len += 1;
     c00:	3601      	adds	r6, #1
     c02:	e7dd      	b.n	bc0 <cbvprintf_package+0x310>
					len += strlen(s) + 1 + 1;
     c04:	4638      	mov	r0, r7
     c06:	e9cd 1206 	strd	r1, r2, [sp, #24]
     c0a:	9305      	str	r3, [sp, #20]
     c0c:	f005 fccb 	bl	65a6 <strlen>
     c10:	3602      	adds	r6, #2
     c12:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     c16:	9b05      	ldr	r3, [sp, #20]
     c18:	4406      	add	r6, r0
     c1a:	e7d1      	b.n	bc0 <cbvprintf_package+0x310>
		} else if (size == sizeof(int)) {
     c1c:	2904      	cmp	r1, #4
     c1e:	d10d      	bne.n	c3c <cbvprintf_package+0x38c>
			int v = va_arg(ap, int);
     c20:	9800      	ldr	r0, [sp, #0]
     c22:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     c26:	b10d      	cbz	r5, c2c <cbvprintf_package+0x37c>
			int v = va_arg(ap, int);
     c28:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     c2a:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     c2c:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     c2e:	f8cd c000 	str.w	ip, [sp]
     c32:	e7ca      	b.n	bca <cbvprintf_package+0x31a>
     c34:	00006fc0 	.word	0x00006fc0
     c38:	00007f8c 	.word	0x00007f8c
		} else if (size == sizeof(long long)) {
     c3c:	2908      	cmp	r1, #8
     c3e:	f47f ae7a 	bne.w	936 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     c42:	9800      	ldr	r0, [sp, #0]
     c44:	3007      	adds	r0, #7
     c46:	f020 0007 	bic.w	r0, r0, #7
     c4a:	f100 0c08 	add.w	ip, r0, #8
     c4e:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     c52:	b11d      	cbz	r5, c5c <cbvprintf_package+0x3ac>
			long long v = va_arg(ap, long long);
     c54:	e9d0 bc00 	ldrd	fp, ip, [r0]
     c58:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     c5c:	3408      	adds	r4, #8
     c5e:	e7b4      	b.n	bca <cbvprintf_package+0x31a>
	if (rws_pos_en) {
     c60:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     c62:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     c64:	0889      	lsrs	r1, r1, #2
     c66:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     c68:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     c6c:	b1a3      	cbz	r3, c98 <cbvprintf_package+0x3e8>
		buf0[1] = 0;
     c6e:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     c70:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     c72:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     c76:	f1ba 0f00 	cmp.w	sl, #0
     c7a:	d006      	beq.n	c8a <cbvprintf_package+0x3da>
     c7c:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     c7e:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     c82:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     c86:	4562      	cmp	r2, ip
     c88:	d10a      	bne.n	ca0 <cbvprintf_package+0x3f0>
     c8a:	f10d 0820 	add.w	r8, sp, #32
     c8e:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     c92:	f1c5 0b01 	rsb	fp, r5, #1
     c96:	e039      	b.n	d0c <cbvprintf_package+0x45c>
		buf0[3] = 0;
     c98:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     c9a:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     c9c:	70eb      	strb	r3, [r5, #3]
     c9e:	e7e8      	b.n	c72 <cbvprintf_package+0x3c2>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     ca0:	f810 1b01 	ldrb.w	r1, [r0], #1
     ca4:	060b      	lsls	r3, r1, #24
     ca6:	d508      	bpl.n	cba <cbvprintf_package+0x40a>
			if (BUF_OFFSET + 1 > len) {
     ca8:	eb04 080e 	add.w	r8, r4, lr
     cac:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     cae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     cb2:	f63f af40 	bhi.w	b36 <cbvprintf_package+0x286>
			*buf++ = pos;
     cb6:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     cba:	f10c 0c01 	add.w	ip, ip, #1
     cbe:	e7e2      	b.n	c86 <cbvprintf_package+0x3d6>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     cc0:	f1ba 0f00 	cmp.w	sl, #0
     cc4:	d003      	beq.n	cce <cbvprintf_package+0x41e>
     cc6:	f998 2000 	ldrsb.w	r2, [r8]
     cca:	2a00      	cmp	r2, #0
     ccc:	db1c      	blt.n	d08 <cbvprintf_package+0x458>
		if (rws_pos_en) {
     cce:	9b01      	ldr	r3, [sp, #4]
     cd0:	bb03      	cbnz	r3, d14 <cbvprintf_package+0x464>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     cd2:	f898 2000 	ldrb.w	r2, [r8]
     cd6:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     cda:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     cde:	4638      	mov	r0, r7
     ce0:	f005 fc61 	bl	65a6 <strlen>
     ce4:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     ce6:	eb04 010b 	add.w	r1, r4, fp
     cea:	4411      	add	r1, r2
     cec:	42b1      	cmp	r1, r6
     cee:	f63f af22 	bhi.w	b36 <cbvprintf_package+0x286>
		*buf++ = str_ptr_pos[i];
     cf2:	f898 1000 	ldrb.w	r1, [r8]
     cf6:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     cfa:	4639      	mov	r1, r7
     cfc:	4620      	mov	r0, r4
     cfe:	9200      	str	r2, [sp, #0]
     d00:	f005 fc6d 	bl	65de <memcpy>
		buf += size;
     d04:	9a00      	ldr	r2, [sp, #0]
     d06:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     d08:	f108 0801 	add.w	r8, r8, #1
     d0c:	45c1      	cmp	r9, r8
     d0e:	d1d7      	bne.n	cc0 <cbvprintf_package+0x410>
	return BUF_OFFSET;
     d10:	1b60      	subs	r0, r4, r5
     d12:	e712      	b.n	b3a <cbvprintf_package+0x28a>
			size = 0;
     d14:	2200      	movs	r2, #0
     d16:	e7e6      	b.n	ce6 <cbvprintf_package+0x436>
		return -EFAULT;
     d18:	f06f 000d 	mvn.w	r0, #13
     d1c:	e70d      	b.n	b3a <cbvprintf_package+0x28a>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     d1e:	2907      	cmp	r1, #7
     d20:	f63f ade2 	bhi.w	8e8 <cbvprintf_package+0x38>
     d24:	e707      	b.n	b36 <cbvprintf_package+0x286>
     d26:	bf00      	nop

00000d28 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     d28:	4b01      	ldr	r3, [pc, #4]	; (d30 <__printk_hook_install+0x8>)
     d2a:	6018      	str	r0, [r3, #0]
}
     d2c:	4770      	bx	lr
     d2e:	bf00      	nop
     d30:	20000098 	.word	0x20000098

00000d34 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d38:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d3c:	f019 0808 	ands.w	r8, r9, #8
{
     d40:	4604      	mov	r4, r0
     d42:	4693      	mov	fp, r2
	if (processing) {
     d44:	d00d      	beq.n	d62 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     d46:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d48:	bf0c      	ite	eq
     d4a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d4e:	f049 0920 	orrne.w	r9, r9, #32
     d52:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d56:	f38b 8811 	msr	BASEPRI, fp
     d5a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d62:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d66:	2902      	cmp	r1, #2
     d68:	d107      	bne.n	d7a <process_event+0x46>
			evt = process_recheck(mgr);
     d6a:	4620      	mov	r0, r4
     d6c:	f005 fa53 	bl	6216 <process_recheck>
		if (evt == EVT_NOP) {
     d70:	2800      	cmp	r0, #0
     d72:	d0f0      	beq.n	d56 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d74:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d76:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     d78:	d14e      	bne.n	e18 <process_event+0xe4>
			res = mgr->last_res;
     d7a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d7c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d7e:	2f00      	cmp	r7, #0
     d80:	da15      	bge.n	dae <process_event+0x7a>
		*clients = mgr->clients;
     d82:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d84:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d88:	e9c4 8800 	strd	r8, r8, [r4]
     d8c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d90:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     d92:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d94:	8b21      	ldrh	r1, [r4, #24]
     d96:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d9a:	45ca      	cmp	sl, r9
     d9c:	d002      	beq.n	da4 <process_event+0x70>
		if (do_monitors
     d9e:	68a3      	ldr	r3, [r4, #8]
     da0:	2b00      	cmp	r3, #0
     da2:	d15a      	bne.n	e5a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     da4:	b90d      	cbnz	r5, daa <process_event+0x76>
		    || (transit != NULL)) {
     da6:	2e00      	cmp	r6, #0
     da8:	d071      	beq.n	e8e <process_event+0x15a>
     daa:	2300      	movs	r3, #0
     dac:	e056      	b.n	e5c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     dae:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     db2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     db4:	2a01      	cmp	r2, #1
     db6:	d81e      	bhi.n	df6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     db8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     dbc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     dbe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dc0:	b289      	uxth	r1, r1
     dc2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     dc6:	d10a      	bne.n	dde <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     dc8:	b13d      	cbz	r5, dda <process_event+0xa6>
     dca:	8b63      	ldrh	r3, [r4, #26]
     dcc:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     dce:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     dd0:	3301      	adds	r3, #1
     dd2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     dd4:	2a00      	cmp	r2, #0
     dd6:	d1fa      	bne.n	dce <process_event+0x9a>
     dd8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dda:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     dde:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     de0:	4620      	mov	r0, r4
     de2:	f005 fa18 	bl	6216 <process_recheck>
     de6:	4606      	mov	r6, r0
     de8:	2800      	cmp	r0, #0
     dea:	d0d3      	beq.n	d94 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dec:	8b23      	ldrh	r3, [r4, #24]
     dee:	f043 0320 	orr.w	r3, r3, #32
     df2:	8323      	strh	r3, [r4, #24]
     df4:	e7cd      	b.n	d92 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     df6:	2b04      	cmp	r3, #4
     df8:	d10c      	bne.n	e14 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dfa:	f021 0107 	bic.w	r1, r1, #7
     dfe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     e00:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     e02:	4620      	mov	r0, r4
     e04:	f005 fa07 	bl	6216 <process_recheck>
     e08:	4605      	mov	r5, r0
     e0a:	2800      	cmp	r0, #0
     e0c:	d0c1      	beq.n	d92 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e0e:	f041 0120 	orr.w	r1, r1, #32
     e12:	8321      	strh	r1, [r4, #24]
     e14:	2500      	movs	r5, #0
     e16:	e7bc      	b.n	d92 <process_event+0x5e>
		} else if (evt == EVT_START) {
     e18:	2803      	cmp	r0, #3
     e1a:	d109      	bne.n	e30 <process_event+0xfc>
			transit = mgr->transitions->start;
     e1c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e1e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     e22:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e24:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     e28:	8323      	strh	r3, [r4, #24]
}
     e2a:	2500      	movs	r5, #0
		res = 0;
     e2c:	462f      	mov	r7, r5
     e2e:	e7b1      	b.n	d94 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     e30:	2804      	cmp	r0, #4
     e32:	d106      	bne.n	e42 <process_event+0x10e>
			transit = mgr->transitions->stop;
     e34:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e36:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     e3a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e3c:	f043 0304 	orr.w	r3, r3, #4
     e40:	e7f2      	b.n	e28 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     e42:	2805      	cmp	r0, #5
     e44:	d106      	bne.n	e54 <process_event+0x120>
			transit = mgr->transitions->reset;
     e46:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e48:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     e4c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e4e:	f043 0305 	orr.w	r3, r3, #5
     e52:	e7e9      	b.n	e28 <process_event+0xf4>
     e54:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     e56:	462e      	mov	r6, r5
     e58:	e7e8      	b.n	e2c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     e5a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e5c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e60:	8321      	strh	r1, [r4, #24]
     e62:	f38b 8811 	msr	BASEPRI, fp
     e66:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e6a:	b9fb      	cbnz	r3, eac <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e6c:	bb85      	cbnz	r5, ed0 <process_event+0x19c>
			if (transit != NULL) {
     e6e:	b116      	cbz	r6, e76 <process_event+0x142>
				transit(mgr, transition_complete);
     e70:	491f      	ldr	r1, [pc, #124]	; (ef0 <process_event+0x1bc>)
     e72:	4620      	mov	r0, r4
     e74:	47b0      	blx	r6
	__asm__ volatile(
     e76:	f04f 0320 	mov.w	r3, #32
     e7a:	f3ef 8b11 	mrs	fp, BASEPRI
     e7e:	f383 8812 	msr	BASEPRI_MAX, r3
     e82:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e86:	8b23      	ldrh	r3, [r4, #24]
     e88:	f023 0308 	bic.w	r3, r3, #8
     e8c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e8e:	8b23      	ldrh	r3, [r4, #24]
     e90:	06da      	lsls	r2, r3, #27
     e92:	d525      	bpl.n	ee0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e94:	f023 0310 	bic.w	r3, r3, #16
     e98:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e9a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e9c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     ea0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     ea4:	2900      	cmp	r1, #0
     ea6:	f47f af5e 	bne.w	d66 <process_event+0x32>
out:
     eaa:	e754      	b.n	d56 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     eac:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     eae:	2900      	cmp	r1, #0
     eb0:	d0dc      	beq.n	e6c <process_event+0x138>
	return node->next;
     eb2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     eb6:	f8d1 b004 	ldr.w	fp, [r1, #4]
     eba:	463b      	mov	r3, r7
     ebc:	4652      	mov	r2, sl
     ebe:	4620      	mov	r0, r4
     ec0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ec2:	f1b9 0f00 	cmp.w	r9, #0
     ec6:	d0d1      	beq.n	e6c <process_event+0x138>
     ec8:	4649      	mov	r1, r9
     eca:	f8d9 9000 	ldr.w	r9, [r9]
     ece:	e7f2      	b.n	eb6 <process_event+0x182>
     ed0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     ed2:	463b      	mov	r3, r7
     ed4:	4652      	mov	r2, sl
     ed6:	4620      	mov	r0, r4
     ed8:	682d      	ldr	r5, [r5, #0]
     eda:	f005 f9b8 	bl	624e <notify_one>
     ede:	e7c5      	b.n	e6c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     ee0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ee4:	bf1e      	ittt	ne
     ee6:	f023 0320 	bicne.w	r3, r3, #32
     eea:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     eec:	2102      	movne	r1, #2
     eee:	e7d5      	b.n	e9c <process_event+0x168>
     ef0:	0000627b 	.word	0x0000627b

00000ef4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ef8:	b091      	sub	sp, #68	; 0x44
     efa:	468b      	mov	fp, r1
     efc:	9002      	str	r0, [sp, #8]
     efe:	4692      	mov	sl, r2
     f00:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f02:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f04:	f89a 0000 	ldrb.w	r0, [sl]
     f08:	b908      	cbnz	r0, f0e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f0a:	4628      	mov	r0, r5
     f0c:	e35f      	b.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
		if (*fp != '%') {
     f0e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f10:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     f14:	d007      	beq.n	f26 <cbvprintf+0x32>
			OUTC('%');
     f16:	9b02      	ldr	r3, [sp, #8]
     f18:	4659      	mov	r1, fp
     f1a:	4798      	blx	r3
     f1c:	2800      	cmp	r0, #0
     f1e:	f2c0 8356 	blt.w	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
     f22:	3501      	adds	r5, #1
			break;
     f24:	e212      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
		} state = {
     f26:	2218      	movs	r2, #24
     f28:	2100      	movs	r1, #0
     f2a:	a80a      	add	r0, sp, #40	; 0x28
     f2c:	f005 fb62 	bl	65f4 <memset>
	if (*sp == '%') {
     f30:	f89a 3001 	ldrb.w	r3, [sl, #1]
     f34:	2b25      	cmp	r3, #37	; 0x25
     f36:	d078      	beq.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
     f38:	2200      	movs	r2, #0
     f3a:	4610      	mov	r0, r2
     f3c:	4696      	mov	lr, r2
     f3e:	4694      	mov	ip, r2
     f40:	4616      	mov	r6, r2
     f42:	4639      	mov	r1, r7
		switch (*sp) {
     f44:	f817 3b01 	ldrb.w	r3, [r7], #1
     f48:	2b2b      	cmp	r3, #43	; 0x2b
     f4a:	f000 809d 	beq.w	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     f4e:	f200 8094 	bhi.w	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
     f52:	2b20      	cmp	r3, #32
     f54:	f000 809b 	beq.w	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
     f58:	2b23      	cmp	r3, #35	; 0x23
     f5a:	f000 809b 	beq.w	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     f5e:	b12e      	cbz	r6, f6c <cbvprintf+0x78>
     f60:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f64:	f046 0604 	orr.w	r6, r6, #4
     f68:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f6c:	f1bc 0f00 	cmp.w	ip, #0
     f70:	d005      	beq.n	f7e <cbvprintf+0x8a>
     f72:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f76:	f046 0608 	orr.w	r6, r6, #8
     f7a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f7e:	f1be 0f00 	cmp.w	lr, #0
     f82:	d005      	beq.n	f90 <cbvprintf+0x9c>
     f84:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f88:	f046 0610 	orr.w	r6, r6, #16
     f8c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f90:	b128      	cbz	r0, f9e <cbvprintf+0xaa>
     f92:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     f96:	f040 0020 	orr.w	r0, r0, #32
     f9a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     f9e:	b12a      	cbz	r2, fac <cbvprintf+0xb8>
     fa0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     fa8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     fac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     fb0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     fb4:	2844      	cmp	r0, #68	; 0x44
     fb6:	d103      	bne.n	fc0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     fb8:	f36f 1286 	bfc	r2, #6, #1
     fbc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     fc0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     fc4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     fca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     fce:	d17b      	bne.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
		conv->width_star = true;
     fd0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fd4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     fd8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     fda:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     fde:	781a      	ldrb	r2, [r3, #0]
     fe0:	2a2e      	cmp	r2, #46	; 0x2e
     fe2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fe6:	bf0c      	ite	eq
     fe8:	2101      	moveq	r1, #1
     fea:	2100      	movne	r1, #0
     fec:	f361 0241 	bfi	r2, r1, #1, #1
     ff0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ff4:	d174      	bne.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
	if (*sp == '*') {
     ff6:	785a      	ldrb	r2, [r3, #1]
     ff8:	2a2a      	cmp	r2, #42	; 0x2a
     ffa:	d06a      	beq.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
	++sp;
     ffc:	3301      	adds	r3, #1
	size_t val = 0;
     ffe:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1000:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1002:	4618      	mov	r0, r3
    1004:	f810 2b01 	ldrb.w	r2, [r0], #1
    1008:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    100c:	2f09      	cmp	r7, #9
    100e:	f240 808e 	bls.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
	conv->unsupported |= ((conv->prec_value < 0)
    1012:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1016:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1018:	f3c2 0040 	ubfx	r0, r2, #1, #1
    101c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1020:	f361 0241 	bfi	r2, r1, #1, #1
    1024:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1028:	e05a      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		conv->specifier = *sp++;
    102a:	f10a 0702 	add.w	r7, sl, #2
    102e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1032:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1036:	07d9      	lsls	r1, r3, #31
    1038:	f140 8149 	bpl.w	12ce <CONFIG_FPROTECT_BLOCK_SIZE+0x2ce>
			width = va_arg(ap, int);
    103c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1040:	f1b9 0f00 	cmp.w	r9, #0
    1044:	da07      	bge.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
				conv->flag_dash = true;
    1046:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    104a:	f042 0204 	orr.w	r2, r2, #4
    104e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1052:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1056:	075a      	lsls	r2, r3, #29
    1058:	f140 8142 	bpl.w	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
			int arg = va_arg(ap, int);
    105c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1060:	f1b8 0f00 	cmp.w	r8, #0
    1064:	f280 8141 	bge.w	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				conv->prec_present = false;
    1068:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    106c:	f36f 0341 	bfc	r3, #1, #1
    1070:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1074:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1078:	e137      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
		switch (*sp) {
    107a:	2b2d      	cmp	r3, #45	; 0x2d
    107c:	d00c      	beq.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    107e:	2b30      	cmp	r3, #48	; 0x30
    1080:	f47f af6d 	bne.w	f5e <cbvprintf+0x6a>
			conv->flag_zero = true;
    1084:	2201      	movs	r2, #1
	} while (loop);
    1086:	e75c      	b.n	f42 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1088:	f04f 0c01 	mov.w	ip, #1
    108c:	e759      	b.n	f42 <cbvprintf+0x4e>
			conv->flag_space = true;
    108e:	f04f 0e01 	mov.w	lr, #1
    1092:	e756      	b.n	f42 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1094:	2001      	movs	r0, #1
    1096:	e754      	b.n	f42 <cbvprintf+0x4e>
		switch (*sp) {
    1098:	2601      	movs	r6, #1
    109a:	e752      	b.n	f42 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    109c:	fb0c 0202 	mla	r2, ip, r2, r0
    10a0:	3a30      	subs	r2, #48	; 0x30
    10a2:	4633      	mov	r3, r6
    10a4:	461e      	mov	r6, r3
    10a6:	f816 0b01 	ldrb.w	r0, [r6], #1
    10aa:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    10ae:	2f09      	cmp	r7, #9
    10b0:	d9f4      	bls.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
	if (sp != wp) {
    10b2:	4299      	cmp	r1, r3
    10b4:	d093      	beq.n	fde <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    10b6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    10ba:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    10bc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    10be:	f362 0141 	bfi	r1, r2, #1, #1
    10c2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    10c6:	e78a      	b.n	fde <cbvprintf+0xea>
    10c8:	460b      	mov	r3, r1
	size_t val = 0;
    10ca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    10cc:	f04f 0c0a 	mov.w	ip, #10
    10d0:	e7e8      	b.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
		conv->prec_star = true;
    10d2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10d6:	f042 0204 	orr.w	r2, r2, #4
    10da:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    10de:	3302      	adds	r3, #2
	switch (*sp) {
    10e0:	461f      	mov	r7, r3
    10e2:	f817 2b01 	ldrb.w	r2, [r7], #1
    10e6:	2a6c      	cmp	r2, #108	; 0x6c
    10e8:	d041      	beq.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    10ea:	d825      	bhi.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    10ec:	2a68      	cmp	r2, #104	; 0x68
    10ee:	d02b      	beq.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    10f0:	2a6a      	cmp	r2, #106	; 0x6a
    10f2:	d046      	beq.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    10f4:	2a4c      	cmp	r2, #76	; 0x4c
    10f6:	d04c      	beq.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    10f8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    10fa:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    10fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1102:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1106:	2a78      	cmp	r2, #120	; 0x78
    1108:	f200 80d9 	bhi.w	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    110c:	2a57      	cmp	r2, #87	; 0x57
    110e:	d84d      	bhi.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1110:	2a41      	cmp	r2, #65	; 0x41
    1112:	d003      	beq.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    1114:	3a45      	subs	r2, #69	; 0x45
    1116:	2a02      	cmp	r2, #2
    1118:	f200 80d1 	bhi.w	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
		conv->specifier_cat = SPECIFIER_FP;
    111c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1120:	2204      	movs	r2, #4
    1122:	f362 0302 	bfi	r3, r2, #0, #3
    1126:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    112a:	2301      	movs	r3, #1
			break;
    112c:	e09e      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		val = 10U * val + *sp++ - '0';
    112e:	fb06 2101 	mla	r1, r6, r1, r2
    1132:	3930      	subs	r1, #48	; 0x30
    1134:	4603      	mov	r3, r0
    1136:	e764      	b.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
	switch (*sp) {
    1138:	2a74      	cmp	r2, #116	; 0x74
    113a:	d026      	beq.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    113c:	2a7a      	cmp	r2, #122	; 0x7a
    113e:	d1db      	bne.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
		conv->length_mod = LENGTH_Z;
    1140:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1144:	2206      	movs	r2, #6
    1146:	e00d      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
		if (*++sp == 'h') {
    1148:	785a      	ldrb	r2, [r3, #1]
    114a:	2a68      	cmp	r2, #104	; 0x68
    114c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1150:	d106      	bne.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
			conv->length_mod = LENGTH_HH;
    1152:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1154:	f361 02c6 	bfi	r2, r1, #3, #4
    1158:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    115c:	1c9f      	adds	r7, r3, #2
    115e:	e7cc      	b.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
			conv->length_mod = LENGTH_H;
    1160:	4613      	mov	r3, r2
    1162:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1164:	f362 03c6 	bfi	r3, r2, #3, #4
    1168:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    116c:	e7c5      	b.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
		if (*++sp == 'l') {
    116e:	785a      	ldrb	r2, [r3, #1]
    1170:	2a6c      	cmp	r2, #108	; 0x6c
    1172:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1176:	d101      	bne.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
			conv->length_mod = LENGTH_LL;
    1178:	2104      	movs	r1, #4
    117a:	e7eb      	b.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
			conv->length_mod = LENGTH_L;
    117c:	4613      	mov	r3, r2
    117e:	2203      	movs	r2, #3
    1180:	e7f0      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
		conv->length_mod = LENGTH_J;
    1182:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1186:	2205      	movs	r2, #5
    1188:	e7ec      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
		conv->length_mod = LENGTH_T;
    118a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    118e:	2207      	movs	r2, #7
    1190:	e7e8      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
		conv->unsupported = true;
    1192:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1196:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    119a:	f023 0302 	bic.w	r3, r3, #2
    119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    11a2:	f043 0302 	orr.w	r3, r3, #2
    11a6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    11aa:	e7a6      	b.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
	switch (conv->specifier) {
    11ac:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    11b0:	2920      	cmp	r1, #32
    11b2:	f200 8084 	bhi.w	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    11b6:	a001      	add	r0, pc, #4	; (adr r0, 11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>)
    11b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    11bc:	00001281 	.word	0x00001281
    11c0:	000012bf 	.word	0x000012bf
    11c4:	000012bf 	.word	0x000012bf
    11c8:	000012bf 	.word	0x000012bf
    11cc:	000012bf 	.word	0x000012bf
    11d0:	000012bf 	.word	0x000012bf
    11d4:	000012bf 	.word	0x000012bf
    11d8:	000012bf 	.word	0x000012bf
    11dc:	000012bf 	.word	0x000012bf
    11e0:	0000111d 	.word	0x0000111d
    11e4:	000012bf 	.word	0x000012bf
    11e8:	00001281 	.word	0x00001281
    11ec:	00001241 	.word	0x00001241
    11f0:	0000111d 	.word	0x0000111d
    11f4:	0000111d 	.word	0x0000111d
    11f8:	0000111d 	.word	0x0000111d
    11fc:	000012bf 	.word	0x000012bf
    1200:	00001241 	.word	0x00001241
    1204:	000012bf 	.word	0x000012bf
    1208:	000012bf 	.word	0x000012bf
    120c:	000012bf 	.word	0x000012bf
    1210:	000012bf 	.word	0x000012bf
    1214:	00001289 	.word	0x00001289
    1218:	00001281 	.word	0x00001281
    121c:	000012a5 	.word	0x000012a5
    1220:	000012bf 	.word	0x000012bf
    1224:	000012bf 	.word	0x000012bf
    1228:	000012a5 	.word	0x000012a5
    122c:	000012bf 	.word	0x000012bf
    1230:	00001281 	.word	0x00001281
    1234:	000012bf 	.word	0x000012bf
    1238:	000012bf 	.word	0x000012bf
    123c:	00001281 	.word	0x00001281
		conv->specifier_cat = SPECIFIER_SINT;
    1240:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1244:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1246:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    124a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    124e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1250:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1254:	bf02      	ittt	eq
    1256:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    125a:	f041 0101 	orreq.w	r1, r1, #1
    125e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1262:	2a63      	cmp	r2, #99	; 0x63
    1264:	d131      	bne.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1266:	3b00      	subs	r3, #0
    1268:	bf18      	it	ne
    126a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    126c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1270:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1274:	430b      	orrs	r3, r1
    1276:	f363 0241 	bfi	r2, r3, #1, #1
    127a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    127e:	e6d8      	b.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
		conv->specifier_cat = SPECIFIER_UINT;
    1280:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1284:	2002      	movs	r0, #2
    1286:	e7de      	b.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
		conv->specifier_cat = SPECIFIER_PTR;
    1288:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    128c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1290:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1294:	2103      	movs	r1, #3
    1296:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    129a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    129c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    12a0:	4143      	adcs	r3, r0
    12a2:	e7e3      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		conv->specifier_cat = SPECIFIER_PTR;
    12a4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    12a8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    12aa:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    12ae:	f361 0202 	bfi	r2, r1, #0, #3
    12b2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    12b6:	bf14      	ite	ne
    12b8:	2301      	movne	r3, #1
    12ba:	2300      	moveq	r3, #0
    12bc:	e7d6      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		conv->invalid = true;
    12be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    12c2:	f043 0301 	orr.w	r3, r3, #1
    12c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    12ca:	2300      	movs	r3, #0
    12cc:	e7ce      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		} else if (conv->width_present) {
    12ce:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    12d2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    12d4:	bfb4      	ite	lt
    12d6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    12da:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    12de:	e6ba      	b.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
		} else if (conv->prec_present) {
    12e0:	079b      	lsls	r3, r3, #30
    12e2:	f57f aec7 	bpl.w	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
			precision = conv->prec_value;
    12e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    12ea:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    12ee:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    12f0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    12f4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    12f8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    12fc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    12fe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1302:	d138      	bne.n	1376 <CONFIG_FPROTECT_BLOCK_SIZE+0x376>
			switch (length_mod) {
    1304:	1ecb      	subs	r3, r1, #3
    1306:	2b04      	cmp	r3, #4
    1308:	d822      	bhi.n	1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>
    130a:	e8df f003 	tbb	[pc, r3]
    130e:	0903      	.short	0x0903
    1310:	2109      	.short	0x2109
    1312:	21          	.byte	0x21
    1313:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1314:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1318:	17da      	asrs	r2, r3, #31
    131a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    131e:	e006      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
					(sint_value_type)va_arg(ap, intmax_t);
    1320:	3407      	adds	r4, #7
    1322:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1326:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    132a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    132e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1332:	f013 0603 	ands.w	r6, r3, #3
    1336:	d056      	beq.n	13e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e6>
			OUTS(sp, fp);
    1338:	9802      	ldr	r0, [sp, #8]
    133a:	463b      	mov	r3, r7
    133c:	4652      	mov	r2, sl
    133e:	4659      	mov	r1, fp
    1340:	f005 f864 	bl	640c <outs>
    1344:	2800      	cmp	r0, #0
    1346:	f2c0 8142 	blt.w	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    134a:	4405      	add	r5, r0
			continue;
    134c:	46ba      	mov	sl, r7
    134e:	e5d9      	b.n	f04 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1350:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1354:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1356:	ea4f 72e3 	mov.w	r2, r3, asr #31
    135a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    135e:	d105      	bne.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
				value->uint = (unsigned char)value->uint;
    1360:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1364:	930a      	str	r3, [sp, #40]	; 0x28
    1366:	2300      	movs	r3, #0
    1368:	930b      	str	r3, [sp, #44]	; 0x2c
    136a:	e7e0      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
			} else if (length_mod == LENGTH_H) {
    136c:	2902      	cmp	r1, #2
    136e:	d1de      	bne.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
				value->sint = (short)value->sint;
    1370:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1374:	e7d0      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1376:	2b02      	cmp	r3, #2
    1378:	d123      	bne.n	13c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c2>
			switch (length_mod) {
    137a:	1ecb      	subs	r3, r1, #3
    137c:	2b04      	cmp	r3, #4
    137e:	d813      	bhi.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
    1380:	e8df f003 	tbb	[pc, r3]
    1384:	120a0a03 	.word	0x120a0a03
    1388:	12          	.byte	0x12
    1389:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    138a:	6822      	ldr	r2, [r4, #0]
    138c:	920a      	str	r2, [sp, #40]	; 0x28
    138e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1390:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1392:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1394:	4604      	mov	r4, r0
    1396:	e7ca      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
					(uint_value_type)va_arg(ap,
    1398:	1de0      	adds	r0, r4, #7
    139a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    139e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    13a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    13a6:	e7f5      	b.n	1394 <CONFIG_FPROTECT_BLOCK_SIZE+0x394>
					(uint_value_type)va_arg(ap, size_t);
    13a8:	f854 3b04 	ldr.w	r3, [r4], #4
    13ac:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    13ae:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    13b0:	f04f 0300 	mov.w	r3, #0
    13b4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    13b6:	d0d3      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
			} else if (length_mod == LENGTH_H) {
    13b8:	2902      	cmp	r1, #2
    13ba:	d1b8      	bne.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
				value->uint = (unsigned short)value->uint;
    13bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    13c0:	e7d0      	b.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
		} else if (specifier_cat == SPECIFIER_FP) {
    13c2:	2b04      	cmp	r3, #4
    13c4:	d109      	bne.n	13da <CONFIG_FPROTECT_BLOCK_SIZE+0x3da>
					(sint_value_type)va_arg(ap, long long);
    13c6:	1de3      	adds	r3, r4, #7
    13c8:	f023 0307 	bic.w	r3, r3, #7
    13cc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    13d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    13d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    13d8:	e7a9      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    13da:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    13dc:	bf04      	itt	eq
    13de:	f854 3b04 	ldreq.w	r3, [r4], #4
    13e2:	930a      	streq	r3, [sp, #40]	; 0x28
    13e4:	e7a3      	b.n	132e <CONFIG_FPROTECT_BLOCK_SIZE+0x32e>
		switch (conv->specifier) {
    13e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    13ea:	2878      	cmp	r0, #120	; 0x78
    13ec:	d8ae      	bhi.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
    13ee:	2862      	cmp	r0, #98	; 0x62
    13f0:	d822      	bhi.n	1438 <CONFIG_FPROTECT_BLOCK_SIZE+0x438>
    13f2:	2825      	cmp	r0, #37	; 0x25
    13f4:	f43f ad8f 	beq.w	f16 <cbvprintf+0x22>
    13f8:	2858      	cmp	r0, #88	; 0x58
    13fa:	d1a7      	bne.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    13fc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1400:	9300      	str	r3, [sp, #0]
    1402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1406:	ab04      	add	r3, sp, #16
    1408:	aa0c      	add	r2, sp, #48	; 0x30
    140a:	f004 ffb9 	bl	6380 <encode_uint>
    140e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1410:	f1b8 0f00 	cmp.w	r8, #0
    1414:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1418:	db0c      	blt.n	1434 <CONFIG_FPROTECT_BLOCK_SIZE+0x434>
				conv->flag_zero = false;
    141a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    141e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1422:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1426:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1428:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    142c:	d902      	bls.n	1434 <CONFIG_FPROTECT_BLOCK_SIZE+0x434>
					conv->pad0_value = precision - (int)len;
    142e:	eba8 0303 	sub.w	r3, r8, r3
    1432:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1434:	4680      	mov	r8, r0
    1436:	e03d      	b.n	14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>
		switch (conv->specifier) {
    1438:	3863      	subs	r0, #99	; 0x63
    143a:	2815      	cmp	r0, #21
    143c:	d886      	bhi.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
    143e:	a201      	add	r2, pc, #4	; (adr r2, 1444 <CONFIG_FPROTECT_BLOCK_SIZE+0x444>)
    1440:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1444:	000014c5 	.word	0x000014c5
    1448:	00001529 	.word	0x00001529
    144c:	0000134d 	.word	0x0000134d
    1450:	0000134d 	.word	0x0000134d
    1454:	0000134d 	.word	0x0000134d
    1458:	0000134d 	.word	0x0000134d
    145c:	00001529 	.word	0x00001529
    1460:	0000134d 	.word	0x0000134d
    1464:	0000134d 	.word	0x0000134d
    1468:	0000134d 	.word	0x0000134d
    146c:	0000134d 	.word	0x0000134d
    1470:	00001583 	.word	0x00001583
    1474:	00001551 	.word	0x00001551
    1478:	00001555 	.word	0x00001555
    147c:	0000134d 	.word	0x0000134d
    1480:	0000134d 	.word	0x0000134d
    1484:	0000149d 	.word	0x0000149d
    1488:	0000134d 	.word	0x0000134d
    148c:	00001551 	.word	0x00001551
    1490:	0000134d 	.word	0x0000134d
    1494:	0000134d 	.word	0x0000134d
    1498:	00001551 	.word	0x00001551
			if (precision >= 0) {
    149c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    14a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    14a4:	db0a      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
				len = strnlen(bps, precision);
    14a6:	4641      	mov	r1, r8
    14a8:	4650      	mov	r0, sl
    14aa:	f005 f883 	bl	65b4 <strnlen>
			bpe = bps + len;
    14ae:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    14b2:	2600      	movs	r6, #0
		if (bps == NULL) {
    14b4:	f1ba 0f00 	cmp.w	sl, #0
    14b8:	d10c      	bne.n	14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
    14ba:	e747      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
				len = strlen(bps);
    14bc:	4650      	mov	r0, sl
    14be:	f005 f872 	bl	65a6 <strlen>
    14c2:	e7f4      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14c6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    14ca:	2600      	movs	r6, #0
			bps = buf;
    14cc:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    14d0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    14d4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    14d8:	b106      	cbz	r6, 14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
			nj_len += 1U;
    14da:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    14dc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    14e0:	06d0      	lsls	r0, r2, #27
    14e2:	d568      	bpl.n	15b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b6>
			nj_len += 2U;
    14e4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    14e6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    14e8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    14ea:	bf48      	it	mi
    14ec:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    14ee:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    14f0:	bf48      	it	mi
    14f2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    14f4:	f1b9 0f00 	cmp.w	r9, #0
    14f8:	dd76      	ble.n	15e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e8>
			if (!conv->flag_dash) {
    14fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    14fe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1502:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1506:	9303      	str	r3, [sp, #12]
    1508:	0753      	lsls	r3, r2, #29
    150a:	d46d      	bmi.n	15e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e8>
				if (conv->flag_zero) {
    150c:	0650      	lsls	r0, r2, #25
    150e:	d561      	bpl.n	15d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d4>
					if (sign != 0) {
    1510:	b146      	cbz	r6, 1524 <CONFIG_FPROTECT_BLOCK_SIZE+0x524>
						OUTC(sign);
    1512:	9b02      	ldr	r3, [sp, #8]
    1514:	4659      	mov	r1, fp
    1516:	4630      	mov	r0, r6
    1518:	4798      	blx	r3
    151a:	2800      	cmp	r0, #0
    151c:	db57      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
						sign = 0;
    151e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1520:	3501      	adds	r5, #1
						sign = 0;
    1522:	461e      	mov	r6, r3
					pad = '0';
    1524:	2330      	movs	r3, #48	; 0x30
    1526:	e056      	b.n	15d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d6>
			if (conv->flag_plus) {
    1528:	071e      	lsls	r6, r3, #28
    152a:	d40f      	bmi.n	154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>
				sign = ' ';
    152c:	f013 0610 	ands.w	r6, r3, #16
    1530:	bf18      	it	ne
    1532:	2620      	movne	r6, #32
			sint = value->sint;
    1534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1538:	2b00      	cmp	r3, #0
    153a:	f6bf af5f 	bge.w	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
				value->uint = (uint_value_type)-sint;
    153e:	4252      	negs	r2, r2
    1540:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1544:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1548:	262d      	movs	r6, #45	; 0x2d
    154a:	e757      	b.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
				sign = '+';
    154c:	262b      	movs	r6, #43	; 0x2b
    154e:	e7f1      	b.n	1534 <CONFIG_FPROTECT_BLOCK_SIZE+0x534>
		switch (conv->specifier) {
    1550:	2600      	movs	r6, #0
    1552:	e753      	b.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
			if (value->ptr != NULL) {
    1554:	980a      	ldr	r0, [sp, #40]	; 0x28
    1556:	b340      	cbz	r0, 15aa <CONFIG_FPROTECT_BLOCK_SIZE+0x5aa>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1558:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    155c:	9300      	str	r3, [sp, #0]
    155e:	aa0c      	add	r2, sp, #48	; 0x30
    1560:	ab04      	add	r3, sp, #16
    1562:	2100      	movs	r1, #0
    1564:	f004 ff0c 	bl	6380 <encode_uint>
				conv->altform_0c = true;
    1568:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    156c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1570:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1574:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1578:	4682      	mov	sl, r0
				conv->altform_0c = true;
    157a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    157e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1580:	e746      	b.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
				store_count(conv, value->ptr, count);
    1582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1584:	2907      	cmp	r1, #7
    1586:	f63f aee1 	bhi.w	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
    158a:	e8df f001 	tbb	[pc, r1]
    158e:	040c      	.short	0x040c
    1590:	08080c06 	.word	0x08080c06
    1594:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1596:	701d      	strb	r5, [r3, #0]
		break;
    1598:	e6d8      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
		*(short *)dp = (short)count;
    159a:	801d      	strh	r5, [r3, #0]
		break;
    159c:	e6d6      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
		*(intmax_t *)dp = (intmax_t)count;
    159e:	17ea      	asrs	r2, r5, #31
    15a0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    15a4:	e6d2      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    15a6:	601d      	str	r5, [r3, #0]
		break;
    15a8:	e6d0      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
			bps = "(nil)";
    15aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>
    15ae:	4606      	mov	r6, r0
			bpe = bps + 5;
    15b0:	f10a 0805 	add.w	r8, sl, #5
    15b4:	e78e      	b.n	14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
		} else if (conv->altform_0) {
    15b6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    15b8:	bf48      	it	mi
    15ba:	3301      	addmi	r3, #1
    15bc:	e793      	b.n	14e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e6>
					OUTC(pad);
    15be:	4618      	mov	r0, r3
    15c0:	9303      	str	r3, [sp, #12]
    15c2:	4659      	mov	r1, fp
    15c4:	9b02      	ldr	r3, [sp, #8]
    15c6:	4798      	blx	r3
    15c8:	2800      	cmp	r0, #0
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	da04      	bge.n	15d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d8>
#undef OUTS
#undef OUTC
}
    15ce:	b011      	add	sp, #68	; 0x44
    15d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    15d4:	2320      	movs	r3, #32
    15d6:	444d      	add	r5, r9
    15d8:	464a      	mov	r2, r9
				while (width-- > 0) {
    15da:	2a00      	cmp	r2, #0
    15dc:	eba5 0109 	sub.w	r1, r5, r9
    15e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    15e4:	dceb      	bgt.n	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
    15e6:	460d      	mov	r5, r1
		if (sign != 0) {
    15e8:	b136      	cbz	r6, 15f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f8>
			OUTC(sign);
    15ea:	9b02      	ldr	r3, [sp, #8]
    15ec:	4659      	mov	r1, fp
    15ee:	4630      	mov	r0, r6
    15f0:	4798      	blx	r3
    15f2:	2800      	cmp	r0, #0
    15f4:	dbeb      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    15f6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    15f8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    15fc:	06d9      	lsls	r1, r3, #27
    15fe:	d401      	bmi.n	1604 <CONFIG_FPROTECT_BLOCK_SIZE+0x604>
    1600:	071a      	lsls	r2, r3, #28
    1602:	d506      	bpl.n	1612 <CONFIG_FPROTECT_BLOCK_SIZE+0x612>
				OUTC('0');
    1604:	9b02      	ldr	r3, [sp, #8]
    1606:	4659      	mov	r1, fp
    1608:	2030      	movs	r0, #48	; 0x30
    160a:	4798      	blx	r3
    160c:	2800      	cmp	r0, #0
    160e:	dbde      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    1610:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1612:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1616:	06db      	lsls	r3, r3, #27
    1618:	d507      	bpl.n	162a <CONFIG_FPROTECT_BLOCK_SIZE+0x62a>
				OUTC(conv->specifier);
    161a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    161e:	9b02      	ldr	r3, [sp, #8]
    1620:	4659      	mov	r1, fp
    1622:	4798      	blx	r3
    1624:	2800      	cmp	r0, #0
    1626:	dbd2      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    1628:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    162a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    162c:	442e      	add	r6, r5
    162e:	1b73      	subs	r3, r6, r5
    1630:	2b00      	cmp	r3, #0
    1632:	dc16      	bgt.n	1662 <CONFIG_FPROTECT_BLOCK_SIZE+0x662>
			OUTS(bps, bpe);
    1634:	9802      	ldr	r0, [sp, #8]
    1636:	4643      	mov	r3, r8
    1638:	4652      	mov	r2, sl
    163a:	4659      	mov	r1, fp
    163c:	f004 fee6 	bl	640c <outs>
    1640:	2800      	cmp	r0, #0
    1642:	dbc4      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    1644:	4405      	add	r5, r0
		while (width > 0) {
    1646:	44a9      	add	r9, r5
    1648:	eba9 0305 	sub.w	r3, r9, r5
    164c:	2b00      	cmp	r3, #0
    164e:	f77f ae7d 	ble.w	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
			OUTC(' ');
    1652:	9b02      	ldr	r3, [sp, #8]
    1654:	4659      	mov	r1, fp
    1656:	2020      	movs	r0, #32
    1658:	4798      	blx	r3
    165a:	2800      	cmp	r0, #0
    165c:	dbb7      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    165e:	3501      	adds	r5, #1
			--width;
    1660:	e7f2      	b.n	1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>
				OUTC('0');
    1662:	9b02      	ldr	r3, [sp, #8]
    1664:	4659      	mov	r1, fp
    1666:	2030      	movs	r0, #48	; 0x30
    1668:	4798      	blx	r3
    166a:	2800      	cmp	r0, #0
    166c:	dbaf      	blt.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
    166e:	3501      	adds	r5, #1
    1670:	e7dd      	b.n	162e <CONFIG_FPROTECT_BLOCK_SIZE+0x62e>
    1672:	bf00      	nop
    1674:	0000772d 	.word	0x0000772d

00001678 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1678:	b508      	push	{r3, lr}
    167a:	f04f 0220 	mov.w	r2, #32
    167e:	f3ef 8311 	mrs	r3, BASEPRI
    1682:	f382 8812 	msr	BASEPRI_MAX, r2
    1686:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    168a:	f001 fb8b 	bl	2da4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    168e:	4803      	ldr	r0, [pc, #12]	; (169c <sys_reboot+0x24>)
    1690:	f004 fdb4 	bl	61fc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1694:	f000 fda0 	bl	21d8 <arch_cpu_idle>
    1698:	e7fc      	b.n	1694 <sys_reboot+0x1c>
    169a:	bf00      	nop
    169c:	00007733 	.word	0x00007733

000016a0 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    16a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a2:	4607      	mov	r7, r0
	struct log_backend const *backend;

	if (!bypass) {
    16a4:	460c      	mov	r4, r1
    16a6:	b929      	cbnz	r1, 16b4 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    16a8:	4d08      	ldr	r5, [pc, #32]	; (16cc <msg_process+0x2c>)
    16aa:	4e09      	ldr	r6, [pc, #36]	; (16d0 <msg_process+0x30>)
    16ac:	1b76      	subs	r6, r6, r5
    16ae:	1136      	asrs	r6, r6, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    16b0:	42b4      	cmp	r4, r6
    16b2:	db00      	blt.n	16b6 <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    16b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    16b6:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    16b8:	795b      	ldrb	r3, [r3, #5]
    16ba:	b123      	cbz	r3, 16c6 <msg_process+0x26>
	backend->api->process(backend, msg);
    16bc:	682b      	ldr	r3, [r5, #0]
    16be:	4639      	mov	r1, r7
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	4628      	mov	r0, r5
    16c4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    16c6:	3401      	adds	r4, #1
    16c8:	3510      	adds	r5, #16
    16ca:	e7f1      	b.n	16b0 <msg_process+0x10>
    16cc:	00007290 	.word	0x00007290
    16d0:	000072b0 	.word	0x000072b0

000016d4 <log_format_func_t_get>:
}
    16d4:	4b01      	ldr	r3, [pc, #4]	; (16dc <log_format_func_t_get+0x8>)
    16d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    16da:	4770      	bx	lr
    16dc:	000072e8 	.word	0x000072e8

000016e0 <log_core_init>:
	panic_mode = false;
    16e0:	4a05      	ldr	r2, [pc, #20]	; (16f8 <log_core_init+0x18>)
    16e2:	2300      	movs	r3, #0
    16e4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    16e6:	4a05      	ldr	r2, [pc, #20]	; (16fc <log_core_init+0x1c>)
    16e8:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    16ea:	4b05      	ldr	r3, [pc, #20]	; (1700 <log_core_init+0x20>)
    16ec:	4a05      	ldr	r2, [pc, #20]	; (1704 <log_core_init+0x24>)
    16ee:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    16f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    16f4:	f000 ba48 	b.w	1b88 <log_output_timestamp_freq_set>
    16f8:	20000c6f 	.word	0x20000c6f
    16fc:	20000378 	.word	0x20000378
    1700:	2000009c 	.word	0x2000009c
    1704:	0000643b 	.word	0x0000643b

00001708 <log_init>:
{
    1708:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    170a:	4b12      	ldr	r3, [pc, #72]	; (1754 <log_init+0x4c>)
    170c:	f3bf 8f5b 	dmb	ish
    1710:	e853 5f00 	ldrex	r5, [r3]
    1714:	1c6a      	adds	r2, r5, #1
    1716:	e843 2100 	strex	r1, r2, [r3]
    171a:	2900      	cmp	r1, #0
    171c:	d1f8      	bne.n	1710 <log_init+0x8>
    171e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1722:	b92d      	cbnz	r5, 1730 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    1724:	4c0c      	ldr	r4, [pc, #48]	; (1758 <log_init+0x50>)
    1726:	4e0d      	ldr	r6, [pc, #52]	; (175c <log_init+0x54>)
    1728:	1b36      	subs	r6, r6, r4
    172a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    172c:	42b5      	cmp	r5, r6
    172e:	db00      	blt.n	1732 <log_init+0x2a>
}
    1730:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1732:	7b23      	ldrb	r3, [r4, #12]
    1734:	b153      	cbz	r3, 174c <log_init+0x44>
			if (backend->api->init != NULL) {
    1736:	6823      	ldr	r3, [r4, #0]
    1738:	699b      	ldr	r3, [r3, #24]
    173a:	b10b      	cbz	r3, 1740 <log_init+0x38>
				backend->api->init(backend);
    173c:	4620      	mov	r0, r4
    173e:	4798      	blx	r3
			log_backend_enable(backend,
    1740:	6863      	ldr	r3, [r4, #4]
    1742:	2204      	movs	r2, #4
    1744:	6819      	ldr	r1, [r3, #0]
    1746:	4620      	mov	r0, r4
    1748:	f000 f86a 	bl	1820 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    174c:	3501      	adds	r5, #1
    174e:	3410      	adds	r4, #16
    1750:	e7ec      	b.n	172c <log_init+0x24>
    1752:	bf00      	nop
    1754:	2000037c 	.word	0x2000037c
    1758:	00007290 	.word	0x00007290
    175c:	000072b0 	.word	0x000072b0

00001760 <z_impl_log_panic>:
{
    1760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1762:	4f0c      	ldr	r7, [pc, #48]	; (1794 <z_impl_log_panic+0x34>)
    1764:	783d      	ldrb	r5, [r7, #0]
    1766:	b94d      	cbnz	r5, 177c <z_impl_log_panic+0x1c>
    1768:	4c0b      	ldr	r4, [pc, #44]	; (1798 <z_impl_log_panic+0x38>)
    176a:	4e0c      	ldr	r6, [pc, #48]	; (179c <z_impl_log_panic+0x3c>)
	log_init();
    176c:	f7ff ffcc 	bl	1708 <log_init>
    1770:	1b36      	subs	r6, r6, r4
    1772:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1774:	42b5      	cmp	r5, r6
    1776:	db02      	blt.n	177e <z_impl_log_panic+0x1e>
	panic_mode = true;
    1778:	2301      	movs	r3, #1
    177a:	703b      	strb	r3, [r7, #0]
}
    177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    177e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1780:	795b      	ldrb	r3, [r3, #5]
    1782:	b11b      	cbz	r3, 178c <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    1784:	6823      	ldr	r3, [r4, #0]
    1786:	4620      	mov	r0, r4
    1788:	695b      	ldr	r3, [r3, #20]
    178a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    178c:	3501      	adds	r5, #1
    178e:	3410      	adds	r4, #16
    1790:	e7f0      	b.n	1774 <z_impl_log_panic+0x14>
    1792:	bf00      	nop
    1794:	20000c6f 	.word	0x20000c6f
    1798:	00007290 	.word	0x00007290
    179c:	000072b0 	.word	0x000072b0

000017a0 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    17a0:	4b01      	ldr	r3, [pc, #4]	; (17a8 <z_log_notify_backend_enabled+0x8>)
    17a2:	2201      	movs	r2, #1
    17a4:	701a      	strb	r2, [r3, #0]
}
    17a6:	4770      	bx	lr
    17a8:	20000c6e 	.word	0x20000c6e

000017ac <z_log_dropped>:
    17ac:	4b0c      	ldr	r3, [pc, #48]	; (17e0 <z_log_dropped+0x34>)
    17ae:	f3bf 8f5b 	dmb	ish
    17b2:	e853 2f00 	ldrex	r2, [r3]
    17b6:	3201      	adds	r2, #1
    17b8:	e843 2100 	strex	r1, r2, [r3]
    17bc:	2900      	cmp	r1, #0
    17be:	d1f8      	bne.n	17b2 <z_log_dropped+0x6>
    17c0:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    17c4:	b158      	cbz	r0, 17de <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    17c6:	f3bf 8f5b 	dmb	ish
    17ca:	4b06      	ldr	r3, [pc, #24]	; (17e4 <z_log_dropped+0x38>)
    17cc:	e853 2f00 	ldrex	r2, [r3]
    17d0:	3a01      	subs	r2, #1
    17d2:	e843 2100 	strex	r1, r2, [r3]
    17d6:	2900      	cmp	r1, #0
    17d8:	d1f8      	bne.n	17cc <z_log_dropped+0x20>
    17da:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    17de:	4770      	bx	lr
    17e0:	20000378 	.word	0x20000378
    17e4:	20000374 	.word	0x20000374

000017e8 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <z_log_msg2_commit+0x18>)
{
    17ea:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    17ec:	681b      	ldr	r3, [r3, #0]
{
    17ee:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    17f0:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    17f2:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    17f4:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    17f6:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    17f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    17fc:	f7ff bf50 	b.w	16a0 <msg_process>
    1800:	2000009c 	.word	0x2000009c

00001804 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1804:	4a04      	ldr	r2, [pc, #16]	; (1818 <log_source_name_get+0x14>)
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <log_source_name_get+0x18>)
    1808:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    180a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    180e:	bf34      	ite	cc
    1810:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1814:	2000      	movcs	r0, #0
}
    1816:	4770      	bx	lr
    1818:	00007240 	.word	0x00007240
    181c:	00007290 	.word	0x00007290

00001820 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1820:	4a05      	ldr	r2, [pc, #20]	; (1838 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1822:	6843      	ldr	r3, [r0, #4]
    1824:	1a80      	subs	r0, r0, r2
    1826:	1100      	asrs	r0, r0, #4
    1828:	3001      	adds	r0, #1
	backend->cb->active = true;
    182a:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    182c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    182e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1830:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1832:	f7ff bfb5 	b.w	17a0 <z_log_notify_backend_enabled>
    1836:	bf00      	nop
    1838:	00007290 	.word	0x00007290

0000183c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    183c:	b40e      	push	{r1, r2, r3}
    183e:	b503      	push	{r0, r1, lr}
    1840:	ab03      	add	r3, sp, #12
    1842:	4601      	mov	r1, r0
    1844:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1848:	4804      	ldr	r0, [pc, #16]	; (185c <print_formatted+0x20>)
	va_start(args, fmt);
    184a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    184c:	f7ff fb52 	bl	ef4 <cbvprintf>
	va_end(args);

	return length;
}
    1850:	b002      	add	sp, #8
    1852:	f85d eb04 	ldr.w	lr, [sp], #4
    1856:	b003      	add	sp, #12
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	0000646d 	.word	0x0000646d

00001860 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1864:	b087      	sub	sp, #28
    1866:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1868:	f001 0301 	and.w	r3, r1, #1
{
    186c:	9205      	str	r2, [sp, #20]
    186e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1872:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1876:	9304      	str	r3, [sp, #16]
{
    1878:	4607      	mov	r7, r0
    187a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    187c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1880:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1884:	f004 fdf0 	bl	6468 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1888:	4602      	mov	r2, r0
    188a:	2800      	cmp	r0, #0
    188c:	d044      	beq.n	1918 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    188e:	493a      	ldr	r1, [pc, #232]	; (1978 <prefix_print+0x118>)
    1890:	4638      	mov	r0, r7
    1892:	f7ff ffd3 	bl	183c <print_formatted>
    1896:	4605      	mov	r5, r0
	}

	if (stamp) {
    1898:	f1bb 0f00 	cmp.w	fp, #0
    189c:	d008      	beq.n	18b0 <prefix_print+0x50>
	if (!format) {
    189e:	f018 0f44 	tst.w	r8, #68	; 0x44
    18a2:	d13b      	bne.n	191c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    18a4:	4935      	ldr	r1, [pc, #212]	; (197c <prefix_print+0x11c>)
    18a6:	4622      	mov	r2, r4
    18a8:	4638      	mov	r0, r7
    18aa:	f7ff ffc7 	bl	183c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    18ae:	4405      	add	r5, r0
	if (color) {
    18b0:	9b04      	ldr	r3, [sp, #16]
    18b2:	b153      	cbz	r3, 18ca <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    18b4:	4b32      	ldr	r3, [pc, #200]	; (1980 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    18b6:	4933      	ldr	r1, [pc, #204]	; (1984 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    18b8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    18bc:	4b32      	ldr	r3, [pc, #200]	; (1988 <prefix_print+0x128>)
    18be:	4638      	mov	r0, r7
    18c0:	2a00      	cmp	r2, #0
    18c2:	bf08      	it	eq
    18c4:	461a      	moveq	r2, r3
    18c6:	f7ff ffb9 	bl	183c <print_formatted>
	if (level_on) {
    18ca:	b13e      	cbz	r6, 18dc <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    18cc:	4b2f      	ldr	r3, [pc, #188]	; (198c <prefix_print+0x12c>)
    18ce:	4930      	ldr	r1, [pc, #192]	; (1990 <prefix_print+0x130>)
    18d0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    18d4:	4638      	mov	r0, r7
    18d6:	f7ff ffb1 	bl	183c <print_formatted>
    18da:	4606      	mov	r6, r0
	if (source_id >= 0) {
    18dc:	f1ba 0f00 	cmp.w	sl, #0
    18e0:	db16      	blt.n	1910 <prefix_print+0xb0>
		total += print_formatted(output,
    18e2:	9b05      	ldr	r3, [sp, #20]
    18e4:	2b00      	cmp	r3, #0
    18e6:	d045      	beq.n	1974 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    18e8:	2301      	movs	r3, #1
    18ea:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    18ee:	4b29      	ldr	r3, [pc, #164]	; (1994 <prefix_print+0x134>)
    18f0:	4c29      	ldr	r4, [pc, #164]	; (1998 <prefix_print+0x138>)
    18f2:	f019 0f10 	tst.w	r9, #16
    18f6:	bf18      	it	ne
    18f8:	461c      	movne	r4, r3
    18fa:	4651      	mov	r1, sl
    18fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1900:	f7ff ff80 	bl	1804 <log_source_name_get>
    1904:	4621      	mov	r1, r4
    1906:	4602      	mov	r2, r0
    1908:	4638      	mov	r0, r7
    190a:	f7ff ff97 	bl	183c <print_formatted>
    190e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1910:	1970      	adds	r0, r6, r5
    1912:	b007      	add	sp, #28
    1914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1918:	4605      	mov	r5, r0
    191a:	e7bd      	b.n	1898 <prefix_print+0x38>
	} else if (freq != 0U) {
    191c:	4b1f      	ldr	r3, [pc, #124]	; (199c <prefix_print+0x13c>)
    191e:	6818      	ldr	r0, [r3, #0]
    1920:	2800      	cmp	r0, #0
    1922:	d0c4      	beq.n	18ae <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1924:	4b1e      	ldr	r3, [pc, #120]	; (19a0 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1926:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    192a:	681b      	ldr	r3, [r3, #0]
    192c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1930:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1934:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1938:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    193c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1940:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1944:	fbb3 f2f1 	udiv	r2, r3, r1
    1948:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    194c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1950:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1954:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1958:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    195c:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1960:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1962:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1966:	490f      	ldr	r1, [pc, #60]	; (19a4 <prefix_print+0x144>)
    1968:	e9cd e001 	strd	lr, r0, [sp, #4]
    196c:	4638      	mov	r0, r7
    196e:	f7ff ff65 	bl	183c <print_formatted>
    1972:	e79c      	b.n	18ae <prefix_print+0x4e>
		total += print_formatted(output,
    1974:	4c08      	ldr	r4, [pc, #32]	; (1998 <prefix_print+0x138>)
    1976:	e7c0      	b.n	18fa <prefix_print+0x9a>
    1978:	0000776e 	.word	0x0000776e
    197c:	00007772 	.word	0x00007772
    1980:	000072f4 	.word	0x000072f4
    1984:	00007797 	.word	0x00007797
    1988:	00007760 	.word	0x00007760
    198c:	00007308 	.word	0x00007308
    1990:	0000779a 	.word	0x0000779a
    1994:	0000776a 	.word	0x0000776a
    1998:	00007765 	.word	0x00007765
    199c:	20000380 	.word	0x20000380
    19a0:	20000384 	.word	0x20000384
    19a4:	0000777b 	.word	0x0000777b

000019a8 <hexdump_line_print>:
{
    19a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19ac:	461d      	mov	r5, r3
    19ae:	9b08      	ldr	r3, [sp, #32]
    19b0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19b2:	06da      	lsls	r2, r3, #27
{
    19b4:	4604      	mov	r4, r0
    19b6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19b8:	d405      	bmi.n	19c6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    19ba:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    19bc:	bf4c      	ite	mi
    19be:	492a      	ldrmi	r1, [pc, #168]	; (1a68 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    19c0:	492a      	ldrpl	r1, [pc, #168]	; (1a6c <hexdump_line_print+0xc4>)
    19c2:	f7ff ff3b 	bl	183c <print_formatted>
		print_formatted(output, " ");
    19c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1a70 <hexdump_line_print+0xc8>
{
    19ca:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    19ce:	45a8      	cmp	r8, r5
    19d0:	db2a      	blt.n	1a28 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    19d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a74 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    19d6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1a78 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    19da:	f8df a094 	ldr.w	sl, [pc, #148]	; 1a70 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19de:	2500      	movs	r5, #0
		if (i < length) {
    19e0:	42bd      	cmp	r5, r7
    19e2:	d22f      	bcs.n	1a44 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    19e4:	5d72      	ldrb	r2, [r6, r5]
    19e6:	4649      	mov	r1, r9
    19e8:	4620      	mov	r0, r4
    19ea:	f7ff ff27 	bl	183c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19ee:	3501      	adds	r5, #1
    19f0:	2d10      	cmp	r5, #16
    19f2:	d120      	bne.n	1a36 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    19f4:	4921      	ldr	r1, [pc, #132]	; (1a7c <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    19f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1a70 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    19fa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1a80 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    19fe:	4620      	mov	r0, r4
    1a00:	f7ff ff1c 	bl	183c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a04:	2500      	movs	r5, #0
		if (i < length) {
    1a06:	42af      	cmp	r7, r5
    1a08:	d928      	bls.n	1a5c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1a0a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1a0c:	f1a2 0320 	sub.w	r3, r2, #32
    1a10:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1a12:	bf28      	it	cs
    1a14:	222e      	movcs	r2, #46	; 0x2e
    1a16:	4649      	mov	r1, r9
    1a18:	4620      	mov	r0, r4
    1a1a:	f7ff ff0f 	bl	183c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a1e:	3501      	adds	r5, #1
    1a20:	2d10      	cmp	r5, #16
    1a22:	d114      	bne.n	1a4e <hexdump_line_print+0xa6>
}
    1a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1a28:	4649      	mov	r1, r9
    1a2a:	4620      	mov	r0, r4
    1a2c:	f7ff ff06 	bl	183c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1a30:	f108 0801 	add.w	r8, r8, #1
    1a34:	e7cb      	b.n	19ce <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1a36:	076a      	lsls	r2, r5, #29
    1a38:	d1d2      	bne.n	19e0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1a3a:	4651      	mov	r1, sl
    1a3c:	4620      	mov	r0, r4
    1a3e:	f7ff fefd 	bl	183c <print_formatted>
    1a42:	e7cd      	b.n	19e0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1a44:	4641      	mov	r1, r8
    1a46:	4620      	mov	r0, r4
    1a48:	f7ff fef8 	bl	183c <print_formatted>
    1a4c:	e7cf      	b.n	19ee <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1a4e:	076b      	lsls	r3, r5, #29
    1a50:	d1d9      	bne.n	1a06 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1a52:	4641      	mov	r1, r8
    1a54:	4620      	mov	r0, r4
    1a56:	f7ff fef1 	bl	183c <print_formatted>
    1a5a:	e7d4      	b.n	1a06 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1a5c:	4641      	mov	r1, r8
    1a5e:	4620      	mov	r0, r4
    1a60:	f7ff feec 	bl	183c <print_formatted>
    1a64:	e7db      	b.n	1a1e <hexdump_line_print+0x76>
    1a66:	bf00      	nop
    1a68:	000077a1 	.word	0x000077a1
    1a6c:	000077a0 	.word	0x000077a0
    1a70:	000077ab 	.word	0x000077ab
    1a74:	000077a9 	.word	0x000077a9
    1a78:	000077a3 	.word	0x000077a3
    1a7c:	000077ad 	.word	0x000077ad
    1a80:	000077af 	.word	0x000077af

00001a84 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1a84:	b538      	push	{r3, r4, r5, lr}
    1a86:	460c      	mov	r4, r1
	if (color) {
    1a88:	07e1      	lsls	r1, r4, #31
{
    1a8a:	4605      	mov	r5, r0
	if (color) {
    1a8c:	d503      	bpl.n	1a96 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1a8e:	4a08      	ldr	r2, [pc, #32]	; (1ab0 <postfix_print+0x2c>)
    1a90:	4908      	ldr	r1, [pc, #32]	; (1ab4 <postfix_print+0x30>)
    1a92:	f7ff fed3 	bl	183c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a96:	06e2      	lsls	r2, r4, #27
    1a98:	d408      	bmi.n	1aac <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a9a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1a9c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1a9e:	bf4c      	ite	mi
    1aa0:	4905      	ldrmi	r1, [pc, #20]	; (1ab8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1aa2:	4906      	ldrpl	r1, [pc, #24]	; (1abc <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1aa8:	f7ff bec8 	b.w	183c <print_formatted>
}
    1aac:	bd38      	pop	{r3, r4, r5, pc}
    1aae:	bf00      	nop
    1ab0:	00007760 	.word	0x00007760
    1ab4:	00007797 	.word	0x00007797
    1ab8:	000077a1 	.word	0x000077a1
    1abc:	000077a0 	.word	0x000077a0

00001ac0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1ac4:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1ac6:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1aca:	4606      	mov	r6, r0
    1acc:	460c      	mov	r4, r1
    1ace:	4690      	mov	r8, r2
    1ad0:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1ad4:	d04d      	beq.n	1b72 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1ad6:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1ad8:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1ada:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d044      	beq.n	1b6c <log_output_msg2_process+0xac>
    1ae2:	4925      	ldr	r1, [pc, #148]	; (1b78 <log_output_msg2_process+0xb8>)
    1ae4:	1a5b      	subs	r3, r3, r1
    1ae6:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1aea:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1aee:	f8cd 9000 	str.w	r9, [sp]
    1af2:	68a3      	ldr	r3, [r4, #8]
    1af4:	2200      	movs	r2, #0
    1af6:	4641      	mov	r1, r8
    1af8:	4630      	mov	r0, r6
    1afa:	f7ff feb1 	bl	1860 <prefix_print>
    1afe:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1b00:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1b02:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1b06:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b0a:	b153      	cbz	r3, 1b22 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1b0c:	4f1b      	ldr	r7, [pc, #108]	; (1b7c <log_output_msg2_process+0xbc>)
    1b0e:	481c      	ldr	r0, [pc, #112]	; (1b80 <log_output_msg2_process+0xc0>)
    1b10:	491c      	ldr	r1, [pc, #112]	; (1b84 <log_output_msg2_process+0xc4>)
    1b12:	462b      	mov	r3, r5
    1b14:	4632      	mov	r2, r6
    1b16:	f1b9 0f00 	cmp.w	r9, #0
    1b1a:	bf08      	it	eq
    1b1c:	4638      	moveq	r0, r7
    1b1e:	f004 fb20 	bl	6162 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1b22:	8867      	ldrh	r7, [r4, #2]
    1b24:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1b28:	b197      	cbz	r7, 1b50 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1b2a:	6823      	ldr	r3, [r4, #0]
    1b2c:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b30:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1b32:	2f10      	cmp	r7, #16
    1b34:	463c      	mov	r4, r7
    1b36:	bf28      	it	cs
    1b38:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1b3a:	4629      	mov	r1, r5
    1b3c:	f8cd 8000 	str.w	r8, [sp]
    1b40:	4653      	mov	r3, sl
    1b42:	4622      	mov	r2, r4
    1b44:	4630      	mov	r0, r6
    1b46:	f7ff ff2f 	bl	19a8 <hexdump_line_print>
	} while (len);
    1b4a:	1b3f      	subs	r7, r7, r4
		data += length;
    1b4c:	4425      	add	r5, r4
	} while (len);
    1b4e:	d1f0      	bne.n	1b32 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1b50:	f1b9 0f00 	cmp.w	r9, #0
    1b54:	d004      	beq.n	1b60 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1b56:	464a      	mov	r2, r9
    1b58:	4641      	mov	r1, r8
    1b5a:	4630      	mov	r0, r6
    1b5c:	f7ff ff92 	bl	1a84 <postfix_print>
	}

	log_output_flush(output);
    1b60:	4630      	mov	r0, r6
}
    1b62:	b004      	add	sp, #16
    1b64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1b68:	f004 bca8 	b.w	64bc <log_output_flush>
		int16_t source_id = source ?
    1b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1b70:	e7bb      	b.n	1aea <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1b72:	46ca      	mov	sl, r9
    1b74:	e7c4      	b.n	1b00 <log_output_msg2_process+0x40>
    1b76:	bf00      	nop
    1b78:	00007240 	.word	0x00007240
    1b7c:	00006489 	.word	0x00006489
    1b80:	0000646d 	.word	0x0000646d
    1b84:	00000ef5 	.word	0x00000ef5

00001b88 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1b88:	4a08      	ldr	r2, [pc, #32]	; (1bac <log_output_timestamp_freq_set+0x24>)
{
    1b8a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1b8c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1b8e:	4c08      	ldr	r4, [pc, #32]	; (1bb0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1b90:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1b92:	2100      	movs	r1, #0
    1b94:	42a0      	cmp	r0, r4
    1b96:	d804      	bhi.n	1ba2 <log_output_timestamp_freq_set+0x1a>
    1b98:	b101      	cbz	r1, 1b9c <log_output_timestamp_freq_set+0x14>
    1b9a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1b9c:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <log_output_timestamp_freq_set+0x2c>)
    1b9e:	6018      	str	r0, [r3, #0]
}
    1ba0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1ba2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1ba4:	005b      	lsls	r3, r3, #1
    1ba6:	2101      	movs	r1, #1
    1ba8:	e7f4      	b.n	1b94 <log_output_timestamp_freq_set+0xc>
    1baa:	bf00      	nop
    1bac:	20000384 	.word	0x20000384
    1bb0:	000f4240 	.word	0x000f4240
    1bb4:	20000380 	.word	0x20000380

00001bb8 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bbc:	b085      	sub	sp, #20
    1bbe:	af02      	add	r7, sp, #8
    1bc0:	4699      	mov	r9, r3
    1bc2:	e9d7 3a0e 	ldrd	r3, sl, [r7, #56]	; 0x38
    1bc6:	e9d7 6b0c 	ldrd	r6, fp, [r7, #48]	; 0x30
    1bca:	4605      	mov	r5, r0
    1bcc:	4688      	mov	r8, r1
    1bce:	4614      	mov	r4, r2
	int plen;

	if (fmt) {
    1bd0:	b393      	cbz	r3, 1c38 <z_impl_z_log_msg2_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1bd2:	2110      	movs	r1, #16
    1bd4:	f8cd a000 	str.w	sl, [sp]
    1bd8:	465a      	mov	r2, fp
    1bda:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1bdc:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1be0:	f7fe fe66 	bl	8b0 <cbvprintf_package>
    1be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1be6:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1be8:	f004 0207 	and.w	r2, r4, #7
    1bec:	f005 0407 	and.w	r4, r5, #7
    1bf0:	00e4      	lsls	r4, r4, #3
    1bf2:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    1bf6:	4a11      	ldr	r2, [pc, #68]	; (1c3c <z_impl_z_log_msg2_runtime_vcreate+0x84>)
    1bf8:	4d11      	ldr	r5, [pc, #68]	; (1c40 <z_impl_z_log_msg2_runtime_vcreate+0x88>)
    1bfa:	ea02 42c6 	and.w	r2, r2, r6, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1bfe:	3617      	adds	r6, #23
    1c00:	440e      	add	r6, r1
	struct log_msg2_desc desc =
    1c02:	ea05 2541 	and.w	r5, r5, r1, lsl #9
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    1c06:	f026 0607 	bic.w	r6, r6, #7
	struct log_msg2_desc desc =
    1c0a:	432c      	orrs	r4, r5
		msg = alloca(msg_wlen * sizeof(int));
    1c0c:	ebad 0d06 	sub.w	sp, sp, r6
	struct log_msg2_desc desc =
    1c10:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    1c12:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1c14:	b133      	cbz	r3, 1c24 <z_impl_z_log_msg2_runtime_vcreate+0x6c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1c16:	f8cd a000 	str.w	sl, [sp]
    1c1a:	465a      	mov	r2, fp
    1c1c:	f105 0010 	add.w	r0, r5, #16
    1c20:	f7fe fe46 	bl	8b0 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1c24:	464b      	mov	r3, r9
    1c26:	4622      	mov	r2, r4
    1c28:	4641      	mov	r1, r8
    1c2a:	4628      	mov	r0, r5
    1c2c:	f004 fc53 	bl	64d6 <z_log_msg2_finalize>
	}
}
    1c30:	370c      	adds	r7, #12
    1c32:	46bd      	mov	sp, r7
    1c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    1c38:	4619      	mov	r1, r3
    1c3a:	e7d5      	b.n	1be8 <z_impl_z_log_msg2_runtime_vcreate+0x30>
    1c3c:	7ff80000 	.word	0x7ff80000
    1c40:	0007fe00 	.word	0x0007fe00

00001c44 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    1c46:	4f07      	ldr	r7, [pc, #28]	; (1c64 <char_out+0x20>)
{
    1c48:	460d      	mov	r5, r1
    1c4a:	4604      	mov	r4, r0
    1c4c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    1c4e:	42b4      	cmp	r4, r6
    1c50:	d101      	bne.n	1c56 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1c52:	4628      	mov	r0, r5
    1c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    1c56:	6838      	ldr	r0, [r7, #0]
    1c58:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1c5c:	6883      	ldr	r3, [r0, #8]
    1c5e:	685b      	ldr	r3, [r3, #4]
    1c60:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1c62:	e7f4      	b.n	1c4e <char_out+0xa>
    1c64:	200003a0 	.word	0x200003a0

00001c68 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1c68:	4b01      	ldr	r3, [pc, #4]	; (1c70 <format_set+0x8>)
	return 0;
}
    1c6a:	2000      	movs	r0, #0
	log_format_current = log_type;
    1c6c:	6019      	str	r1, [r3, #0]
}
    1c6e:	4770      	bx	lr
    1c70:	20000390 	.word	0x20000390

00001c74 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1c74:	4b01      	ldr	r3, [pc, #4]	; (1c7c <log_backend_uart_init+0x8>)
    1c76:	4a02      	ldr	r2, [pc, #8]	; (1c80 <log_backend_uart_init+0xc>)
    1c78:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1c7a:	4770      	bx	lr
    1c7c:	200003a0 	.word	0x200003a0
    1c80:	00007090 	.word	0x00007090

00001c84 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    1c84:	4b02      	ldr	r3, [pc, #8]	; (1c90 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1c86:	4803      	ldr	r0, [pc, #12]	; (1c94 <panic+0x10>)
    1c88:	2201      	movs	r2, #1
    1c8a:	701a      	strb	r2, [r3, #0]
    1c8c:	f004 bc16 	b.w	64bc <log_output_flush>
    1c90:	20000c70 	.word	0x20000c70
    1c94:	0000733c 	.word	0x0000733c

00001c98 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <process+0x1c>)
{
    1c9a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1c9c:	6818      	ldr	r0, [r3, #0]
{
    1c9e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ca0:	f7ff fd18 	bl	16d4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1ca4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ca6:	4603      	mov	r3, r0
}
    1ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1cac:	4802      	ldr	r0, [pc, #8]	; (1cb8 <process+0x20>)
    1cae:	220f      	movs	r2, #15
    1cb0:	4718      	bx	r3
    1cb2:	bf00      	nop
    1cb4:	20000390 	.word	0x20000390
    1cb8:	0000733c 	.word	0x0000733c

00001cbc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1cbc:	4b01      	ldr	r3, [pc, #4]	; (1cc4 <log_backend_rtt_init+0x8>)
    1cbe:	2201      	movs	r2, #1
    1cc0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1cc2:	4770      	bx	lr
    1cc4:	20000c73 	.word	0x20000c73

00001cc8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1cc8:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <format_set+0x8>)
	return 0;
}
    1cca:	2000      	movs	r0, #0
	log_format_current = log_type;
    1ccc:	6019      	str	r1, [r3, #0]
}
    1cce:	4770      	bx	lr
    1cd0:	200003ac 	.word	0x200003ac

00001cd4 <panic>:
	panic_mode = true;
    1cd4:	4b02      	ldr	r3, [pc, #8]	; (1ce0 <panic+0xc>)
    1cd6:	4803      	ldr	r0, [pc, #12]	; (1ce4 <panic+0x10>)
    1cd8:	2201      	movs	r2, #1
    1cda:	701a      	strb	r2, [r3, #0]
    1cdc:	f004 bbee 	b.w	64bc <log_output_flush>
    1ce0:	20000c74 	.word	0x20000c74
    1ce4:	0000736c 	.word	0x0000736c

00001ce8 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ce8:	4b06      	ldr	r3, [pc, #24]	; (1d04 <process+0x1c>)
{
    1cea:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cec:	6818      	ldr	r0, [r3, #0]
{
    1cee:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cf0:	f7ff fcf0 	bl	16d4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1cf4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cf6:	4603      	mov	r3, r0
}
    1cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1cfc:	4802      	ldr	r0, [pc, #8]	; (1d08 <process+0x20>)
    1cfe:	220f      	movs	r2, #15
    1d00:	4718      	bx	r3
    1d02:	bf00      	nop
    1d04:	200003ac 	.word	0x200003ac
    1d08:	0000736c 	.word	0x0000736c

00001d0c <data_out_block_mode>:
{
    1d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d0e:	4d19      	ldr	r5, [pc, #100]	; (1d74 <data_out_block_mode+0x68>)
    1d10:	4607      	mov	r7, r0
    1d12:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1d14:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1d16:	4632      	mov	r2, r6
    1d18:	4639      	mov	r1, r7
    1d1a:	2000      	movs	r0, #0
    1d1c:	f002 ff40 	bl	4ba0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    1d20:	b1c8      	cbz	r0, 1d56 <data_out_block_mode+0x4a>
	host_present = true;
    1d22:	2301      	movs	r3, #1
    1d24:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    1d26:	4b14      	ldr	r3, [pc, #80]	; (1d78 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	b92b      	cbnz	r3, 1d38 <data_out_block_mode+0x2c>
}
    1d2c:	4630      	mov	r0, r6
    1d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    1d30:	b95c      	cbnz	r4, 1d4a <data_out_block_mode+0x3e>
		host_present = false;
    1d32:	702c      	strb	r4, [r5, #0]
    1d34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1d38:	2000      	movs	r0, #0
    1d3a:	f002 ff7d 	bl	4c38 <SEGGER_RTT_HasDataUp>
    1d3e:	2800      	cmp	r0, #0
    1d40:	d0f4      	beq.n	1d2c <data_out_block_mode+0x20>
    1d42:	782b      	ldrb	r3, [r5, #0]
    1d44:	2b00      	cmp	r3, #0
    1d46:	d1f3      	bne.n	1d30 <data_out_block_mode+0x24>
    1d48:	e7f0      	b.n	1d2c <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    1d4a:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1d4c:	f241 3088 	movw	r0, #5000	; 0x1388
    1d50:	f005 f90e 	bl	6f70 <z_impl_k_busy_wait>
}
    1d54:	e7f0      	b.n	1d38 <data_out_block_mode+0x2c>
		} else if (host_present) {
    1d56:	782b      	ldrb	r3, [r5, #0]
    1d58:	b113      	cbz	r3, 1d60 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    1d5a:	3c01      	subs	r4, #1
    1d5c:	d104      	bne.n	1d68 <data_out_block_mode+0x5c>
		host_present = false;
    1d5e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1d60:	782b      	ldrb	r3, [r5, #0]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d1d7      	bne.n	1d16 <data_out_block_mode+0xa>
    1d66:	e7e1      	b.n	1d2c <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    1d68:	f241 3088 	movw	r0, #5000	; 0x1388
    1d6c:	f005 f900 	bl	6f70 <z_impl_k_busy_wait>
}
    1d70:	e7f6      	b.n	1d60 <data_out_block_mode+0x54>
    1d72:	bf00      	nop
    1d74:	20000c73 	.word	0x20000c73
    1d78:	20000c74 	.word	0x20000c74

00001d7c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d80:	4605      	mov	r5, r0
    1d82:	f04f 0320 	mov.w	r3, #32
    1d86:	f3ef 8611 	mrs	r6, BASEPRI
    1d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    1d8e:	f3bf 8f6f 	isb	sy
	return list->head;
    1d92:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <pm_state_notify+0x50>)
    1d94:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d96:	b19c      	cbz	r4, 1dc0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d98:	4f0d      	ldr	r7, [pc, #52]	; (1dd0 <pm_state_notify+0x54>)
    1d9a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1dd4 <pm_state_notify+0x58>
    1d9e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1da2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1da6:	2d00      	cmp	r5, #0
    1da8:	bf08      	it	eq
    1daa:	4613      	moveq	r3, r2
		if (callback) {
    1dac:	b12b      	cbz	r3, 1dba <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1dae:	f898 2014 	ldrb.w	r2, [r8, #20]
    1db2:	fb09 f202 	mul.w	r2, r9, r2
    1db6:	5cb8      	ldrb	r0, [r7, r2]
    1db8:	4798      	blx	r3
	return node->next;
    1dba:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1dbc:	2c00      	cmp	r4, #0
    1dbe:	d1f0      	bne.n	1da2 <pm_state_notify+0x26>
	__asm__ volatile(
    1dc0:	f386 8811 	msr	BASEPRI, r6
    1dc4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dcc:	200003bc 	.word	0x200003bc
    1dd0:	200003c4 	.word	0x200003c4
    1dd4:	20000a5c 	.word	0x20000a5c

00001dd8 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1dd8:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1dda:	2301      	movs	r3, #1
    1ddc:	f000 001f 	and.w	r0, r0, #31
    1de0:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1de4:	4b07      	ldr	r3, [pc, #28]	; (1e04 <atomic_clear_bit.constprop.0+0x2c>)
    1de6:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1dea:	43c0      	mvns	r0, r0
    1dec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1df0:	e853 2f00 	ldrex	r2, [r3]
    1df4:	4002      	ands	r2, r0
    1df6:	e843 2100 	strex	r1, r2, [r3]
    1dfa:	2900      	cmp	r1, #0
    1dfc:	d1f8      	bne.n	1df0 <atomic_clear_bit.constprop.0+0x18>
    1dfe:	f3bf 8f5b 	dmb	ish
}
    1e02:	4770      	bx	lr
    1e04:	200003d0 	.word	0x200003d0

00001e08 <pm_system_resume>:

void pm_system_resume(void)
{
    1e08:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1e0a:	4b1a      	ldr	r3, [pc, #104]	; (1e74 <pm_system_resume+0x6c>)
    1e0c:	7d1c      	ldrb	r4, [r3, #20]
    1e0e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e12:	f004 031f 	and.w	r3, r4, #31
    1e16:	2201      	movs	r2, #1
    1e18:	409a      	lsls	r2, r3
    1e1a:	4b17      	ldr	r3, [pc, #92]	; (1e78 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1e1c:	0961      	lsrs	r1, r4, #5
    1e1e:	43d0      	mvns	r0, r2
    1e20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e24:	e853 1f00 	ldrex	r1, [r3]
    1e28:	ea01 0500 	and.w	r5, r1, r0
    1e2c:	e843 5c00 	strex	ip, r5, [r3]
    1e30:	f1bc 0f00 	cmp.w	ip, #0
    1e34:	d1f6      	bne.n	1e24 <pm_system_resume+0x1c>
    1e36:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1e3a:	4211      	tst	r1, r2
    1e3c:	d013      	beq.n	1e66 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1e3e:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <pm_system_resume+0x74>)
    1e40:	4d0f      	ldr	r5, [pc, #60]	; (1e80 <pm_system_resume+0x78>)
    1e42:	b18b      	cbz	r3, 1e68 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1e44:	230c      	movs	r3, #12
    1e46:	4363      	muls	r3, r4
    1e48:	18ea      	adds	r2, r5, r3
    1e4a:	5ce8      	ldrb	r0, [r5, r3]
    1e4c:	7851      	ldrb	r1, [r2, #1]
    1e4e:	f004 fbe9 	bl	6624 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1e52:	2000      	movs	r0, #0
    1e54:	f7ff ff92 	bl	1d7c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1e58:	230c      	movs	r3, #12
    1e5a:	435c      	muls	r4, r3
    1e5c:	192a      	adds	r2, r5, r4
    1e5e:	2300      	movs	r3, #0
    1e60:	512b      	str	r3, [r5, r4]
    1e62:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1e66:	bd38      	pop	{r3, r4, r5, pc}
    1e68:	f383 8811 	msr	BASEPRI, r3
    1e6c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1e70:	e7ef      	b.n	1e52 <pm_system_resume+0x4a>
    1e72:	bf00      	nop
    1e74:	20000a5c 	.word	0x20000a5c
    1e78:	200003d4 	.word	0x200003d4
    1e7c:	00006625 	.word	0x00006625
    1e80:	200003c4 	.word	0x200003c4

00001e84 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1e88:	4b32      	ldr	r3, [pc, #200]	; (1f54 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e8a:	4a33      	ldr	r2, [pc, #204]	; (1f58 <pm_system_suspend+0xd4>)
    1e8c:	7d1c      	ldrb	r4, [r3, #20]
    1e8e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1e92:	0963      	lsrs	r3, r4, #5
    1e94:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e9c:	4e2f      	ldr	r6, [pc, #188]	; (1f5c <pm_system_suspend+0xd8>)
    1e9e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1ea2:	f004 081f 	and.w	r8, r4, #31
    1ea6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1eaa:	f013 0f01 	tst.w	r3, #1
{
    1eae:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1eb0:	d10a      	bne.n	1ec8 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1eb2:	4601      	mov	r1, r0
    1eb4:	4620      	mov	r0, r4
    1eb6:	f000 f869 	bl	1f8c <pm_policy_next_state>
		if (info != NULL) {
    1eba:	b128      	cbz	r0, 1ec8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1ebc:	c807      	ldmia	r0, {r0, r1, r2}
    1ebe:	230c      	movs	r3, #12
    1ec0:	fb03 6304 	mla	r3, r3, r4, r6
    1ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1ec8:	230c      	movs	r3, #12
    1eca:	4363      	muls	r3, r4
    1ecc:	18f2      	adds	r2, r6, r3
    1ece:	5cf5      	ldrb	r5, [r6, r3]
    1ed0:	b92d      	cbnz	r5, 1ede <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1ed2:	4620      	mov	r0, r4
    1ed4:	f7ff ff80 	bl	1dd8 <atomic_clear_bit.constprop.0>
		ret = false;
    1ed8:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1ede:	1c7b      	adds	r3, r7, #1
    1ee0:	d00f      	beq.n	1f02 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1ee2:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1ee6:	481e      	ldr	r0, [pc, #120]	; (1f60 <pm_system_suspend+0xdc>)
    1ee8:	4a1e      	ldr	r2, [pc, #120]	; (1f64 <pm_system_suspend+0xe0>)
    1eea:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1eee:	2100      	movs	r1, #0
    1ef0:	2300      	movs	r3, #0
    1ef2:	fbec 0105 	umlal	r0, r1, ip, r5
    1ef6:	f7fe fae5 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1efa:	2101      	movs	r1, #1
    1efc:	1a38      	subs	r0, r7, r0
    1efe:	f005 f819 	bl	6f34 <z_set_timeout_expiry>
	k_sched_lock();
    1f02:	f003 fa6f 	bl	53e4 <k_sched_lock>
	pm_state_notify(true);
    1f06:	2001      	movs	r0, #1
    1f08:	f7ff ff38 	bl	1d7c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f0c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f10:	2301      	movs	r3, #1
    1f12:	fa03 f808 	lsl.w	r8, r3, r8
    1f16:	4b14      	ldr	r3, [pc, #80]	; (1f68 <pm_system_suspend+0xe4>)
    1f18:	4499      	add	r9, r3
    1f1a:	e859 3f00 	ldrex	r3, [r9]
    1f1e:	ea43 0308 	orr.w	r3, r3, r8
    1f22:	e849 3200 	strex	r2, r3, [r9]
    1f26:	2a00      	cmp	r2, #0
    1f28:	d1f7      	bne.n	1f1a <pm_system_suspend+0x96>
    1f2a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1f2e:	4b0f      	ldr	r3, [pc, #60]	; (1f6c <pm_system_suspend+0xe8>)
    1f30:	b133      	cbz	r3, 1f40 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1f32:	230c      	movs	r3, #12
    1f34:	4363      	muls	r3, r4
    1f36:	18f2      	adds	r2, r6, r3
    1f38:	5cf0      	ldrb	r0, [r6, r3]
    1f3a:	7851      	ldrb	r1, [r2, #1]
    1f3c:	f004 fb66 	bl	660c <pm_state_set>
	pm_system_resume();
    1f40:	f7ff ff62 	bl	1e08 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1f44:	4620      	mov	r0, r4
    1f46:	f7ff ff47 	bl	1dd8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1f4a:	f003 fc1b 	bl	5784 <k_sched_unlock>
	bool ret = true;
    1f4e:	2001      	movs	r0, #1
    1f50:	e7c3      	b.n	1eda <pm_system_suspend+0x56>
    1f52:	bf00      	nop
    1f54:	20000a5c 	.word	0x20000a5c
    1f58:	200003d0 	.word	0x200003d0
    1f5c:	200003c4 	.word	0x200003c4
    1f60:	000f423f 	.word	0x000f423f
    1f64:	000f4240 	.word	0x000f4240
    1f68:	200003d4 	.word	0x200003d4
    1f6c:	0000660d 	.word	0x0000660d

00001f70 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <pm_policy_state_lock_is_active+0x18>)
    1f72:	f3bf 8f5b 	dmb	ish
    1f76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1f7a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1f7e:	3800      	subs	r0, #0
    1f80:	bf18      	it	ne
    1f82:	2001      	movne	r0, #1
    1f84:	4770      	bx	lr
    1f86:	bf00      	nop
    1f88:	200003d8 	.word	0x200003d8

00001f8c <pm_policy_next_state>:
{
    1f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f90:	b085      	sub	sp, #20
    1f92:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1f94:	a903      	add	r1, sp, #12
    1f96:	f000 f847 	bl	2028 <pm_state_cpu_get_all>
    1f9a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 201c <pm_policy_next_state+0x90>
    1f9e:	f8df a080 	ldr.w	sl, [pc, #128]	; 2020 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1fa2:	1e44      	subs	r4, r0, #1
    1fa4:	b224      	sxth	r4, r4
    1fa6:	f04f 0b00 	mov.w	fp, #0
    1faa:	1c63      	adds	r3, r4, #1
    1fac:	d104      	bne.n	1fb8 <pm_policy_next_state+0x2c>
	return NULL;
    1fae:	2600      	movs	r6, #0
}
    1fb0:	4630      	mov	r0, r6
    1fb2:	b005      	add	sp, #20
    1fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1fb8:	9a03      	ldr	r2, [sp, #12]
    1fba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1fbe:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1fc2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1fc6:	f7ff ffd3 	bl	1f70 <pm_policy_state_lock_is_active>
    1fca:	4605      	mov	r5, r0
    1fcc:	bb10      	cbnz	r0, 2014 <pm_policy_next_state+0x88>
    1fce:	6870      	ldr	r0, [r6, #4]
    1fd0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1fd4:	46c4      	mov	ip, r8
    1fd6:	4629      	mov	r1, r5
    1fd8:	fbe0 c109 	umlal	ip, r1, r0, r9
    1fdc:	4652      	mov	r2, sl
    1fde:	465b      	mov	r3, fp
    1fe0:	4660      	mov	r0, ip
    1fe2:	f7fe fa6f 	bl	4c4 <__aeabi_uldivmod>
    1fe6:	9001      	str	r0, [sp, #4]
    1fe8:	68b0      	ldr	r0, [r6, #8]
    1fea:	46c4      	mov	ip, r8
    1fec:	4629      	mov	r1, r5
    1fee:	fbe0 c109 	umlal	ip, r1, r0, r9
    1ff2:	465b      	mov	r3, fp
    1ff4:	4652      	mov	r2, sl
    1ff6:	4660      	mov	r0, ip
    1ff8:	f7fe fa64 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1ffc:	4b09      	ldr	r3, [pc, #36]	; (2024 <pm_policy_next_state+0x98>)
    1ffe:	681b      	ldr	r3, [r3, #0]
    2000:	1c59      	adds	r1, r3, #1
    2002:	d001      	beq.n	2008 <pm_policy_next_state+0x7c>
    2004:	4283      	cmp	r3, r0
    2006:	d905      	bls.n	2014 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2008:	1c7a      	adds	r2, r7, #1
    200a:	d0d1      	beq.n	1fb0 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    200c:	9b01      	ldr	r3, [sp, #4]
    200e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2010:	42b8      	cmp	r0, r7
    2012:	d9cd      	bls.n	1fb0 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2014:	3c01      	subs	r4, #1
    2016:	b224      	sxth	r4, r4
    2018:	e7c7      	b.n	1faa <pm_policy_next_state+0x1e>
    201a:	bf00      	nop
    201c:	000f423f 	.word	0x000f423f
    2020:	000f4240 	.word	0x000f4240
    2024:	200000a0 	.word	0x200000a0

00002028 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2028:	b908      	cbnz	r0, 202e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    202a:	4b02      	ldr	r3, [pc, #8]	; (2034 <pm_state_cpu_get_all+0xc>)
    202c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    202e:	2000      	movs	r0, #0
    2030:	4770      	bx	lr
    2032:	bf00      	nop
    2034:	0000737c 	.word	0x0000737c

00002038 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2038:	4801      	ldr	r0, [pc, #4]	; (2040 <nrf_cc3xx_platform_abort_init+0x8>)
    203a:	f003 bf03 	b.w	5e44 <nrf_cc3xx_platform_set_abort>
    203e:	bf00      	nop
    2040:	0000737c 	.word	0x0000737c

00002044 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2044:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2046:	4604      	mov	r4, r0
    2048:	b918      	cbnz	r0, 2052 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    204a:	4b0d      	ldr	r3, [pc, #52]	; (2080 <mutex_free_platform+0x3c>)
    204c:	480d      	ldr	r0, [pc, #52]	; (2084 <mutex_free_platform+0x40>)
    204e:	685b      	ldr	r3, [r3, #4]
    2050:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2052:	6861      	ldr	r1, [r4, #4]
    2054:	2908      	cmp	r1, #8
    2056:	d00d      	beq.n	2074 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2058:	f031 0304 	bics.w	r3, r1, #4
    205c:	d00a      	beq.n	2074 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    205e:	f011 0102 	ands.w	r1, r1, #2
    2062:	d008      	beq.n	2076 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2064:	4808      	ldr	r0, [pc, #32]	; (2088 <mutex_free_platform+0x44>)
    2066:	4621      	mov	r1, r4
    2068:	f004 fe30 	bl	6ccc <k_mem_slab_free>
        mutex->mutex = NULL;
    206c:	2300      	movs	r3, #0
    206e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2070:	2300      	movs	r3, #0
    2072:	6063      	str	r3, [r4, #4]
}
    2074:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2076:	6820      	ldr	r0, [r4, #0]
    2078:	2214      	movs	r2, #20
    207a:	f004 fabb 	bl	65f4 <memset>
    207e:	e7f7      	b.n	2070 <mutex_free_platform+0x2c>
    2080:	2000017c 	.word	0x2000017c
    2084:	000077ff 	.word	0x000077ff
    2088:	200003f4 	.word	0x200003f4

0000208c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    208c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    208e:	b308      	cbz	r0, 20d4 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2090:	6843      	ldr	r3, [r0, #4]
    2092:	2b04      	cmp	r3, #4
    2094:	d110      	bne.n	20b8 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2096:	2201      	movs	r2, #1
    2098:	6803      	ldr	r3, [r0, #0]
    209a:	f3bf 8f5b 	dmb	ish
    209e:	e853 1f00 	ldrex	r1, [r3]
    20a2:	2900      	cmp	r1, #0
    20a4:	d103      	bne.n	20ae <mutex_lock_platform+0x22>
    20a6:	e843 2000 	strex	r0, r2, [r3]
    20aa:	2800      	cmp	r0, #0
    20ac:	d1f7      	bne.n	209e <mutex_lock_platform+0x12>
    20ae:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20b2:	d10b      	bne.n	20cc <mutex_lock_platform+0x40>
    20b4:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    20b6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    20b8:	b153      	cbz	r3, 20d0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    20ba:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    20bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    20c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    20c4:	f003 f834 	bl	5130 <z_impl_k_mutex_lock>
        if (ret == 0) {
    20c8:	2800      	cmp	r0, #0
    20ca:	d0f3      	beq.n	20b4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20cc:	4803      	ldr	r0, [pc, #12]	; (20dc <mutex_lock_platform+0x50>)
    20ce:	e7f2      	b.n	20b6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    20d0:	4803      	ldr	r0, [pc, #12]	; (20e0 <mutex_lock_platform+0x54>)
    20d2:	e7f0      	b.n	20b6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    20d4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    20d8:	e7ed      	b.n	20b6 <mutex_lock_platform+0x2a>
    20da:	bf00      	nop
    20dc:	ffff8fe9 	.word	0xffff8fe9
    20e0:	ffff8fea 	.word	0xffff8fea

000020e4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    20e4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    20e6:	b1d0      	cbz	r0, 211e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    20e8:	6843      	ldr	r3, [r0, #4]
    20ea:	2b04      	cmp	r3, #4
    20ec:	d111      	bne.n	2112 <mutex_unlock_platform+0x2e>
    20ee:	2200      	movs	r2, #0
    20f0:	6803      	ldr	r3, [r0, #0]
    20f2:	f3bf 8f5b 	dmb	ish
    20f6:	e853 1f00 	ldrex	r1, [r3]
    20fa:	2901      	cmp	r1, #1
    20fc:	d103      	bne.n	2106 <mutex_unlock_platform+0x22>
    20fe:	e843 2000 	strex	r0, r2, [r3]
    2102:	2800      	cmp	r0, #0
    2104:	d1f7      	bne.n	20f6 <mutex_unlock_platform+0x12>
    2106:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    210a:	4807      	ldr	r0, [pc, #28]	; (2128 <mutex_unlock_platform+0x44>)
    210c:	bf08      	it	eq
    210e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2110:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2112:	b13b      	cbz	r3, 2124 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2114:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2116:	f003 f883 	bl	5220 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    211a:	2000      	movs	r0, #0
    211c:	e7f8      	b.n	2110 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    211e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2122:	e7f5      	b.n	2110 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2124:	4801      	ldr	r0, [pc, #4]	; (212c <mutex_unlock_platform+0x48>)
    2126:	e7f3      	b.n	2110 <mutex_unlock_platform+0x2c>
    2128:	ffff8fe9 	.word	0xffff8fe9
    212c:	ffff8fea 	.word	0xffff8fea

00002130 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2130:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2132:	4604      	mov	r4, r0
    2134:	b918      	cbnz	r0, 213e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2136:	4b16      	ldr	r3, [pc, #88]	; (2190 <mutex_init_platform+0x60>)
    2138:	4816      	ldr	r0, [pc, #88]	; (2194 <mutex_init_platform+0x64>)
    213a:	685b      	ldr	r3, [r3, #4]
    213c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    213e:	6863      	ldr	r3, [r4, #4]
    2140:	2b04      	cmp	r3, #4
    2142:	d023      	beq.n	218c <mutex_init_platform+0x5c>
    2144:	2b08      	cmp	r3, #8
    2146:	d021      	beq.n	218c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2148:	b9cb      	cbnz	r3, 217e <mutex_init_platform+0x4e>
    214a:	6823      	ldr	r3, [r4, #0]
    214c:	b9bb      	cbnz	r3, 217e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    214e:	4812      	ldr	r0, [pc, #72]	; (2198 <mutex_init_platform+0x68>)
    2150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2158:	4621      	mov	r1, r4
    215a:	f002 ff11 	bl	4f80 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    215e:	b908      	cbnz	r0, 2164 <mutex_init_platform+0x34>
    2160:	6823      	ldr	r3, [r4, #0]
    2162:	b91b      	cbnz	r3, 216c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2164:	4b0a      	ldr	r3, [pc, #40]	; (2190 <mutex_init_platform+0x60>)
    2166:	480d      	ldr	r0, [pc, #52]	; (219c <mutex_init_platform+0x6c>)
    2168:	685b      	ldr	r3, [r3, #4]
    216a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    216c:	6820      	ldr	r0, [r4, #0]
    216e:	2214      	movs	r2, #20
    2170:	2100      	movs	r1, #0
    2172:	f004 fa3f 	bl	65f4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2176:	6863      	ldr	r3, [r4, #4]
    2178:	f043 0302 	orr.w	r3, r3, #2
    217c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    217e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2180:	f004 fde4 	bl	6d4c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2184:	6863      	ldr	r3, [r4, #4]
    2186:	f043 0301 	orr.w	r3, r3, #1
    218a:	6063      	str	r3, [r4, #4]
}
    218c:	bd10      	pop	{r4, pc}
    218e:	bf00      	nop
    2190:	2000017c 	.word	0x2000017c
    2194:	000077ff 	.word	0x000077ff
    2198:	200003f4 	.word	0x200003f4
    219c:	00007825 	.word	0x00007825

000021a0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    21a0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    21a2:	4906      	ldr	r1, [pc, #24]	; (21bc <nrf_cc3xx_platform_mutex_init+0x1c>)
    21a4:	4806      	ldr	r0, [pc, #24]	; (21c0 <nrf_cc3xx_platform_mutex_init+0x20>)
    21a6:	2340      	movs	r3, #64	; 0x40
    21a8:	2214      	movs	r2, #20
    21aa:	f004 fd74 	bl	6c96 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    21ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    21b2:	4904      	ldr	r1, [pc, #16]	; (21c4 <nrf_cc3xx_platform_mutex_init+0x24>)
    21b4:	4804      	ldr	r0, [pc, #16]	; (21c8 <nrf_cc3xx_platform_mutex_init+0x28>)
    21b6:	f003 bea5 	b.w	5f04 <nrf_cc3xx_platform_set_mutexes>
    21ba:	bf00      	nop
    21bc:	20000410 	.word	0x20000410
    21c0:	200003f4 	.word	0x200003f4
    21c4:	00007394 	.word	0x00007394
    21c8:	00007384 	.word	0x00007384

000021cc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    21cc:	4901      	ldr	r1, [pc, #4]	; (21d4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    21ce:	2210      	movs	r2, #16
	str	r2, [r1]
    21d0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    21d2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    21d4:	e000ed10 	.word	0xe000ed10

000021d8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    21d8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    21da:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    21dc:	f380 8811 	msr	BASEPRI, r0
	isb
    21e0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    21e4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    21e8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21ea:	b662      	cpsie	i
	isb
    21ec:	f3bf 8f6f 	isb	sy

	bx	lr
    21f0:	4770      	bx	lr
    21f2:	bf00      	nop

000021f4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21f4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21f6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    21f8:	f381 8811 	msr	BASEPRI, r1

	wfe
    21fc:	bf20      	wfe

	msr	BASEPRI, r0
    21fe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2202:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2204:	4770      	bx	lr
    2206:	bf00      	nop

00002208 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	4606      	mov	r6, r0
    220c:	b086      	sub	sp, #24

	if (esf != NULL) {
    220e:	460d      	mov	r5, r1
    2210:	2900      	cmp	r1, #0
    2212:	d038      	beq.n	2286 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2214:	688b      	ldr	r3, [r1, #8]
    2216:	9305      	str	r3, [sp, #20]
    2218:	684b      	ldr	r3, [r1, #4]
    221a:	9304      	str	r3, [sp, #16]
    221c:	680b      	ldr	r3, [r1, #0]
    221e:	9303      	str	r3, [sp, #12]
    2220:	2400      	movs	r4, #0
    2222:	4b1c      	ldr	r3, [pc, #112]	; (2294 <z_arm_fatal_error+0x8c>)
    2224:	491c      	ldr	r1, [pc, #112]	; (2298 <z_arm_fatal_error+0x90>)
    2226:	9302      	str	r3, [sp, #8]
    2228:	2201      	movs	r2, #1
    222a:	4623      	mov	r3, r4
    222c:	4620      	mov	r0, r4
    222e:	e9cd 4400 	strd	r4, r4, [sp]
    2232:	f004 f96f 	bl	6514 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2236:	696b      	ldr	r3, [r5, #20]
    2238:	9305      	str	r3, [sp, #20]
    223a:	692b      	ldr	r3, [r5, #16]
    223c:	9304      	str	r3, [sp, #16]
    223e:	68eb      	ldr	r3, [r5, #12]
    2240:	9303      	str	r3, [sp, #12]
    2242:	4b16      	ldr	r3, [pc, #88]	; (229c <z_arm_fatal_error+0x94>)
    2244:	4914      	ldr	r1, [pc, #80]	; (2298 <z_arm_fatal_error+0x90>)
    2246:	9400      	str	r4, [sp, #0]
    2248:	e9cd 4301 	strd	r4, r3, [sp, #4]
    224c:	2201      	movs	r2, #1
    224e:	4623      	mov	r3, r4
    2250:	4620      	mov	r0, r4
    2252:	f004 f95f 	bl	6514 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2256:	69eb      	ldr	r3, [r5, #28]
    2258:	9303      	str	r3, [sp, #12]
    225a:	4b11      	ldr	r3, [pc, #68]	; (22a0 <z_arm_fatal_error+0x98>)
    225c:	490e      	ldr	r1, [pc, #56]	; (2298 <z_arm_fatal_error+0x90>)
    225e:	9400      	str	r4, [sp, #0]
    2260:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2264:	2201      	movs	r2, #1
    2266:	4623      	mov	r3, r4
    2268:	4620      	mov	r0, r4
    226a:	f004 f953 	bl	6514 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    226e:	69ab      	ldr	r3, [r5, #24]
    2270:	9303      	str	r3, [sp, #12]
    2272:	4b0c      	ldr	r3, [pc, #48]	; (22a4 <z_arm_fatal_error+0x9c>)
    2274:	4908      	ldr	r1, [pc, #32]	; (2298 <z_arm_fatal_error+0x90>)
    2276:	9400      	str	r4, [sp, #0]
    2278:	e9cd 4301 	strd	r4, r3, [sp, #4]
    227c:	2201      	movs	r2, #1
    227e:	4623      	mov	r3, r4
    2280:	4620      	mov	r0, r4
    2282:	f004 f947 	bl	6514 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2286:	4629      	mov	r1, r5
    2288:	4630      	mov	r0, r6
}
    228a:	b006      	add	sp, #24
    228c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2290:	f002 bd26 	b.w	4ce0 <z_fatal_error>
    2294:	00007852 	.word	0x00007852
    2298:	00007270 	.word	0x00007270
    229c:	00007881 	.word	0x00007881
    22a0:	000078b0 	.word	0x000078b0
    22a4:	000078bf 	.word	0x000078bf

000022a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    22a8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22aa:	2b00      	cmp	r3, #0
    22ac:	db08      	blt.n	22c0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22ae:	2201      	movs	r2, #1
    22b0:	f000 001f 	and.w	r0, r0, #31
    22b4:	fa02 f000 	lsl.w	r0, r2, r0
    22b8:	095b      	lsrs	r3, r3, #5
    22ba:	4a02      	ldr	r2, [pc, #8]	; (22c4 <arch_irq_enable+0x1c>)
    22bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop
    22c4:	e000e100 	.word	0xe000e100

000022c8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <arch_irq_is_enabled+0x18>)
    22ca:	0942      	lsrs	r2, r0, #5
    22cc:	f000 001f 	and.w	r0, r0, #31
    22d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22d4:	2301      	movs	r3, #1
    22d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    22da:	4010      	ands	r0, r2
    22dc:	4770      	bx	lr
    22de:	bf00      	nop
    22e0:	e000e100 	.word	0xe000e100

000022e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22e6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e8:	bfa8      	it	ge
    22ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    22ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f2:	bfb8      	it	lt
    22f4:	4b06      	ldrlt	r3, [pc, #24]	; (2310 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    22fa:	bfac      	ite	ge
    22fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2300:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2304:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2306:	bfb4      	ite	lt
    2308:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    230a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    230e:	4770      	bx	lr
    2310:	e000ed14 	.word	0xe000ed14

00002314 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2314:	bf30      	wfi
    b z_SysNmiOnReset
    2316:	f7ff bffd 	b.w	2314 <z_SysNmiOnReset>
    231a:	bf00      	nop

0000231c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    231c:	4a0b      	ldr	r2, [pc, #44]	; (234c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    231e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <z_arm_prep_c+0x34>)
    2322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2326:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    232c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2330:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2334:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    233c:	f002 fd4e 	bl	4ddc <z_bss_zero>
	z_data_copy();
    2340:	f003 fb42 	bl	59c8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2344:	f000 fb8c 	bl	2a60 <z_arm_interrupt_init>
	z_cstart();
    2348:	f002 fd8c 	bl	4e64 <z_cstart>
    234c:	00000000 	.word	0x00000000
    2350:	e000ed00 	.word	0xe000ed00

00002354 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2354:	4a09      	ldr	r2, [pc, #36]	; (237c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2356:	490a      	ldr	r1, [pc, #40]	; (2380 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2358:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    235a:	6809      	ldr	r1, [r1, #0]
    235c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    235e:	4909      	ldr	r1, [pc, #36]	; (2384 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2360:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2362:	684b      	ldr	r3, [r1, #4]
    2364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2368:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    236a:	2300      	movs	r3, #0
    236c:	f383 8811 	msr	BASEPRI, r3
    2370:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2374:	6893      	ldr	r3, [r2, #8]
}
    2376:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2378:	4770      	bx	lr
    237a:	bf00      	nop
    237c:	20000a5c 	.word	0x20000a5c
    2380:	000074e8 	.word	0x000074e8
    2384:	e000ed00 	.word	0xe000ed00

00002388 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2388:	4912      	ldr	r1, [pc, #72]	; (23d4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    238a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    238c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2390:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2392:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2396:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    239a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    239c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    23a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    23a4:	4f0c      	ldr	r7, [pc, #48]	; (23d8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    23a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    23aa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    23ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    23ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    23b0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    23b2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    23b4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    23b6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    23ba:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    23bc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    23be:	f000 fbeb 	bl	2b98 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    23c2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    23c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    23ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    23ce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    23d2:	4770      	bx	lr
    ldr r1, =_kernel
    23d4:	20000a5c 	.word	0x20000a5c
    ldr v4, =_SCS_ICSR
    23d8:	e000ed04 	.word	0xe000ed04

000023dc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    23dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    23e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    23e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    23e6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    23ea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    23ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    23f0:	2902      	cmp	r1, #2
    beq _oops
    23f2:	d0ff      	beq.n	23f4 <_oops>

000023f4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    23f4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    23f6:	f004 f89d 	bl	6534 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    23fa:	bd01      	pop	{r0, pc}

000023fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    23fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2400:	9b00      	ldr	r3, [sp, #0]
    2402:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2406:	490a      	ldr	r1, [pc, #40]	; (2430 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2408:	9b01      	ldr	r3, [sp, #4]
    240a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    240e:	9b02      	ldr	r3, [sp, #8]
    2410:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2414:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    241c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2420:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2424:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2426:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2428:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    242a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    242c:	4770      	bx	lr
    242e:	bf00      	nop
    2430:	0000636d 	.word	0x0000636d

00002434 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2434:	4a09      	ldr	r2, [pc, #36]	; (245c <z_check_thread_stack_fail+0x28>)
{
    2436:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2438:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    243a:	b170      	cbz	r0, 245a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    243c:	f113 0f16 	cmn.w	r3, #22
    2440:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2442:	d005      	beq.n	2450 <z_check_thread_stack_fail+0x1c>
    2444:	f1a0 0220 	sub.w	r2, r0, #32
    2448:	429a      	cmp	r2, r3
    244a:	d805      	bhi.n	2458 <z_check_thread_stack_fail+0x24>
    244c:	4283      	cmp	r3, r0
    244e:	d203      	bcs.n	2458 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2450:	4281      	cmp	r1, r0
    2452:	bf28      	it	cs
    2454:	2000      	movcs	r0, #0
    2456:	4770      	bx	lr
    2458:	2000      	movs	r0, #0
}
    245a:	4770      	bx	lr
    245c:	20000a5c 	.word	0x20000a5c

00002460 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2460:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2462:	4b09      	ldr	r3, [pc, #36]	; (2488 <arch_switch_to_main_thread+0x28>)
    2464:	6098      	str	r0, [r3, #8]
{
    2466:	460d      	mov	r5, r1
    2468:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    246a:	f000 fb95 	bl	2b98 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    246e:	4620      	mov	r0, r4
    2470:	f385 8809 	msr	PSP, r5
    2474:	2100      	movs	r1, #0
    2476:	b663      	cpsie	if
    2478:	f381 8811 	msr	BASEPRI, r1
    247c:	f3bf 8f6f 	isb	sy
    2480:	2200      	movs	r2, #0
    2482:	2300      	movs	r3, #0
    2484:	f003 ff72 	bl	636c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2488:	20000a5c 	.word	0x20000a5c

0000248c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    248c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    248e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2490:	4a0b      	ldr	r2, [pc, #44]	; (24c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2492:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2494:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2496:	bf1e      	ittt	ne
	movne	r1, #0
    2498:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    249a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    249c:	f004 fc47 	blne	6d2e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    24a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    24a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    24a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    24aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    24ae:	4905      	ldr	r1, [pc, #20]	; (24c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    24b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    24b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    24b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    24b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    24ba:	4903      	ldr	r1, [pc, #12]	; (24c8 <_isr_wrapper+0x3c>)
	bx r1
    24bc:	4708      	bx	r1
    24be:	0000      	.short	0x0000
	ldr r2, =_kernel
    24c0:	20000a5c 	.word	0x20000a5c
	ldr r1, =_sw_isr_table
    24c4:	000070c0 	.word	0x000070c0
	ldr r1, =z_arm_int_exit
    24c8:	000024cd 	.word	0x000024cd

000024cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    24cc:	4b04      	ldr	r3, [pc, #16]	; (24e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    24ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    24d0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    24d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    24d4:	d003      	beq.n	24de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    24d6:	4903      	ldr	r1, [pc, #12]	; (24e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    24d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    24dc:	600a      	str	r2, [r1, #0]

000024de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    24de:	4770      	bx	lr
	ldr r3, =_kernel
    24e0:	20000a5c 	.word	0x20000a5c
	ldr r1, =_SCS_ICSR
    24e4:	e000ed04 	.word	0xe000ed04

000024e8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    24e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ea:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    24ec:	2400      	movs	r4, #0
    24ee:	4b3b      	ldr	r3, [pc, #236]	; (25dc <bus_fault.constprop.0+0xf4>)
    24f0:	9302      	str	r3, [sp, #8]
    24f2:	e9cd 4400 	strd	r4, r4, [sp]
    24f6:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    24f8:	4607      	mov	r7, r0
    24fa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    24fc:	2201      	movs	r2, #1
    24fe:	4938      	ldr	r1, [pc, #224]	; (25e0 <bus_fault.constprop.0+0xf8>)
    2500:	4620      	mov	r0, r4
    2502:	f004 f826 	bl	6552 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2506:	4b37      	ldr	r3, [pc, #220]	; (25e4 <bus_fault.constprop.0+0xfc>)
    2508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    250a:	04db      	lsls	r3, r3, #19
    250c:	d509      	bpl.n	2522 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    250e:	4b36      	ldr	r3, [pc, #216]	; (25e8 <bus_fault.constprop.0+0x100>)
    2510:	4933      	ldr	r1, [pc, #204]	; (25e0 <bus_fault.constprop.0+0xf8>)
    2512:	9400      	str	r4, [sp, #0]
    2514:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2518:	2201      	movs	r2, #1
    251a:	4623      	mov	r3, r4
    251c:	4620      	mov	r0, r4
    251e:	f004 f818 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2522:	4b30      	ldr	r3, [pc, #192]	; (25e4 <bus_fault.constprop.0+0xfc>)
    2524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2526:	051d      	lsls	r5, r3, #20
    2528:	d509      	bpl.n	253e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    252a:	4b30      	ldr	r3, [pc, #192]	; (25ec <bus_fault.constprop.0+0x104>)
    252c:	9302      	str	r3, [sp, #8]
    252e:	2300      	movs	r3, #0
    2530:	e9cd 3300 	strd	r3, r3, [sp]
    2534:	492a      	ldr	r1, [pc, #168]	; (25e0 <bus_fault.constprop.0+0xf8>)
    2536:	2201      	movs	r2, #1
    2538:	4618      	mov	r0, r3
    253a:	f004 f80a 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    253e:	4d29      	ldr	r5, [pc, #164]	; (25e4 <bus_fault.constprop.0+0xfc>)
    2540:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2542:	059c      	lsls	r4, r3, #22
    2544:	d51e      	bpl.n	2584 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    2546:	2400      	movs	r4, #0
    2548:	4b29      	ldr	r3, [pc, #164]	; (25f0 <bus_fault.constprop.0+0x108>)
    254a:	9302      	str	r3, [sp, #8]
    254c:	2201      	movs	r2, #1
    254e:	4623      	mov	r3, r4
    2550:	4620      	mov	r0, r4
    2552:	e9cd 4400 	strd	r4, r4, [sp]
    2556:	4922      	ldr	r1, [pc, #136]	; (25e0 <bus_fault.constprop.0+0xf8>)
    2558:	f003 fffb 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    255c:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    255e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2560:	0410      	lsls	r0, r2, #16
    2562:	d50f      	bpl.n	2584 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2564:	9303      	str	r3, [sp, #12]
    2566:	4b23      	ldr	r3, [pc, #140]	; (25f4 <bus_fault.constprop.0+0x10c>)
    2568:	491d      	ldr	r1, [pc, #116]	; (25e0 <bus_fault.constprop.0+0xf8>)
    256a:	9400      	str	r4, [sp, #0]
    256c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2570:	2201      	movs	r2, #1
    2572:	4623      	mov	r3, r4
    2574:	4620      	mov	r0, r4
    2576:	f003 ffec 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    257a:	b11f      	cbz	r7, 2584 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    257c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    257e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2582:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2584:	4b17      	ldr	r3, [pc, #92]	; (25e4 <bus_fault.constprop.0+0xfc>)
    2586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2588:	0559      	lsls	r1, r3, #21
    258a:	d509      	bpl.n	25a0 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    258c:	4b1a      	ldr	r3, [pc, #104]	; (25f8 <bus_fault.constprop.0+0x110>)
    258e:	9302      	str	r3, [sp, #8]
    2590:	2300      	movs	r3, #0
    2592:	e9cd 3300 	strd	r3, r3, [sp]
    2596:	4912      	ldr	r1, [pc, #72]	; (25e0 <bus_fault.constprop.0+0xf8>)
    2598:	2201      	movs	r2, #1
    259a:	4618      	mov	r0, r3
    259c:	f003 ffd9 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    25a0:	4a10      	ldr	r2, [pc, #64]	; (25e4 <bus_fault.constprop.0+0xfc>)
    25a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25a4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    25a8:	d012      	beq.n	25d0 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    25aa:	4b14      	ldr	r3, [pc, #80]	; (25fc <bus_fault.constprop.0+0x114>)
    25ac:	9302      	str	r3, [sp, #8]
    25ae:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25b0:	e9cd 3300 	strd	r3, r3, [sp]
    25b4:	490a      	ldr	r1, [pc, #40]	; (25e0 <bus_fault.constprop.0+0xf8>)
    25b6:	2201      	movs	r2, #1
    25b8:	4618      	mov	r0, r3
    25ba:	f003 ffca 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25be:	4a09      	ldr	r2, [pc, #36]	; (25e4 <bus_fault.constprop.0+0xfc>)
    25c0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    25c2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25c4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    25c8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25ca:	7030      	strb	r0, [r6, #0]

	return reason;
}
    25cc:	b005      	add	sp, #20
    25ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    25d2:	0492      	lsls	r2, r2, #18
    25d4:	d5f3      	bpl.n	25be <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25d6:	4a0a      	ldr	r2, [pc, #40]	; (2600 <bus_fault.constprop.0+0x118>)
    25d8:	9202      	str	r2, [sp, #8]
    25da:	e7e9      	b.n	25b0 <bus_fault.constprop.0+0xc8>
    25dc:	000078ed 	.word	0x000078ed
    25e0:	00007270 	.word	0x00007270
    25e4:	e000ed00 	.word	0xe000ed00
    25e8:	00007903 	.word	0x00007903
    25ec:	00007914 	.word	0x00007914
    25f0:	00007927 	.word	0x00007927
    25f4:	00007940 	.word	0x00007940
    25f8:	00007955 	.word	0x00007955
    25fc:	00007970 	.word	0x00007970
    2600:	00007988 	.word	0x00007988

00002604 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2606:	2400      	movs	r4, #0
    2608:	4b33      	ldr	r3, [pc, #204]	; (26d8 <usage_fault.constprop.0+0xd4>)
    260a:	9302      	str	r3, [sp, #8]
    260c:	e9cd 4400 	strd	r4, r4, [sp]
    2610:	4623      	mov	r3, r4
    2612:	4932      	ldr	r1, [pc, #200]	; (26dc <usage_fault.constprop.0+0xd8>)
    2614:	2201      	movs	r2, #1
    2616:	4620      	mov	r0, r4
    2618:	f003 ff9b 	bl	6552 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    261c:	4b30      	ldr	r3, [pc, #192]	; (26e0 <usage_fault.constprop.0+0xdc>)
    261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2620:	019b      	lsls	r3, r3, #6
    2622:	d509      	bpl.n	2638 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    2624:	4b2f      	ldr	r3, [pc, #188]	; (26e4 <usage_fault.constprop.0+0xe0>)
    2626:	492d      	ldr	r1, [pc, #180]	; (26dc <usage_fault.constprop.0+0xd8>)
    2628:	9400      	str	r4, [sp, #0]
    262a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    262e:	2201      	movs	r2, #1
    2630:	4623      	mov	r3, r4
    2632:	4620      	mov	r0, r4
    2634:	f003 ff8d 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2638:	4b29      	ldr	r3, [pc, #164]	; (26e0 <usage_fault.constprop.0+0xdc>)
    263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    263c:	01dc      	lsls	r4, r3, #7
    263e:	d509      	bpl.n	2654 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    2640:	4b29      	ldr	r3, [pc, #164]	; (26e8 <usage_fault.constprop.0+0xe4>)
    2642:	9302      	str	r3, [sp, #8]
    2644:	2300      	movs	r3, #0
    2646:	e9cd 3300 	strd	r3, r3, [sp]
    264a:	4924      	ldr	r1, [pc, #144]	; (26dc <usage_fault.constprop.0+0xd8>)
    264c:	2201      	movs	r2, #1
    264e:	4618      	mov	r0, r3
    2650:	f003 ff7f 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2654:	4b22      	ldr	r3, [pc, #136]	; (26e0 <usage_fault.constprop.0+0xdc>)
    2656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2658:	0318      	lsls	r0, r3, #12
    265a:	d509      	bpl.n	2670 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    265c:	4b23      	ldr	r3, [pc, #140]	; (26ec <usage_fault.constprop.0+0xe8>)
    265e:	9302      	str	r3, [sp, #8]
    2660:	2300      	movs	r3, #0
    2662:	e9cd 3300 	strd	r3, r3, [sp]
    2666:	491d      	ldr	r1, [pc, #116]	; (26dc <usage_fault.constprop.0+0xd8>)
    2668:	2201      	movs	r2, #1
    266a:	4618      	mov	r0, r3
    266c:	f003 ff71 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2670:	4b1b      	ldr	r3, [pc, #108]	; (26e0 <usage_fault.constprop.0+0xdc>)
    2672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2674:	0359      	lsls	r1, r3, #13
    2676:	d509      	bpl.n	268c <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2678:	4b1d      	ldr	r3, [pc, #116]	; (26f0 <usage_fault.constprop.0+0xec>)
    267a:	9302      	str	r3, [sp, #8]
    267c:	2300      	movs	r3, #0
    267e:	e9cd 3300 	strd	r3, r3, [sp]
    2682:	4916      	ldr	r1, [pc, #88]	; (26dc <usage_fault.constprop.0+0xd8>)
    2684:	2201      	movs	r2, #1
    2686:	4618      	mov	r0, r3
    2688:	f003 ff63 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    268c:	4b14      	ldr	r3, [pc, #80]	; (26e0 <usage_fault.constprop.0+0xdc>)
    268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2690:	039a      	lsls	r2, r3, #14
    2692:	d509      	bpl.n	26a8 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2694:	4b17      	ldr	r3, [pc, #92]	; (26f4 <usage_fault.constprop.0+0xf0>)
    2696:	9302      	str	r3, [sp, #8]
    2698:	2300      	movs	r3, #0
    269a:	e9cd 3300 	strd	r3, r3, [sp]
    269e:	490f      	ldr	r1, [pc, #60]	; (26dc <usage_fault.constprop.0+0xd8>)
    26a0:	2201      	movs	r2, #1
    26a2:	4618      	mov	r0, r3
    26a4:	f003 ff55 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    26a8:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <usage_fault.constprop.0+0xdc>)
    26aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ac:	03db      	lsls	r3, r3, #15
    26ae:	d509      	bpl.n	26c4 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    26b0:	4b11      	ldr	r3, [pc, #68]	; (26f8 <usage_fault.constprop.0+0xf4>)
    26b2:	9302      	str	r3, [sp, #8]
    26b4:	2300      	movs	r3, #0
    26b6:	e9cd 3300 	strd	r3, r3, [sp]
    26ba:	4908      	ldr	r1, [pc, #32]	; (26dc <usage_fault.constprop.0+0xd8>)
    26bc:	2201      	movs	r2, #1
    26be:	4618      	mov	r0, r3
    26c0:	f003 ff47 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    26c4:	4a06      	ldr	r2, [pc, #24]	; (26e0 <usage_fault.constprop.0+0xdc>)
    26c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    26c8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    26cc:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    26d0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    26d2:	6293      	str	r3, [r2, #40]	; 0x28
}
    26d4:	b004      	add	sp, #16
    26d6:	bd10      	pop	{r4, pc}
    26d8:	000079b7 	.word	0x000079b7
    26dc:	00007270 	.word	0x00007270
    26e0:	e000ed00 	.word	0xe000ed00
    26e4:	000079cf 	.word	0x000079cf
    26e8:	000079e2 	.word	0x000079e2
    26ec:	000079fc 	.word	0x000079fc
    26f0:	00007a1a 	.word	0x00007a1a
    26f4:	00007a3f 	.word	0x00007a3f
    26f8:	00007a59 	.word	0x00007a59

000026fc <mem_manage_fault>:
{
    26fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2700:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    2702:	2400      	movs	r4, #0
    2704:	4b49      	ldr	r3, [pc, #292]	; (282c <mem_manage_fault+0x130>)
    2706:	9302      	str	r3, [sp, #8]
    2708:	e9cd 4400 	strd	r4, r4, [sp]
    270c:	4623      	mov	r3, r4
{
    270e:	4680      	mov	r8, r0
    2710:	4689      	mov	r9, r1
    2712:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2714:	4946      	ldr	r1, [pc, #280]	; (2830 <mem_manage_fault+0x134>)
    2716:	2201      	movs	r2, #1
    2718:	4620      	mov	r0, r4
    271a:	f003 ff1a 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    271e:	4b45      	ldr	r3, [pc, #276]	; (2834 <mem_manage_fault+0x138>)
    2720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2722:	06dd      	lsls	r5, r3, #27
    2724:	d509      	bpl.n	273a <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2726:	4b44      	ldr	r3, [pc, #272]	; (2838 <mem_manage_fault+0x13c>)
    2728:	4941      	ldr	r1, [pc, #260]	; (2830 <mem_manage_fault+0x134>)
    272a:	9400      	str	r4, [sp, #0]
    272c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2730:	2201      	movs	r2, #1
    2732:	4623      	mov	r3, r4
    2734:	4620      	mov	r0, r4
    2736:	f003 ff0c 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    273a:	4b3e      	ldr	r3, [pc, #248]	; (2834 <mem_manage_fault+0x138>)
    273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    273e:	0718      	lsls	r0, r3, #28
    2740:	d509      	bpl.n	2756 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    2742:	4b3e      	ldr	r3, [pc, #248]	; (283c <mem_manage_fault+0x140>)
    2744:	9302      	str	r3, [sp, #8]
    2746:	2300      	movs	r3, #0
    2748:	e9cd 3300 	strd	r3, r3, [sp]
    274c:	4938      	ldr	r1, [pc, #224]	; (2830 <mem_manage_fault+0x134>)
    274e:	2201      	movs	r2, #1
    2750:	4618      	mov	r0, r3
    2752:	f003 fefe 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2756:	4d37      	ldr	r5, [pc, #220]	; (2834 <mem_manage_fault+0x138>)
    2758:	6aab      	ldr	r3, [r5, #40]	; 0x28
    275a:	0799      	lsls	r1, r3, #30
    275c:	d436      	bmi.n	27cc <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
    275e:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2762:	4b34      	ldr	r3, [pc, #208]	; (2834 <mem_manage_fault+0x138>)
    2764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2766:	07db      	lsls	r3, r3, #31
    2768:	d509      	bpl.n	277e <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    276a:	4b35      	ldr	r3, [pc, #212]	; (2840 <mem_manage_fault+0x144>)
    276c:	9302      	str	r3, [sp, #8]
    276e:	2300      	movs	r3, #0
    2770:	e9cd 3300 	strd	r3, r3, [sp]
    2774:	492e      	ldr	r1, [pc, #184]	; (2830 <mem_manage_fault+0x134>)
    2776:	2201      	movs	r2, #1
    2778:	4618      	mov	r0, r3
    277a:	f003 feea 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    277e:	4b2d      	ldr	r3, [pc, #180]	; (2834 <mem_manage_fault+0x138>)
    2780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2782:	069d      	lsls	r5, r3, #26
    2784:	d509      	bpl.n	279a <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    2786:	4b2f      	ldr	r3, [pc, #188]	; (2844 <mem_manage_fault+0x148>)
    2788:	9302      	str	r3, [sp, #8]
    278a:	2300      	movs	r3, #0
    278c:	e9cd 3300 	strd	r3, r3, [sp]
    2790:	4927      	ldr	r1, [pc, #156]	; (2830 <mem_manage_fault+0x134>)
    2792:	2201      	movs	r2, #1
    2794:	4618      	mov	r0, r3
    2796:	f003 fedc 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    279a:	4b26      	ldr	r3, [pc, #152]	; (2834 <mem_manage_fault+0x138>)
    279c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    279e:	06d4      	lsls	r4, r2, #27
    27a0:	d436      	bmi.n	2810 <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    27a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27a4:	0790      	lsls	r0, r2, #30
    27a6:	d433      	bmi.n	2810 <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27a8:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    27aa:	4b22      	ldr	r3, [pc, #136]	; (2834 <mem_manage_fault+0x138>)
    27ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27ae:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    27b0:	bf42      	ittt	mi
    27b2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    27b4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    27b8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27bc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    27c0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    27c2:	2300      	movs	r3, #0
    27c4:	7033      	strb	r3, [r6, #0]
}
    27c6:	b005      	add	sp, #20
    27c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    27cc:	2400      	movs	r4, #0
    27ce:	4b1e      	ldr	r3, [pc, #120]	; (2848 <mem_manage_fault+0x14c>)
    27d0:	9302      	str	r3, [sp, #8]
    27d2:	2201      	movs	r2, #1
    27d4:	4623      	mov	r3, r4
    27d6:	e9cd 4400 	strd	r4, r4, [sp]
    27da:	4915      	ldr	r1, [pc, #84]	; (2830 <mem_manage_fault+0x134>)
    27dc:	4620      	mov	r0, r4
    27de:	f003 feb8 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    27e2:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    27e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    27e6:	061a      	lsls	r2, r3, #24
    27e8:	d5b9      	bpl.n	275e <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    27ea:	4b18      	ldr	r3, [pc, #96]	; (284c <mem_manage_fault+0x150>)
    27ec:	4910      	ldr	r1, [pc, #64]	; (2830 <mem_manage_fault+0x134>)
    27ee:	9703      	str	r7, [sp, #12]
    27f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    27f4:	9400      	str	r4, [sp, #0]
    27f6:	4623      	mov	r3, r4
    27f8:	2201      	movs	r2, #1
    27fa:	4620      	mov	r0, r4
    27fc:	f003 fea9 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2800:	f1b9 0f00 	cmp.w	r9, #0
    2804:	d0ad      	beq.n	2762 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2806:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    280c:	62ab      	str	r3, [r5, #40]	; 0x28
    280e:	e7a8      	b.n	2762 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2810:	685b      	ldr	r3, [r3, #4]
    2812:	0519      	lsls	r1, r3, #20
    2814:	d5c8      	bpl.n	27a8 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2816:	4641      	mov	r1, r8
    2818:	4638      	mov	r0, r7
    281a:	f7ff fe0b 	bl	2434 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    281e:	2800      	cmp	r0, #0
    2820:	d0c2      	beq.n	27a8 <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2822:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2826:	2002      	movs	r0, #2
    2828:	e7bf      	b.n	27aa <mem_manage_fault+0xae>
    282a:	bf00      	nop
    282c:	00007a84 	.word	0x00007a84
    2830:	00007270 	.word	0x00007270
    2834:	e000ed00 	.word	0xe000ed00
    2838:	00007a9a 	.word	0x00007a9a
    283c:	00007914 	.word	0x00007914
    2840:	00007afb 	.word	0x00007afb
    2844:	00007988 	.word	0x00007988
    2848:	00007acd 	.word	0x00007acd
    284c:	00007ae5 	.word	0x00007ae5

00002850 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2854:	4b6d      	ldr	r3, [pc, #436]	; (2a0c <z_arm_fault+0x1bc>)
    2856:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    285a:	b091      	sub	sp, #68	; 0x44
    285c:	4688      	mov	r8, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    285e:	f3c9 0608 	ubfx	r6, r9, #0, #9
    2862:	2700      	movs	r7, #0
    2864:	f387 8811 	msr	BASEPRI, r7
    2868:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    286c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2870:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2874:	d10d      	bne.n	2892 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2876:	f002 030c 	and.w	r3, r2, #12
    287a:	2b08      	cmp	r3, #8
    287c:	d10b      	bne.n	2896 <z_arm_fault+0x46>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    287e:	4b64      	ldr	r3, [pc, #400]	; (2a10 <z_arm_fault+0x1c0>)
    2880:	4964      	ldr	r1, [pc, #400]	; (2a14 <z_arm_fault+0x1c4>)
    2882:	9700      	str	r7, [sp, #0]
    2884:	e9cd 7301 	strd	r7, r3, [sp, #4]
    2888:	2201      	movs	r2, #1
    288a:	463b      	mov	r3, r7
    288c:	4638      	mov	r0, r7
    288e:	f003 fe60 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
		return NULL;
    2892:	46b8      	mov	r8, r7
    2894:	e003      	b.n	289e <z_arm_fault+0x4e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2896:	0712      	lsls	r2, r2, #28
    2898:	d401      	bmi.n	289e <z_arm_fault+0x4e>
			ptr_esf = (z_arch_esf_t *)msp;
    289a:	4680      	mov	r8, r0
			*nested_exc = true;
    289c:	2701      	movs	r7, #1
	*recoverable = false;
    289e:	2500      	movs	r5, #0
	switch (fault) {
    28a0:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    28a2:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    28a6:	2b09      	cmp	r3, #9
    28a8:	f200 8096 	bhi.w	29d8 <z_arm_fault+0x188>
    28ac:	e8df f003 	tbb	[pc, r3]
    28b0:	878e8a05 	.word	0x878e8a05
    28b4:	94949494 	.word	0x94949494
    28b8:	9294      	.short	0x9294
	PR_FAULT_INFO("***** HARD FAULT *****");
    28ba:	4b57      	ldr	r3, [pc, #348]	; (2a18 <z_arm_fault+0x1c8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28bc:	4e53      	ldr	r6, [pc, #332]	; (2a0c <z_arm_fault+0x1bc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    28be:	4955      	ldr	r1, [pc, #340]	; (2a14 <z_arm_fault+0x1c4>)
    28c0:	9500      	str	r5, [sp, #0]
    28c2:	e9cd 5301 	strd	r5, r3, [sp, #4]
    28c6:	2300      	movs	r3, #0
    28c8:	2201      	movs	r2, #1
    28ca:	4618      	mov	r0, r3
    28cc:	f003 fe41 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28d0:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    28d2:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28d6:	f014 0402 	ands.w	r4, r4, #2
    28da:	d00b      	beq.n	28f4 <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    28dc:	4b4f      	ldr	r3, [pc, #316]	; (2a1c <z_arm_fault+0x1cc>)
	PR_FAULT_INFO(
    28de:	494d      	ldr	r1, [pc, #308]	; (2a14 <z_arm_fault+0x1c4>)
    28e0:	9500      	str	r5, [sp, #0]
    28e2:	e9cd 5301 	strd	r5, r3, [sp, #4]
    28e6:	2300      	movs	r3, #0
    28e8:	2201      	movs	r2, #1
    28ea:	4618      	mov	r0, r3
    28ec:	f003 fe31 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    28f0:	2400      	movs	r4, #0
}
    28f2:	e00c      	b.n	290e <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    28f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    28f6:	2b00      	cmp	r3, #0
    28f8:	da24      	bge.n	2944 <z_arm_fault+0xf4>
		PR_EXC("  Debug event");
    28fa:	4b49      	ldr	r3, [pc, #292]	; (2a20 <z_arm_fault+0x1d0>)
    28fc:	4945      	ldr	r1, [pc, #276]	; (2a14 <z_arm_fault+0x1c4>)
    28fe:	9400      	str	r4, [sp, #0]
    2900:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2904:	2201      	movs	r2, #1
    2906:	4623      	mov	r3, r4
    2908:	4620      	mov	r0, r4
    290a:	f003 fe22 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    290e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2912:	b9a3      	cbnz	r3, 293e <z_arm_fault+0xee>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2914:	2220      	movs	r2, #32
    2916:	4641      	mov	r1, r8
    2918:	eb0d 0002 	add.w	r0, sp, r2
    291c:	f003 fe5f 	bl	65de <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2922:	2f00      	cmp	r7, #0
    2924:	d06d      	beq.n	2a02 <z_arm_fault+0x1b2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2926:	f3c3 0208 	ubfx	r2, r3, #0, #9
    292a:	b922      	cbnz	r2, 2936 <z_arm_fault+0xe6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    292c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2930:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2934:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    2936:	a908      	add	r1, sp, #32
    2938:	4620      	mov	r0, r4
    293a:	f7ff fc65 	bl	2208 <z_arm_fatal_error>
}
    293e:	b011      	add	sp, #68	; 0x44
    2940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2944:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2946:	005b      	lsls	r3, r3, #1
    2948:	d5e1      	bpl.n	290e <z_arm_fault+0xbe>
		PR_EXC("  Fault escalation (see below)");
    294a:	4b36      	ldr	r3, [pc, #216]	; (2a24 <z_arm_fault+0x1d4>)
    294c:	4931      	ldr	r1, [pc, #196]	; (2a14 <z_arm_fault+0x1c4>)
    294e:	9400      	str	r4, [sp, #0]
    2950:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2954:	2201      	movs	r2, #1
    2956:	4623      	mov	r3, r4
    2958:	4620      	mov	r0, r4
    295a:	f003 fdfa 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    295e:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2962:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2966:	f64d 7302 	movw	r3, #57090	; 0xdf02
    296a:	429a      	cmp	r2, r3
    296c:	d00a      	beq.n	2984 <z_arm_fault+0x134>
		} else if (SCB_MMFSR != 0) {
    296e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2972:	b1bb      	cbz	r3, 29a4 <z_arm_fault+0x154>
			reason = mem_manage_fault(esf, 1, recoverable);
    2974:	f10d 021f 	add.w	r2, sp, #31
    2978:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    297a:	4640      	mov	r0, r8
    297c:	f7ff febe 	bl	26fc <mem_manage_fault>
    2980:	4604      	mov	r4, r0
		break;
    2982:	e7c4      	b.n	290e <z_arm_fault+0xbe>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2984:	f8d8 3000 	ldr.w	r3, [r8]
    2988:	9303      	str	r3, [sp, #12]
    298a:	4b27      	ldr	r3, [pc, #156]	; (2a28 <z_arm_fault+0x1d8>)
    298c:	9400      	str	r4, [sp, #0]
    298e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2992:	4620      	mov	r0, r4
    2994:	4623      	mov	r3, r4
    2996:	491f      	ldr	r1, [pc, #124]	; (2a14 <z_arm_fault+0x1c4>)
    2998:	2201      	movs	r2, #1
    299a:	f003 fdda 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    299e:	f8d8 4000 	ldr.w	r4, [r8]
    29a2:	e7b4      	b.n	290e <z_arm_fault+0xbe>
		} else if (SCB_BFSR != 0) {
    29a4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    29a8:	b12b      	cbz	r3, 29b6 <z_arm_fault+0x166>
			reason = bus_fault(esf, 1, recoverable);
    29aa:	f10d 011f 	add.w	r1, sp, #31
    29ae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    29b0:	f7ff fd9a 	bl	24e8 <bus_fault.constprop.0>
    29b4:	e7e4      	b.n	2980 <z_arm_fault+0x130>
		} else if (SCB_UFSR != 0) {
    29b6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    29b8:	b29b      	uxth	r3, r3
    29ba:	2b00      	cmp	r3, #0
    29bc:	d0a7      	beq.n	290e <z_arm_fault+0xbe>
		reason = usage_fault(esf);
    29be:	f7ff fe21 	bl	2604 <usage_fault.constprop.0>
    29c2:	e7dd      	b.n	2980 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    29c4:	f10d 021f 	add.w	r2, sp, #31
    29c8:	2100      	movs	r1, #0
    29ca:	e7d6      	b.n	297a <z_arm_fault+0x12a>
		reason = bus_fault(esf, 0, recoverable);
    29cc:	f10d 011f 	add.w	r1, sp, #31
    29d0:	2000      	movs	r0, #0
    29d2:	e7ed      	b.n	29b0 <z_arm_fault+0x160>
	PR_FAULT_INFO(
    29d4:	4b15      	ldr	r3, [pc, #84]	; (2a2c <z_arm_fault+0x1dc>)
    29d6:	e782      	b.n	28de <z_arm_fault+0x8e>
	PR_FAULT_INFO("***** %s %d) *****",
    29d8:	4a15      	ldr	r2, [pc, #84]	; (2a30 <z_arm_fault+0x1e0>)
    29da:	4b16      	ldr	r3, [pc, #88]	; (2a34 <z_arm_fault+0x1e4>)
    29dc:	490d      	ldr	r1, [pc, #52]	; (2a14 <z_arm_fault+0x1c4>)
    29de:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    29e2:	bf18      	it	ne
    29e4:	4613      	movne	r3, r2
    29e6:	3e10      	subs	r6, #16
    29e8:	2400      	movs	r4, #0
    29ea:	e9cd 3603 	strd	r3, r6, [sp, #12]
    29ee:	4b12      	ldr	r3, [pc, #72]	; (2a38 <z_arm_fault+0x1e8>)
    29f0:	9302      	str	r3, [sp, #8]
    29f2:	e9cd 4400 	strd	r4, r4, [sp]
    29f6:	4623      	mov	r3, r4
    29f8:	2201      	movs	r2, #1
    29fa:	4620      	mov	r0, r4
    29fc:	f003 fda9 	bl	6552 <z_log_msg2_runtime_create.constprop.0>
}
    2a00:	e785      	b.n	290e <z_arm_fault+0xbe>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2a06:	f023 0301 	bic.w	r3, r3, #1
    2a0a:	e793      	b.n	2934 <z_arm_fault+0xe4>
    2a0c:	e000ed00 	.word	0xe000ed00
    2a10:	00007b48 	.word	0x00007b48
    2a14:	00007270 	.word	0x00007270
    2a18:	00007b73 	.word	0x00007b73
    2a1c:	00007b8a 	.word	0x00007b8a
    2a20:	00007bab 	.word	0x00007bab
    2a24:	00007bb9 	.word	0x00007bb9
    2a28:	00007bd8 	.word	0x00007bd8
    2a2c:	00007bf4 	.word	0x00007bf4
    2a30:	00007b2f 	.word	0x00007b2f
    2a34:	00007b1a 	.word	0x00007b1a
    2a38:	00007c18 	.word	0x00007c18

00002a3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a3c:	4a02      	ldr	r2, [pc, #8]	; (2a48 <z_arm_fault_init+0xc>)
    2a3e:	6953      	ldr	r3, [r2, #20]
    2a40:	f043 0310 	orr.w	r3, r3, #16
    2a44:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2a46:	4770      	bx	lr
    2a48:	e000ed00 	.word	0xe000ed00

00002a4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2a4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2a50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2a54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2a56:	4672      	mov	r2, lr
	bl z_arm_fault
    2a58:	f7ff fefa 	bl	2850 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2a5c:	bd01      	pop	{r0, pc}
    2a5e:	bf00      	nop

00002a60 <z_arm_interrupt_init>:
    2a60:	4804      	ldr	r0, [pc, #16]	; (2a74 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2a62:	2300      	movs	r3, #0
    2a64:	2120      	movs	r1, #32
    2a66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a68:	3301      	adds	r3, #1
    2a6a:	2b30      	cmp	r3, #48	; 0x30
    2a6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a70:	d1f9      	bne.n	2a66 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a72:	4770      	bx	lr
    2a74:	e000e100 	.word	0xe000e100

00002a78 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2a78:	2000      	movs	r0, #0
    msr CONTROL, r0
    2a7a:	f380 8814 	msr	CONTROL, r0
    isb
    2a7e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2a82:	f004 fa97 	bl	6fb4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2a86:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2a88:	490d      	ldr	r1, [pc, #52]	; (2ac0 <__start+0x48>)
    str r0, [r1]
    2a8a:	6008      	str	r0, [r1, #0]
    dsb
    2a8c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a90:	480c      	ldr	r0, [pc, #48]	; (2ac4 <__start+0x4c>)
    msr msp, r0
    2a92:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2a96:	f000 f82b 	bl	2af0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2a9a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2a9c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2aa0:	4809      	ldr	r0, [pc, #36]	; (2ac8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2aa2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2aa6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2aa8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2aac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ab0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2ab2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ab4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2ab8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2abc:	f7ff fc2e 	bl	231c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2ac0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ac4:	200014a0 	.word	0x200014a0
    ldr r0, =z_interrupt_stacks
    2ac8:	20001620 	.word	0x20001620

00002acc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2acc:	4907      	ldr	r1, [pc, #28]	; (2aec <z_arm_clear_arm_mpu_config+0x20>)
    2ace:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2ad2:	2300      	movs	r3, #0
	int num_regions =
    2ad4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2ad8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2ada:	4293      	cmp	r3, r2
    2adc:	d100      	bne.n	2ae0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2ade:	4770      	bx	lr
  MPU->RNR = rnr;
    2ae0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2ae4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2ae8:	3301      	adds	r3, #1
    2aea:	e7f6      	b.n	2ada <z_arm_clear_arm_mpu_config+0xe>
    2aec:	e000ed00 	.word	0xe000ed00

00002af0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2af0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2af2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2af4:	2300      	movs	r3, #0
    2af6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2afa:	f7ff ffe7 	bl	2acc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2afe:	4b14      	ldr	r3, [pc, #80]	; (2b50 <z_arm_init_arch_hw_at_boot+0x60>)
    2b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2b1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2b20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2b28:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2b2c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2b30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2b34:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2b38:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2b3c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2b40:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2b44:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b4a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2b4e:	bd08      	pop	{r3, pc}
    2b50:	e000e100 	.word	0xe000e100

00002b54 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2b54:	4b08      	ldr	r3, [pc, #32]	; (2b78 <z_impl_k_thread_abort+0x24>)
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	4283      	cmp	r3, r0
    2b5a:	d10b      	bne.n	2b74 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2b5c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2b60:	b143      	cbz	r3, 2b74 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b62:	4b06      	ldr	r3, [pc, #24]	; (2b7c <z_impl_k_thread_abort+0x28>)
    2b64:	685a      	ldr	r2, [r3, #4]
    2b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2b6a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2b72:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2b74:	f002 bed6 	b.w	5924 <z_thread_abort>
    2b78:	20000a5c 	.word	0x20000a5c
    2b7c:	e000ed00 	.word	0xe000ed00

00002b80 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2b80:	4b02      	ldr	r3, [pc, #8]	; (2b8c <z_arm_configure_static_mpu_regions+0xc>)
    2b82:	4a03      	ldr	r2, [pc, #12]	; (2b90 <z_arm_configure_static_mpu_regions+0x10>)
    2b84:	4803      	ldr	r0, [pc, #12]	; (2b94 <z_arm_configure_static_mpu_regions+0x14>)
    2b86:	2101      	movs	r1, #1
    2b88:	f000 b884 	b.w	2c94 <arm_core_mpu_configure_static_mpu_regions>
    2b8c:	20040000 	.word	0x20040000
    2b90:	20000000 	.word	0x20000000
    2b94:	000073a8 	.word	0x000073a8

00002b98 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2b98:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2b9a:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2b9c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2b9e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2ba0:	4a04      	ldr	r2, [pc, #16]	; (2bb4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2ba2:	2120      	movs	r1, #32
    2ba4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2ba8:	4618      	mov	r0, r3
    2baa:	2101      	movs	r1, #1
    2bac:	f000 b87c 	b.w	2ca8 <arm_core_mpu_configure_dynamic_mpu_regions>
    2bb0:	20000910 	.word	0x20000910
    2bb4:	150b0000 	.word	0x150b0000

00002bb8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2bba:	4f27      	ldr	r7, [pc, #156]	; (2c58 <mpu_configure_regions+0xa0>)
    2bbc:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2bbe:	2600      	movs	r6, #0
    2bc0:	428e      	cmp	r6, r1
    2bc2:	da15      	bge.n	2bf0 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    2bc4:	6844      	ldr	r4, [r0, #4]
    2bc6:	2c00      	cmp	r4, #0
    2bc8:	d043      	beq.n	2c52 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2bca:	b1d3      	cbz	r3, 2c02 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2bcc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2bd0:	ea14 0f0c 	tst.w	r4, ip
    2bd4:	d00f      	beq.n	2bf6 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2bd6:	4b21      	ldr	r3, [pc, #132]	; (2c5c <mpu_configure_regions+0xa4>)
    2bd8:	9603      	str	r6, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2bda:	9302      	str	r3, [sp, #8]
    2bdc:	2300      	movs	r3, #0
    2bde:	2201      	movs	r2, #1
    2be0:	e9cd 3300 	strd	r3, r3, [sp]
    2be4:	491e      	ldr	r1, [pc, #120]	; (2c60 <mpu_configure_regions+0xa8>)
    2be6:	4618      	mov	r0, r3
    2be8:	f003 fcc3 	bl	6572 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2bec:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2bf0:	4610      	mov	r0, r2
    2bf2:	b005      	add	sp, #20
    2bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    2bf6:	2c1f      	cmp	r4, #31
    2bf8:	d9ed      	bls.n	2bd6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    2bfa:	6805      	ldr	r5, [r0, #0]
		&&
    2bfc:	ea1c 0f05 	tst.w	ip, r5
    2c00:	d1e9      	bne.n	2bd6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2c02:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2c04:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c06:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c0a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2c0c:	d90f      	bls.n	2c2e <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    2c0e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2c12:	d80e      	bhi.n	2c32 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2c14:	3c01      	subs	r4, #1
    2c16:	fab4 f484 	clz	r4, r4
    2c1a:	f1c4 041f 	rsb	r4, r4, #31
    2c1e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2c20:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c22:	ea4c 0404 	orr.w	r4, ip, r4
    2c26:	d906      	bls.n	2c36 <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c28:	4b0e      	ldr	r3, [pc, #56]	; (2c64 <mpu_configure_regions+0xac>)
    2c2a:	9203      	str	r2, [sp, #12]
    2c2c:	e7d5      	b.n	2bda <mpu_configure_regions+0x22>
		return REGION_32B;
    2c2e:	2408      	movs	r4, #8
    2c30:	e7f6      	b.n	2c20 <mpu_configure_regions+0x68>
		return REGION_4G;
    2c32:	243e      	movs	r4, #62	; 0x3e
    2c34:	e7f4      	b.n	2c20 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c36:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2c3a:	4315      	orrs	r5, r2
    2c3c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c40:	f044 0401 	orr.w	r4, r4, #1
    2c44:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c48:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    2c4c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c4e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2c52:	3601      	adds	r6, #1
    2c54:	300c      	adds	r0, #12
    2c56:	e7b3      	b.n	2bc0 <mpu_configure_regions+0x8>
    2c58:	e000ed00 	.word	0xe000ed00
    2c5c:	00007c2f 	.word	0x00007c2f
    2c60:	00007268 	.word	0x00007268
    2c64:	00007c52 	.word	0x00007c52

00002c68 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2c68:	4b04      	ldr	r3, [pc, #16]	; (2c7c <arm_core_mpu_enable+0x14>)
    2c6a:	2205      	movs	r2, #5
    2c6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c74:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2c78:	4770      	bx	lr
    2c7a:	bf00      	nop
    2c7c:	e000ed00 	.word	0xe000ed00

00002c80 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2c80:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2c84:	4b02      	ldr	r3, [pc, #8]	; (2c90 <arm_core_mpu_disable+0x10>)
    2c86:	2200      	movs	r2, #0
    2c88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	e000ed00 	.word	0xe000ed00

00002c94 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2c94:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2c96:	4c03      	ldr	r4, [pc, #12]	; (2ca4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2c98:	2301      	movs	r3, #1
    2c9a:	7822      	ldrb	r2, [r4, #0]
    2c9c:	f7ff ff8c 	bl	2bb8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2ca0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2ca2:	bd10      	pop	{r4, pc}
    2ca4:	20000c75 	.word	0x20000c75

00002ca8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2ca8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2caa:	4a09      	ldr	r2, [pc, #36]	; (2cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2cac:	2300      	movs	r3, #0
    2cae:	7812      	ldrb	r2, [r2, #0]
    2cb0:	f7ff ff82 	bl	2bb8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2cb4:	f110 0f16 	cmn.w	r0, #22
    2cb8:	d003      	beq.n	2cc2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2cba:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2cbc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2cbe:	2807      	cmp	r0, #7
    2cc0:	dd00      	ble.n	2cc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2cc2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2cc4:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2cc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2ccc:	3001      	adds	r0, #1
    2cce:	e7f6      	b.n	2cbe <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2cd0:	20000c75 	.word	0x20000c75
    2cd4:	e000ed00 	.word	0xe000ed00

00002cd8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2cd8:	4914      	ldr	r1, [pc, #80]	; (2d2c <z_arm_mpu_init+0x54>)
    2cda:	6808      	ldr	r0, [r1, #0]
    2cdc:	2808      	cmp	r0, #8
{
    2cde:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2ce0:	d821      	bhi.n	2d26 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2ce2:	f7ff ffcd 	bl	2c80 <arm_core_mpu_disable>
    2ce6:	4c12      	ldr	r4, [pc, #72]	; (2d30 <z_arm_mpu_init+0x58>)
    2ce8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2cea:	2200      	movs	r2, #0
    2cec:	4290      	cmp	r0, r2
    2cee:	f101 010c 	add.w	r1, r1, #12
    2cf2:	d105      	bne.n	2d00 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2cf4:	4b0f      	ldr	r3, [pc, #60]	; (2d34 <z_arm_mpu_init+0x5c>)
    2cf6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2cf8:	f7ff ffb6 	bl	2c68 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2cfc:	2000      	movs	r0, #0
}
    2cfe:	bd10      	pop	{r4, pc}
    2d00:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d04:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2d08:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2d0c:	4313      	orrs	r3, r2
    2d0e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d12:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2d1a:	f043 0301 	orr.w	r3, r3, #1
    2d1e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d22:	3201      	adds	r2, #1
    2d24:	e7e2      	b.n	2cec <z_arm_mpu_init+0x14>
		return -1;
    2d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2d2a:	e7e8      	b.n	2cfe <z_arm_mpu_init+0x26>
    2d2c:	000073b4 	.word	0x000073b4
    2d30:	e000ed00 	.word	0xe000ed00
    2d34:	20000c75 	.word	0x20000c75

00002d38 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2d38:	4b01      	ldr	r3, [pc, #4]	; (2d40 <__stdout_hook_install+0x8>)
    2d3a:	6018      	str	r0, [r3, #0]
}
    2d3c:	4770      	bx	lr
    2d3e:	bf00      	nop
    2d40:	200000c4 	.word	0x200000c4

00002d44 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2d44:	b510      	push	{r4, lr}
	__asm__ volatile(
    2d46:	f04f 0320 	mov.w	r3, #32
    2d4a:	f3ef 8011 	mrs	r0, BASEPRI
    2d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    2d52:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2d56:	4a11      	ldr	r2, [pc, #68]	; (2d9c <nordicsemi_nrf52_init+0x58>)
    2d58:	2301      	movs	r3, #1
    2d5a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2d66:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2d6a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2d6e:	2c08      	cmp	r4, #8
    2d70:	d108      	bne.n	2d84 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d72:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    2d76:	2905      	cmp	r1, #5
    2d78:	d804      	bhi.n	2d84 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2d7a:	4c09      	ldr	r4, [pc, #36]	; (2da0 <nordicsemi_nrf52_init+0x5c>)
    2d7c:	5c61      	ldrb	r1, [r4, r1]
    2d7e:	b109      	cbz	r1, 2d84 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2d80:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d88:	2201      	movs	r2, #1
    2d8a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2d8e:	f380 8811 	msr	BASEPRI, r0
    2d92:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2d96:	2000      	movs	r0, #0
    2d98:	bd10      	pop	{r4, pc}
    2d9a:	bf00      	nop
    2d9c:	4001e000 	.word	0x4001e000
    2da0:	00007c8b 	.word	0x00007c8b

00002da4 <sys_arch_reboot>:
    *p_gpregret = val;
    2da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2da8:	b2c0      	uxtb	r0, r0
    2daa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2dae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2db2:	4905      	ldr	r1, [pc, #20]	; (2dc8 <sys_arch_reboot+0x24>)
    2db4:	4b05      	ldr	r3, [pc, #20]	; (2dcc <sys_arch_reboot+0x28>)
    2db6:	68ca      	ldr	r2, [r1, #12]
    2db8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2dbc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2dbe:	60cb      	str	r3, [r1, #12]
    2dc0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2dc4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2dc6:	e7fd      	b.n	2dc4 <sys_arch_reboot+0x20>
    2dc8:	e000ed00 	.word	0xe000ed00
    2dcc:	05fa0004 	.word	0x05fa0004

00002dd0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2dd0:	b120      	cbz	r0, 2ddc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2dd2:	4b03      	ldr	r3, [pc, #12]	; (2de0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2dd4:	0180      	lsls	r0, r0, #6
    2dd6:	f043 0301 	orr.w	r3, r3, #1
    2dda:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2ddc:	4770      	bx	lr
    2dde:	bf00      	nop
    2de0:	000072e0 	.word	0x000072e0

00002de4 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    2de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    2de6:	790d      	ldrb	r5, [r1, #4]
    2de8:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    2dec:	2c07      	cmp	r4, #7
    2dee:	d81a      	bhi.n	2e26 <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    2df0:	780a      	ldrb	r2, [r1, #0]
    2df2:	2a09      	cmp	r2, #9
    2df4:	d81e      	bhi.n	2e34 <adc_nrfx_channel_setup+0x50>
    2df6:	e8df f002 	tbb	[pc, r2]
    2dfa:	0606      	.short	0x0606
    2dfc:	1d060606 	.word	0x1d060606
    2e00:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    2e04:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    2e06:	784b      	ldrb	r3, [r1, #1]
    2e08:	2b03      	cmp	r3, #3
    2e0a:	d017      	beq.n	2e3c <adc_nrfx_channel_setup+0x58>
    2e0c:	2b04      	cmp	r3, #4
    2e0e:	f04f 0300 	mov.w	r3, #0
    2e12:	d025      	beq.n	2e60 <adc_nrfx_channel_setup+0x7c>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    2e14:	4a30      	ldr	r2, [pc, #192]	; (2ed8 <adc_nrfx_channel_setup+0xf4>)
    2e16:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    2e18:	e9cd 3300 	strd	r3, r3, [sp]
    2e1c:	492f      	ldr	r1, [pc, #188]	; (2edc <adc_nrfx_channel_setup+0xf8>)
    2e1e:	2201      	movs	r2, #1
    2e20:	4618      	mov	r0, r3
    2e22:	f003 fc05 	bl	6630 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    2e26:	f06f 0015 	mvn.w	r0, #21
    2e2a:	e04a      	b.n	2ec2 <adc_nrfx_channel_setup+0xde>
		config.gain = NRF_SAADC_GAIN2;
    2e2c:	2206      	movs	r2, #6
		break;
    2e2e:	e7ea      	b.n	2e06 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2e30:	2207      	movs	r2, #7
		break;
    2e32:	e7e8      	b.n	2e06 <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    2e34:	4b2a      	ldr	r3, [pc, #168]	; (2ee0 <adc_nrfx_channel_setup+0xfc>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    2e36:	9302      	str	r3, [sp, #8]
    2e38:	2300      	movs	r3, #0
    2e3a:	e7ed      	b.n	2e18 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    2e3c:	2601      	movs	r6, #1
	switch (channel_cfg->acquisition_time) {
    2e3e:	8848      	ldrh	r0, [r1, #2]
    2e40:	f244 030a 	movw	r3, #16394	; 0x400a
    2e44:	4298      	cmp	r0, r3
    2e46:	d040      	beq.n	2eca <adc_nrfx_channel_setup+0xe6>
    2e48:	d80c      	bhi.n	2e64 <adc_nrfx_channel_setup+0x80>
    2e4a:	f244 0303 	movw	r3, #16387	; 0x4003
    2e4e:	4298      	cmp	r0, r3
    2e50:	d016      	beq.n	2e80 <adc_nrfx_channel_setup+0x9c>
    2e52:	f244 0305 	movw	r3, #16389	; 0x4005
    2e56:	4298      	cmp	r0, r3
    2e58:	d035      	beq.n	2ec6 <adc_nrfx_channel_setup+0xe2>
    2e5a:	b3b0      	cbz	r0, 2eca <adc_nrfx_channel_setup+0xe6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    2e5c:	4b21      	ldr	r3, [pc, #132]	; (2ee4 <adc_nrfx_channel_setup+0x100>)
    2e5e:	e7ea      	b.n	2e36 <adc_nrfx_channel_setup+0x52>
	nrf_saadc_channel_config_t config = {
    2e60:	461e      	mov	r6, r3
    2e62:	e7ec      	b.n	2e3e <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
    2e64:	f244 0314 	movw	r3, #16404	; 0x4014
    2e68:	4298      	cmp	r0, r3
    2e6a:	d030      	beq.n	2ece <adc_nrfx_channel_setup+0xea>
    2e6c:	f244 0328 	movw	r3, #16424	; 0x4028
    2e70:	4298      	cmp	r0, r3
    2e72:	d02e      	beq.n	2ed2 <adc_nrfx_channel_setup+0xee>
    2e74:	f244 030f 	movw	r3, #16399	; 0x400f
    2e78:	4298      	cmp	r0, r3
    2e7a:	d1ef      	bne.n	2e5c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2e7c:	2003      	movs	r0, #3
    2e7e:	e000      	b.n	2e82 <adc_nrfx_channel_setup+0x9e>
	nrf_saadc_channel_config_t config = {
    2e80:	2000      	movs	r0, #0
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2e82:	0212      	lsls	r2, r2, #8
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2e84:	f3c5 1340 	ubfx	r3, r5, #5, #1
    2e88:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
    p_reg->CH[channel].CONFIG =
    2e8c:	0122      	lsls	r2, r4, #4
    2e8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2e92:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2e96:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
    2e9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    2e9e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2ea2:	0123      	lsls	r3, r4, #4
    2ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ea8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2eac:	798a      	ldrb	r2, [r1, #6]
    2eae:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    2eb2:	2000      	movs	r0, #0
    2eb4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    2eb8:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <adc_nrfx_channel_setup+0x104>)
    2eba:	441c      	add	r4, r3
    2ebc:	794b      	ldrb	r3, [r1, #5]
    2ebe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90

	return 0;
}
    2ec2:	b004      	add	sp, #16
    2ec4:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    2ec6:	2001      	movs	r0, #1
    2ec8:	e7db      	b.n	2e82 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2eca:	2002      	movs	r0, #2
    2ecc:	e7d9      	b.n	2e82 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2ece:	2004      	movs	r0, #4
    2ed0:	e7d7      	b.n	2e82 <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    2ed2:	2005      	movs	r0, #5
    2ed4:	e7d5      	b.n	2e82 <adc_nrfx_channel_setup+0x9e>
    2ed6:	bf00      	nop
    2ed8:	00007cb0 	.word	0x00007cb0
    2edc:	00007240 	.word	0x00007240
    2ee0:	00007c91 	.word	0x00007c91
    2ee4:	00007cd4 	.word	0x00007cd4
    2ee8:	20000000 	.word	0x20000000

00002eec <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2eec:	4b04      	ldr	r3, [pc, #16]	; (2f00 <adc_context_start_sampling.isra.0+0x14>)
    2eee:	2201      	movs	r2, #1
    2ef0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2ef4:	b108      	cbz	r0, 2efa <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ef6:	60da      	str	r2, [r3, #12]
}
    2ef8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2efa:	601a      	str	r2, [r3, #0]
    2efc:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2efe:	4770      	bx	lr
    2f00:	40007000 	.word	0x40007000

00002f04 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    2f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f06:	460d      	mov	r5, r1
    2f08:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2f0a:	4870      	ldr	r0, [pc, #448]	; (30cc <adc_nrfx_read+0x1c8>)
    2f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f14:	f002 f9e6 	bl	52e4 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    2f18:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    2f1a:	b114      	cbz	r4, 2f22 <adc_nrfx_read+0x1e>
    2f1c:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    2f20:	d00a      	beq.n	2f38 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    2f22:	4b6b      	ldr	r3, [pc, #428]	; (30d0 <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    2f24:	9302      	str	r3, [sp, #8]
    2f26:	2300      	movs	r3, #0
    2f28:	e9cd 3300 	strd	r3, r3, [sp]
    2f2c:	4969      	ldr	r1, [pc, #420]	; (30d4 <adc_nrfx_read+0x1d0>)
    2f2e:	2201      	movs	r2, #1
    2f30:	4618      	mov	r0, r3
    2f32:	f003 fb7d 	bl	6630 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    2f36:	e053      	b.n	2fe0 <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    2f38:	4e67      	ldr	r6, [pc, #412]	; (30d8 <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    2f3a:	4f68      	ldr	r7, [pc, #416]	; (30dc <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    2f3c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    2f3e:	fa24 f302 	lsr.w	r3, r4, r2
    2f42:	f013 0301 	ands.w	r3, r3, #1
    2f46:	d02f      	beq.n	2fa8 <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2f48:	18bb      	adds	r3, r7, r2
    2f4a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    2f4e:	b92b      	cbnz	r3, 2f5c <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    2f50:	9203      	str	r2, [sp, #12]
    2f52:	4a63      	ldr	r2, [pc, #396]	; (30e0 <adc_nrfx_read+0x1dc>)
    2f54:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    2f56:	e9cd 3300 	strd	r3, r3, [sp]
    2f5a:	e03c      	b.n	2fd6 <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2f5c:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2f60:	f895 c011 	ldrb.w	ip, [r5, #17]
    2f64:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    2f68:	f1bc 0c00 	subs.w	ip, ip, #0
    2f6c:	bf18      	it	ne
    2f6e:	f04f 0c01 	movne.w	ip, #1
    2f72:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    2f76:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    2f7a:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2f7e:	f102 0051 	add.w	r0, r2, #81	; 0x51
    2f82:	0100      	lsls	r0, r0, #4
			++active_channels;
    2f84:	3101      	adds	r1, #1
    2f86:	5033      	str	r3, [r6, r0]
    2f88:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    2f8a:	3201      	adds	r2, #1
    2f8c:	2a08      	cmp	r2, #8
    2f8e:	d1d6      	bne.n	2f3e <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    2f90:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    2f92:	f1a2 0008 	sub.w	r0, r2, #8
    2f96:	2300      	movs	r3, #0
    2f98:	2806      	cmp	r0, #6
    2f9a:	d816      	bhi.n	2fca <adc_nrfx_read+0xc6>
    2f9c:	e8df f000 	tbb	[pc, r0]
    2fa0:	15091528 	.word	0x15091528
    2fa4:	152a      	.short	0x152a
    2fa6:	13          	.byte	0x13
    2fa7:	00          	.byte	0x00
    2fa8:	f102 0051 	add.w	r0, r2, #81	; 0x51
    2fac:	0100      	lsls	r0, r0, #4
    2fae:	5033      	str	r3, [r6, r0]
}
    2fb0:	e7eb      	b.n	2f8a <adc_nrfx_read+0x86>
    2fb2:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    2fb4:	4a48      	ldr	r2, [pc, #288]	; (30d8 <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2fb6:	2901      	cmp	r1, #1
    2fb8:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    2fbc:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2fbe:	d91b      	bls.n	2ff8 <adc_nrfx_read+0xf4>
    2fc0:	b1e3      	cbz	r3, 2ffc <adc_nrfx_read+0xf8>
		LOG_ERR(
    2fc2:	4b48      	ldr	r3, [pc, #288]	; (30e4 <adc_nrfx_read+0x1e0>)
    2fc4:	e7ae      	b.n	2f24 <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2fc6:	2303      	movs	r3, #3
		break;
    2fc8:	e7f4      	b.n	2fb4 <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    2fca:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    2fcc:	4a46      	ldr	r2, [pc, #280]	; (30e8 <adc_nrfx_read+0x1e4>)
    2fce:	9300      	str	r3, [sp, #0]
    2fd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2fd4:	2300      	movs	r3, #0
    2fd6:	493f      	ldr	r1, [pc, #252]	; (30d4 <adc_nrfx_read+0x1d0>)
    2fd8:	2201      	movs	r2, #1
    2fda:	4618      	mov	r0, r3
    2fdc:	f003 fb28 	bl	6630 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    2fe0:	f06f 0415 	mvn.w	r4, #21
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2fe4:	4839      	ldr	r0, [pc, #228]	; (30cc <adc_nrfx_read+0x1c8>)
    2fe6:	f002 f95d 	bl	52a4 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    2fea:	4620      	mov	r0, r4
    2fec:	b007      	add	sp, #28
    2fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    2ff0:	2300      	movs	r3, #0
    2ff2:	e7df      	b.n	2fb4 <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    2ff4:	2302      	movs	r3, #2
    2ff6:	e7dd      	b.n	2fb4 <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    2ff8:	2b08      	cmp	r3, #8
    2ffa:	d816      	bhi.n	302a <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    2ffc:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    3000:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3002:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3004:	b9b2      	cbnz	r2, 3034 <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    3006:	68ea      	ldr	r2, [r5, #12]
    3008:	429a      	cmp	r2, r3
    300a:	d217      	bcs.n	303c <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    300c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3010:	4b36      	ldr	r3, [pc, #216]	; (30ec <adc_nrfx_read+0x1e8>)
    3012:	9302      	str	r3, [sp, #8]
    3014:	2300      	movs	r3, #0
    3016:	e9cd 3300 	strd	r3, r3, [sp]
    301a:	492e      	ldr	r1, [pc, #184]	; (30d4 <adc_nrfx_read+0x1d0>)
    301c:	2201      	movs	r2, #1
    301e:	4618      	mov	r0, r3
    3020:	f003 fb06 	bl	6630 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    3024:	f06f 040b 	mvn.w	r4, #11
    3028:	e7dc      	b.n	2fe4 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    302a:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    302c:	4b30      	ldr	r3, [pc, #192]	; (30f0 <adc_nrfx_read+0x1ec>)
    302e:	9302      	str	r3, [sp, #8]
    3030:	2300      	movs	r3, #0
    3032:	e790      	b.n	2f56 <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3034:	8992      	ldrh	r2, [r2, #12]
    3036:	fb02 3303 	mla	r3, r2, r3, r3
    303a:	e7e4      	b.n	3006 <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    303c:	4b26      	ldr	r3, [pc, #152]	; (30d8 <adc_nrfx_read+0x1d4>)
    303e:	68aa      	ldr	r2, [r5, #8]
    3040:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    3044:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    3046:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    304a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    304c:	4c23      	ldr	r4, [pc, #140]	; (30dc <adc_nrfx_read+0x1d8>)
    304e:	f104 0664 	add.w	r6, r4, #100	; 0x64
    3052:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    3058:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    305a:	2600      	movs	r6, #0
    305c:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    305e:	4627      	mov	r7, r4
    3060:	b373      	cbz	r3, 30c0 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    3062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3064:	f104 0578 	add.w	r5, r4, #120	; 0x78
    3068:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    306c:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    306e:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    3072:	b328      	cbz	r0, 30c0 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3074:	f3bf 8f5b 	dmb	ish
    3078:	e857 3f00 	ldrex	r3, [r7]
    307c:	e847 6200 	strex	r2, r6, [r7]
    3080:	2a00      	cmp	r2, #0
    3082:	d1f9      	bne.n	3078 <adc_nrfx_read+0x174>
    3084:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3088:	481a      	ldr	r0, [pc, #104]	; (30f4 <adc_nrfx_read+0x1f0>)
    308a:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    308c:	4a1a      	ldr	r2, [pc, #104]	; (30f8 <adc_nrfx_read+0x1f4>)
    308e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3092:	4631      	mov	r1, r6
    3094:	2300      	movs	r3, #0
    3096:	fbe7 0105 	umlal	r0, r1, r7, r5
    309a:	f7fd fa13 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    309e:	2200      	movs	r2, #0
    30a0:	e9cd 0100 	strd	r0, r1, [sp]
    30a4:	2300      	movs	r3, #0
    30a6:	f104 0008 	add.w	r0, r4, #8
    30aa:	f002 fe25 	bl	5cf8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    30ae:	4813      	ldr	r0, [pc, #76]	; (30fc <adc_nrfx_read+0x1f8>)
    30b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30b8:	f002 f914 	bl	52e4 <z_impl_k_sem_take>
	return ctx->status;
    30bc:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    30be:	e791      	b.n	2fe4 <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    30c0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    30c4:	f7ff ff12 	bl	2eec <adc_context_start_sampling.isra.0>
    30c8:	e7f1      	b.n	30ae <adc_nrfx_read+0x1aa>
    30ca:	bf00      	nop
    30cc:	20000040 	.word	0x20000040
    30d0:	00007cff 	.word	0x00007cff
    30d4:	00007240 	.word	0x00007240
    30d8:	40007000 	.word	0x40007000
    30dc:	20000000 	.word	0x20000000
    30e0:	00007d1d 	.word	0x00007d1d
    30e4:	00007d5c 	.word	0x00007d5c
    30e8:	00007d37 	.word	0x00007d37
    30ec:	00007db1 	.word	0x00007db1
    30f0:	00007d8e 	.word	0x00007d8e
    30f4:	000f423f 	.word	0x000f423f
    30f8:	000f4240 	.word	0x000f4240
    30fc:	20000050 	.word	0x20000050

00003100 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3100:	4b0e      	ldr	r3, [pc, #56]	; (313c <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3102:	b510      	push	{r4, lr}
    3104:	2400      	movs	r4, #0
    3106:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    310a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    310e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    3112:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    3116:	2212      	movs	r2, #18
    3118:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    311c:	2007      	movs	r0, #7
    311e:	f7ff f8c3 	bl	22a8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3122:	4622      	mov	r2, r4
    3124:	2101      	movs	r1, #1
    3126:	2007      	movs	r0, #7
    3128:	f7ff f8dc 	bl	22e4 <z_arm_irq_priority_set>
	return sem->count;
    312c:	4804      	ldr	r0, [pc, #16]	; (3140 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    312e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3130:	b913      	cbnz	r3, 3138 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    3132:	3040      	adds	r0, #64	; 0x40
    3134:	f002 f8b6 	bl	52a4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3138:	2000      	movs	r0, #0
    313a:	bd10      	pop	{r4, pc}
    313c:	40007000 	.word	0x40007000
    3140:	20000000 	.word	0x20000000

00003144 <saadc_irq_handler>:
{
    3144:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3146:	4b2e      	ldr	r3, [pc, #184]	; (3200 <saadc_irq_handler+0xbc>)
    3148:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    314c:	2a00      	cmp	r2, #0
    314e:	d04a      	beq.n	31e6 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3150:	2200      	movs	r2, #0
    3152:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3156:	4c2b      	ldr	r4, [pc, #172]	; (3204 <saadc_irq_handler+0xc0>)
    3158:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    315c:	2101      	movs	r1, #1
    315e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3160:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    3164:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3166:	4625      	mov	r5, r4
    3168:	b3c3      	cbz	r3, 31dc <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    316a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    316c:	b143      	cbz	r3, 3180 <saadc_irq_handler+0x3c>
			action = callback(dev,
    316e:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    3172:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3176:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3178:	2801      	cmp	r0, #1
    317a:	d014      	beq.n	31a6 <saadc_irq_handler+0x62>
    317c:	2802      	cmp	r0, #2
    317e:	d028      	beq.n	31d2 <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3180:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    3184:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    3188:	429a      	cmp	r2, r3
    318a:	d922      	bls.n	31d2 <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    318c:	3301      	adds	r3, #1
    318e:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3192:	4b1b      	ldr	r3, [pc, #108]	; (3200 <saadc_irq_handler+0xbc>)
    3194:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3198:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    319c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    319e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    31a2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    31a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    31a8:	b92b      	cbnz	r3, 31b6 <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    31aa:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    31ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    31b2:	f7ff be9b 	b.w	2eec <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    31b6:	f3bf 8f5b 	dmb	ish
    31ba:	e855 3f00 	ldrex	r3, [r5]
    31be:	1e5a      	subs	r2, r3, #1
    31c0:	e845 2100 	strex	r1, r2, [r5]
    31c4:	2900      	cmp	r1, #0
    31c6:	d1f8      	bne.n	31ba <saadc_irq_handler+0x76>
    31c8:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    31cc:	2b01      	cmp	r3, #1
    31ce:	dcec      	bgt.n	31aa <saadc_irq_handler+0x66>
    31d0:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    31d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    31d4:	b113      	cbz	r3, 31dc <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    31d6:	480c      	ldr	r0, [pc, #48]	; (3208 <saadc_irq_handler+0xc4>)
    31d8:	f003 fece 	bl	6f78 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    31dc:	480b      	ldr	r0, [pc, #44]	; (320c <saadc_irq_handler+0xc8>)
    31de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    31e2:	f002 b85f 	b.w	52a4 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31e6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    31ea:	2900      	cmp	r1, #0
    31ec:	d0f0      	beq.n	31d0 <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    31f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31f6:	2201      	movs	r2, #1
    31f8:	609a      	str	r2, [r3, #8]
    31fa:	601a      	str	r2, [r3, #0]
    31fc:	605a      	str	r2, [r3, #4]
}
    31fe:	e7e7      	b.n	31d0 <saadc_irq_handler+0x8c>
    3200:	40007000 	.word	0x40007000
    3204:	20000000 	.word	0x20000000
    3208:	20000008 	.word	0x20000008
    320c:	20000050 	.word	0x20000050

00003210 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3210:	4b08      	ldr	r3, [pc, #32]	; (3234 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3212:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3214:	1ac3      	subs	r3, r0, r3
{
    3216:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3218:	4907      	ldr	r1, [pc, #28]	; (3238 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    321a:	109b      	asrs	r3, r3, #2
{
    321c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    321e:	4359      	muls	r1, r3
    3220:	4806      	ldr	r0, [pc, #24]	; (323c <onoff_stop+0x2c>)
    3222:	2240      	movs	r2, #64	; 0x40
    3224:	f003 fa47 	bl	66b6 <stop>
	notify(mgr, res);
    3228:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    322a:	4601      	mov	r1, r0
	notify(mgr, res);
    322c:	4620      	mov	r0, r4
}
    322e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3232:	4718      	bx	r3
    3234:	2000092c 	.word	0x2000092c
    3238:	b6db6db7 	.word	0xb6db6db7
    323c:	00007030 	.word	0x00007030

00003240 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3240:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3242:	4c0c      	ldr	r4, [pc, #48]	; (3274 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3244:	4a0c      	ldr	r2, [pc, #48]	; (3278 <onoff_start+0x38>)
    3246:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    3248:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    324a:	9300      	str	r3, [sp, #0]
{
    324c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    324e:	460b      	mov	r3, r1
    3250:	490a      	ldr	r1, [pc, #40]	; (327c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    3252:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3254:	4361      	muls	r1, r4
{
    3256:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3258:	4809      	ldr	r0, [pc, #36]	; (3280 <onoff_start+0x40>)
    325a:	f003 fa59 	bl	6710 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    325e:	1e01      	subs	r1, r0, #0
    3260:	da05      	bge.n	326e <onoff_start+0x2e>
		notify(mgr, err);
    3262:	4630      	mov	r0, r6
    3264:	462b      	mov	r3, r5
	}
}
    3266:	b002      	add	sp, #8
    3268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    326c:	4718      	bx	r3
}
    326e:	b002      	add	sp, #8
    3270:	bd70      	pop	{r4, r5, r6, pc}
    3272:	bf00      	nop
    3274:	2000092c 	.word	0x2000092c
    3278:	0000677f 	.word	0x0000677f
    327c:	b6db6db7 	.word	0xb6db6db7
    3280:	00007030 	.word	0x00007030

00003284 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3284:	2200      	movs	r2, #0
{
    3286:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3288:	2101      	movs	r1, #1
{
    328a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    328c:	4610      	mov	r0, r2
    328e:	f7ff f829 	bl	22e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3292:	480f      	ldr	r0, [pc, #60]	; (32d0 <clk_init+0x4c>)
    3294:	f001 f8aa 	bl	43ec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3298:	4b0e      	ldr	r3, [pc, #56]	; (32d4 <clk_init+0x50>)
    329a:	4298      	cmp	r0, r3
    329c:	d115      	bne.n	32ca <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    329e:	f003 fc32 	bl	6b06 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    32a2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    32a4:	490c      	ldr	r1, [pc, #48]	; (32d8 <clk_init+0x54>)
    32a6:	4630      	mov	r0, r6
    32a8:	f003 f804 	bl	62b4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    32ac:	2800      	cmp	r0, #0
    32ae:	db0b      	blt.n	32c8 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    32b0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32b2:	4909      	ldr	r1, [pc, #36]	; (32d8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32b4:	2501      	movs	r5, #1
    32b6:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32b8:	f104 001c 	add.w	r0, r4, #28
    32bc:	f002 fffa 	bl	62b4 <onoff_manager_init>
		if (err < 0) {
    32c0:	2800      	cmp	r0, #0
    32c2:	db01      	blt.n	32c8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32c4:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    32c6:	2000      	movs	r0, #0
}
    32c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    32ca:	f06f 0004 	mvn.w	r0, #4
    32ce:	e7fb      	b.n	32c8 <clk_init+0x44>
    32d0:	00003311 	.word	0x00003311
    32d4:	0bad0000 	.word	0x0bad0000
    32d8:	00007410 	.word	0x00007410

000032dc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    32dc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    32de:	230c      	movs	r3, #12
    32e0:	4809      	ldr	r0, [pc, #36]	; (3308 <clkstarted_handle.constprop.0+0x2c>)
    32e2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    32e4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    32e6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    32e8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    32ec:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    32ee:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    32f0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    32f2:	4418      	add	r0, r3
    32f4:	f003 f9cc 	bl	6690 <set_on_state>
	if (callback) {
    32f8:	b12d      	cbz	r5, 3306 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    32fa:	4632      	mov	r2, r6
    32fc:	462b      	mov	r3, r5
    32fe:	4803      	ldr	r0, [pc, #12]	; (330c <clkstarted_handle.constprop.0+0x30>)
}
    3300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3304:	4718      	bx	r3
}
    3306:	bd70      	pop	{r4, r5, r6, pc}
    3308:	2000092c 	.word	0x2000092c
    330c:	00007030 	.word	0x00007030

00003310 <clock_event_handler>:
	switch (event) {
    3310:	b110      	cbz	r0, 3318 <clock_event_handler+0x8>
    3312:	2801      	cmp	r0, #1
    3314:	d004      	beq.n	3320 <clock_event_handler+0x10>
    3316:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3318:	4b03      	ldr	r3, [pc, #12]	; (3328 <clock_event_handler+0x18>)
    331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    331c:	075b      	lsls	r3, r3, #29
    331e:	d101      	bne.n	3324 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3320:	f7ff bfdc 	b.w	32dc <clkstarted_handle.constprop.0>
}
    3324:	4770      	bx	lr
    3326:	bf00      	nop
    3328:	2000092c 	.word	0x2000092c

0000332c <generic_hfclk_start>:
{
    332c:	b508      	push	{r3, lr}
	__asm__ volatile(
    332e:	f04f 0320 	mov.w	r3, #32
    3332:	f3ef 8111 	mrs	r1, BASEPRI
    3336:	f383 8812 	msr	BASEPRI_MAX, r3
    333a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    333e:	4a12      	ldr	r2, [pc, #72]	; (3388 <generic_hfclk_start+0x5c>)
    3340:	6813      	ldr	r3, [r2, #0]
    3342:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3346:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    334a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    334c:	d00c      	beq.n	3368 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    334e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3352:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3356:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    335a:	f013 0301 	ands.w	r3, r3, #1
    335e:	d003      	beq.n	3368 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3360:	480a      	ldr	r0, [pc, #40]	; (338c <generic_hfclk_start+0x60>)
    3362:	f003 f995 	bl	6690 <set_on_state>
			already_started = true;
    3366:	2301      	movs	r3, #1
	__asm__ volatile(
    3368:	f381 8811 	msr	BASEPRI, r1
    336c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3370:	b123      	cbz	r3, 337c <generic_hfclk_start+0x50>
}
    3372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3376:	2000      	movs	r0, #0
    3378:	f7ff bfb0 	b.w	32dc <clkstarted_handle.constprop.0>
}
    337c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3380:	2001      	movs	r0, #1
    3382:	f003 bbcd 	b.w	6b20 <nrfx_clock_start>
    3386:	bf00      	nop
    3388:	2000097c 	.word	0x2000097c
    338c:	2000096c 	.word	0x2000096c

00003390 <api_blocking_start>:
{
    3390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3392:	2200      	movs	r2, #0
    3394:	2301      	movs	r3, #1
    3396:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    339a:	4a09      	ldr	r2, [pc, #36]	; (33c0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    339c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33a0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33a2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33a6:	f003 f9e3 	bl	6770 <api_start>
	if (err < 0) {
    33aa:	2800      	cmp	r0, #0
    33ac:	db05      	blt.n	33ba <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    33ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    33b2:	2300      	movs	r3, #0
    33b4:	4668      	mov	r0, sp
    33b6:	f001 ff95 	bl	52e4 <z_impl_k_sem_take>
}
    33ba:	b005      	add	sp, #20
    33bc:	f85d fb04 	ldr.w	pc, [sp], #4
    33c0:	0000679d 	.word	0x0000679d

000033c4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33c4:	4b09      	ldr	r3, [pc, #36]	; (33ec <generic_hfclk_stop+0x28>)
    33c6:	f3bf 8f5b 	dmb	ish
    33ca:	e853 2f00 	ldrex	r2, [r3]
    33ce:	f022 0102 	bic.w	r1, r2, #2
    33d2:	e843 1000 	strex	r0, r1, [r3]
    33d6:	2800      	cmp	r0, #0
    33d8:	d1f7      	bne.n	33ca <generic_hfclk_stop+0x6>
    33da:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    33de:	07d3      	lsls	r3, r2, #31
    33e0:	d402      	bmi.n	33e8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    33e2:	2001      	movs	r0, #1
    33e4:	f003 bbd9 	b.w	6b9a <nrfx_clock_stop>
}
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	2000097c 	.word	0x2000097c

000033f0 <z_nrf_clock_control_lf_on>:
{
    33f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    33f4:	4939      	ldr	r1, [pc, #228]	; (34dc <z_nrf_clock_control_lf_on+0xec>)
    33f6:	f3bf 8f5b 	dmb	ish
    33fa:	4607      	mov	r7, r0
    33fc:	2201      	movs	r2, #1
    33fe:	e851 3f00 	ldrex	r3, [r1]
    3402:	e841 2000 	strex	r0, r2, [r1]
    3406:	2800      	cmp	r0, #0
    3408:	d1f9      	bne.n	33fe <z_nrf_clock_control_lf_on+0xe>
    340a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    340e:	b933      	cbnz	r3, 341e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3410:	4933      	ldr	r1, [pc, #204]	; (34e0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    3412:	4834      	ldr	r0, [pc, #208]	; (34e4 <z_nrf_clock_control_lf_on+0xf4>)
    3414:	604b      	str	r3, [r1, #4]
    3416:	60cb      	str	r3, [r1, #12]
    3418:	608a      	str	r2, [r1, #8]
    341a:	f002 ff5e 	bl	62da <onoff_request>
	switch (start_mode) {
    341e:	1e7b      	subs	r3, r7, #1
    3420:	2b01      	cmp	r3, #1
    3422:	d82f      	bhi.n	3484 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3424:	2f01      	cmp	r7, #1
    3426:	d107      	bne.n	3438 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    342c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3430:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3434:	2b01      	cmp	r3, #1
    3436:	d025      	beq.n	3484 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3438:	f003 fc71 	bl	6d1e <k_is_in_isr>
    343c:	4604      	mov	r4, r0
    343e:	b918      	cbnz	r0, 3448 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    3440:	4b29      	ldr	r3, [pc, #164]	; (34e8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	2b00      	cmp	r3, #0
    3446:	d141      	bne.n	34cc <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    3448:	f04f 0320 	mov.w	r3, #32
    344c:	f3ef 8611 	mrs	r6, BASEPRI
    3450:	f383 8812 	msr	BASEPRI_MAX, r3
    3454:	f3bf 8f6f 	isb	sy
    3458:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    345a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 34ec <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    345e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3462:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3466:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    346a:	03d2      	lsls	r2, r2, #15
    346c:	d50c      	bpl.n	3488 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    346e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3472:	2b01      	cmp	r3, #1
    3474:	d001      	beq.n	347a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3476:	2f01      	cmp	r7, #1
    3478:	d106      	bne.n	3488 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    347a:	b30c      	cbz	r4, 34c0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    347c:	f386 8811 	msr	BASEPRI, r6
    3480:	f3bf 8f6f 	isb	sy
}
    3484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3488:	b1ac      	cbz	r4, 34b6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    348a:	4630      	mov	r0, r6
    348c:	f7fe feb2 	bl	21f4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3490:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3494:	2b00      	cmp	r3, #0
    3496:	d1e4      	bne.n	3462 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3498:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    349c:	2a00      	cmp	r2, #0
    349e:	d0e0      	beq.n	3462 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34a0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    34a4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    34a8:	2301      	movs	r3, #1
    34aa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    34ae:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34b2:	60ab      	str	r3, [r5, #8]
}
    34b4:	e7d5      	b.n	3462 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    34b6:	2100      	movs	r1, #0
    34b8:	2021      	movs	r0, #33	; 0x21
    34ba:	f002 fa13 	bl	58e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    34be:	e7e7      	b.n	3490 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    34c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34c4:	2202      	movs	r2, #2
    34c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    34ca:	e7db      	b.n	3484 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    34cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34d0:	2202      	movs	r2, #2
    34d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    34d6:	4606      	mov	r6, r0
}
    34d8:	e7bf      	b.n	345a <z_nrf_clock_control_lf_on+0x6a>
    34da:	bf00      	nop
    34dc:	20000980 	.word	0x20000980
    34e0:	2000091c 	.word	0x2000091c
    34e4:	20000948 	.word	0x20000948
    34e8:	20001086 	.word	0x20001086
    34ec:	e000e100 	.word	0xe000e100

000034f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    34f0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    34f2:	4b08      	ldr	r3, [pc, #32]	; (3514 <uart_console_init+0x24>)
    34f4:	4808      	ldr	r0, [pc, #32]	; (3518 <uart_console_init+0x28>)
    34f6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    34f8:	f003 fbaf 	bl	6c5a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    34fc:	b138      	cbz	r0, 350e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    34fe:	4807      	ldr	r0, [pc, #28]	; (351c <uart_console_init+0x2c>)
    3500:	f7ff fc1a 	bl	2d38 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3504:	4805      	ldr	r0, [pc, #20]	; (351c <uart_console_init+0x2c>)
    3506:	f7fd fc0f 	bl	d28 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    350a:	2000      	movs	r0, #0
}
    350c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    350e:	f06f 0012 	mvn.w	r0, #18
    3512:	e7fb      	b.n	350c <uart_console_init+0x1c>
    3514:	20000984 	.word	0x20000984
    3518:	00007090 	.word	0x00007090
    351c:	00003521 	.word	0x00003521

00003520 <console_out>:
	if ('\n' == c) {
    3520:	280a      	cmp	r0, #10
{
    3522:	b538      	push	{r3, r4, r5, lr}
    3524:	4d07      	ldr	r5, [pc, #28]	; (3544 <console_out+0x24>)
    3526:	4604      	mov	r4, r0
	if ('\n' == c) {
    3528:	d104      	bne.n	3534 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    352a:	6828      	ldr	r0, [r5, #0]
    352c:	6883      	ldr	r3, [r0, #8]
    352e:	210d      	movs	r1, #13
    3530:	685b      	ldr	r3, [r3, #4]
    3532:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3534:	6828      	ldr	r0, [r5, #0]
    3536:	6883      	ldr	r3, [r0, #8]
    3538:	b2e1      	uxtb	r1, r4
    353a:	685b      	ldr	r3, [r3, #4]
    353c:	4798      	blx	r3
}
    353e:	4620      	mov	r0, r4
    3540:	bd38      	pop	{r3, r4, r5, pc}
    3542:	bf00      	nop
    3544:	20000984 	.word	0x20000984

00003548 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3548:	b530      	push	{r4, r5, lr}
	return port->config;
    354a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    354c:	7b04      	ldrb	r4, [r0, #12]
    354e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3552:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3556:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    355a:	b085      	sub	sp, #20
    355c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    3560:	d104      	bne.n	356c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    3562:	4628      	mov	r0, r5
    3564:	f001 f9c4 	bl	48f0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3568:	2000      	movs	r0, #0
    356a:	e032      	b.n	35d2 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    356c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3570:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3574:	d12f      	bne.n	35d6 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    357a:	bf0c      	ite	eq
    357c:	2304      	moveq	r3, #4
    357e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3580:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3584:	6883      	ldr	r3, [r0, #8]
    3586:	fa23 f101 	lsr.w	r1, r3, r1
    358a:	07c9      	lsls	r1, r1, #31
    358c:	d42f      	bmi.n	35ee <gpio_nrfx_pin_interrupt_configure+0xa6>
    358e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3592:	d12c      	bne.n	35ee <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3594:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    3596:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3598:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    359c:	4a1c      	ldr	r2, [pc, #112]	; (3610 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    359e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    35a2:	bf18      	it	ne
    35a4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    35a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    35ac:	07db      	lsls	r3, r3, #31
    35ae:	d41e      	bmi.n	35ee <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    35b0:	f10d 0407 	add.w	r4, sp, #7
    35b4:	4621      	mov	r1, r4
    35b6:	4628      	mov	r0, r5
    35b8:	f001 f8fe 	bl	47b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    35bc:	4b15      	ldr	r3, [pc, #84]	; (3614 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    35be:	4298      	cmp	r0, r3
    35c0:	d114      	bne.n	35ec <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    35c2:	4620      	mov	r0, r4
    35c4:	f001 f946 	bl	4854 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    35c8:	4b13      	ldr	r3, [pc, #76]	; (3618 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    35ca:	4298      	cmp	r0, r3
    35cc:	d00e      	beq.n	35ec <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    35ce:	f06f 000b 	mvn.w	r0, #11
}
    35d2:	b005      	add	sp, #20
    35d4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    35d6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    35da:	d005      	beq.n	35e8 <gpio_nrfx_pin_interrupt_configure+0xa0>
    35dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    35e0:	bf0c      	ite	eq
    35e2:	2302      	moveq	r3, #2
    35e4:	2301      	movne	r3, #1
    35e6:	e7cb      	b.n	3580 <gpio_nrfx_pin_interrupt_configure+0x38>
    35e8:	2303      	movs	r3, #3
    35ea:	e7c9      	b.n	3580 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    35ec:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    35ee:	2300      	movs	r3, #0
    35f0:	4619      	mov	r1, r3
    35f2:	aa02      	add	r2, sp, #8
    35f4:	4628      	mov	r0, r5
    35f6:	f000 ffb9 	bl	456c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35fa:	4b07      	ldr	r3, [pc, #28]	; (3618 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    35fc:	4298      	cmp	r0, r3
    35fe:	d104      	bne.n	360a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3600:	2101      	movs	r1, #1
    3602:	4628      	mov	r0, r5
    3604:	f001 f92c 	bl	4860 <nrfx_gpiote_trigger_enable>
    3608:	e7ae      	b.n	3568 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    360a:	f06f 0004 	mvn.w	r0, #4
    360e:	e7e0      	b.n	35d2 <gpio_nrfx_pin_interrupt_configure+0x8a>
    3610:	50000300 	.word	0x50000300
    3614:	0bad0004 	.word	0x0bad0004
    3618:	0bad0000 	.word	0x0bad0000

0000361c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    361c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    361e:	f001 f909 	bl	4834 <nrfx_gpiote_is_init>
    3622:	4604      	mov	r4, r0
    3624:	b968      	cbnz	r0, 3642 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3626:	f001 f8dd 	bl	47e4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    362a:	4b08      	ldr	r3, [pc, #32]	; (364c <gpio_nrfx_init+0x30>)
    362c:	4298      	cmp	r0, r3
    362e:	d10a      	bne.n	3646 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3630:	4807      	ldr	r0, [pc, #28]	; (3650 <gpio_nrfx_init+0x34>)
    3632:	4621      	mov	r1, r4
    3634:	f001 f8ba 	bl	47ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3638:	4622      	mov	r2, r4
    363a:	2105      	movs	r1, #5
    363c:	2006      	movs	r0, #6
    363e:	f7fe fe51 	bl	22e4 <z_arm_irq_priority_set>
		return 0;
    3642:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3644:	bd10      	pop	{r4, pc}
		return -EIO;
    3646:	f06f 0004 	mvn.w	r0, #4
    364a:	e7fb      	b.n	3644 <gpio_nrfx_init+0x28>
    364c:	0bad0000 	.word	0x0bad0000
    3650:	00003655 	.word	0x00003655

00003654 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3654:	0942      	lsrs	r2, r0, #5
{
    3656:	b570      	push	{r4, r5, r6, lr}
    3658:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    365a:	d002      	beq.n	3662 <nrfx_gpio_handler+0xe>
    365c:	2a01      	cmp	r2, #1
    365e:	d015      	beq.n	368c <nrfx_gpio_handler+0x38>
}
    3660:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3662:	4e0b      	ldr	r6, [pc, #44]	; (3690 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3664:	6932      	ldr	r2, [r6, #16]
    3666:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3668:	2900      	cmp	r1, #0
    366a:	d0f9      	beq.n	3660 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    366c:	f003 031f 	and.w	r3, r3, #31
    3670:	2501      	movs	r5, #1
    3672:	680c      	ldr	r4, [r1, #0]
    3674:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    3676:	688a      	ldr	r2, [r1, #8]
    3678:	402a      	ands	r2, r5
    367a:	d002      	beq.n	3682 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    367c:	684b      	ldr	r3, [r1, #4]
    367e:	4630      	mov	r0, r6
    3680:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3682:	2c00      	cmp	r4, #0
    3684:	d0ec      	beq.n	3660 <nrfx_gpio_handler+0xc>
    3686:	4621      	mov	r1, r4
    3688:	6824      	ldr	r4, [r4, #0]
    368a:	e7f4      	b.n	3676 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    368c:	4e01      	ldr	r6, [pc, #4]	; (3694 <nrfx_gpio_handler+0x40>)
    368e:	e7e9      	b.n	3664 <nrfx_gpio_handler+0x10>
    3690:	00007048 	.word	0x00007048
    3694:	00007060 	.word	0x00007060

00003698 <gpio_nrfx_pin_configure>:
{
    3698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    369c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    369e:	7b3b      	ldrb	r3, [r7, #12]
    36a0:	f001 051f 	and.w	r5, r1, #31
{
    36a4:	b085      	sub	sp, #20
    36a6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    36a8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    36ac:	4614      	mov	r4, r2
    36ae:	b9ca      	cbnz	r2, 36e4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    36b0:	a902      	add	r1, sp, #8
    36b2:	4628      	mov	r0, r5
    36b4:	f001 f880 	bl	47b8 <nrfx_gpiote_channel_get>
    36b8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    36ba:	4628      	mov	r0, r5
    36bc:	f001 f940 	bl	4940 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    36c0:	4b4a      	ldr	r3, [pc, #296]	; (37ec <gpio_nrfx_pin_configure+0x154>)
    36c2:	4298      	cmp	r0, r3
    36c4:	d004      	beq.n	36d0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    36c6:	f06f 0004 	mvn.w	r0, #4
}
    36ca:	b005      	add	sp, #20
    36cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    36d0:	4284      	cmp	r4, r0
    36d2:	d105      	bne.n	36e0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    36d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    36d8:	f001 f8b6 	bl	4848 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    36dc:	42a0      	cmp	r0, r4
    36de:	d1f2      	bne.n	36c6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    36e0:	2000      	movs	r0, #0
    36e2:	e7f2      	b.n	36ca <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    36e4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    36e8:	f10d 0103 	add.w	r1, sp, #3
    36ec:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    36ee:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    36f2:	f001 f861 	bl	47b8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36f6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    36f8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36fa:	aa02      	add	r2, sp, #8
    36fc:	4649      	mov	r1, r9
    36fe:	4628      	mov	r0, r5
    3700:	f000 ff34 	bl	456c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3704:	4b39      	ldr	r3, [pc, #228]	; (37ec <gpio_nrfx_pin_configure+0x154>)
    3706:	4298      	cmp	r0, r3
    3708:	d002      	beq.n	3710 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    370a:	f06f 0015 	mvn.w	r0, #21
    370e:	e7dc      	b.n	36ca <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3710:	4580      	cmp	r8, r0
    3712:	d103      	bne.n	371c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3714:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3718:	f001 f896 	bl	4848 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    371c:	03a3      	lsls	r3, r4, #14
    371e:	d551      	bpl.n	37c4 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3720:	f240 6306 	movw	r3, #1542	; 0x606
    3724:	4023      	ands	r3, r4
    3726:	f240 2206 	movw	r2, #518	; 0x206
    372a:	4293      	cmp	r3, r2
    372c:	d03b      	beq.n	37a6 <gpio_nrfx_pin_configure+0x10e>
    372e:	d80c      	bhi.n	374a <gpio_nrfx_pin_configure+0xb2>
    3730:	2b06      	cmp	r3, #6
    3732:	d015      	beq.n	3760 <gpio_nrfx_pin_configure+0xc8>
    3734:	d804      	bhi.n	3740 <gpio_nrfx_pin_configure+0xa8>
    3736:	b19b      	cbz	r3, 3760 <gpio_nrfx_pin_configure+0xc8>
    3738:	2b02      	cmp	r3, #2
    373a:	d1e6      	bne.n	370a <gpio_nrfx_pin_configure+0x72>
    373c:	2304      	movs	r3, #4
    373e:	e00f      	b.n	3760 <gpio_nrfx_pin_configure+0xc8>
    3740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3744:	d1e1      	bne.n	370a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3746:	2301      	movs	r3, #1
    3748:	e00a      	b.n	3760 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    374a:	f240 4202 	movw	r2, #1026	; 0x402
    374e:	4293      	cmp	r3, r2
    3750:	d02b      	beq.n	37aa <gpio_nrfx_pin_configure+0x112>
    3752:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3756:	d02a      	beq.n	37ae <gpio_nrfx_pin_configure+0x116>
    3758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    375c:	d1d5      	bne.n	370a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    375e:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3760:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3764:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3768:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    376c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    376e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3772:	bf54      	ite	pl
    3774:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3778:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    377a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    377c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3780:	d517      	bpl.n	37b2 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	2101      	movs	r1, #1
    3786:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    378a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    378e:	2200      	movs	r2, #0
    3790:	a901      	add	r1, sp, #4
    3792:	4628      	mov	r0, r5
    3794:	f000 ff98 	bl	46c8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3798:	4b14      	ldr	r3, [pc, #80]	; (37ec <gpio_nrfx_pin_configure+0x154>)
    379a:	4298      	cmp	r0, r3
    379c:	bf14      	ite	ne
    379e:	f06f 0015 	mvnne.w	r0, #21
    37a2:	2000      	moveq	r0, #0
    37a4:	e791      	b.n	36ca <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    37a6:	2307      	movs	r3, #7
    37a8:	e7da      	b.n	3760 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    37aa:	2305      	movs	r3, #5
    37ac:	e7d8      	b.n	3760 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    37ae:	2303      	movs	r3, #3
    37b0:	e7d6      	b.n	3760 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    37b2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    37b4:	bf41      	itttt	mi
    37b6:	687b      	ldrmi	r3, [r7, #4]
    37b8:	2101      	movmi	r1, #1
    37ba:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    37be:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    37c2:	e7e4      	b.n	378e <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    37c4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37c6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    37ca:	bf54      	ite	pl
    37cc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    37d0:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37d2:	461a      	mov	r2, r3
    37d4:	a901      	add	r1, sp, #4
    37d6:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    37d8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37dc:	f000 fec6 	bl	456c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    37e0:	4b02      	ldr	r3, [pc, #8]	; (37ec <gpio_nrfx_pin_configure+0x154>)
    37e2:	4298      	cmp	r0, r3
    37e4:	f43f af7c 	beq.w	36e0 <gpio_nrfx_pin_configure+0x48>
    37e8:	e78f      	b.n	370a <gpio_nrfx_pin_configure+0x72>
    37ea:	bf00      	nop
    37ec:	0bad0000 	.word	0x0bad0000

000037f0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    37f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    37f2:	ab0b      	add	r3, sp, #44	; 0x2c
    37f4:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    37f6:	9303      	str	r3, [sp, #12]
    37f8:	4b05      	ldr	r3, [pc, #20]	; (3810 <z_log_msg2_runtime_create.constprop.0+0x20>)
    37fa:	9302      	str	r3, [sp, #8]
    37fc:	2300      	movs	r3, #0
    37fe:	e9cd 3300 	strd	r3, r3, [sp]
    3802:	2201      	movs	r2, #1
    3804:	4618      	mov	r0, r3
    3806:	f7fe f9d7 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    380a:	b007      	add	sp, #28
    380c:	f85d fb04 	ldr.w	pc, [sp], #4
    3810:	00007e13 	.word	0x00007e13

00003814 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3814:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3816:	794b      	ldrb	r3, [r1, #5]
    3818:	2b01      	cmp	r3, #1
    381a:	d026      	beq.n	386a <uarte_nrfx_configure+0x56>
    381c:	2b03      	cmp	r3, #3
    381e:	d121      	bne.n	3864 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3820:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3822:	798b      	ldrb	r3, [r1, #6]
    3824:	2b03      	cmp	r3, #3
    3826:	d11d      	bne.n	3864 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3828:	79cc      	ldrb	r4, [r1, #7]
    382a:	b10c      	cbz	r4, 3830 <uarte_nrfx_configure+0x1c>
    382c:	2c01      	cmp	r4, #1
    382e:	d119      	bne.n	3864 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3830:	790a      	ldrb	r2, [r1, #4]
    3832:	b112      	cbz	r2, 383a <uarte_nrfx_configure+0x26>
    3834:	2a02      	cmp	r2, #2
    3836:	d115      	bne.n	3864 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3838:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    383a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    383c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    383e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3842:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3844:	d065      	beq.n	3912 <uarte_nrfx_configure+0xfe>
    3846:	d82d      	bhi.n	38a4 <uarte_nrfx_configure+0x90>
    3848:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    384c:	d064      	beq.n	3918 <uarte_nrfx_configure+0x104>
    384e:	d816      	bhi.n	387e <uarte_nrfx_configure+0x6a>
    3850:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3854:	d062      	beq.n	391c <uarte_nrfx_configure+0x108>
    3856:	d80a      	bhi.n	386e <uarte_nrfx_configure+0x5a>
    3858:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    385c:	d061      	beq.n	3922 <uarte_nrfx_configure+0x10e>
    385e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3862:	d061      	beq.n	3928 <uarte_nrfx_configure+0x114>
    3864:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3868:	e052      	b.n	3910 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    386a:	2600      	movs	r6, #0
    386c:	e7d9      	b.n	3822 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    386e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3872:	d05c      	beq.n	392e <uarte_nrfx_configure+0x11a>
    3874:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3878:	d1f4      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    387a:	4b37      	ldr	r3, [pc, #220]	; (3958 <uarte_nrfx_configure+0x144>)
    387c:	e03c      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    387e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3882:	d057      	beq.n	3934 <uarte_nrfx_configure+0x120>
    3884:	d807      	bhi.n	3896 <uarte_nrfx_configure+0x82>
    3886:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    388a:	d055      	beq.n	3938 <uarte_nrfx_configure+0x124>
    388c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3890:	d1e8      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3892:	4b32      	ldr	r3, [pc, #200]	; (395c <uarte_nrfx_configure+0x148>)
    3894:	e030      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3896:	f647 2712 	movw	r7, #31250	; 0x7a12
    389a:	42bb      	cmp	r3, r7
    389c:	d1e2      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    389e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    38a2:	e029      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38a4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    38a8:	d048      	beq.n	393c <uarte_nrfx_configure+0x128>
    38aa:	d813      	bhi.n	38d4 <uarte_nrfx_configure+0xc0>
    38ac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    38b0:	d047      	beq.n	3942 <uarte_nrfx_configure+0x12e>
    38b2:	d809      	bhi.n	38c8 <uarte_nrfx_configure+0xb4>
    38b4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    38b8:	42bb      	cmp	r3, r7
    38ba:	d044      	beq.n	3946 <uarte_nrfx_configure+0x132>
    38bc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    38c0:	d1d0      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    38c2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    38c6:	e017      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38c8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    38cc:	d1ca      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    38ce:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    38d2:	e011      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38d4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    38d8:	d038      	beq.n	394c <uarte_nrfx_configure+0x138>
    38da:	d808      	bhi.n	38ee <uarte_nrfx_configure+0xda>
    38dc:	4f20      	ldr	r7, [pc, #128]	; (3960 <uarte_nrfx_configure+0x14c>)
    38de:	42bb      	cmp	r3, r7
    38e0:	d037      	beq.n	3952 <uarte_nrfx_configure+0x13e>
    38e2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    38e6:	d1bd      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    38e8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    38ec:	e004      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38ee:	4f1d      	ldr	r7, [pc, #116]	; (3964 <uarte_nrfx_configure+0x150>)
    38f0:	42bb      	cmp	r3, r7
    38f2:	d1b7      	bne.n	3864 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    38f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    38f8:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    38fa:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    38fe:	1d03      	adds	r3, r0, #4
    3900:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3902:	4334      	orrs	r4, r6
    3904:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3906:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    390a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    390e:	2000      	movs	r0, #0
}
    3910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3912:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3916:	e7ef      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3918:	4b13      	ldr	r3, [pc, #76]	; (3968 <uarte_nrfx_configure+0x154>)
    391a:	e7ed      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    391c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3920:	e7ea      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3922:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3926:	e7e7      	b.n	38f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3928:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    392c:	e7e4      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    392e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3932:	e7e1      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3934:	4b0d      	ldr	r3, [pc, #52]	; (396c <uarte_nrfx_configure+0x158>)
    3936:	e7df      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3938:	4b0d      	ldr	r3, [pc, #52]	; (3970 <uarte_nrfx_configure+0x15c>)
    393a:	e7dd      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    393c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3940:	e7da      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3942:	4b0c      	ldr	r3, [pc, #48]	; (3974 <uarte_nrfx_configure+0x160>)
    3944:	e7d8      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3946:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    394a:	e7d5      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    394c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3950:	e7d2      	b.n	38f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3952:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3956:	e7cf      	b.n	38f8 <uarte_nrfx_configure+0xe4>
    3958:	0013b000 	.word	0x0013b000
    395c:	004ea000 	.word	0x004ea000
    3960:	0003d090 	.word	0x0003d090
    3964:	000f4240 	.word	0x000f4240
    3968:	00275000 	.word	0x00275000
    396c:	0075c000 	.word	0x0075c000
    3970:	003af000 	.word	0x003af000
    3974:	013a9000 	.word	0x013a9000

00003978 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    397c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3980:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3982:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3986:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    398a:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    398c:	2100      	movs	r1, #0
    398e:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    3992:	4607      	mov	r7, r0
	data->dev = dev;
    3994:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3996:	aa05      	add	r2, sp, #20
    3998:	4648      	mov	r0, r9
    399a:	f002 ffe1 	bl	6960 <pinctrl_lookup_state>
	if (ret < 0) {
    399e:	1e04      	subs	r4, r0, #0
    39a0:	db25      	blt.n	39ee <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    39a2:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    39a4:	f8d9 2000 	ldr.w	r2, [r9]
    39a8:	7919      	ldrb	r1, [r3, #4]
    39aa:	6818      	ldr	r0, [r3, #0]
    39ac:	f002 fff5 	bl	699a <pinctrl_configure_pins>
	if (err < 0) {
    39b0:	1e04      	subs	r4, r0, #0
    39b2:	db1c      	blt.n	39ee <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    39b4:	1d31      	adds	r1, r6, #4
    39b6:	4638      	mov	r0, r7
    39b8:	f7ff ff2c 	bl	3814 <uarte_nrfx_configure>
	if (err) {
    39bc:	4604      	mov	r4, r0
    39be:	b9b0      	cbnz	r0, 39ee <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    39c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    39c4:	0799      	lsls	r1, r3, #30
    39c6:	d529      	bpl.n	3a1c <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    39c8:	f106 0012 	add.w	r0, r6, #18
    39cc:	f001 f8b2 	bl	4b34 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    39d0:	4b27      	ldr	r3, [pc, #156]	; (3a70 <uarte_instance_init.constprop.0+0xf8>)
    39d2:	4298      	cmp	r0, r3
    39d4:	d00f      	beq.n	39f6 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    39d6:	4b27      	ldr	r3, [pc, #156]	; (3a74 <uarte_instance_init.constprop.0+0xfc>)
    39d8:	9400      	str	r4, [sp, #0]
    39da:	e9cd 4301 	strd	r4, r3, [sp, #4]
    39de:	4620      	mov	r0, r4
    39e0:	4623      	mov	r3, r4
    39e2:	4925      	ldr	r1, [pc, #148]	; (3a78 <uarte_instance_init.constprop.0+0x100>)
    39e4:	2201      	movs	r2, #1
    39e6:	f7ff ff03 	bl	37f0 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    39ea:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    39ee:	4620      	mov	r0, r4
    39f0:	b007      	add	sp, #28
    39f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    39f6:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    39f8:	00c3      	lsls	r3, r0, #3
    39fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    39fe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3a02:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3a06:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3a0a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3a0e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3a12:	4a1a      	ldr	r2, [pc, #104]	; (3a7c <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3a14:	2301      	movs	r3, #1
    3a16:	4083      	lsls	r3, r0
    3a18:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3a1c:	2308      	movs	r3, #8
    3a1e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3a22:	f898 3008 	ldrb.w	r3, [r8, #8]
    3a26:	b95b      	cbnz	r3, 3a40 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a28:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    3a2c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3a30:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3a34:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3a38:	2301      	movs	r3, #1
    3a3a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a3e:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3a40:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3a44:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3a46:	bf5c      	itt	pl
    3a48:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3a4c:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3a50:	06db      	lsls	r3, r3, #27
    3a52:	bf44      	itt	mi
    3a54:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3a58:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3a5c:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    3a5e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3a60:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3a64:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a68:	2301      	movs	r3, #1
    3a6a:	60ab      	str	r3, [r5, #8]
    3a6c:	60eb      	str	r3, [r5, #12]
	return 0;
    3a6e:	e7be      	b.n	39ee <uarte_instance_init.constprop.0+0x76>
    3a70:	0bad0000 	.word	0x0bad0000
    3a74:	00007e13 	.word	0x00007e13
    3a78:	00007288 	.word	0x00007288
    3a7c:	4001f000 	.word	0x4001f000

00003a80 <uarte_nrfx_poll_out>:
{
    3a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    3a82:	6906      	ldr	r6, [r0, #16]
{
    3a84:	4605      	mov	r5, r0
    3a86:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a88:	f003 f949 	bl	6d1e <k_is_in_isr>
    3a8c:	b910      	cbnz	r0, 3a94 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3a8e:	4b2c      	ldr	r3, [pc, #176]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
	if (isr_mode) {
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	b983      	cbnz	r3, 3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
	__asm__ volatile(
    3a94:	f04f 0320 	mov.w	r3, #32
    3a98:	f3ef 8411 	mrs	r4, BASEPRI
    3a9c:	f383 8812 	msr	BASEPRI_MAX, r3
    3aa0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3aa4:	6868      	ldr	r0, [r5, #4]
    3aa6:	f002 feef 	bl	6888 <is_tx_ready.isra.0>
    3aaa:	bb28      	cbnz	r0, 3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
	__asm__ volatile(
    3aac:	f384 8811 	msr	BASEPRI, r4
    3ab0:	f3bf 8f6f 	isb	sy
}
    3ab4:	e7ee      	b.n	3a94 <uarte_nrfx_poll_out+0x14>
{
    3ab6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3ab8:	6868      	ldr	r0, [r5, #4]
    3aba:	f002 fee5 	bl	6888 <is_tx_ready.isra.0>
    3abe:	b970      	cbnz	r0, 3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3ac0:	2001      	movs	r0, #1
    3ac2:	f003 f81e 	bl	6b02 <nrfx_busy_wait>
    3ac6:	3c01      	subs	r4, #1
    3ac8:	d1f6      	bne.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3aca:	2100      	movs	r1, #0
    3acc:	2021      	movs	r0, #33	; 0x21
    3ace:	f001 ff09 	bl	58e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3ad2:	e7f0      	b.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
	__asm__ volatile(
    3ad4:	f384 8811 	msr	BASEPRI, r4
    3ad8:	f3bf 8f6f 	isb	sy
}
    3adc:	e7f5      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
	__asm__ volatile(
    3ade:	f04f 0320 	mov.w	r3, #32
    3ae2:	f3ef 8411 	mrs	r4, BASEPRI
    3ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    3aea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3aee:	6868      	ldr	r0, [r5, #4]
    3af0:	f002 feca 	bl	6888 <is_tx_ready.isra.0>
    3af4:	2800      	cmp	r0, #0
    3af6:	d0ed      	beq.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
	data->char_out = c;
    3af8:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3afc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3afe:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    3b00:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b02:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3b06:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b0a:	2200      	movs	r2, #0
    3b0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3b10:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3b14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3b18:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3b1c:	684a      	ldr	r2, [r1, #4]
    3b1e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3b20:	bf41      	itttt	mi
    3b22:	2208      	movmi	r2, #8
    3b24:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3b28:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3b2c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b30:	2201      	movs	r2, #1
    3b32:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3b34:	f384 8811 	msr	BASEPRI, r4
    3b38:	f3bf 8f6f 	isb	sy
}
    3b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b3e:	bf00      	nop
    3b40:	20001086 	.word	0x20001086

00003b44 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3b44:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b46:	2301      	movs	r3, #1
    3b48:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b4a:	4a11      	ldr	r2, [pc, #68]	; (3b90 <compare_int_lock+0x4c>)
    3b4c:	f3bf 8f5b 	dmb	ish
    3b50:	43dc      	mvns	r4, r3
    3b52:	e852 1f00 	ldrex	r1, [r2]
    3b56:	ea01 0c04 	and.w	ip, r1, r4
    3b5a:	e842 ce00 	strex	lr, ip, [r2]
    3b5e:	f1be 0f00 	cmp.w	lr, #0
    3b62:	d1f6      	bne.n	3b52 <compare_int_lock+0xe>
    3b64:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b6c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b70:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3b78:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3b7c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b80:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b84:	420b      	tst	r3, r1
}
    3b86:	bf14      	ite	ne
    3b88:	2001      	movne	r0, #1
    3b8a:	2000      	moveq	r0, #0
    3b8c:	bd10      	pop	{r4, pc}
    3b8e:	bf00      	nop
    3b90:	200009a4 	.word	0x200009a4

00003b94 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b94:	4919      	ldr	r1, [pc, #100]	; (3bfc <sys_clock_timeout_handler+0x68>)
{
    3b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b98:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3b9a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b9e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3ba0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3ba4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3ba8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3bae:	d222      	bcs.n	3bf6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3bb0:	4b13      	ldr	r3, [pc, #76]	; (3c00 <sys_clock_timeout_handler+0x6c>)
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	0a1a      	lsrs	r2, r3, #8
    3bb6:	061b      	lsls	r3, r3, #24
    3bb8:	195e      	adds	r6, r3, r5
    3bba:	4b12      	ldr	r3, [pc, #72]	; (3c04 <sys_clock_timeout_handler+0x70>)
    3bbc:	f142 0700 	adc.w	r7, r2, #0
    3bc0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3bc4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3bc6:	f001 ffdd 	bl	5b84 <sys_clock_announce>
    return p_reg->CC[ch];
    3bca:	00a3      	lsls	r3, r4, #2
    3bcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bd0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3bd4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3bd8:	42aa      	cmp	r2, r5
    3bda:	d10b      	bne.n	3bf4 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3bdc:	b91e      	cbnz	r6, 3be6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3bde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3be2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3be6:	4b08      	ldr	r3, [pc, #32]	; (3c08 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3be8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3bec:	fa00 f404 	lsl.w	r4, r0, r4
    3bf0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3bf6:	2600      	movs	r6, #0
    3bf8:	e7e5      	b.n	3bc6 <sys_clock_timeout_handler+0x32>
    3bfa:	bf00      	nop
    3bfc:	20000260 	.word	0x20000260
    3c00:	200009a8 	.word	0x200009a8
    3c04:	20000248 	.word	0x20000248
    3c08:	40011000 	.word	0x40011000

00003c0c <compare_int_unlock>:
	if (key) {
    3c0c:	b319      	cbz	r1, 3c56 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c0e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3c12:	2301      	movs	r3, #1
    3c14:	4a10      	ldr	r2, [pc, #64]	; (3c58 <compare_int_unlock+0x4c>)
    3c16:	4083      	lsls	r3, r0
    3c18:	e852 1f00 	ldrex	r1, [r2]
    3c1c:	4319      	orrs	r1, r3
    3c1e:	e842 1c00 	strex	ip, r1, [r2]
    3c22:	f1bc 0f00 	cmp.w	ip, #0
    3c26:	d1f7      	bne.n	3c18 <compare_int_unlock+0xc>
    3c28:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3c2c:	4a0b      	ldr	r2, [pc, #44]	; (3c5c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c32:	4083      	lsls	r3, r0
    3c34:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c38:	4b09      	ldr	r3, [pc, #36]	; (3c60 <compare_int_unlock+0x54>)
    3c3a:	f3bf 8f5b 	dmb	ish
    3c3e:	681b      	ldr	r3, [r3, #0]
    3c40:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c44:	fa23 f000 	lsr.w	r0, r3, r0
    3c48:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c4a:	bf42      	ittt	mi
    3c4c:	4b05      	ldrmi	r3, [pc, #20]	; (3c64 <compare_int_unlock+0x58>)
    3c4e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3c52:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3c56:	4770      	bx	lr
    3c58:	200009a4 	.word	0x200009a4
    3c5c:	40011000 	.word	0x40011000
    3c60:	200009a0 	.word	0x200009a0
    3c64:	e000e100 	.word	0xe000e100

00003c68 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3c68:	4b0d      	ldr	r3, [pc, #52]	; (3ca0 <z_nrf_rtc_timer_read+0x38>)
    3c6a:	6818      	ldr	r0, [r3, #0]
    3c6c:	0a01      	lsrs	r1, r0, #8
    3c6e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c70:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3c74:	4b0b      	ldr	r3, [pc, #44]	; (3ca4 <z_nrf_rtc_timer_read+0x3c>)
    3c76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c7a:	1818      	adds	r0, r3, r0
    3c7c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c84:	d20a      	bcs.n	3c9c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3c86:	4b08      	ldr	r3, [pc, #32]	; (3ca8 <z_nrf_rtc_timer_read+0x40>)
    3c88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c8c:	4290      	cmp	r0, r2
    3c8e:	eb71 0303 	sbcs.w	r3, r1, r3
    3c92:	d203      	bcs.n	3c9c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3c94:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3c98:	f141 0100 	adc.w	r1, r1, #0
}
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	200009a8 	.word	0x200009a8
    3ca4:	40011000 	.word	0x40011000
    3ca8:	20000248 	.word	0x20000248

00003cac <compare_set>:
{
    3cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cb0:	b085      	sub	sp, #20
    3cb2:	4616      	mov	r6, r2
    3cb4:	4698      	mov	r8, r3
    3cb6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3cb8:	f7ff ff44 	bl	3b44 <compare_int_lock>
    3cbc:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3cbe:	f7ff ffd3 	bl	3c68 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3cc2:	42b0      	cmp	r0, r6
    3cc4:	eb71 0308 	sbcs.w	r3, r1, r8
    3cc8:	d278      	bcs.n	3dbc <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3cca:	4b46      	ldr	r3, [pc, #280]	; (3de4 <compare_set+0x138>)
    3ccc:	1a30      	subs	r0, r6, r0
    3cce:	eb68 0101 	sbc.w	r1, r8, r1
    3cd2:	4298      	cmp	r0, r3
    3cd4:	f171 0300 	sbcs.w	r3, r1, #0
    3cd8:	f080 8081 	bcs.w	3dde <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3cdc:	4b42      	ldr	r3, [pc, #264]	; (3de8 <compare_set+0x13c>)
    3cde:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3ce2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3ce6:	45d8      	cmp	r8, fp
    3ce8:	bf08      	it	eq
    3cea:	4556      	cmpeq	r6, sl
    3cec:	d051      	beq.n	3d92 <compare_set+0xe6>
    3cee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3cf2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3cf6:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3cfa:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3cfe:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3d04:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d08:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3d0a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3d0e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d12:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3d14:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d18:	4b34      	ldr	r3, [pc, #208]	; (3dec <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d1a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3d1e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3d20:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3d24:	1a40      	subs	r0, r0, r1
    3d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d2a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3d2e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3d30:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3d34:	d107      	bne.n	3d46 <compare_set+0x9a>
    3d36:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3d3a:	2013      	movs	r0, #19
    3d3c:	f003 f918 	bl	6f70 <z_impl_k_busy_wait>
    3d40:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3d44:	4b29      	ldr	r3, [pc, #164]	; (3dec <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3d46:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3d4a:	eba4 000c 	sub.w	r0, r4, ip
    3d4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3d52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d56:	bf88      	it	hi
    3d58:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d5a:	2000      	movs	r0, #0
    3d5c:	6038      	str	r0, [r7, #0]
    3d5e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3d60:	9801      	ldr	r0, [sp, #4]
    3d62:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d66:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3d6a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d6e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3d72:	4281      	cmp	r1, r0
    3d74:	d006      	beq.n	3d84 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3d76:	1a20      	subs	r0, r4, r0
    3d78:	3802      	subs	r0, #2
    3d7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3d7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d82:	d819      	bhi.n	3db8 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3d84:	1aa4      	subs	r4, r4, r2
    3d86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3d8a:	eb14 0a06 	adds.w	sl, r4, r6
    3d8e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3d92:	4915      	ldr	r1, [pc, #84]	; (3de8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3d94:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3d96:	012b      	lsls	r3, r5, #4
    3d98:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3d9c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3da0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3da4:	6053      	str	r3, [r2, #4]
	return ret;
    3da6:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3da8:	4628      	mov	r0, r5
    3daa:	9900      	ldr	r1, [sp, #0]
    3dac:	f7ff ff2e 	bl	3c0c <compare_int_unlock>
}
    3db0:	4620      	mov	r0, r4
    3db2:	b005      	add	sp, #20
    3db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3db8:	4620      	mov	r0, r4
    3dba:	e7b1      	b.n	3d20 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3dbc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3dbe:	4a0c      	ldr	r2, [pc, #48]	; (3df0 <compare_set+0x144>)
    3dc0:	f3bf 8f5b 	dmb	ish
    3dc4:	40ab      	lsls	r3, r5
    3dc6:	e852 1f00 	ldrex	r1, [r2]
    3dca:	4319      	orrs	r1, r3
    3dcc:	e842 1000 	strex	r0, r1, [r2]
    3dd0:	2800      	cmp	r0, #0
    3dd2:	d1f8      	bne.n	3dc6 <compare_set+0x11a>
    3dd4:	f3bf 8f5b 	dmb	ish
    3dd8:	46b2      	mov	sl, r6
    3dda:	46c3      	mov	fp, r8
    3ddc:	e7d9      	b.n	3d92 <compare_set+0xe6>
			return -EINVAL;
    3dde:	f06f 0415 	mvn.w	r4, #21
    3de2:	e7e1      	b.n	3da8 <compare_set+0xfc>
    3de4:	01000001 	.word	0x01000001
    3de8:	20000250 	.word	0x20000250
    3dec:	40011000 	.word	0x40011000
    3df0:	200009a0 	.word	0x200009a0

00003df4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3df6:	4b19      	ldr	r3, [pc, #100]	; (3e5c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3df8:	4d19      	ldr	r5, [pc, #100]	; (3e60 <sys_clock_driver_init+0x6c>)
    3dfa:	2400      	movs	r4, #0
    3dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e04:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3e08:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e10:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e14:	4b13      	ldr	r3, [pc, #76]	; (3e64 <sys_clock_driver_init+0x70>)
    3e16:	2602      	movs	r6, #2
    3e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3e1c:	2101      	movs	r1, #1
    3e1e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3e22:	2011      	movs	r0, #17
    3e24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3e28:	4622      	mov	r2, r4
    3e2a:	f7fe fa5b 	bl	22e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3e2e:	2011      	movs	r0, #17
    3e30:	f7fe fa3a 	bl	22a8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3e34:	4a0c      	ldr	r2, [pc, #48]	; (3e68 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3e36:	2301      	movs	r3, #1
    3e38:	60ab      	str	r3, [r5, #8]
    3e3a:	602b      	str	r3, [r5, #0]
    3e3c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3e3e:	4b0b      	ldr	r3, [pc, #44]	; (3e6c <sys_clock_driver_init+0x78>)
    3e40:	4a0b      	ldr	r2, [pc, #44]	; (3e70 <sys_clock_driver_init+0x7c>)
    3e42:	9300      	str	r3, [sp, #0]
    3e44:	9401      	str	r4, [sp, #4]
    3e46:	2300      	movs	r3, #0
    3e48:	4620      	mov	r0, r4
    3e4a:	f7ff ff2f 	bl	3cac <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e4e:	4630      	mov	r0, r6
    3e50:	f7ff face 	bl	33f0 <z_nrf_clock_control_lf_on>

	return 0;
}
    3e54:	4620      	mov	r0, r4
    3e56:	b002      	add	sp, #8
    3e58:	bd70      	pop	{r4, r5, r6, pc}
    3e5a:	bf00      	nop
    3e5c:	20000250 	.word	0x20000250
    3e60:	40011000 	.word	0x40011000
    3e64:	e000e100 	.word	0xe000e100
    3e68:	200009a4 	.word	0x200009a4
    3e6c:	00003b95 	.word	0x00003b95
    3e70:	007fffff 	.word	0x007fffff

00003e74 <rtc_nrf_isr>:
{
    3e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3e78:	4c35      	ldr	r4, [pc, #212]	; (3f50 <rtc_nrf_isr+0xdc>)
    3e7a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3e7e:	079a      	lsls	r2, r3, #30
    3e80:	d50b      	bpl.n	3e9a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e82:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e86:	b143      	cbz	r3, 3e9a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3e88:	4a32      	ldr	r2, [pc, #200]	; (3f54 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e8a:	2300      	movs	r3, #0
    3e8c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3e90:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e94:	6813      	ldr	r3, [r2, #0]
    3e96:	3301      	adds	r3, #1
    3e98:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3e9a:	f04f 0320 	mov.w	r3, #32
    3e9e:	f3ef 8211 	mrs	r2, BASEPRI
    3ea2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ea6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3eaa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3eae:	03db      	lsls	r3, r3, #15
    3eb0:	d512      	bpl.n	3ed8 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3eb2:	f3bf 8f5b 	dmb	ish
    3eb6:	4b28      	ldr	r3, [pc, #160]	; (3f58 <rtc_nrf_isr+0xe4>)
    3eb8:	e853 1f00 	ldrex	r1, [r3]
    3ebc:	f021 0001 	bic.w	r0, r1, #1
    3ec0:	e843 0600 	strex	r6, r0, [r3]
    3ec4:	2e00      	cmp	r6, #0
    3ec6:	d1f7      	bne.n	3eb8 <rtc_nrf_isr+0x44>
    3ec8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3ecc:	2900      	cmp	r1, #0
    3ece:	d136      	bne.n	3f3e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ed0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d132      	bne.n	3f3e <rtc_nrf_isr+0xca>
{
    3ed8:	2300      	movs	r3, #0
	__asm__ volatile(
    3eda:	f382 8811 	msr	BASEPRI, r2
    3ede:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3ee2:	b34b      	cbz	r3, 3f38 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3ee4:	f7ff fec0 	bl	3c68 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3ee8:	f04f 0320 	mov.w	r3, #32
    3eec:	f3ef 8c11 	mrs	ip, BASEPRI
    3ef0:	f383 8812 	msr	BASEPRI_MAX, r3
    3ef4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3ef8:	4b18      	ldr	r3, [pc, #96]	; (3f5c <rtc_nrf_isr+0xe8>)
    3efa:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3efe:	42b0      	cmp	r0, r6
    3f00:	eb71 0207 	sbcs.w	r2, r1, r7
    3f04:	f04f 0200 	mov.w	r2, #0
    3f08:	d320      	bcc.n	3f4c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3f12:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f16:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3f1a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3f20:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3f24:	f38c 8811 	msr	BASEPRI, ip
    3f28:	f3bf 8f6f 	isb	sy
		if (handler) {
    3f2c:	b121      	cbz	r1, 3f38 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3f2e:	9500      	str	r5, [sp, #0]
    3f30:	4632      	mov	r2, r6
    3f32:	463b      	mov	r3, r7
    3f34:	2000      	movs	r0, #0
    3f36:	4788      	blx	r1
}
    3f38:	b003      	add	sp, #12
    3f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f3e:	2300      	movs	r3, #0
    3f40:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3f44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f48:	2301      	movs	r3, #1
}
    3f4a:	e7c6      	b.n	3eda <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3f4c:	4611      	mov	r1, r2
    3f4e:	e7e9      	b.n	3f24 <rtc_nrf_isr+0xb0>
    3f50:	40011000 	.word	0x40011000
    3f54:	200009a8 	.word	0x200009a8
    3f58:	200009a0 	.word	0x200009a0
    3f5c:	20000250 	.word	0x20000250

00003f60 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f60:	1c43      	adds	r3, r0, #1
{
    3f62:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f64:	d021      	beq.n	3faa <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f66:	2801      	cmp	r0, #1
    3f68:	dd21      	ble.n	3fae <sys_clock_set_timeout+0x4e>
    3f6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f6e:	da20      	bge.n	3fb2 <sys_clock_set_timeout+0x52>
    3f70:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f72:	f7ff fe79 	bl	3c68 <z_nrf_rtc_timer_read>
    3f76:	4b10      	ldr	r3, [pc, #64]	; (3fb8 <sys_clock_set_timeout+0x58>)
    3f78:	e9d3 1300 	ldrd	r1, r3, [r3]
    3f7c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3f7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f82:	bf28      	it	cs
    3f84:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3f86:	3001      	adds	r0, #1
    3f88:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3f8a:	480c      	ldr	r0, [pc, #48]	; (3fbc <sys_clock_set_timeout+0x5c>)
    3f8c:	4282      	cmp	r2, r0
    3f8e:	bf28      	it	cs
    3f90:	4602      	movcs	r2, r0
    3f92:	1852      	adds	r2, r2, r1
    3f94:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f98:	4909      	ldr	r1, [pc, #36]	; (3fc0 <sys_clock_set_timeout+0x60>)
    3f9a:	9001      	str	r0, [sp, #4]
    3f9c:	9100      	str	r1, [sp, #0]
    3f9e:	f143 0300 	adc.w	r3, r3, #0
    3fa2:	f7ff fe83 	bl	3cac <compare_set>
}
    3fa6:	b002      	add	sp, #8
    3fa8:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3faa:	4804      	ldr	r0, [pc, #16]	; (3fbc <sys_clock_set_timeout+0x5c>)
    3fac:	e7e0      	b.n	3f70 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3fae:	2400      	movs	r4, #0
    3fb0:	e7df      	b.n	3f72 <sys_clock_set_timeout+0x12>
    3fb2:	4c02      	ldr	r4, [pc, #8]	; (3fbc <sys_clock_set_timeout+0x5c>)
    3fb4:	e7dd      	b.n	3f72 <sys_clock_set_timeout+0x12>
    3fb6:	bf00      	nop
    3fb8:	20000260 	.word	0x20000260
    3fbc:	007fffff 	.word	0x007fffff
    3fc0:	00003b95 	.word	0x00003b95

00003fc4 <sys_clock_elapsed>:
{
    3fc4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3fc6:	f7ff fe4f 	bl	3c68 <z_nrf_rtc_timer_read>
    3fca:	4b02      	ldr	r3, [pc, #8]	; (3fd4 <sys_clock_elapsed+0x10>)
    3fcc:	681b      	ldr	r3, [r3, #0]
}
    3fce:	1ac0      	subs	r0, r0, r3
    3fd0:	bd08      	pop	{r3, pc}
    3fd2:	bf00      	nop
    3fd4:	20000260 	.word	0x20000260

00003fd8 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3fd8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3fdc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3fde:	2801      	cmp	r0, #1
    3fe0:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3fe2:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3fe6:	bf18      	it	ne
    3fe8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3fec:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3fee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    3ff2:	4770      	bx	lr
    3ff4:	50000300 	.word	0x50000300

00003ff8 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3ff8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3ffc:	2b00      	cmp	r3, #0
{
    3ffe:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4000:	bf07      	ittee	eq
    4002:	4614      	moveq	r4, r2
    4004:	460d      	moveq	r5, r1
    4006:	2401      	movne	r4, #1
    4008:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    400a:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    400e:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    4012:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4016:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    401a:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    401e:	4b06      	ldr	r3, [pc, #24]	; (4038 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4020:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    4024:	bf08      	it	eq
    4026:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    402a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    402e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    4032:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    4036:	bd30      	pop	{r4, r5, pc}
    4038:	50000300 	.word	0x50000300

0000403c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    403c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    4040:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4042:	2801      	cmp	r0, #1
    4044:	4b04      	ldr	r3, [pc, #16]	; (4058 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4046:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    404a:	bf18      	it	ne
    404c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4050:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4052:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    4056:	4770      	bx	lr
    4058:	50000300 	.word	0x50000300

0000405c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    405c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    405e:	ab0b      	add	r3, sp, #44	; 0x2c
    4060:	9305      	str	r3, [sp, #20]
    4062:	9303      	str	r3, [sp, #12]
    4064:	4b05      	ldr	r3, [pc, #20]	; (407c <z_log_msg2_runtime_create.constprop.0+0x20>)
    4066:	9302      	str	r3, [sp, #8]
    4068:	2300      	movs	r3, #0
    406a:	e9cd 3300 	strd	r3, r3, [sp]
    406e:	2201      	movs	r2, #1
    4070:	4618      	mov	r0, r3
    4072:	f7fd fda1 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    4076:	b007      	add	sp, #28
    4078:	f85d fb04 	ldr.w	pc, [sp], #4
    407c:	00007e50 	.word	0x00007e50

00004080 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    4082:	f7fd fb6d 	bl	1760 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4086:	2400      	movs	r4, #0
    4088:	4b06      	ldr	r3, [pc, #24]	; (40a4 <k_sys_fatal_error_handler+0x24>)
    408a:	9302      	str	r3, [sp, #8]
    408c:	4620      	mov	r0, r4
    408e:	e9cd 4400 	strd	r4, r4, [sp]
    4092:	4905      	ldr	r1, [pc, #20]	; (40a8 <k_sys_fatal_error_handler+0x28>)
    4094:	4623      	mov	r3, r4
    4096:	2201      	movs	r2, #1
    4098:	f7ff ffe0 	bl	405c <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    409c:	4620      	mov	r0, r4
    409e:	f7fe fe81 	bl	2da4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    40a2:	bf00      	nop
    40a4:	00007e50 	.word	0x00007e50
    40a8:	00007250 	.word	0x00007250

000040ac <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    40ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    40b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    40b4:	2a08      	cmp	r2, #8
    40b6:	d106      	bne.n	40c6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    40b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    40bc:	2b05      	cmp	r3, #5
    40be:	d802      	bhi.n	40c6 <nrf52_errata_103+0x1a>
    40c0:	4a02      	ldr	r2, [pc, #8]	; (40cc <nrf52_errata_103+0x20>)
    40c2:	5cd0      	ldrb	r0, [r2, r3]
    40c4:	4770      	bx	lr
        return false;
    40c6:	2000      	movs	r0, #0
}
    40c8:	4770      	bx	lr
    40ca:	bf00      	nop
    40cc:	00007e73 	.word	0x00007e73

000040d0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    40d0:	4a02      	ldr	r2, [pc, #8]	; (40dc <nvmc_wait+0xc>)
    40d2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    40d6:	2b00      	cmp	r3, #0
    40d8:	d0fb      	beq.n	40d2 <nvmc_wait+0x2>
}
    40da:	4770      	bx	lr
    40dc:	4001e000 	.word	0x4001e000

000040e0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    40e0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    40e2:	f002 fd04 	bl	6aee <nrf52_errata_136>
    40e6:	b140      	cbz	r0, 40fa <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    40e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40ec:	2200      	movs	r2, #0
    40ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    40f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    40f6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    40fa:	f002 fcf8 	bl	6aee <nrf52_errata_136>
    40fe:	2800      	cmp	r0, #0
    4100:	d046      	beq.n	4190 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4106:	4b60      	ldr	r3, [pc, #384]	; (4288 <SystemInit+0x1a8>)
    4108:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    410c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4110:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4114:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4118:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    411c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4120:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4124:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4128:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    412c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4130:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4134:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4138:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    413c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4140:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4144:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4148:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    414c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4150:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4154:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4158:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    415c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4160:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4164:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4168:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    416c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4170:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4174:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4178:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    417c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4180:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4184:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4188:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    418c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4190:	f7ff ff8c 	bl	40ac <nrf52_errata_103>
    4194:	b118      	cbz	r0, 419e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4196:	4b3d      	ldr	r3, [pc, #244]	; (428c <SystemInit+0x1ac>)
    4198:	4a3d      	ldr	r2, [pc, #244]	; (4290 <SystemInit+0x1b0>)
    419a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    419e:	f7ff ff85 	bl	40ac <nrf52_errata_103>
    41a2:	b118      	cbz	r0, 41ac <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    41a4:	4b3b      	ldr	r3, [pc, #236]	; (4294 <SystemInit+0x1b4>)
    41a6:	22fb      	movs	r2, #251	; 0xfb
    41a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    41ac:	f7ff ff7e 	bl	40ac <nrf52_errata_103>
    41b0:	b170      	cbz	r0, 41d0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    41b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    41b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    41ba:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    41be:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    41c2:	f022 020f 	bic.w	r2, r2, #15
    41c6:	f003 030f 	and.w	r3, r3, #15
    41ca:	4313      	orrs	r3, r2
    41cc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    41d0:	f7ff ff6c 	bl	40ac <nrf52_errata_103>
    41d4:	b120      	cbz	r0, 41e0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    41d6:	4b30      	ldr	r3, [pc, #192]	; (4298 <SystemInit+0x1b8>)
    41d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    41dc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    41e0:	f002 fc85 	bl	6aee <nrf52_errata_136>
    41e4:	b148      	cbz	r0, 41fa <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    41e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    41ee:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    41f0:	bf44      	itt	mi
    41f2:	f06f 0201 	mvnmi.w	r2, #1
    41f6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    41fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    41fe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4202:	2a08      	cmp	r2, #8
    4204:	d10e      	bne.n	4224 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4206:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    420a:	2b05      	cmp	r3, #5
    420c:	d802      	bhi.n	4214 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    420e:	4a23      	ldr	r2, [pc, #140]	; (429c <SystemInit+0x1bc>)
    4210:	5cd3      	ldrb	r3, [r2, r3]
    4212:	b13b      	cbz	r3, 4224 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4214:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4218:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    421c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4220:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4224:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4228:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    422c:	2a00      	cmp	r2, #0
    422e:	db03      	blt.n	4238 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4230:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4234:	2b00      	cmp	r3, #0
    4236:	da22      	bge.n	427e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4238:	4919      	ldr	r1, [pc, #100]	; (42a0 <SystemInit+0x1c0>)
    423a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    423c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4240:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4244:	2412      	movs	r4, #18
    nvmc_wait();
    4246:	f7ff ff43 	bl	40d0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    424a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    424e:	f7ff ff3f 	bl	40d0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4252:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4256:	f7ff ff3b 	bl	40d0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    425a:	2300      	movs	r3, #0
    425c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4260:	f7ff ff36 	bl	40d0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4264:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4268:	490e      	ldr	r1, [pc, #56]	; (42a4 <SystemInit+0x1c4>)
    426a:	4b0f      	ldr	r3, [pc, #60]	; (42a8 <SystemInit+0x1c8>)
    426c:	68ca      	ldr	r2, [r1, #12]
    426e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4272:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4274:	60cb      	str	r3, [r1, #12]
    4276:	f3bf 8f4f 	dsb	sy
    __NOP();
    427a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    427c:	e7fd      	b.n	427a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    427e:	4b0b      	ldr	r3, [pc, #44]	; (42ac <SystemInit+0x1cc>)
    4280:	4a0b      	ldr	r2, [pc, #44]	; (42b0 <SystemInit+0x1d0>)
    4282:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4284:	bd10      	pop	{r4, pc}
    4286:	bf00      	nop
    4288:	4000c000 	.word	0x4000c000
    428c:	40005000 	.word	0x40005000
    4290:	00038148 	.word	0x00038148
    4294:	4000f000 	.word	0x4000f000
    4298:	40029000 	.word	0x40029000
    429c:	00007e6d 	.word	0x00007e6d
    42a0:	4001e000 	.word	0x4001e000
    42a4:	e000ed00 	.word	0xe000ed00
    42a8:	05fa0004 	.word	0x05fa0004
    42ac:	200000f0 	.word	0x200000f0
    42b0:	03d09000 	.word	0x03d09000

000042b4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    42b4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    42b6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    42b8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    42ba:	fab2 f382 	clz	r3, r2
    42be:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    42c2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    42c4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    42c6:	d014      	beq.n	42f2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    42c8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    42cc:	fa05 f303 	lsl.w	r3, r5, r3
    42d0:	ea22 0303 	bic.w	r3, r2, r3
    42d4:	e850 6f00 	ldrex	r6, [r0]
    42d8:	4296      	cmp	r6, r2
    42da:	d104      	bne.n	42e6 <nrfx_flag32_alloc+0x32>
    42dc:	e840 3c00 	strex	ip, r3, [r0]
    42e0:	f1bc 0f00 	cmp.w	ip, #0
    42e4:	d1f6      	bne.n	42d4 <nrfx_flag32_alloc+0x20>
    42e6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    42ea:	d1e5      	bne.n	42b8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    42ec:	4802      	ldr	r0, [pc, #8]	; (42f8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    42ee:	700c      	strb	r4, [r1, #0]
}
    42f0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    42f2:	4802      	ldr	r0, [pc, #8]	; (42fc <nrfx_flag32_alloc+0x48>)
    42f4:	e7fc      	b.n	42f0 <nrfx_flag32_alloc+0x3c>
    42f6:	bf00      	nop
    42f8:	0bad0000 	.word	0x0bad0000
    42fc:	0bad0002 	.word	0x0bad0002

00004300 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4300:	6803      	ldr	r3, [r0, #0]
    4302:	40cb      	lsrs	r3, r1
    4304:	07db      	lsls	r3, r3, #31
{
    4306:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4308:	d415      	bmi.n	4336 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    430a:	2301      	movs	r3, #1
    430c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4310:	6803      	ldr	r3, [r0, #0]
    4312:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4316:	ea41 0203 	orr.w	r2, r1, r3
    431a:	e850 4f00 	ldrex	r4, [r0]
    431e:	429c      	cmp	r4, r3
    4320:	d104      	bne.n	432c <nrfx_flag32_free+0x2c>
    4322:	e840 2c00 	strex	ip, r2, [r0]
    4326:	f1bc 0f00 	cmp.w	ip, #0
    432a:	d1f6      	bne.n	431a <nrfx_flag32_free+0x1a>
    432c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4330:	d1ee      	bne.n	4310 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4332:	4802      	ldr	r0, [pc, #8]	; (433c <nrfx_flag32_free+0x3c>)
}
    4334:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4336:	4802      	ldr	r0, [pc, #8]	; (4340 <nrfx_flag32_free+0x40>)
    4338:	e7fc      	b.n	4334 <nrfx_flag32_free+0x34>
    433a:	bf00      	nop
    433c:	0bad0000 	.word	0x0bad0000
    4340:	0bad0004 	.word	0x0bad0004

00004344 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4346:	4604      	mov	r4, r0
    4348:	b118      	cbz	r0, 4352 <clock_stop+0xe>
    434a:	2801      	cmp	r0, #1
    434c:	d029      	beq.n	43a2 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    434e:	b003      	add	sp, #12
    4350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4356:	2202      	movs	r2, #2
    4358:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    435c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4360:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4364:	2201      	movs	r2, #1
    4366:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4368:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    436a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    436c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4370:	bf14      	ite	ne
    4372:	2500      	movne	r5, #0
    4374:	f10d 0507 	addeq.w	r5, sp, #7
    4378:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    437c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4380:	b1d4      	cbz	r4, 43b8 <clock_stop+0x74>
    4382:	2c01      	cmp	r4, #1
    4384:	d1e3      	bne.n	434e <clock_stop+0xa>
            if (p_clk_src != NULL)
    4386:	b125      	cbz	r5, 4392 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4388:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    438c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4390:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4392:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4396:	03db      	lsls	r3, r3, #15
    4398:	d418      	bmi.n	43cc <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    439a:	4b13      	ldr	r3, [pc, #76]	; (43e8 <clock_stop+0xa4>)
    439c:	2200      	movs	r2, #0
    439e:	715a      	strb	r2, [r3, #5]
    43a0:	e7d5      	b.n	434e <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    43a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43a6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    43a8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    43b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43b4:	6058      	str	r0, [r3, #4]
}
    43b6:	e7d7      	b.n	4368 <clock_stop+0x24>
            if (p_clk_src != NULL)
    43b8:	b125      	cbz	r5, 43c4 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    43ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43be:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    43c2:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    43c4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    43c8:	03da      	lsls	r2, r3, #15
    43ca:	d5c0      	bpl.n	434e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    43cc:	b92d      	cbnz	r5, 43da <clock_stop+0x96>
    43ce:	2001      	movs	r0, #1
    43d0:	f002 fb97 	bl	6b02 <nrfx_busy_wait>
    43d4:	3f01      	subs	r7, #1
    43d6:	d1d3      	bne.n	4380 <clock_stop+0x3c>
    43d8:	e003      	b.n	43e2 <clock_stop+0x9e>
    43da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    43de:	2b01      	cmp	r3, #1
    43e0:	d0f5      	beq.n	43ce <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    43e2:	2c01      	cmp	r4, #1
    43e4:	d0d9      	beq.n	439a <clock_stop+0x56>
    43e6:	e7b2      	b.n	434e <clock_stop+0xa>
    43e8:	200009ac 	.word	0x200009ac

000043ec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    43ec:	4b04      	ldr	r3, [pc, #16]	; (4400 <nrfx_clock_init+0x14>)
    43ee:	791a      	ldrb	r2, [r3, #4]
    43f0:	b922      	cbnz	r2, 43fc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    43f2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    43f4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    43f6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    43f8:	4802      	ldr	r0, [pc, #8]	; (4404 <nrfx_clock_init+0x18>)
    43fa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    43fc:	4802      	ldr	r0, [pc, #8]	; (4408 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    43fe:	4770      	bx	lr
    4400:	200009ac 	.word	0x200009ac
    4404:	0bad0000 	.word	0x0bad0000
    4408:	0bad000c 	.word	0x0bad000c

0000440c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    440c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4410:	b510      	push	{r4, lr}
    4412:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4416:	b16a      	cbz	r2, 4434 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4418:	2200      	movs	r2, #0
    441a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    441e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4422:	2201      	movs	r2, #1
    4424:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4428:	4b11      	ldr	r3, [pc, #68]	; (4470 <nrfx_power_clock_irq_handler+0x64>)
    442a:	7958      	ldrb	r0, [r3, #5]
    442c:	b910      	cbnz	r0, 4434 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    442e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4430:	681b      	ldr	r3, [r3, #0]
    4432:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4438:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    443c:	b172      	cbz	r2, 445c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    443e:	2200      	movs	r2, #0
    4440:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4444:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4448:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    444c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4450:	0792      	lsls	r2, r2, #30
    4452:	d104      	bne.n	445e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4454:	2201      	movs	r2, #1
    4456:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    445a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    445c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    445e:	2202      	movs	r2, #2
    4460:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4464:	4b02      	ldr	r3, [pc, #8]	; (4470 <nrfx_power_clock_irq_handler+0x64>)
}
    4466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	2001      	movs	r0, #1
    446e:	4718      	bx	r3
    4470:	200009ac 	.word	0x200009ac

00004474 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4474:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4476:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    447a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    447c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    447e:	6002      	str	r2, [r0, #0]
}
    4480:	4802      	ldr	r0, [pc, #8]	; (448c <nrf_gpio_pin_port_decode+0x18>)
    4482:	bf18      	it	ne
    4484:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	50000300 	.word	0x50000300

00004490 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4490:	4b03      	ldr	r3, [pc, #12]	; (44a0 <pin_in_use_by_te+0x10>)
    4492:	3008      	adds	r0, #8
    4494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4498:	f3c0 1040 	ubfx	r0, r0, #5, #1
    449c:	4770      	bx	lr
    449e:	bf00      	nop
    44a0:	200000f4 	.word	0x200000f4

000044a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    44a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44a6:	f100 0308 	add.w	r3, r0, #8
    44aa:	4c0c      	ldr	r4, [pc, #48]	; (44dc <call_handler+0x38>)
    44ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    44b0:	05da      	lsls	r2, r3, #23
{
    44b2:	4605      	mov	r5, r0
    44b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44b6:	d507      	bpl.n	44c8 <call_handler+0x24>
    44b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    44bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    44c0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    44c4:	6852      	ldr	r2, [r2, #4]
    44c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    44c8:	68a3      	ldr	r3, [r4, #8]
    44ca:	b12b      	cbz	r3, 44d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44cc:	68e2      	ldr	r2, [r4, #12]
    44ce:	4631      	mov	r1, r6
    44d0:	4628      	mov	r0, r5
    }
}
    44d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44d6:	4718      	bx	r3
}
    44d8:	bd70      	pop	{r4, r5, r6, pc}
    44da:	bf00      	nop
    44dc:	200000f4 	.word	0x200000f4

000044e0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44e0:	4a12      	ldr	r2, [pc, #72]	; (452c <release_handler+0x4c>)
    44e2:	3008      	adds	r0, #8
{
    44e4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    44ea:	05d9      	lsls	r1, r3, #23
    44ec:	d51b      	bpl.n	4526 <release_handler+0x46>
    44ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    44f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    44f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44fa:	f102 0410 	add.w	r4, r2, #16
    44fe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4500:	f834 3b02 	ldrh.w	r3, [r4], #2
    4504:	f413 7f80 	tst.w	r3, #256	; 0x100
    4508:	d003      	beq.n	4512 <release_handler+0x32>
    450a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    450e:	4299      	cmp	r1, r3
    4510:	d009      	beq.n	4526 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4512:	3001      	adds	r0, #1
    4514:	2830      	cmp	r0, #48	; 0x30
    4516:	d1f3      	bne.n	4500 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4518:	2300      	movs	r3, #0
    451a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    451e:	4804      	ldr	r0, [pc, #16]	; (4530 <release_handler+0x50>)
}
    4520:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4522:	f7ff beed 	b.w	4300 <nrfx_flag32_free>
}
    4526:	bc10      	pop	{r4}
    4528:	4770      	bx	lr
    452a:	bf00      	nop
    452c:	200000f4 	.word	0x200000f4
    4530:	20000168 	.word	0x20000168

00004534 <pin_handler_trigger_uninit>:
{
    4534:	b538      	push	{r3, r4, r5, lr}
    4536:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4538:	f7ff ffaa 	bl	4490 <pin_in_use_by_te>
    453c:	4c09      	ldr	r4, [pc, #36]	; (4564 <pin_handler_trigger_uninit+0x30>)
    453e:	f102 0508 	add.w	r5, r2, #8
    4542:	b140      	cbz	r0, 4556 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4544:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4548:	4907      	ldr	r1, [pc, #28]	; (4568 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    454a:	0b5b      	lsrs	r3, r3, #13
    454c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4550:	2000      	movs	r0, #0
    4552:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4556:	4610      	mov	r0, r2
    4558:	f7ff ffc2 	bl	44e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    455c:	2300      	movs	r3, #0
    455e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4562:	bd38      	pop	{r3, r4, r5, pc}
    4564:	200000f4 	.word	0x200000f4
    4568:	40006000 	.word	0x40006000

0000456c <nrfx_gpiote_input_configure>:
{
    456c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4570:	4604      	mov	r4, r0
    4572:	4617      	mov	r7, r2
    4574:	461d      	mov	r5, r3
    if (p_input_config)
    4576:	b321      	cbz	r1, 45c2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4578:	4e4e      	ldr	r6, [pc, #312]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
    457a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    457e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4582:	079b      	lsls	r3, r3, #30
    4584:	d506      	bpl.n	4594 <nrfx_gpiote_input_configure+0x28>
    4586:	f7ff ff83 	bl	4490 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    458a:	b118      	cbz	r0, 4594 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    458c:	484a      	ldr	r0, [pc, #296]	; (46b8 <nrfx_gpiote_input_configure+0x14c>)
}
    458e:	b004      	add	sp, #16
    4590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4594:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4596:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    459a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    459e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    45a2:	f10d 020f 	add.w	r2, sp, #15
    45a6:	460b      	mov	r3, r1
    45a8:	4620      	mov	r0, r4
    45aa:	f10d 010e 	add.w	r1, sp, #14
    45ae:	f002 faf6 	bl	6b9e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    45b2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    45b6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    45ba:	f043 0301 	orr.w	r3, r3, #1
    45be:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    45c2:	b197      	cbz	r7, 45ea <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45c4:	4b3b      	ldr	r3, [pc, #236]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    45c6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    45c8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45ca:	f104 0008 	add.w	r0, r4, #8
    45ce:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    45d2:	078f      	lsls	r7, r1, #30
    45d4:	d50c      	bpl.n	45f0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    45d6:	2a00      	cmp	r2, #0
    45d8:	d1d8      	bne.n	458c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    45da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    45de:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    45e2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    45e6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    45ea:	bbcd      	cbnz	r5, 4660 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    45ec:	4833      	ldr	r0, [pc, #204]	; (46bc <nrfx_gpiote_input_configure+0x150>)
    45ee:	e7ce      	b.n	458e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    45f0:	f021 0120 	bic.w	r1, r1, #32
    45f4:	04c9      	lsls	r1, r1, #19
    45f6:	0cc9      	lsrs	r1, r1, #19
    45f8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    45fc:	2a00      	cmp	r2, #0
    45fe:	d0ec      	beq.n	45da <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4600:	2e03      	cmp	r6, #3
    4602:	d8c3      	bhi.n	458c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4604:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4606:	b92e      	cbnz	r6, 4614 <nrfx_gpiote_input_configure+0xa8>
    4608:	4a2d      	ldr	r2, [pc, #180]	; (46c0 <nrfx_gpiote_input_configure+0x154>)
    460a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    460e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4612:	e7e2      	b.n	45da <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4614:	00ba      	lsls	r2, r7, #2
    4616:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    461a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    461e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4622:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4626:	f02c 0c03 	bic.w	ip, ip, #3
    462a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    462e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4632:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4636:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    463a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    463e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4642:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4646:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    464a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    464e:	ea4c 0c0e 	orr.w	ip, ip, lr
    4652:	f041 0120 	orr.w	r1, r1, #32
    4656:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    465a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    465e:	e7bc      	b.n	45da <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4660:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4664:	4620      	mov	r0, r4
    4666:	f7ff ff3b 	bl	44e0 <release_handler>
    if (!handler)
    466a:	2e00      	cmp	r6, #0
    466c:	d0be      	beq.n	45ec <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    466e:	4d11      	ldr	r5, [pc, #68]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
    4670:	682b      	ldr	r3, [r5, #0]
    4672:	429e      	cmp	r6, r3
    4674:	d104      	bne.n	4680 <nrfx_gpiote_input_configure+0x114>
    4676:	686b      	ldr	r3, [r5, #4]
    4678:	429f      	cmp	r7, r3
    467a:	d101      	bne.n	4680 <nrfx_gpiote_input_configure+0x114>
    467c:	2200      	movs	r2, #0
    467e:	e00a      	b.n	4696 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4680:	4810      	ldr	r0, [pc, #64]	; (46c4 <nrfx_gpiote_input_configure+0x158>)
    4682:	f10d 010f 	add.w	r1, sp, #15
    4686:	f7ff fe15 	bl	42b4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    468a:	4b0c      	ldr	r3, [pc, #48]	; (46bc <nrfx_gpiote_input_configure+0x150>)
    468c:	4298      	cmp	r0, r3
    468e:	f47f af7e 	bne.w	458e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4692:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4696:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    469a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    469e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    46a0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    46a2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    46a6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    46aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    46ae:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    46b2:	e79b      	b.n	45ec <nrfx_gpiote_input_configure+0x80>
    46b4:	200000f4 	.word	0x200000f4
    46b8:	0bad0004 	.word	0x0bad0004
    46bc:	0bad0000 	.word	0x0bad0000
    46c0:	40006000 	.word	0x40006000
    46c4:	20000168 	.word	0x20000168

000046c8 <nrfx_gpiote_output_configure>:
{
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	4604      	mov	r4, r0
    46cc:	b085      	sub	sp, #20
    46ce:	4615      	mov	r5, r2
    if (p_config)
    46d0:	b319      	cbz	r1, 471a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46d2:	4e33      	ldr	r6, [pc, #204]	; (47a0 <nrfx_gpiote_output_configure+0xd8>)
    46d4:	f100 0708 	add.w	r7, r0, #8
    46d8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    46dc:	0793      	lsls	r3, r2, #30
    46de:	d403      	bmi.n	46e8 <nrfx_gpiote_output_configure+0x20>
    46e0:	f7ff fed6 	bl	4490 <pin_in_use_by_te>
    46e4:	2800      	cmp	r0, #0
    46e6:	d158      	bne.n	479a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    46e8:	f012 0f1c 	tst.w	r2, #28
    46ec:	d002      	beq.n	46f4 <nrfx_gpiote_output_configure+0x2c>
    46ee:	784b      	ldrb	r3, [r1, #1]
    46f0:	2b01      	cmp	r3, #1
    46f2:	d052      	beq.n	479a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    46f4:	2301      	movs	r3, #1
    46f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    46fa:	2300      	movs	r3, #0
    46fc:	e9cd 1300 	strd	r1, r3, [sp]
    4700:	1c4a      	adds	r2, r1, #1
    4702:	1c8b      	adds	r3, r1, #2
    4704:	4620      	mov	r0, r4
    4706:	f10d 010f 	add.w	r1, sp, #15
    470a:	f002 fa48 	bl	6b9e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    470e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4712:	f043 0303 	orr.w	r3, r3, #3
    4716:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    471a:	b915      	cbnz	r5, 4722 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    471c:	4821      	ldr	r0, [pc, #132]	; (47a4 <nrfx_gpiote_output_configure+0xdc>)
}
    471e:	b005      	add	sp, #20
    4720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4722:	4e1f      	ldr	r6, [pc, #124]	; (47a0 <nrfx_gpiote_output_configure+0xd8>)
    4724:	f104 0708 	add.w	r7, r4, #8
    4728:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    472c:	0783      	lsls	r3, r0, #30
    472e:	d534      	bpl.n	479a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4730:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4734:	4661      	mov	r1, ip
    4736:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4738:	f020 0020 	bic.w	r0, r0, #32
    473c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4740:	04c0      	lsls	r0, r0, #19
    4742:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4746:	0cc0      	lsrs	r0, r0, #19
    4748:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    474c:	2300      	movs	r3, #0
    474e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4752:	786a      	ldrb	r2, [r5, #1]
    4754:	2a00      	cmp	r2, #0
    4756:	d0e1      	beq.n	471c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4758:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    475c:	78ad      	ldrb	r5, [r5, #2]
    475e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4762:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4766:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    476a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    476e:	0223      	lsls	r3, r4, #8
    4770:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4774:	0412      	lsls	r2, r2, #16
    4776:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    477a:	ea43 030e 	orr.w	r3, r3, lr
    477e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4780:	052a      	lsls	r2, r5, #20
    4782:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4786:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    478a:	4313      	orrs	r3, r2
    478c:	f040 0020 	orr.w	r0, r0, #32
    4790:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4794:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4798:	e7c0      	b.n	471c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    479a:	4803      	ldr	r0, [pc, #12]	; (47a8 <nrfx_gpiote_output_configure+0xe0>)
    479c:	e7bf      	b.n	471e <nrfx_gpiote_output_configure+0x56>
    479e:	bf00      	nop
    47a0:	200000f4 	.word	0x200000f4
    47a4:	0bad0000 	.word	0x0bad0000
    47a8:	0bad0004 	.word	0x0bad0004

000047ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    47ac:	4b01      	ldr	r3, [pc, #4]	; (47b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    47ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    47b2:	4770      	bx	lr
    47b4:	200000f4 	.word	0x200000f4

000047b8 <nrfx_gpiote_channel_get>:
{
    47b8:	b508      	push	{r3, lr}
    47ba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    47bc:	f7ff fe68 	bl	4490 <pin_in_use_by_te>
    47c0:	b138      	cbz	r0, 47d2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47c2:	4b05      	ldr	r3, [pc, #20]	; (47d8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    47c4:	4805      	ldr	r0, [pc, #20]	; (47dc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47c6:	3208      	adds	r2, #8
    47c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    47cc:	0b5b      	lsrs	r3, r3, #13
    47ce:	700b      	strb	r3, [r1, #0]
}
    47d0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47d2:	4803      	ldr	r0, [pc, #12]	; (47e0 <nrfx_gpiote_channel_get+0x28>)
    47d4:	e7fc      	b.n	47d0 <nrfx_gpiote_channel_get+0x18>
    47d6:	bf00      	nop
    47d8:	200000f4 	.word	0x200000f4
    47dc:	0bad0000 	.word	0x0bad0000
    47e0:	0bad0004 	.word	0x0bad0004

000047e4 <nrfx_gpiote_init>:
{
    47e4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    47e6:	4c0f      	ldr	r4, [pc, #60]	; (4824 <nrfx_gpiote_init+0x40>)
    47e8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    47ec:	b9bd      	cbnz	r5, 481e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    47ee:	2260      	movs	r2, #96	; 0x60
    47f0:	4629      	mov	r1, r5
    47f2:	f104 0010 	add.w	r0, r4, #16
    47f6:	f001 fefd 	bl	65f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    47fa:	2006      	movs	r0, #6
    47fc:	f7fd fd54 	bl	22a8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4800:	4b09      	ldr	r3, [pc, #36]	; (4828 <nrfx_gpiote_init+0x44>)
    return err_code;
    4802:	480a      	ldr	r0, [pc, #40]	; (482c <nrfx_gpiote_init+0x48>)
    4804:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4808:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    480c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4814:	2301      	movs	r3, #1
    4816:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    481a:	6763      	str	r3, [r4, #116]	; 0x74
}
    481c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    481e:	4804      	ldr	r0, [pc, #16]	; (4830 <nrfx_gpiote_init+0x4c>)
    4820:	e7fc      	b.n	481c <nrfx_gpiote_init+0x38>
    4822:	bf00      	nop
    4824:	200000f4 	.word	0x200000f4
    4828:	40006000 	.word	0x40006000
    482c:	0bad0000 	.word	0x0bad0000
    4830:	0bad0005 	.word	0x0bad0005

00004834 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4834:	4b03      	ldr	r3, [pc, #12]	; (4844 <nrfx_gpiote_is_init+0x10>)
    4836:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    483a:	3800      	subs	r0, #0
    483c:	bf18      	it	ne
    483e:	2001      	movne	r0, #1
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	200000f4 	.word	0x200000f4

00004848 <nrfx_gpiote_channel_free>:
{
    4848:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    484a:	4801      	ldr	r0, [pc, #4]	; (4850 <nrfx_gpiote_channel_free+0x8>)
    484c:	f7ff bd58 	b.w	4300 <nrfx_flag32_free>
    4850:	20000164 	.word	0x20000164

00004854 <nrfx_gpiote_channel_alloc>:
{
    4854:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4856:	4801      	ldr	r0, [pc, #4]	; (485c <nrfx_gpiote_channel_alloc+0x8>)
    4858:	f7ff bd2c 	b.w	42b4 <nrfx_flag32_alloc>
    485c:	20000164 	.word	0x20000164

00004860 <nrfx_gpiote_trigger_enable>:
{
    4860:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4862:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4864:	f7ff fe14 	bl	4490 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4868:	f104 0208 	add.w	r2, r4, #8
    486c:	4b1e      	ldr	r3, [pc, #120]	; (48e8 <nrfx_gpiote_trigger_enable+0x88>)
    486e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4872:	b1e8      	cbz	r0, 48b0 <nrfx_gpiote_trigger_enable+0x50>
    4874:	f013 0502 	ands.w	r5, r3, #2
    4878:	d11a      	bne.n	48b0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    487a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    487c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    487e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4882:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4886:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    488a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    488e:	6005      	str	r5, [r0, #0]
    4890:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4892:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4896:	f040 0001 	orr.w	r0, r0, #1
    489a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    489e:	b129      	cbz	r1, 48ac <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    48a0:	2201      	movs	r2, #1
    48a2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    48a6:	4a11      	ldr	r2, [pc, #68]	; (48ec <nrfx_gpiote_trigger_enable+0x8c>)
    48a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    48ac:	b003      	add	sp, #12
    48ae:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    48b4:	2b04      	cmp	r3, #4
    48b6:	d012      	beq.n	48de <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    48b8:	2b05      	cmp	r3, #5
    48ba:	d012      	beq.n	48e2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    48bc:	a801      	add	r0, sp, #4
    48be:	9401      	str	r4, [sp, #4]
    48c0:	f7ff fdd8 	bl	4474 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    48c4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    48c6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    48ca:	40d9      	lsrs	r1, r3
    48cc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    48d0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    48d2:	4620      	mov	r0, r4
}
    48d4:	b003      	add	sp, #12
    48d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    48da:	f002 b9a7 	b.w	6c2c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    48de:	2103      	movs	r1, #3
    48e0:	e7f7      	b.n	48d2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    48e2:	2102      	movs	r1, #2
    48e4:	e7f5      	b.n	48d2 <nrfx_gpiote_trigger_enable+0x72>
    48e6:	bf00      	nop
    48e8:	200000f4 	.word	0x200000f4
    48ec:	40006000 	.word	0x40006000

000048f0 <nrfx_gpiote_trigger_disable>:
{
    48f0:	b508      	push	{r3, lr}
    48f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48f4:	f7ff fdcc 	bl	4490 <pin_in_use_by_te>
    48f8:	b1c0      	cbz	r0, 492c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    48fa:	f102 0108 	add.w	r1, r2, #8
    48fe:	4b0e      	ldr	r3, [pc, #56]	; (4938 <nrfx_gpiote_trigger_disable+0x48>)
    4900:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4904:	0799      	lsls	r1, r3, #30
    4906:	d411      	bmi.n	492c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4908:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    490a:	2201      	movs	r2, #1
    490c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    490e:	009b      	lsls	r3, r3, #2
    4910:	490a      	ldr	r1, [pc, #40]	; (493c <nrfx_gpiote_trigger_disable+0x4c>)
    4912:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4916:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    491a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    491e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4922:	f022 0203 	bic.w	r2, r2, #3
    4926:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    492a:	bd08      	pop	{r3, pc}
    492c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4930:	2100      	movs	r1, #0
    4932:	4610      	mov	r0, r2
    4934:	f002 b97a 	b.w	6c2c <nrf_gpio_cfg_sense_set>
    4938:	200000f4 	.word	0x200000f4
    493c:	40006000 	.word	0x40006000

00004940 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4940:	4b0e      	ldr	r3, [pc, #56]	; (497c <nrfx_gpiote_pin_uninit+0x3c>)
    4942:	f100 0208 	add.w	r2, r0, #8
{
    4946:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4948:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    494c:	07db      	lsls	r3, r3, #31
{
    494e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4950:	d511      	bpl.n	4976 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4952:	f7ff ffcd 	bl	48f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4956:	4620      	mov	r0, r4
    4958:	f7ff fdec 	bl	4534 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    495c:	a801      	add	r0, sp, #4
    495e:	9401      	str	r4, [sp, #4]
    4960:	f7ff fd88 	bl	4474 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4964:	9b01      	ldr	r3, [sp, #4]
    4966:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    496a:	2202      	movs	r2, #2
    496c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4970:	4803      	ldr	r0, [pc, #12]	; (4980 <nrfx_gpiote_pin_uninit+0x40>)
}
    4972:	b002      	add	sp, #8
    4974:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4976:	4803      	ldr	r0, [pc, #12]	; (4984 <nrfx_gpiote_pin_uninit+0x44>)
    4978:	e7fb      	b.n	4972 <nrfx_gpiote_pin_uninit+0x32>
    497a:	bf00      	nop
    497c:	200000f4 	.word	0x200000f4
    4980:	0bad0000 	.word	0x0bad0000
    4984:	0bad0004 	.word	0x0bad0004

00004988 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    498c:	4b64      	ldr	r3, [pc, #400]	; (4b20 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    498e:	4865      	ldr	r0, [pc, #404]	; (4b24 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4990:	4965      	ldr	r1, [pc, #404]	; (4b28 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    4992:	2600      	movs	r6, #0
{
    4994:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4996:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4998:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    499a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    499c:	b135      	cbz	r5, 49ac <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    499e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    49a2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49a4:	bf1e      	ittt	ne
    49a6:	601c      	strne	r4, [r3, #0]
    49a8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    49aa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    49ac:	3304      	adds	r3, #4
    49ae:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    49b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    49b4:	d1f1      	bne.n	499a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49b6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4b24 <nrfx_gpiote_irq_handler+0x19c>
    49ba:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    49be:	2b00      	cmp	r3, #0
    49c0:	f000 8091 	beq.w	4ae6 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    49c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    49c8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    49cc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    49ce:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    49d2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    49d6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    49d8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    49dc:	2700      	movs	r7, #0
            while (latch[i])
    49de:	f10d 0910 	add.w	r9, sp, #16
    49e2:	017b      	lsls	r3, r7, #5
    49e4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    49e6:	f04f 0a01 	mov.w	sl, #1
    49ea:	e049      	b.n	4a80 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    49ec:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49ee:	4a4f      	ldr	r2, [pc, #316]	; (4b2c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    49f0:	fa94 f4a4 	rbit	r4, r4
    49f4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    49f8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49fa:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    49fe:	08e0      	lsrs	r0, r4, #3
    4a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4a04:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4a06:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4a0a:	fa0a fc02 	lsl.w	ip, sl, r2
    4a0e:	f819 2000 	ldrb.w	r2, [r9, r0]
    4a12:	ea22 020c 	bic.w	r2, r2, ip
    4a16:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a1a:	a803      	add	r0, sp, #12
    4a1c:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4a20:	0899      	lsrs	r1, r3, #2
    4a22:	f7ff fd27 	bl	4474 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a26:	9a03      	ldr	r2, [sp, #12]
    4a28:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4a2c:	074b      	lsls	r3, r1, #29
    4a2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a32:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4a34:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4a38:	d529      	bpl.n	4a8e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4a3a:	4620      	mov	r0, r4
    4a3c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a3e:	b2d5      	uxtb	r5, r2
    4a40:	f7ff fd30 	bl	44a4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a44:	a803      	add	r0, sp, #12
    4a46:	9403      	str	r4, [sp, #12]
    4a48:	f7ff fd14 	bl	4474 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a4c:	9b03      	ldr	r3, [sp, #12]
    4a4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4a56:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4a5a:	429d      	cmp	r5, r3
    4a5c:	d107      	bne.n	4a6e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4a5e:	2100      	movs	r1, #0
    4a60:	4620      	mov	r0, r4
    4a62:	f002 f8e3 	bl	6c2c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4a66:	4629      	mov	r1, r5
    4a68:	4620      	mov	r0, r4
    4a6a:	f002 f8df 	bl	6c2c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a6e:	a803      	add	r0, sp, #12
    4a70:	9403      	str	r4, [sp, #12]
    4a72:	f7ff fcff 	bl	4474 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4a76:	9b03      	ldr	r3, [sp, #12]
    4a78:	fa0a f303 	lsl.w	r3, sl, r3
    4a7c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    4a80:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4a84:	2c00      	cmp	r4, #0
    4a86:	d1b1      	bne.n	49ec <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4a88:	b9cf      	cbnz	r7, 4abe <nrfx_gpiote_irq_handler+0x136>
    4a8a:	2701      	movs	r7, #1
    4a8c:	e7a9      	b.n	49e2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a8e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a90:	bf0c      	ite	eq
    4a92:	2103      	moveq	r1, #3
    4a94:	2102      	movne	r1, #2
    4a96:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a98:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a9a:	f002 f8c7 	bl	6c2c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a9e:	2d03      	cmp	r5, #3
    4aa0:	d004      	beq.n	4aac <nrfx_gpiote_irq_handler+0x124>
    4aa2:	9a01      	ldr	r2, [sp, #4]
    4aa4:	2a02      	cmp	r2, #2
    4aa6:	d106      	bne.n	4ab6 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4aa8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4aaa:	d1e0      	bne.n	4a6e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4aac:	4659      	mov	r1, fp
    4aae:	4620      	mov	r0, r4
    4ab0:	f7ff fcf8 	bl	44a4 <call_handler>
    4ab4:	e7db      	b.n	4a6e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4ab6:	2a03      	cmp	r2, #3
    4ab8:	d1d9      	bne.n	4a6e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4aba:	2d02      	cmp	r5, #2
    4abc:	e7f5      	b.n	4aaa <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4abe:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    4ac2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4ac6:	491a      	ldr	r1, [pc, #104]	; (4b30 <nrfx_gpiote_irq_handler+0x1a8>)
    4ac8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4acc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4ad0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4ad2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4ad6:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    4ada:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4adc:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4ae0:	4313      	orrs	r3, r2
    4ae2:	f47f af7b 	bne.w	49dc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4ae6:	2401      	movs	r4, #1
    while (mask)
    4ae8:	b916      	cbnz	r6, 4af0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4aea:	b007      	add	sp, #28
    4aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4af0:	fa96 f3a6 	rbit	r3, r6
    4af4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4af8:	fa04 f203 	lsl.w	r2, r4, r3
    4afc:	009b      	lsls	r3, r3, #2
    4afe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4b06:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4b0a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4b0e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4b12:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4b16:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4b1a:	f7ff fcc3 	bl	44a4 <call_handler>
    4b1e:	e7e3      	b.n	4ae8 <nrfx_gpiote_irq_handler+0x160>
    4b20:	40006100 	.word	0x40006100
    4b24:	40006000 	.word	0x40006000
    4b28:	40006120 	.word	0x40006120
    4b2c:	200000f4 	.word	0x200000f4
    4b30:	50000300 	.word	0x50000300

00004b34 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4b34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4b36:	4801      	ldr	r0, [pc, #4]	; (4b3c <nrfx_ppi_channel_alloc+0x8>)
    4b38:	f7ff bbbc 	b.w	42b4 <nrfx_flag32_alloc>
    4b3c:	20000170 	.word	0x20000170

00004b40 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4b40:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4b42:	4c11      	ldr	r4, [pc, #68]	; (4b88 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4b44:	4a11      	ldr	r2, [pc, #68]	; (4b8c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4b46:	4912      	ldr	r1, [pc, #72]	; (4b90 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4b48:	2303      	movs	r3, #3
    4b4a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4b4c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4b4e:	4b11      	ldr	r3, [pc, #68]	; (4b94 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4b50:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4b52:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4b58:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4b5a:	2300      	movs	r3, #0
    4b5c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4b5e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4b60:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4b62:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4b64:	4a0c      	ldr	r2, [pc, #48]	; (4b98 <_DoInit+0x58>)
    4b66:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4b68:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4b6a:	2210      	movs	r2, #16
    4b6c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4b6e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4b70:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4b72:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4b74:	f001 fd0d 	bl	6592 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4b78:	4908      	ldr	r1, [pc, #32]	; (4b9c <_DoInit+0x5c>)
    4b7a:	4620      	mov	r0, r4
    4b7c:	f001 fd09 	bl	6592 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4b80:	2320      	movs	r3, #32
    4b82:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4b84:	bd10      	pop	{r4, pc}
    4b86:	bf00      	nop
    4b88:	200009b4 	.word	0x200009b4
    4b8c:	00007e79 	.word	0x00007e79
    4b90:	00007e82 	.word	0x00007e82
    4b94:	20000c86 	.word	0x20000c86
    4b98:	20000c76 	.word	0x20000c76
    4b9c:	00007e86 	.word	0x00007e86

00004ba0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4ba4:	4f23      	ldr	r7, [pc, #140]	; (4c34 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4ba6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4baa:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4bac:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4bb0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    4bb2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4bb4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4bb6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4bb8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4bba:	d834      	bhi.n	4c26 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4bbc:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4bc0:	ebaa 0905 	sub.w	r9, sl, r5
    4bc4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4bc8:	4294      	cmp	r4, r2
    4bca:	d811      	bhi.n	4bf0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4bcc:	f04f 0918 	mov.w	r9, #24
    4bd0:	fb06 9309 	mla	r3, r6, r9, r9
    4bd4:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    4bd6:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4bd8:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4bda:	4641      	mov	r1, r8
    4bdc:	4428      	add	r0, r5
    4bde:	f001 fcfe 	bl	65de <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4be2:	fb09 7606 	mla	r6, r9, r6, r7
    4be6:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4be8:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4bea:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4bf0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    4bf2:	429c      	cmp	r4, r3
    4bf4:	d81b      	bhi.n	4c2e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4bf6:	fb00 bb0b 	mla	fp, r0, fp, fp
    4bfa:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4bfc:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4bfe:	f8db 0004 	ldr.w	r0, [fp, #4]
    4c02:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4c04:	4428      	add	r0, r5
    4c06:	f001 fcea 	bl	65de <memcpy>
      if (NumBytes) {
    4c0a:	ebb4 040a 	subs.w	r4, r4, sl
    4c0e:	d006      	beq.n	4c1e <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    4c10:	f8db 0004 	ldr.w	r0, [fp, #4]
    4c14:	4622      	mov	r2, r4
    4c16:	eb08 0109 	add.w	r1, r8, r9
    4c1a:	f001 fce0 	bl	65de <memcpy>
      pRing->WrOff = NumBytes;
    4c1e:	2018      	movs	r0, #24
    4c20:	fb00 7606 	mla	r6, r0, r6, r7
    4c24:	e7e0      	b.n	4be8 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    4c26:	3b01      	subs	r3, #1
    4c28:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4c2a:	42a3      	cmp	r3, r4
    4c2c:	d2ce      	bcs.n	4bcc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4c2e:	2000      	movs	r0, #0
    4c30:	e7dc      	b.n	4bec <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4c32:	bf00      	nop
    4c34:	200009b4 	.word	0x200009b4

00004c38 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4c38:	4b03      	ldr	r3, [pc, #12]	; (4c48 <SEGGER_RTT_HasDataUp+0x10>)
    4c3a:	2218      	movs	r2, #24
    4c3c:	fb02 3300 	mla	r3, r2, r0, r3
    4c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4c42:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4c44:	1a80      	subs	r0, r0, r2
    4c46:	4770      	bx	lr
    4c48:	200009b4 	.word	0x200009b4

00004c4c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c4c:	4b0e      	ldr	r3, [pc, #56]	; (4c88 <z_sys_init_run_level+0x3c>)
{
    4c4e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c50:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4c54:	3001      	adds	r0, #1
    4c56:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4c5a:	42a6      	cmp	r6, r4
    4c5c:	d800      	bhi.n	4c60 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4c5e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4c60:	e9d4 3500 	ldrd	r3, r5, [r4]
    4c64:	4628      	mov	r0, r5
    4c66:	4798      	blx	r3
		if (dev != NULL) {
    4c68:	b165      	cbz	r5, 4c84 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4c6a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4c6c:	b130      	cbz	r0, 4c7c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4c6e:	2800      	cmp	r0, #0
    4c70:	bfb8      	it	lt
    4c72:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4c74:	28ff      	cmp	r0, #255	; 0xff
    4c76:	bfa8      	it	ge
    4c78:	20ff      	movge	r0, #255	; 0xff
    4c7a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4c7c:	785a      	ldrb	r2, [r3, #1]
    4c7e:	f042 0201 	orr.w	r2, r2, #1
    4c82:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c84:	3408      	adds	r4, #8
    4c86:	e7e8      	b.n	4c5a <z_sys_init_run_level+0xe>
    4c88:	000074d4 	.word	0x000074d4

00004c8c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4c8c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4c8e:	4605      	mov	r5, r0
    4c90:	b910      	cbnz	r0, 4c98 <z_impl_device_get_binding+0xc>
		return NULL;
    4c92:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4c94:	4620      	mov	r0, r4
    4c96:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4c98:	7803      	ldrb	r3, [r0, #0]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d0f9      	beq.n	4c92 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c9e:	4c0e      	ldr	r4, [pc, #56]	; (4cd8 <z_impl_device_get_binding+0x4c>)
    4ca0:	4e0e      	ldr	r6, [pc, #56]	; (4cdc <z_impl_device_get_binding+0x50>)
    4ca2:	42b4      	cmp	r4, r6
    4ca4:	d108      	bne.n	4cb8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ca6:	4c0c      	ldr	r4, [pc, #48]	; (4cd8 <z_impl_device_get_binding+0x4c>)
    4ca8:	42b4      	cmp	r4, r6
    4caa:	d0f2      	beq.n	4c92 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4cac:	4620      	mov	r0, r4
    4cae:	f001 ffd4 	bl	6c5a <z_device_is_ready>
    4cb2:	b950      	cbnz	r0, 4cca <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4cb4:	3418      	adds	r4, #24
    4cb6:	e7f7      	b.n	4ca8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    4cb8:	4620      	mov	r0, r4
    4cba:	f001 ffce 	bl	6c5a <z_device_is_ready>
    4cbe:	b110      	cbz	r0, 4cc6 <z_impl_device_get_binding+0x3a>
    4cc0:	6823      	ldr	r3, [r4, #0]
    4cc2:	42ab      	cmp	r3, r5
    4cc4:	d0e6      	beq.n	4c94 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4cc6:	3418      	adds	r4, #24
    4cc8:	e7eb      	b.n	4ca2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4cca:	6821      	ldr	r1, [r4, #0]
    4ccc:	4628      	mov	r0, r5
    4cce:	f001 fc7a 	bl	65c6 <strcmp>
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d1ee      	bne.n	4cb4 <z_impl_device_get_binding+0x28>
    4cd6:	e7dd      	b.n	4c94 <z_impl_device_get_binding+0x8>
    4cd8:	00007030 	.word	0x00007030
    4cdc:	000070c0 	.word	0x000070c0

00004ce0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ce4:	4606      	mov	r6, r0
    4ce6:	b086      	sub	sp, #24
    4ce8:	460f      	mov	r7, r1
	__asm__ volatile(
    4cea:	f04f 0320 	mov.w	r3, #32
    4cee:	f3ef 8811 	mrs	r8, BASEPRI
    4cf2:	f383 8812 	msr	BASEPRI_MAX, r3
    4cf6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4cfa:	f000 fe0d 	bl	5918 <z_impl_z_current_get>
    4cfe:	2e04      	cmp	r6, #4
    4d00:	bf96      	itet	ls
    4d02:	4b22      	ldrls	r3, [pc, #136]	; (4d8c <z_fatal_error+0xac>)
    4d04:	4b22      	ldrhi	r3, [pc, #136]	; (4d90 <z_fatal_error+0xb0>)
    4d06:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4d0a:	4922      	ldr	r1, [pc, #136]	; (4d94 <z_fatal_error+0xb4>)
    4d0c:	9603      	str	r6, [sp, #12]
    4d0e:	2400      	movs	r4, #0
    4d10:	e9cd 3404 	strd	r3, r4, [sp, #16]
    4d14:	4b20      	ldr	r3, [pc, #128]	; (4d98 <z_fatal_error+0xb8>)
    4d16:	9400      	str	r4, [sp, #0]
    4d18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4d1c:	4605      	mov	r5, r0
    4d1e:	4623      	mov	r3, r4
    4d20:	2201      	movs	r2, #1
    4d22:	4620      	mov	r0, r4
    4d24:	f001 ffa3 	bl	6c6e <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4d28:	b16f      	cbz	r7, 4d46 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4d2a:	69fb      	ldr	r3, [r7, #28]
    4d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4d30:	b14b      	cbz	r3, 4d46 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    4d32:	4b1a      	ldr	r3, [pc, #104]	; (4d9c <z_fatal_error+0xbc>)
    4d34:	4917      	ldr	r1, [pc, #92]	; (4d94 <z_fatal_error+0xb4>)
    4d36:	9400      	str	r4, [sp, #0]
    4d38:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4d3c:	2201      	movs	r2, #1
    4d3e:	4623      	mov	r3, r4
    4d40:	4620      	mov	r0, r4
    4d42:	f001 ff94 	bl	6c6e <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4d46:	b12d      	cbz	r5, 4d54 <z_fatal_error+0x74>
    4d48:	4628      	mov	r0, r5
    4d4a:	f001 ffee 	bl	6d2a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4d4e:	b108      	cbz	r0, 4d54 <z_fatal_error+0x74>
    4d50:	7803      	ldrb	r3, [r0, #0]
    4d52:	b903      	cbnz	r3, 4d56 <z_fatal_error+0x76>
		thread_name = "unknown";
    4d54:	4812      	ldr	r0, [pc, #72]	; (4da0 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4d56:	4b13      	ldr	r3, [pc, #76]	; (4da4 <z_fatal_error+0xc4>)
    4d58:	9302      	str	r3, [sp, #8]
    4d5a:	2300      	movs	r3, #0
    4d5c:	e9cd 5003 	strd	r5, r0, [sp, #12]
    4d60:	e9cd 3300 	strd	r3, r3, [sp]
    4d64:	4618      	mov	r0, r3
    4d66:	2201      	movs	r2, #1
    4d68:	490a      	ldr	r1, [pc, #40]	; (4d94 <z_fatal_error+0xb4>)
    4d6a:	f001 ff80 	bl	6c6e <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4d6e:	4639      	mov	r1, r7
    4d70:	4630      	mov	r0, r6
    4d72:	f7ff f985 	bl	4080 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4d76:	f388 8811 	msr	BASEPRI, r8
    4d7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4d7e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4d80:	b006      	add	sp, #24
    4d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d86:	f7fd bee5 	b.w	2b54 <z_impl_k_thread_abort>
    4d8a:	bf00      	nop
    4d8c:	000074ec 	.word	0x000074ec
    4d90:	00007e8d 	.word	0x00007e8d
    4d94:	00007270 	.word	0x00007270
    4d98:	00007ea3 	.word	0x00007ea3
    4d9c:	00007ecb 	.word	0x00007ecb
    4da0:	00007e9b 	.word	0x00007e9b
    4da4:	00007eec 	.word	0x00007eec

00004da8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4da8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4daa:	4b0a      	ldr	r3, [pc, #40]	; (4dd4 <bg_thread_main+0x2c>)
    4dac:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4dae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4db0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4db2:	f7ff ff4b 	bl	4c4c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4db6:	f000 fff1 	bl	5d9c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4dba:	2003      	movs	r0, #3
    4dbc:	f7ff ff46 	bl	4c4c <z_sys_init_run_level>

	z_init_static_threads();
    4dc0:	f000 f93e 	bl	5040 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4dc4:	f7fb fcec 	bl	7a0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4dc8:	4a03      	ldr	r2, [pc, #12]	; (4dd8 <bg_thread_main+0x30>)
    4dca:	7b13      	ldrb	r3, [r2, #12]
    4dcc:	f023 0301 	bic.w	r3, r3, #1
    4dd0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	20001086 	.word	0x20001086
    4dd8:	200002e8 	.word	0x200002e8

00004ddc <z_bss_zero>:
{
    4ddc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4dde:	4803      	ldr	r0, [pc, #12]	; (4dec <z_bss_zero+0x10>)
    4de0:	4a03      	ldr	r2, [pc, #12]	; (4df0 <z_bss_zero+0x14>)
    4de2:	2100      	movs	r1, #0
    4de4:	1a12      	subs	r2, r2, r0
    4de6:	f001 ff52 	bl	6c8e <z_early_memset>
}
    4dea:	bd08      	pop	{r3, pc}
    4dec:	20000248 	.word	0x20000248
    4df0:	20001088 	.word	0x20001088

00004df4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4df4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4df6:	2300      	movs	r3, #0
{
    4df8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4dfa:	2201      	movs	r2, #1
    4dfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4e00:	4e13      	ldr	r6, [pc, #76]	; (4e50 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4e02:	4d14      	ldr	r5, [pc, #80]	; (4e54 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4e04:	9301      	str	r3, [sp, #4]
    4e06:	220f      	movs	r2, #15
    4e08:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4e0c:	4912      	ldr	r1, [pc, #72]	; (4e58 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4e0e:	2318      	movs	r3, #24
    4e10:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4e14:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4e18:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4e1a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    4e1e:	fb00 1104 	mla	r1, r0, r4, r1
    4e22:	4b0e      	ldr	r3, [pc, #56]	; (4e5c <z_init_cpu+0x68>)
    4e24:	9500      	str	r5, [sp, #0]
    4e26:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4e2a:	4630      	mov	r0, r6
    4e2c:	f000 f8d6 	bl	4fdc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4e30:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4e32:	480b      	ldr	r0, [pc, #44]	; (4e60 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4e34:	752c      	strb	r4, [r5, #20]
    4e36:	f023 0304 	bic.w	r3, r3, #4
    4e3a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4e3c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4e40:	fb03 0404 	mla	r4, r3, r4, r0
    4e44:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4e46:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4e48:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4e4a:	b006      	add	sp, #24
    4e4c:	bd70      	pop	{r4, r5, r6, pc}
    4e4e:	bf00      	nop
    4e50:	20000268 	.word	0x20000268
    4e54:	20000a5c 	.word	0x20000a5c
    4e58:	200014c0 	.word	0x200014c0
    4e5c:	000050f9 	.word	0x000050f9
    4e60:	20001620 	.word	0x20001620

00004e64 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4e64:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4e66:	4b2e      	ldr	r3, [pc, #184]	; (4f20 <z_cstart+0xbc>)
    4e68:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4e6a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4e6e:	4d2d      	ldr	r5, [pc, #180]	; (4f24 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4e70:	4e2d      	ldr	r6, [pc, #180]	; (4f28 <z_cstart+0xc4>)
    4e72:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e74:	4f2d      	ldr	r7, [pc, #180]	; (4f2c <z_cstart+0xc8>)
    4e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e7a:	2400      	movs	r4, #0
    4e7c:	616b      	str	r3, [r5, #20]
    4e7e:	23e0      	movs	r3, #224	; 0xe0
    4e80:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4e84:	77ec      	strb	r4, [r5, #31]
    4e86:	762c      	strb	r4, [r5, #24]
    4e88:	766c      	strb	r4, [r5, #25]
    4e8a:	76ac      	strb	r4, [r5, #26]
    4e8c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4e90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e92:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4e96:	626b      	str	r3, [r5, #36]	; 0x24
    4e98:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4e9c:	f7fd fdce 	bl	2a3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4ea0:	f7fd f994 	bl	21cc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ea8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4eaa:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4eac:	f7fd ff14 	bl	2cd8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4eb0:	f7fd fe66 	bl	2b80 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4eb4:	f7fc fc14 	bl	16e0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4eb8:	f240 1301 	movw	r3, #257	; 0x101
    4ebc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4ec0:	ab06      	add	r3, sp, #24
    4ec2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4ec4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4ec8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4eca:	f001 fec5 	bl	6c58 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4ece:	4620      	mov	r0, r4
    4ed0:	f7ff febc 	bl	4c4c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4ed4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4ed6:	4d16      	ldr	r5, [pc, #88]	; (4f30 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4ed8:	f7ff feb8 	bl	4c4c <z_sys_init_run_level>
	z_sched_init();
    4edc:	f000 fc6e 	bl	57bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4ee0:	4b14      	ldr	r3, [pc, #80]	; (4f34 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4ee2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4ee4:	9305      	str	r3, [sp, #20]
    4ee6:	2301      	movs	r3, #1
    4ee8:	4913      	ldr	r1, [pc, #76]	; (4f38 <z_cstart+0xd4>)
    4eea:	9400      	str	r4, [sp, #0]
    4eec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4ef4:	463b      	mov	r3, r7
    4ef6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4efa:	4628      	mov	r0, r5
    4efc:	f000 f86e 	bl	4fdc <z_setup_new_thread>
    4f00:	7b6a      	ldrb	r2, [r5, #13]
    4f02:	4606      	mov	r6, r0
    4f04:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4f08:	4628      	mov	r0, r5
    4f0a:	736a      	strb	r2, [r5, #13]
    4f0c:	f001 ff63 	bl	6dd6 <z_ready_thread>
	z_init_cpu(0);
    4f10:	4620      	mov	r0, r4
    4f12:	f7ff ff6f 	bl	4df4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4f16:	463a      	mov	r2, r7
    4f18:	4631      	mov	r1, r6
    4f1a:	4628      	mov	r0, r5
    4f1c:	f7fd faa0 	bl	2460 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4f20:	20001e40 	.word	0x20001e40
    4f24:	e000ed00 	.word	0xe000ed00
    4f28:	20000a5c 	.word	0x20000a5c
    4f2c:	00004da9 	.word	0x00004da9
    4f30:	200002e8 	.word	0x200002e8
    4f34:	00007f4e 	.word	0x00007f4e
    4f38:	200010a0 	.word	0x200010a0

00004f3c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4f3c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4f3e:	4b0e      	ldr	r3, [pc, #56]	; (4f78 <init_mem_slab_module+0x3c>)
    4f40:	4c0e      	ldr	r4, [pc, #56]	; (4f7c <init_mem_slab_module+0x40>)
    4f42:	42a3      	cmp	r3, r4
    4f44:	d301      	bcc.n	4f4a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4f46:	2000      	movs	r0, #0
	return rc;
}
    4f48:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4f4a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4f4e:	ea41 0200 	orr.w	r2, r1, r0
    4f52:	f012 0203 	ands.w	r2, r2, #3
    4f56:	d10b      	bne.n	4f70 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4f58:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4f5a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4f5c:	42aa      	cmp	r2, r5
    4f5e:	d101      	bne.n	4f64 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4f60:	331c      	adds	r3, #28
    4f62:	e7ee      	b.n	4f42 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4f64:	695e      	ldr	r6, [r3, #20]
    4f66:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4f68:	3201      	adds	r2, #1
		slab->free_list = p;
    4f6a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4f6c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4f6e:	e7f5      	b.n	4f5c <init_mem_slab_module+0x20>
	return rc;
    4f70:	f06f 0015 	mvn.w	r0, #21
    4f74:	e7e8      	b.n	4f48 <init_mem_slab_module+0xc>
    4f76:	bf00      	nop
    4f78:	200001f4 	.word	0x200001f4
    4f7c:	200001f4 	.word	0x200001f4

00004f80 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4f82:	460c      	mov	r4, r1
	__asm__ volatile(
    4f84:	f04f 0520 	mov.w	r5, #32
    4f88:	f3ef 8111 	mrs	r1, BASEPRI
    4f8c:	f385 8812 	msr	BASEPRI_MAX, r5
    4f90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4f94:	6945      	ldr	r5, [r0, #20]
    4f96:	b15d      	cbz	r5, 4fb0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4f98:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4f9a:	682b      	ldr	r3, [r5, #0]
    4f9c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4f9e:	6983      	ldr	r3, [r0, #24]
    4fa0:	3301      	adds	r3, #1
    4fa2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4fa4:	2000      	movs	r0, #0
	__asm__ volatile(
    4fa6:	f381 8811 	msr	BASEPRI, r1
    4faa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4fae:	e011      	b.n	4fd4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4fb0:	ea52 0c03 	orrs.w	ip, r2, r3
    4fb4:	d103      	bne.n	4fbe <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4fb6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4fb8:	f06f 000b 	mvn.w	r0, #11
    4fbc:	e7f3      	b.n	4fa6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4fbe:	e9cd 2300 	strd	r2, r3, [sp]
    4fc2:	4602      	mov	r2, r0
    4fc4:	3008      	adds	r0, #8
    4fc6:	f000 fb4f 	bl	5668 <z_pend_curr>
		if (result == 0) {
    4fca:	b918      	cbnz	r0, 4fd4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4fcc:	4b02      	ldr	r3, [pc, #8]	; (4fd8 <k_mem_slab_alloc+0x58>)
    4fce:	689b      	ldr	r3, [r3, #8]
    4fd0:	695b      	ldr	r3, [r3, #20]
    4fd2:	6023      	str	r3, [r4, #0]
}
    4fd4:	b003      	add	sp, #12
    4fd6:	bd30      	pop	{r4, r5, pc}
    4fd8:	20000a5c 	.word	0x20000a5c

00004fdc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4fdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4fe0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4fe2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4fe4:	2604      	movs	r6, #4
    4fe6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4fe8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4fea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4fec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4ff0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ff2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4ff4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4ffa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ffc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5000:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5002:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5006:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    500a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    500c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    500e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5010:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5014:	9202      	str	r2, [sp, #8]
    5016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5018:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    501a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    501c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    501e:	9200      	str	r2, [sp, #0]
    5020:	4642      	mov	r2, r8
{
    5022:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5024:	f7fd f9ea 	bl	23fc <arch_new_thread>
	if (!_current) {
    5028:	4b04      	ldr	r3, [pc, #16]	; (503c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    502a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    502c:	689b      	ldr	r3, [r3, #8]
    502e:	b103      	cbz	r3, 5032 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5032:	6723      	str	r3, [r4, #112]	; 0x70
}
    5034:	4640      	mov	r0, r8
    5036:	b004      	add	sp, #16
    5038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    503c:	20000a5c 	.word	0x20000a5c

00005040 <z_init_static_threads>:
{
    5040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5044:	4c29      	ldr	r4, [pc, #164]	; (50ec <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5046:	4d2a      	ldr	r5, [pc, #168]	; (50f0 <z_init_static_threads+0xb0>)
{
    5048:	b087      	sub	sp, #28
    504a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    504c:	42ae      	cmp	r6, r5
    504e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5052:	d30f      	bcc.n	5074 <z_init_static_threads+0x34>
	k_sched_lock();
    5054:	f000 f9c6 	bl	53e4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5058:	4c24      	ldr	r4, [pc, #144]	; (50ec <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    505a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 50f4 <z_init_static_threads+0xb4>
    505e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5062:	f240 37e7 	movw	r7, #999	; 0x3e7
    5066:	42ac      	cmp	r4, r5
    5068:	d320      	bcc.n	50ac <z_init_static_threads+0x6c>
}
    506a:	b007      	add	sp, #28
    506c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5070:	f000 bb88 	b.w	5784 <k_sched_unlock>
		z_setup_new_thread(
    5074:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5078:	9305      	str	r3, [sp, #20]
    507a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    507e:	9304      	str	r3, [sp, #16]
    5080:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5084:	9303      	str	r3, [sp, #12]
    5086:	f854 3c18 	ldr.w	r3, [r4, #-24]
    508a:	9302      	str	r3, [sp, #8]
    508c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5090:	9301      	str	r3, [sp, #4]
    5092:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5096:	9300      	str	r3, [sp, #0]
    5098:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    509c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    50a0:	f7ff ff9c 	bl	4fdc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    50a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    50a8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    50aa:	e7ce      	b.n	504a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    50ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    50ae:	1c5a      	adds	r2, r3, #1
    50b0:	d00d      	beq.n	50ce <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    50b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    50b6:	2100      	movs	r1, #0
    50b8:	4638      	mov	r0, r7
    50ba:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    50be:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    50c2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    50c6:	d104      	bne.n	50d2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    50c8:	4640      	mov	r0, r8
    50ca:	f000 fa71 	bl	55b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    50ce:	3430      	adds	r4, #48	; 0x30
    50d0:	e7c9      	b.n	5066 <z_init_static_threads+0x26>
    50d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50d6:	2300      	movs	r3, #0
    50d8:	f7fb f9f4 	bl	4c4 <__aeabi_uldivmod>
    50dc:	4602      	mov	r2, r0
    50de:	460b      	mov	r3, r1
    50e0:	f108 0018 	add.w	r0, r8, #24
    50e4:	4649      	mov	r1, r9
    50e6:	f000 fcd3 	bl	5a90 <z_add_timeout>
    50ea:	e7f0      	b.n	50ce <z_init_static_threads+0x8e>
    50ec:	200001f4 	.word	0x200001f4
    50f0:	200001f4 	.word	0x200001f4
    50f4:	00006df7 	.word	0x00006df7

000050f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    50f8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    50fa:	4c0b      	ldr	r4, [pc, #44]	; (5128 <idle+0x30>)
	return !z_sys_post_kernel;
    50fc:	4d0b      	ldr	r5, [pc, #44]	; (512c <idle+0x34>)
	__asm__ volatile(
    50fe:	f04f 0220 	mov.w	r2, #32
    5102:	f3ef 8311 	mrs	r3, BASEPRI
    5106:	f382 8812 	msr	BASEPRI_MAX, r2
    510a:	f3bf 8f6f 	isb	sy
    510e:	f001 ff01 	bl	6f14 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5112:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5114:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5116:	b913      	cbnz	r3, 511e <idle+0x26>
	arch_cpu_idle();
    5118:	f7fd f85e 	bl	21d8 <arch_cpu_idle>
}
    511c:	e7ef      	b.n	50fe <idle+0x6>
    511e:	f7fc feb1 	bl	1e84 <pm_system_suspend>
    5122:	2800      	cmp	r0, #0
    5124:	d1eb      	bne.n	50fe <idle+0x6>
    5126:	e7f7      	b.n	5118 <idle+0x20>
    5128:	20000a5c 	.word	0x20000a5c
    512c:	20001086 	.word	0x20001086

00005130 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5134:	4604      	mov	r4, r0
    5136:	4617      	mov	r7, r2
    5138:	461e      	mov	r6, r3
    513a:	f04f 0320 	mov.w	r3, #32
    513e:	f3ef 8811 	mrs	r8, BASEPRI
    5142:	f383 8812 	msr	BASEPRI_MAX, r3
    5146:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    514a:	68c3      	ldr	r3, [r0, #12]
    514c:	4a32      	ldr	r2, [pc, #200]	; (5218 <z_impl_k_mutex_lock+0xe8>)
    514e:	b16b      	cbz	r3, 516c <z_impl_k_mutex_lock+0x3c>
    5150:	6880      	ldr	r0, [r0, #8]
    5152:	6891      	ldr	r1, [r2, #8]
    5154:	4288      	cmp	r0, r1
    5156:	d019      	beq.n	518c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5158:	ea57 0306 	orrs.w	r3, r7, r6
    515c:	d118      	bne.n	5190 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    515e:	f388 8811 	msr	BASEPRI, r8
    5162:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5166:	f06f 000f 	mvn.w	r0, #15
    516a:	e00c      	b.n	5186 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    516c:	6891      	ldr	r1, [r2, #8]
    516e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5172:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5174:	3301      	adds	r3, #1
    5176:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5178:	6893      	ldr	r3, [r2, #8]
    517a:	60a3      	str	r3, [r4, #8]
    517c:	f388 8811 	msr	BASEPRI, r8
    5180:	f3bf 8f6f 	isb	sy
		return 0;
    5184:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5186:	b002      	add	sp, #8
    5188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    518c:	6921      	ldr	r1, [r4, #16]
    518e:	e7f0      	b.n	5172 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5190:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5194:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5198:	4299      	cmp	r1, r3
    519a:	bfa8      	it	ge
    519c:	4619      	movge	r1, r3
    519e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    51a2:	4291      	cmp	r1, r2
    51a4:	bfb8      	it	lt
    51a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    51a8:	428b      	cmp	r3, r1
    51aa:	dd2e      	ble.n	520a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    51ac:	f001 fdc6 	bl	6d3c <adjust_owner_prio.isra.0>
    51b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    51b2:	e9cd 7600 	strd	r7, r6, [sp]
    51b6:	4819      	ldr	r0, [pc, #100]	; (521c <z_impl_k_mutex_lock+0xec>)
    51b8:	4622      	mov	r2, r4
    51ba:	4641      	mov	r1, r8
    51bc:	f000 fa54 	bl	5668 <z_pend_curr>
	if (got_mutex == 0) {
    51c0:	2800      	cmp	r0, #0
    51c2:	d0e0      	beq.n	5186 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    51c4:	f04f 0320 	mov.w	r3, #32
    51c8:	f3ef 8611 	mrs	r6, BASEPRI
    51cc:	f383 8812 	msr	BASEPRI_MAX, r3
    51d0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    51d4:	6823      	ldr	r3, [r4, #0]
    51d6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51d8:	42a3      	cmp	r3, r4
    51da:	d00a      	beq.n	51f2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    51dc:	b14b      	cbz	r3, 51f2 <z_impl_k_mutex_lock+0xc2>
    51de:	f993 300e 	ldrsb.w	r3, [r3, #14]
    51e2:	4299      	cmp	r1, r3
    51e4:	bfa8      	it	ge
    51e6:	4619      	movge	r1, r3
    51e8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    51ec:	4299      	cmp	r1, r3
    51ee:	bfb8      	it	lt
    51f0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    51f2:	68a0      	ldr	r0, [r4, #8]
    51f4:	f001 fda2 	bl	6d3c <adjust_owner_prio.isra.0>
    51f8:	b900      	cbnz	r0, 51fc <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    51fa:	b145      	cbz	r5, 520e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    51fc:	4807      	ldr	r0, [pc, #28]	; (521c <z_impl_k_mutex_lock+0xec>)
    51fe:	4631      	mov	r1, r6
    5200:	f000 f8de 	bl	53c0 <z_reschedule>
	return -EAGAIN;
    5204:	f06f 000a 	mvn.w	r0, #10
    5208:	e7bd      	b.n	5186 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    520a:	2500      	movs	r5, #0
    520c:	e7d1      	b.n	51b2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    520e:	f386 8811 	msr	BASEPRI, r6
    5212:	f3bf 8f6f 	isb	sy
    5216:	e7f5      	b.n	5204 <z_impl_k_mutex_lock+0xd4>
    5218:	20000a5c 	.word	0x20000a5c
    521c:	20001087 	.word	0x20001087

00005220 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5220:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5222:	6883      	ldr	r3, [r0, #8]
{
    5224:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5226:	2b00      	cmp	r3, #0
    5228:	d032      	beq.n	5290 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    522a:	4a1c      	ldr	r2, [pc, #112]	; (529c <z_impl_k_mutex_unlock+0x7c>)
    522c:	6892      	ldr	r2, [r2, #8]
    522e:	4293      	cmp	r3, r2
    5230:	d131      	bne.n	5296 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5232:	7bda      	ldrb	r2, [r3, #15]
    5234:	3a01      	subs	r2, #1
    5236:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5238:	68c3      	ldr	r3, [r0, #12]
    523a:	2b01      	cmp	r3, #1
    523c:	d905      	bls.n	524a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    523e:	3b01      	subs	r3, #1
    5240:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5242:	f000 fa9f 	bl	5784 <k_sched_unlock>

	return 0;
    5246:	2000      	movs	r0, #0
}
    5248:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    524a:	f04f 0320 	mov.w	r3, #32
    524e:	f3ef 8511 	mrs	r5, BASEPRI
    5252:	f383 8812 	msr	BASEPRI_MAX, r3
    5256:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    525a:	6901      	ldr	r1, [r0, #16]
    525c:	6880      	ldr	r0, [r0, #8]
    525e:	f001 fd6d 	bl	6d3c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5262:	4620      	mov	r0, r4
    5264:	f001 fe28 	bl	6eb8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5268:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    526a:	b158      	cbz	r0, 5284 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    526c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5270:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5272:	2200      	movs	r2, #0
    5274:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5276:	f001 fdae 	bl	6dd6 <z_ready_thread>
		z_reschedule(&lock, key);
    527a:	4809      	ldr	r0, [pc, #36]	; (52a0 <z_impl_k_mutex_unlock+0x80>)
    527c:	4629      	mov	r1, r5
    527e:	f000 f89f 	bl	53c0 <z_reschedule>
    5282:	e7de      	b.n	5242 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5284:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5286:	f385 8811 	msr	BASEPRI, r5
    528a:	f3bf 8f6f 	isb	sy
    528e:	e7d8      	b.n	5242 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5290:	f06f 0015 	mvn.w	r0, #21
    5294:	e7d8      	b.n	5248 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    5296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    529a:	e7d5      	b.n	5248 <z_impl_k_mutex_unlock+0x28>
    529c:	20000a5c 	.word	0x20000a5c
    52a0:	20001087 	.word	0x20001087

000052a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    52a4:	b538      	push	{r3, r4, r5, lr}
    52a6:	4604      	mov	r4, r0
	__asm__ volatile(
    52a8:	f04f 0320 	mov.w	r3, #32
    52ac:	f3ef 8511 	mrs	r5, BASEPRI
    52b0:	f383 8812 	msr	BASEPRI_MAX, r3
    52b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    52b8:	f001 fdfe 	bl	6eb8 <z_unpend_first_thread>

	if (thread != NULL) {
    52bc:	b148      	cbz	r0, 52d2 <z_impl_k_sem_give+0x2e>
    52be:	2200      	movs	r2, #0
    52c0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    52c2:	f001 fd88 	bl	6dd6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    52c6:	4629      	mov	r1, r5
    52c8:	4805      	ldr	r0, [pc, #20]	; (52e0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    52ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    52ce:	f000 b877 	b.w	53c0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    52d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    52d6:	429a      	cmp	r2, r3
    52d8:	bf18      	it	ne
    52da:	3301      	addne	r3, #1
    52dc:	60a3      	str	r3, [r4, #8]
}
    52de:	e7f2      	b.n	52c6 <z_impl_k_sem_give+0x22>
    52e0:	20001087 	.word	0x20001087

000052e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    52e4:	b513      	push	{r0, r1, r4, lr}
    52e6:	f04f 0420 	mov.w	r4, #32
    52ea:	f3ef 8111 	mrs	r1, BASEPRI
    52ee:	f384 8812 	msr	BASEPRI_MAX, r4
    52f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    52f6:	6884      	ldr	r4, [r0, #8]
    52f8:	b144      	cbz	r4, 530c <z_impl_k_sem_take+0x28>
		sem->count--;
    52fa:	3c01      	subs	r4, #1
    52fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    52fe:	f381 8811 	msr	BASEPRI, r1
    5302:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5306:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5308:	b002      	add	sp, #8
    530a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    530c:	ea52 0403 	orrs.w	r4, r2, r3
    5310:	d106      	bne.n	5320 <z_impl_k_sem_take+0x3c>
    5312:	f381 8811 	msr	BASEPRI, r1
    5316:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    531a:	f06f 000f 	mvn.w	r0, #15
    531e:	e7f3      	b.n	5308 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5320:	e9cd 2300 	strd	r2, r3, [sp]
    5324:	4602      	mov	r2, r0
    5326:	4802      	ldr	r0, [pc, #8]	; (5330 <z_impl_k_sem_take+0x4c>)
    5328:	f000 f99e 	bl	5668 <z_pend_curr>
	return ret;
    532c:	e7ec      	b.n	5308 <z_impl_k_sem_take+0x24>
    532e:	bf00      	nop
    5330:	20001087 	.word	0x20001087

00005334 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5334:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5336:	4d07      	ldr	r5, [pc, #28]	; (5354 <z_reset_time_slice+0x20>)
    5338:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    533a:	b154      	cbz	r4, 5352 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    533c:	f7fe fe42 	bl	3fc4 <sys_clock_elapsed>
    5340:	4b05      	ldr	r3, [pc, #20]	; (5358 <z_reset_time_slice+0x24>)
    5342:	4404      	add	r4, r0
    5344:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5346:	6828      	ldr	r0, [r5, #0]
    5348:	2100      	movs	r1, #0
	}
}
    534a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    534e:	f001 bdf1 	b.w	6f34 <z_set_timeout_expiry>
}
    5352:	bd38      	pop	{r3, r4, r5, pc}
    5354:	20000a8c 	.word	0x20000a8c
    5358:	20000a5c 	.word	0x20000a5c

0000535c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    535e:	4604      	mov	r4, r0
    5360:	460d      	mov	r5, r1
	__asm__ volatile(
    5362:	f04f 0320 	mov.w	r3, #32
    5366:	f3ef 8711 	mrs	r7, BASEPRI
    536a:	f383 8812 	msr	BASEPRI_MAX, r3
    536e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5372:	4e10      	ldr	r6, [pc, #64]	; (53b4 <k_sched_time_slice_set+0x58>)
    5374:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5376:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    537a:	f240 30e7 	movw	r0, #999	; 0x3e7
    537e:	6131      	str	r1, [r6, #16]
    5380:	2300      	movs	r3, #0
    5382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5386:	fbe4 010c 	umlal	r0, r1, r4, ip
    538a:	f7fb f89b 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    538e:	2c00      	cmp	r4, #0
    5390:	4b09      	ldr	r3, [pc, #36]	; (53b8 <k_sched_time_slice_set+0x5c>)
    5392:	dc0a      	bgt.n	53aa <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5394:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5396:	4b09      	ldr	r3, [pc, #36]	; (53bc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5398:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    539a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    539c:	f7ff ffca 	bl	5334 <z_reset_time_slice>
	__asm__ volatile(
    53a0:	f387 8811 	msr	BASEPRI, r7
    53a4:	f3bf 8f6f 	isb	sy
	}
}
    53a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    53aa:	2802      	cmp	r0, #2
    53ac:	bfb8      	it	lt
    53ae:	2002      	movlt	r0, #2
    53b0:	e7f0      	b.n	5394 <k_sched_time_slice_set+0x38>
    53b2:	bf00      	nop
    53b4:	20000a5c 	.word	0x20000a5c
    53b8:	20000a8c 	.word	0x20000a8c
    53bc:	20000a88 	.word	0x20000a88

000053c0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    53c0:	b949      	cbnz	r1, 53d6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    53c2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    53c6:	b930      	cbnz	r0, 53d6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    53c8:	4b05      	ldr	r3, [pc, #20]	; (53e0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    53ca:	69da      	ldr	r2, [r3, #28]
    53cc:	689b      	ldr	r3, [r3, #8]
    53ce:	429a      	cmp	r2, r3
    53d0:	d001      	beq.n	53d6 <z_reschedule+0x16>
	ret = arch_swap(key);
    53d2:	f7fc bfbf 	b.w	2354 <arch_swap>
    53d6:	f381 8811 	msr	BASEPRI, r1
    53da:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    53de:	4770      	bx	lr
    53e0:	20000a5c 	.word	0x20000a5c

000053e4 <k_sched_lock>:
	__asm__ volatile(
    53e4:	f04f 0320 	mov.w	r3, #32
    53e8:	f3ef 8111 	mrs	r1, BASEPRI
    53ec:	f383 8812 	msr	BASEPRI_MAX, r3
    53f0:	f3bf 8f6f 	isb	sy
    53f4:	4b04      	ldr	r3, [pc, #16]	; (5408 <k_sched_lock+0x24>)
    53f6:	689a      	ldr	r2, [r3, #8]
    53f8:	7bd3      	ldrb	r3, [r2, #15]
    53fa:	3b01      	subs	r3, #1
    53fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    53fe:	f381 8811 	msr	BASEPRI, r1
    5402:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5406:	4770      	bx	lr
    5408:	20000a5c 	.word	0x20000a5c

0000540c <update_cache>:
{
    540c:	b538      	push	{r3, r4, r5, lr}
    540e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5410:	480c      	ldr	r0, [pc, #48]	; (5444 <update_cache+0x38>)
    5412:	4d0d      	ldr	r5, [pc, #52]	; (5448 <update_cache+0x3c>)
    5414:	f001 fcd9 	bl	6dca <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5418:	4604      	mov	r4, r0
    541a:	b900      	cbnz	r0, 541e <update_cache+0x12>
    541c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    541e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5420:	b94a      	cbnz	r2, 5436 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5422:	7b5a      	ldrb	r2, [r3, #13]
    5424:	06d2      	lsls	r2, r2, #27
    5426:	d106      	bne.n	5436 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5428:	69a2      	ldr	r2, [r4, #24]
    542a:	b922      	cbnz	r2, 5436 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    542c:	89da      	ldrh	r2, [r3, #14]
    542e:	2a7f      	cmp	r2, #127	; 0x7f
    5430:	d901      	bls.n	5436 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5432:	61eb      	str	r3, [r5, #28]
}
    5434:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5436:	429c      	cmp	r4, r3
    5438:	d002      	beq.n	5440 <update_cache+0x34>
			z_reset_time_slice(thread);
    543a:	4620      	mov	r0, r4
    543c:	f7ff ff7a 	bl	5334 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5440:	61ec      	str	r4, [r5, #28]
}
    5442:	e7f7      	b.n	5434 <update_cache+0x28>
    5444:	20000a7c 	.word	0x20000a7c
    5448:	20000a5c 	.word	0x20000a5c

0000544c <move_thread_to_end_of_prio_q>:
{
    544c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    544e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5452:	7b43      	ldrb	r3, [r0, #13]
    5454:	2a00      	cmp	r2, #0
{
    5456:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5458:	da04      	bge.n	5464 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    545a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    545e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5460:	f001 fc7b 	bl	6d5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5464:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5466:	4a15      	ldr	r2, [pc, #84]	; (54bc <move_thread_to_end_of_prio_q+0x70>)
    5468:	f063 037f 	orn	r3, r3, #127	; 0x7f
    546c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    546e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5472:	f102 0520 	add.w	r5, r2, #32
    5476:	42ab      	cmp	r3, r5
    5478:	d01b      	beq.n	54b2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    547a:	b1d3      	cbz	r3, 54b2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    547c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5480:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5484:	4286      	cmp	r6, r0
    5486:	d00f      	beq.n	54a8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5488:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    548a:	2800      	cmp	r0, #0
    548c:	dd0c      	ble.n	54a8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    548e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5490:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5494:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5496:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5498:	6890      	ldr	r0, [r2, #8]
    549a:	1a43      	subs	r3, r0, r1
    549c:	4258      	negs	r0, r3
}
    549e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    54a2:	4158      	adcs	r0, r3
    54a4:	f7ff bfb2 	b.w	540c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    54a8:	42a3      	cmp	r3, r4
    54aa:	d002      	beq.n	54b2 <move_thread_to_end_of_prio_q+0x66>
    54ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    54ae:	2b00      	cmp	r3, #0
    54b0:	d1e6      	bne.n	5480 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    54b2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    54b6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    54b8:	6251      	str	r1, [r2, #36]	; 0x24
}
    54ba:	e7ed      	b.n	5498 <move_thread_to_end_of_prio_q+0x4c>
    54bc:	20000a5c 	.word	0x20000a5c

000054c0 <z_time_slice>:
{
    54c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    54c2:	f04f 0320 	mov.w	r3, #32
    54c6:	f3ef 8511 	mrs	r5, BASEPRI
    54ca:	f383 8812 	msr	BASEPRI_MAX, r3
    54ce:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    54d2:	4b17      	ldr	r3, [pc, #92]	; (5530 <z_time_slice+0x70>)
    54d4:	4a17      	ldr	r2, [pc, #92]	; (5534 <z_time_slice+0x74>)
    54d6:	689c      	ldr	r4, [r3, #8]
    54d8:	6811      	ldr	r1, [r2, #0]
    54da:	428c      	cmp	r4, r1
    54dc:	d107      	bne.n	54ee <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    54de:	4620      	mov	r0, r4
    54e0:	f7ff ff28 	bl	5334 <z_reset_time_slice>
	__asm__ volatile(
    54e4:	f385 8811 	msr	BASEPRI, r5
    54e8:	f3bf 8f6f 	isb	sy
}
    54ec:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    54ee:	2100      	movs	r1, #0
    54f0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    54f2:	4a11      	ldr	r2, [pc, #68]	; (5538 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    54f4:	6812      	ldr	r2, [r2, #0]
    54f6:	b1c2      	cbz	r2, 552a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    54f8:	89e2      	ldrh	r2, [r4, #14]
    54fa:	2a7f      	cmp	r2, #127	; 0x7f
    54fc:	d815      	bhi.n	552a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    54fe:	7b62      	ldrb	r2, [r4, #13]
    5500:	06d2      	lsls	r2, r2, #27
    5502:	d112      	bne.n	552a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5504:	4a0d      	ldr	r2, [pc, #52]	; (553c <z_time_slice+0x7c>)
    5506:	f994 100e 	ldrsb.w	r1, [r4, #14]
    550a:	6812      	ldr	r2, [r2, #0]
    550c:	4291      	cmp	r1, r2
    550e:	db0c      	blt.n	552a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5510:	4a0b      	ldr	r2, [pc, #44]	; (5540 <z_time_slice+0x80>)
    5512:	4294      	cmp	r4, r2
    5514:	d009      	beq.n	552a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5516:	691a      	ldr	r2, [r3, #16]
    5518:	4282      	cmp	r2, r0
    551a:	dc03      	bgt.n	5524 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    551c:	4620      	mov	r0, r4
    551e:	f7ff ff95 	bl	544c <move_thread_to_end_of_prio_q>
    5522:	e7dc      	b.n	54de <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5524:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5526:	611a      	str	r2, [r3, #16]
    5528:	e7dc      	b.n	54e4 <z_time_slice+0x24>
    552a:	2200      	movs	r2, #0
    552c:	e7fb      	b.n	5526 <z_time_slice+0x66>
    552e:	bf00      	nop
    5530:	20000a5c 	.word	0x20000a5c
    5534:	20000a84 	.word	0x20000a84
    5538:	20000a8c 	.word	0x20000a8c
    553c:	20000a88 	.word	0x20000a88
    5540:	20000268 	.word	0x20000268

00005544 <ready_thread>:
{
    5544:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5546:	f990 200d 	ldrsb.w	r2, [r0, #13]
    554a:	7b43      	ldrb	r3, [r0, #13]
    554c:	2a00      	cmp	r2, #0
    554e:	db2a      	blt.n	55a6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5550:	06da      	lsls	r2, r3, #27
    5552:	d128      	bne.n	55a6 <ready_thread+0x62>
    5554:	6982      	ldr	r2, [r0, #24]
    5556:	bb32      	cbnz	r2, 55a6 <ready_thread+0x62>
	return list->head == list;
    5558:	4a14      	ldr	r2, [pc, #80]	; (55ac <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    555a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    555e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5560:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5564:	f102 0520 	add.w	r5, r2, #32
    5568:	42ab      	cmp	r3, r5
    556a:	d017      	beq.n	559c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    556c:	b1b3      	cbz	r3, 559c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    556e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5572:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5576:	428e      	cmp	r6, r1
    5578:	d00b      	beq.n	5592 <ready_thread+0x4e>
		return b2 - b1;
    557a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    557c:	2900      	cmp	r1, #0
    557e:	dd08      	ble.n	5592 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5580:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5582:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5586:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5588:	6058      	str	r0, [r3, #4]
}
    558a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    558c:	2000      	movs	r0, #0
    558e:	f7ff bf3d 	b.w	540c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5592:	42a3      	cmp	r3, r4
    5594:	d002      	beq.n	559c <ready_thread+0x58>
    5596:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5598:	2b00      	cmp	r3, #0
    559a:	d1ea      	bne.n	5572 <ready_thread+0x2e>
	node->prev = tail;
    559c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    55a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    55a2:	6250      	str	r0, [r2, #36]	; 0x24
}
    55a4:	e7f1      	b.n	558a <ready_thread+0x46>
}
    55a6:	bc70      	pop	{r4, r5, r6}
    55a8:	4770      	bx	lr
    55aa:	bf00      	nop
    55ac:	20000a5c 	.word	0x20000a5c

000055b0 <z_sched_start>:
{
    55b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    55b2:	f04f 0220 	mov.w	r2, #32
    55b6:	f3ef 8411 	mrs	r4, BASEPRI
    55ba:	f382 8812 	msr	BASEPRI_MAX, r2
    55be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    55c2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    55c4:	0751      	lsls	r1, r2, #29
    55c6:	d404      	bmi.n	55d2 <z_sched_start+0x22>
	__asm__ volatile(
    55c8:	f384 8811 	msr	BASEPRI, r4
    55cc:	f3bf 8f6f 	isb	sy
}
    55d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    55d2:	f022 0204 	bic.w	r2, r2, #4
    55d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    55d8:	f7ff ffb4 	bl	5544 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    55dc:	4621      	mov	r1, r4
    55de:	4802      	ldr	r0, [pc, #8]	; (55e8 <z_sched_start+0x38>)
}
    55e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    55e4:	f7ff beec 	b.w	53c0 <z_reschedule>
    55e8:	20001087 	.word	0x20001087

000055ec <unready_thread>:
{
    55ec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    55ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    55f2:	7b43      	ldrb	r3, [r0, #13]
    55f4:	2a00      	cmp	r2, #0
{
    55f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    55f8:	da04      	bge.n	5604 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    55fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5600:	f001 fbab 	bl	6d5a <sys_dlist_remove>
	update_cache(thread == _current);
    5604:	4b04      	ldr	r3, [pc, #16]	; (5618 <unready_thread+0x2c>)
    5606:	6898      	ldr	r0, [r3, #8]
    5608:	1a43      	subs	r3, r0, r1
    560a:	4258      	negs	r0, r3
    560c:	4158      	adcs	r0, r3
}
    560e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5612:	f7ff befb 	b.w	540c <update_cache>
    5616:	bf00      	nop
    5618:	20000a5c 	.word	0x20000a5c

0000561c <pend>:
{
    561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5620:	4606      	mov	r6, r0
    5622:	4615      	mov	r5, r2
    5624:	461c      	mov	r4, r3
	__asm__ volatile(
    5626:	f04f 0320 	mov.w	r3, #32
    562a:	f3ef 8711 	mrs	r7, BASEPRI
    562e:	f383 8812 	msr	BASEPRI_MAX, r3
    5632:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5636:	f001 fc00 	bl	6e3a <add_to_waitq_locked>
	__asm__ volatile(
    563a:	f387 8811 	msr	BASEPRI, r7
    563e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5642:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5646:	bf08      	it	eq
    5648:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    564c:	d008      	beq.n	5660 <pend+0x44>
    564e:	462a      	mov	r2, r5
    5650:	4623      	mov	r3, r4
    5652:	f106 0018 	add.w	r0, r6, #24
    5656:	4903      	ldr	r1, [pc, #12]	; (5664 <pend+0x48>)
}
    5658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    565c:	f000 ba18 	b.w	5a90 <z_add_timeout>
    5660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5664:	00006df7 	.word	0x00006df7

00005668 <z_pend_curr>:
{
    5668:	b510      	push	{r4, lr}
	pending_current = _current;
    566a:	4b07      	ldr	r3, [pc, #28]	; (5688 <z_pend_curr+0x20>)
    566c:	6898      	ldr	r0, [r3, #8]
    566e:	4b07      	ldr	r3, [pc, #28]	; (568c <z_pend_curr+0x24>)
{
    5670:	460c      	mov	r4, r1
	pending_current = _current;
    5672:	6018      	str	r0, [r3, #0]
{
    5674:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    567a:	f7ff ffcf 	bl	561c <pend>
    567e:	4620      	mov	r0, r4
}
    5680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5684:	f7fc be66 	b.w	2354 <arch_swap>
    5688:	20000a5c 	.word	0x20000a5c
    568c:	20000a84 	.word	0x20000a84

00005690 <z_set_prio>:
{
    5690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5692:	4604      	mov	r4, r0
	__asm__ volatile(
    5694:	f04f 0320 	mov.w	r3, #32
    5698:	f3ef 8611 	mrs	r6, BASEPRI
    569c:	f383 8812 	msr	BASEPRI_MAX, r3
    56a0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    56a4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    56a6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    56a8:	b249      	sxtb	r1, r1
    56aa:	d133      	bne.n	5714 <z_set_prio+0x84>
		if (need_sched) {
    56ac:	6982      	ldr	r2, [r0, #24]
    56ae:	bb8a      	cbnz	r2, 5714 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    56b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    56b4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    56b6:	f001 fb50 	bl	6d5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    56ba:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    56bc:	4a17      	ldr	r2, [pc, #92]	; (571c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    56be:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    56c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56c4:	7343      	strb	r3, [r0, #13]
    56c6:	4610      	mov	r0, r2
    56c8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56cc:	4283      	cmp	r3, r0
    56ce:	d01b      	beq.n	5708 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56d0:	b1d3      	cbz	r3, 5708 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    56d2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    56d4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    56d8:	42a9      	cmp	r1, r5
    56da:	d010      	beq.n	56fe <z_set_prio+0x6e>
		return b2 - b1;
    56dc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    56de:	2d00      	cmp	r5, #0
    56e0:	dd0d      	ble.n	56fe <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    56e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    56e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    56e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    56ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
    56ec:	2001      	movs	r0, #1
    56ee:	f7ff fe8d 	bl	540c <update_cache>
    56f2:	2001      	movs	r0, #1
	__asm__ volatile(
    56f4:	f386 8811 	msr	BASEPRI, r6
    56f8:	f3bf 8f6f 	isb	sy
}
    56fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    56fe:	42bb      	cmp	r3, r7
    5700:	d002      	beq.n	5708 <z_set_prio+0x78>
    5702:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5704:	2b00      	cmp	r3, #0
    5706:	d1e5      	bne.n	56d4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5708:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    570a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    570e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5710:	6254      	str	r4, [r2, #36]	; 0x24
}
    5712:	e7eb      	b.n	56ec <z_set_prio+0x5c>
			thread->base.prio = prio;
    5714:	73a1      	strb	r1, [r4, #14]
    5716:	2000      	movs	r0, #0
    5718:	e7ec      	b.n	56f4 <z_set_prio+0x64>
    571a:	bf00      	nop
    571c:	20000a5c 	.word	0x20000a5c

00005720 <z_impl_k_thread_suspend>:
{
    5720:	b570      	push	{r4, r5, r6, lr}
    5722:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5724:	3018      	adds	r0, #24
    5726:	f001 fbdf 	bl	6ee8 <z_abort_timeout>
	__asm__ volatile(
    572a:	f04f 0320 	mov.w	r3, #32
    572e:	f3ef 8611 	mrs	r6, BASEPRI
    5732:	f383 8812 	msr	BASEPRI_MAX, r3
    5736:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    573a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    573e:	7b63      	ldrb	r3, [r4, #13]
    5740:	2a00      	cmp	r2, #0
    5742:	da05      	bge.n	5750 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5748:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    574a:	4620      	mov	r0, r4
    574c:	f001 fb05 	bl	6d5a <sys_dlist_remove>
		update_cache(thread == _current);
    5750:	4d0b      	ldr	r5, [pc, #44]	; (5780 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5752:	7b63      	ldrb	r3, [r4, #13]
    5754:	68a8      	ldr	r0, [r5, #8]
    5756:	f043 0310 	orr.w	r3, r3, #16
    575a:	7363      	strb	r3, [r4, #13]
    575c:	1b03      	subs	r3, r0, r4
    575e:	4258      	negs	r0, r3
    5760:	4158      	adcs	r0, r3
    5762:	f7ff fe53 	bl	540c <update_cache>
	__asm__ volatile(
    5766:	f386 8811 	msr	BASEPRI, r6
    576a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    576e:	68ab      	ldr	r3, [r5, #8]
    5770:	42a3      	cmp	r3, r4
    5772:	d103      	bne.n	577c <z_impl_k_thread_suspend+0x5c>
}
    5774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5778:	f001 bb1d 	b.w	6db6 <z_reschedule_unlocked>
}
    577c:	bd70      	pop	{r4, r5, r6, pc}
    577e:	bf00      	nop
    5780:	20000a5c 	.word	0x20000a5c

00005784 <k_sched_unlock>:
{
    5784:	b510      	push	{r4, lr}
	__asm__ volatile(
    5786:	f04f 0320 	mov.w	r3, #32
    578a:	f3ef 8411 	mrs	r4, BASEPRI
    578e:	f383 8812 	msr	BASEPRI_MAX, r3
    5792:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5796:	4b08      	ldr	r3, [pc, #32]	; (57b8 <k_sched_unlock+0x34>)
    5798:	689a      	ldr	r2, [r3, #8]
    579a:	7bd3      	ldrb	r3, [r2, #15]
    579c:	3301      	adds	r3, #1
    579e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    57a0:	2000      	movs	r0, #0
    57a2:	f7ff fe33 	bl	540c <update_cache>
	__asm__ volatile(
    57a6:	f384 8811 	msr	BASEPRI, r4
    57aa:	f3bf 8f6f 	isb	sy
}
    57ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    57b2:	f001 bb00 	b.w	6db6 <z_reschedule_unlocked>
    57b6:	bf00      	nop
    57b8:	20000a5c 	.word	0x20000a5c

000057bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    57bc:	4b04      	ldr	r3, [pc, #16]	; (57d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    57be:	2100      	movs	r1, #0
    57c0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    57c4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    57c8:	4608      	mov	r0, r1
    57ca:	f7ff bdc7 	b.w	535c <k_sched_time_slice_set>
    57ce:	bf00      	nop
    57d0:	20000a5c 	.word	0x20000a5c

000057d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    57d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    57d6:	f04f 0320 	mov.w	r3, #32
    57da:	f3ef 8511 	mrs	r5, BASEPRI
    57de:	f383 8812 	msr	BASEPRI_MAX, r3
    57e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    57e6:	491a      	ldr	r1, [pc, #104]	; (5850 <z_impl_k_yield+0x7c>)
    57e8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    57ea:	7b43      	ldrb	r3, [r0, #13]
    57ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57f0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    57f2:	f001 fab2 	bl	6d5a <sys_dlist_remove>
	}
	queue_thread(_current);
    57f6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    57f8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    57fa:	4608      	mov	r0, r1
    57fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5800:	735a      	strb	r2, [r3, #13]
    5802:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5806:	4282      	cmp	r2, r0
    5808:	d01c      	beq.n	5844 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    580a:	b1da      	cbz	r2, 5844 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    580c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    580e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5812:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5816:	42a6      	cmp	r6, r4
    5818:	d00f      	beq.n	583a <z_impl_k_yield+0x66>
		return b2 - b1;
    581a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    581c:	2c00      	cmp	r4, #0
    581e:	dd0c      	ble.n	583a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5820:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5822:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5826:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5828:	6053      	str	r3, [r2, #4]
	update_cache(1);
    582a:	2001      	movs	r0, #1
    582c:	f7ff fdee 	bl	540c <update_cache>
    5830:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5836:	f7fc bd8d 	b.w	2354 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    583a:	42ba      	cmp	r2, r7
    583c:	d002      	beq.n	5844 <z_impl_k_yield+0x70>
    583e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5840:	2a00      	cmp	r2, #0
    5842:	d1e6      	bne.n	5812 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5844:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5846:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    584a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    584c:	624b      	str	r3, [r1, #36]	; 0x24
}
    584e:	e7ec      	b.n	582a <z_impl_k_yield+0x56>
    5850:	20000a5c 	.word	0x20000a5c

00005854 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5854:	ea50 0301 	orrs.w	r3, r0, r1
{
    5858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    585c:	4605      	mov	r5, r0
    585e:	460e      	mov	r6, r1
	if (ticks == 0) {
    5860:	d103      	bne.n	586a <z_tick_sleep+0x16>
	z_impl_k_yield();
    5862:	f7ff ffb7 	bl	57d4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5866:	2000      	movs	r0, #0
    5868:	e033      	b.n	58d2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    586a:	f06f 0401 	mvn.w	r4, #1
    586e:	1a24      	subs	r4, r4, r0
    5870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5874:	eb63 0301 	sbc.w	r3, r3, r1
    5878:	2c01      	cmp	r4, #1
    587a:	f173 0300 	sbcs.w	r3, r3, #0
    587e:	da02      	bge.n	5886 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5880:	f001 fb72 	bl	6f68 <sys_clock_tick_get_32>
    5884:	1944      	adds	r4, r0, r5
    5886:	f04f 0320 	mov.w	r3, #32
    588a:	f3ef 8811 	mrs	r8, BASEPRI
    588e:	f383 8812 	msr	BASEPRI_MAX, r3
    5892:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5896:	4f10      	ldr	r7, [pc, #64]	; (58d8 <z_tick_sleep+0x84>)
    5898:	4b10      	ldr	r3, [pc, #64]	; (58dc <z_tick_sleep+0x88>)
    589a:	68b8      	ldr	r0, [r7, #8]
    589c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    589e:	f7ff fea5 	bl	55ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    58a2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    58a4:	490e      	ldr	r1, [pc, #56]	; (58e0 <z_tick_sleep+0x8c>)
    58a6:	462a      	mov	r2, r5
    58a8:	4633      	mov	r3, r6
    58aa:	3018      	adds	r0, #24
    58ac:	f000 f8f0 	bl	5a90 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    58b0:	68ba      	ldr	r2, [r7, #8]
    58b2:	7b53      	ldrb	r3, [r2, #13]
    58b4:	f043 0310 	orr.w	r3, r3, #16
    58b8:	7353      	strb	r3, [r2, #13]
    58ba:	4640      	mov	r0, r8
    58bc:	f7fc fd4a 	bl	2354 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    58c0:	f001 fb52 	bl	6f68 <sys_clock_tick_get_32>
    58c4:	1a20      	subs	r0, r4, r0
    58c6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    58ca:	2801      	cmp	r0, #1
    58cc:	f173 0300 	sbcs.w	r3, r3, #0
    58d0:	dbc9      	blt.n	5866 <z_tick_sleep+0x12>
}
    58d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58d6:	bf00      	nop
    58d8:	20000a5c 	.word	0x20000a5c
    58dc:	20000a84 	.word	0x20000a84
    58e0:	00006df7 	.word	0x00006df7

000058e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    58e8:	bf08      	it	eq
    58ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    58ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58f0:	d106      	bne.n	5900 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    58f2:	4b08      	ldr	r3, [pc, #32]	; (5914 <z_impl_k_sleep+0x30>)
    58f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    58f6:	f7ff ff13 	bl	5720 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    58fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    58fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5900:	f7ff ffa8 	bl	5854 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5908:	fb80 0303 	smull	r0, r3, r0, r3
    590c:	0bc0      	lsrs	r0, r0, #15
    590e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5912:	e7f4      	b.n	58fe <z_impl_k_sleep+0x1a>
    5914:	20000a5c 	.word	0x20000a5c

00005918 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5918:	4b01      	ldr	r3, [pc, #4]	; (5920 <z_impl_z_current_get+0x8>)
    591a:	6898      	ldr	r0, [r3, #8]
    591c:	4770      	bx	lr
    591e:	bf00      	nop
    5920:	20000a5c 	.word	0x20000a5c

00005924 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5928:	4604      	mov	r4, r0
    592a:	f04f 0320 	mov.w	r3, #32
    592e:	f3ef 8611 	mrs	r6, BASEPRI
    5932:	f383 8812 	msr	BASEPRI_MAX, r3
    5936:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    593a:	7b43      	ldrb	r3, [r0, #13]
    593c:	071a      	lsls	r2, r3, #28
    593e:	d505      	bpl.n	594c <z_thread_abort+0x28>
	__asm__ volatile(
    5940:	f386 8811 	msr	BASEPRI, r6
    5944:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    594c:	f023 0220 	bic.w	r2, r3, #32
    5950:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5954:	09d2      	lsrs	r2, r2, #7
    5956:	d120      	bne.n	599a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5958:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    595a:	68a3      	ldr	r3, [r4, #8]
    595c:	b113      	cbz	r3, 5964 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    595e:	4620      	mov	r0, r4
    5960:	f001 fa03 	bl	6d6a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5964:	f104 0018 	add.w	r0, r4, #24
    5968:	f001 fabe 	bl	6ee8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    596c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5970:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5974:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5976:	42bd      	cmp	r5, r7
    5978:	d000      	beq.n	597c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    597a:	b9b5      	cbnz	r5, 59aa <z_thread_abort+0x86>
		update_cache(1);
    597c:	2001      	movs	r0, #1
    597e:	f7ff fd45 	bl	540c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5982:	4b10      	ldr	r3, [pc, #64]	; (59c4 <z_thread_abort+0xa0>)
    5984:	689b      	ldr	r3, [r3, #8]
    5986:	42a3      	cmp	r3, r4
    5988:	d1da      	bne.n	5940 <z_thread_abort+0x1c>
    598a:	f3ef 8305 	mrs	r3, IPSR
    598e:	2b00      	cmp	r3, #0
    5990:	d1d6      	bne.n	5940 <z_thread_abort+0x1c>
    5992:	4630      	mov	r0, r6
    5994:	f7fc fcde 	bl	2354 <arch_swap>
	return ret;
    5998:	e7d2      	b.n	5940 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    599a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    599e:	f043 0308 	orr.w	r3, r3, #8
    59a2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    59a4:	f001 f9d9 	bl	6d5a <sys_dlist_remove>
}
    59a8:	e7d7      	b.n	595a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    59aa:	4628      	mov	r0, r5
    59ac:	f001 f9dd 	bl	6d6a <unpend_thread_no_timeout>
    59b0:	f105 0018 	add.w	r0, r5, #24
    59b4:	f001 fa98 	bl	6ee8 <z_abort_timeout>
    59b8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    59bc:	4628      	mov	r0, r5
    59be:	f7ff fdc1 	bl	5544 <ready_thread>
    59c2:	e7d7      	b.n	5974 <z_thread_abort+0x50>
    59c4:	20000a5c 	.word	0x20000a5c

000059c8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    59c8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    59ca:	4806      	ldr	r0, [pc, #24]	; (59e4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    59cc:	4a06      	ldr	r2, [pc, #24]	; (59e8 <z_data_copy+0x20>)
    59ce:	4907      	ldr	r1, [pc, #28]	; (59ec <z_data_copy+0x24>)
    59d0:	1a12      	subs	r2, r2, r0
    59d2:	f001 f95e 	bl	6c92 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    59d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    59da:	4a05      	ldr	r2, [pc, #20]	; (59f0 <z_data_copy+0x28>)
    59dc:	4905      	ldr	r1, [pc, #20]	; (59f4 <z_data_copy+0x2c>)
    59de:	4806      	ldr	r0, [pc, #24]	; (59f8 <z_data_copy+0x30>)
    59e0:	f001 b957 	b.w	6c92 <z_early_memcpy>
    59e4:	20000000 	.word	0x20000000
    59e8:	20000244 	.word	0x20000244
    59ec:	00007f8c 	.word	0x00007f8c
    59f0:	00000000 	.word	0x00000000
    59f4:	00007f8c 	.word	0x00007f8c
    59f8:	20000000 	.word	0x20000000

000059fc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    59fc:	4b03      	ldr	r3, [pc, #12]	; (5a0c <elapsed+0x10>)
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	b90b      	cbnz	r3, 5a06 <elapsed+0xa>
    5a02:	f7fe badf 	b.w	3fc4 <sys_clock_elapsed>
}
    5a06:	2000      	movs	r0, #0
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop
    5a0c:	20000a90 	.word	0x20000a90

00005a10 <next_timeout>:
	return list->head == list;
    5a10:	4b10      	ldr	r3, [pc, #64]	; (5a54 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5a12:	b510      	push	{r4, lr}
    5a14:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a16:	429c      	cmp	r4, r3
    5a18:	bf08      	it	eq
    5a1a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5a1c:	f7ff ffee 	bl	59fc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5a20:	b1a4      	cbz	r4, 5a4c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5a22:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5a26:	1a1b      	subs	r3, r3, r0
    5a28:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5a30:	f170 0200 	sbcs.w	r2, r0, #0
    5a34:	da0a      	bge.n	5a4c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5a36:	2800      	cmp	r0, #0
    5a38:	bfac      	ite	ge
    5a3a:	4618      	movge	r0, r3
    5a3c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5a3e:	4b06      	ldr	r3, [pc, #24]	; (5a58 <next_timeout+0x48>)
    5a40:	691b      	ldr	r3, [r3, #16]
    5a42:	b113      	cbz	r3, 5a4a <next_timeout+0x3a>
    5a44:	4298      	cmp	r0, r3
    5a46:	bfa8      	it	ge
    5a48:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5a4a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5a4c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5a50:	e7f5      	b.n	5a3e <next_timeout+0x2e>
    5a52:	bf00      	nop
    5a54:	20000174 	.word	0x20000174
    5a58:	20000a5c 	.word	0x20000a5c

00005a5c <remove_timeout>:
{
    5a5c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5a5e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5a60:	b168      	cbz	r0, 5a7e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5a62:	4a0a      	ldr	r2, [pc, #40]	; (5a8c <remove_timeout+0x30>)
    5a64:	6852      	ldr	r2, [r2, #4]
    5a66:	4290      	cmp	r0, r2
    5a68:	d009      	beq.n	5a7e <remove_timeout+0x22>
	if (next(t) != NULL) {
    5a6a:	b143      	cbz	r3, 5a7e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5a6c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5a70:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5a74:	1912      	adds	r2, r2, r4
    5a76:	eb41 0105 	adc.w	r1, r1, r5
    5a7a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5a7e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5a80:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5a82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5a84:	2300      	movs	r3, #0
	node->prev = NULL;
    5a86:	e9c0 3300 	strd	r3, r3, [r0]
}
    5a8a:	bd30      	pop	{r4, r5, pc}
    5a8c:	20000174 	.word	0x20000174

00005a90 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5a94:	bf08      	it	eq
    5a96:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a9c:	4604      	mov	r4, r0
    5a9e:	461f      	mov	r7, r3
    5aa0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5aa2:	d067      	beq.n	5b74 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5aa4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5aa6:	f04f 0320 	mov.w	r3, #32
    5aaa:	f3ef 8611 	mrs	r6, BASEPRI
    5aae:	f383 8812 	msr	BASEPRI_MAX, r3
    5ab2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5ab6:	f06f 0201 	mvn.w	r2, #1
    5aba:	1b53      	subs	r3, r2, r5
    5abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5ac0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	db1b      	blt.n	5b00 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5ac8:	4b2b      	ldr	r3, [pc, #172]	; (5b78 <z_add_timeout+0xe8>)
    5aca:	e9d3 1300 	ldrd	r1, r3, [r3]
    5ace:	1a52      	subs	r2, r2, r1
    5ad0:	eb6c 0303 	sbc.w	r3, ip, r3
    5ad4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5ad6:	eb63 0307 	sbc.w	r3, r3, r7
    5ada:	2d01      	cmp	r5, #1
    5adc:	f173 0200 	sbcs.w	r2, r3, #0
    5ae0:	bfbc      	itt	lt
    5ae2:	2501      	movlt	r5, #1
    5ae4:	2300      	movlt	r3, #0
    5ae6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5aea:	4824      	ldr	r0, [pc, #144]	; (5b7c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5aec:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5af0:	4283      	cmp	r3, r0
    5af2:	d118      	bne.n	5b26 <z_add_timeout+0x96>
	node->prev = tail;
    5af4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5af8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5afc:	6044      	str	r4, [r0, #4]
}
    5afe:	e026      	b.n	5b4e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5b00:	f7ff ff7c 	bl	59fc <elapsed>
    5b04:	3501      	adds	r5, #1
    5b06:	f147 0700 	adc.w	r7, r7, #0
    5b0a:	182d      	adds	r5, r5, r0
    5b0c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5b10:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5b14:	e7e9      	b.n	5aea <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5b16:	1a52      	subs	r2, r2, r1
    5b18:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5b1c:	459c      	cmp	ip, r3
    5b1e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5b22:	d0e7      	beq.n	5af4 <z_add_timeout+0x64>
    5b24:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5b26:	2b00      	cmp	r3, #0
    5b28:	d0e4      	beq.n	5af4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5b2a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5b2e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5b32:	428a      	cmp	r2, r1
    5b34:	eb75 0e07 	sbcs.w	lr, r5, r7
    5b38:	daed      	bge.n	5b16 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5b3a:	1a8a      	subs	r2, r1, r2
    5b3c:	eb67 0505 	sbc.w	r5, r7, r5
    5b40:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5b44:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b46:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5b4a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5b4c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5b4e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b50:	4283      	cmp	r3, r0
    5b52:	d00b      	beq.n	5b6c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5b54:	429c      	cmp	r4, r3
    5b56:	d109      	bne.n	5b6c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5b58:	f7ff ff5a 	bl	5a10 <next_timeout>

			if (next_time == 0 ||
    5b5c:	b118      	cbz	r0, 5b66 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5b5e:	4b08      	ldr	r3, [pc, #32]	; (5b80 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5b60:	691b      	ldr	r3, [r3, #16]
    5b62:	4283      	cmp	r3, r0
    5b64:	d002      	beq.n	5b6c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5b66:	2100      	movs	r1, #0
    5b68:	f7fe f9fa 	bl	3f60 <sys_clock_set_timeout>
	__asm__ volatile(
    5b6c:	f386 8811 	msr	BASEPRI, r6
    5b70:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b76:	bf00      	nop
    5b78:	20000368 	.word	0x20000368
    5b7c:	20000174 	.word	0x20000174
    5b80:	20000a5c 	.word	0x20000a5c

00005b84 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b88:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5b8a:	f7ff fc99 	bl	54c0 <z_time_slice>
	__asm__ volatile(
    5b8e:	f04f 0320 	mov.w	r3, #32
    5b92:	f3ef 8411 	mrs	r4, BASEPRI
    5b96:	f383 8812 	msr	BASEPRI_MAX, r3
    5b9a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5b9e:	4e24      	ldr	r6, [pc, #144]	; (5c30 <sys_clock_announce+0xac>)
	return list->head == list;
    5ba0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5c34 <sys_clock_announce+0xb0>
    5ba4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5ba6:	4d24      	ldr	r5, [pc, #144]	; (5c38 <sys_clock_announce+0xb4>)
    5ba8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5bac:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bae:	4540      	cmp	r0, r8
		curr_tick += dt;
    5bb0:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5bb4:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5bb8:	d00b      	beq.n	5bd2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5bba:	b150      	cbz	r0, 5bd2 <sys_clock_announce+0x4e>
    5bbc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5bc0:	429a      	cmp	r2, r3
    5bc2:	eb77 090c 	sbcs.w	r9, r7, ip
    5bc6:	da16      	bge.n	5bf6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5bc8:	1a9b      	subs	r3, r3, r2
    5bca:	eb6c 0c07 	sbc.w	ip, ip, r7
    5bce:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5bd2:	1852      	adds	r2, r2, r1
    5bd4:	eb4e 0707 	adc.w	r7, lr, r7
    5bd8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5bdc:	2500      	movs	r5, #0
    5bde:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5be0:	f7ff ff16 	bl	5a10 <next_timeout>
    5be4:	4629      	mov	r1, r5
    5be6:	f7fe f9bb 	bl	3f60 <sys_clock_set_timeout>
	__asm__ volatile(
    5bea:	f384 8811 	msr	BASEPRI, r4
    5bee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5bf6:	1859      	adds	r1, r3, r1
    5bf8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5bfc:	1ad3      	subs	r3, r2, r3
    5bfe:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5c00:	2200      	movs	r2, #0
    5c02:	2300      	movs	r3, #0
    5c04:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5c08:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5c0c:	f7ff ff26 	bl	5a5c <remove_timeout>
    5c10:	f384 8811 	msr	BASEPRI, r4
    5c14:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5c18:	6883      	ldr	r3, [r0, #8]
    5c1a:	4798      	blx	r3
	__asm__ volatile(
    5c1c:	f04f 0320 	mov.w	r3, #32
    5c20:	f3ef 8411 	mrs	r4, BASEPRI
    5c24:	f383 8812 	msr	BASEPRI_MAX, r3
    5c28:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5c2c:	e7bc      	b.n	5ba8 <sys_clock_announce+0x24>
    5c2e:	bf00      	nop
    5c30:	20000a90 	.word	0x20000a90
    5c34:	20000174 	.word	0x20000174
    5c38:	20000368 	.word	0x20000368

00005c3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5c3c:	b510      	push	{r4, lr}
    5c3e:	f04f 0320 	mov.w	r3, #32
    5c42:	f3ef 8411 	mrs	r4, BASEPRI
    5c46:	f383 8812 	msr	BASEPRI_MAX, r3
    5c4a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5c4e:	f7fe f9b9 	bl	3fc4 <sys_clock_elapsed>
    5c52:	4a05      	ldr	r2, [pc, #20]	; (5c68 <sys_clock_tick_get+0x2c>)
    5c54:	e9d2 3100 	ldrd	r3, r1, [r2]
    5c58:	18c0      	adds	r0, r0, r3
    5c5a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5c5e:	f384 8811 	msr	BASEPRI, r4
    5c62:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5c66:	bd10      	pop	{r4, pc}
    5c68:	20000368 	.word	0x20000368

00005c6c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5c6c:	b570      	push	{r4, r5, r6, lr}
    5c6e:	4604      	mov	r4, r0
	__asm__ volatile(
    5c70:	f04f 0320 	mov.w	r3, #32
    5c74:	f3ef 8511 	mrs	r5, BASEPRI
    5c78:	f383 8812 	msr	BASEPRI_MAX, r3
    5c7c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5c80:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5c84:	3301      	adds	r3, #1
    5c86:	f142 0200 	adc.w	r2, r2, #0
    5c8a:	2b02      	cmp	r3, #2
    5c8c:	f172 0300 	sbcs.w	r3, r2, #0
    5c90:	d304      	bcc.n	5c9c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c92:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5c96:	4917      	ldr	r1, [pc, #92]	; (5cf4 <z_timer_expiration_handler+0x88>)
    5c98:	f7ff fefa 	bl	5a90 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5c9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c9e:	3301      	adds	r3, #1
    5ca0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5ca2:	6a23      	ldr	r3, [r4, #32]
    5ca4:	b173      	cbz	r3, 5cc4 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    5ca6:	f385 8811 	msr	BASEPRI, r5
    5caa:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5cae:	6a23      	ldr	r3, [r4, #32]
    5cb0:	4620      	mov	r0, r4
    5cb2:	4798      	blx	r3
	__asm__ volatile(
    5cb4:	f04f 0320 	mov.w	r3, #32
    5cb8:	f3ef 8511 	mrs	r5, BASEPRI
    5cbc:	f383 8812 	msr	BASEPRI_MAX, r3
    5cc0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5cc4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cc8:	42a6      	cmp	r6, r4
    5cca:	d000      	beq.n	5cce <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5ccc:	b926      	cbnz	r6, 5cd8 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5cce:	f385 8811 	msr	BASEPRI, r5
    5cd2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5cd6:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5cd8:	4630      	mov	r0, r6
    5cda:	f001 f850 	bl	6d7e <z_unpend_thread_no_timeout>
    5cde:	2300      	movs	r3, #0
    5ce0:	67b3      	str	r3, [r6, #120]	; 0x78
    5ce2:	f385 8811 	msr	BASEPRI, r5
    5ce6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5cea:	4630      	mov	r0, r6
}
    5cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5cf0:	f001 b871 	b.w	6dd6 <z_ready_thread>
    5cf4:	00005c6d 	.word	0x00005c6d

00005cf8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cfc:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5d02:	bf08      	it	eq
    5d04:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    5d08:	4606      	mov	r6, r0
    5d0a:	461c      	mov	r4, r3
    5d0c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5d10:	4689      	mov	r9, r1
    5d12:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5d14:	d03e      	beq.n	5d94 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5d16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5d1a:	bf08      	it	eq
    5d1c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5d20:	4615      	mov	r5, r2
    5d22:	4607      	mov	r7, r0
    5d24:	d014      	beq.n	5d50 <z_impl_k_timer_start+0x58>
    5d26:	ea50 0302 	orrs.w	r3, r0, r2
    5d2a:	d011      	beq.n	5d50 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    5d2c:	f06f 0301 	mvn.w	r3, #1
    5d30:	1a9b      	subs	r3, r3, r2
    5d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d36:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	da08      	bge.n	5d50 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    5d3e:	2a02      	cmp	r2, #2
    5d40:	f170 0300 	sbcs.w	r3, r0, #0
    5d44:	bfbc      	itt	lt
    5d46:	2502      	movlt	r5, #2
    5d48:	2700      	movlt	r7, #0
    5d4a:	3d01      	subs	r5, #1
    5d4c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5d50:	f06f 0301 	mvn.w	r3, #1
    5d54:	1a5b      	subs	r3, r3, r1
    5d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d5a:	eb63 0304 	sbc.w	r3, r3, r4
    5d5e:	2b00      	cmp	r3, #0
    5d60:	da09      	bge.n	5d76 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5d62:	2901      	cmp	r1, #1
    5d64:	f174 0300 	sbcs.w	r3, r4, #0
    5d68:	bfbc      	itt	lt
    5d6a:	2101      	movlt	r1, #1
    5d6c:	2400      	movlt	r4, #0
    5d6e:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    5d72:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5d76:	4630      	mov	r0, r6
    5d78:	f001 f8b6 	bl	6ee8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5d7c:	2300      	movs	r3, #0
    5d7e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5d80:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d84:	464a      	mov	r2, r9
    5d86:	4643      	mov	r3, r8
    5d88:	4630      	mov	r0, r6
    5d8a:	4903      	ldr	r1, [pc, #12]	; (5d98 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5d8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d90:	f7ff be7e 	b.w	5a90 <z_add_timeout>
}
    5d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d98:	00005c6d 	.word	0x00005c6d

00005d9c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5d9c:	4a02      	ldr	r2, [pc, #8]	; (5da8 <boot_banner+0xc>)
    5d9e:	4903      	ldr	r1, [pc, #12]	; (5dac <boot_banner+0x10>)
    5da0:	4803      	ldr	r0, [pc, #12]	; (5db0 <boot_banner+0x14>)
    5da2:	f000 ba2b 	b.w	61fc <printk>
    5da6:	bf00      	nop
    5da8:	000077a2 	.word	0x000077a2
    5dac:	00007f56 	.word	0x00007f56
    5db0:	00007f63 	.word	0x00007f63

00005db4 <nrf_cc3xx_platform_init_no_rng>:
    5db4:	b510      	push	{r4, lr}
    5db6:	4c0a      	ldr	r4, [pc, #40]	; (5de0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5db8:	6823      	ldr	r3, [r4, #0]
    5dba:	b11b      	cbz	r3, 5dc4 <nrf_cc3xx_platform_init_no_rng+0x10>
    5dbc:	2301      	movs	r3, #1
    5dbe:	6023      	str	r3, [r4, #0]
    5dc0:	2000      	movs	r0, #0
    5dc2:	bd10      	pop	{r4, pc}
    5dc4:	f000 f8ce 	bl	5f64 <CC_LibInitNoRng>
    5dc8:	2800      	cmp	r0, #0
    5dca:	d0f7      	beq.n	5dbc <nrf_cc3xx_platform_init_no_rng+0x8>
    5dcc:	3801      	subs	r0, #1
    5dce:	2806      	cmp	r0, #6
    5dd0:	d803      	bhi.n	5dda <nrf_cc3xx_platform_init_no_rng+0x26>
    5dd2:	4b04      	ldr	r3, [pc, #16]	; (5de4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5dd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5dd8:	bd10      	pop	{r4, pc}
    5dda:	4803      	ldr	r0, [pc, #12]	; (5de8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5ddc:	bd10      	pop	{r4, pc}
    5dde:	bf00      	nop
    5de0:	20000a94 	.word	0x20000a94
    5de4:	00007500 	.word	0x00007500
    5de8:	ffff8ffe 	.word	0xffff8ffe

00005dec <nrf_cc3xx_platform_abort>:
    5dec:	f3bf 8f4f 	dsb	sy
    5df0:	4905      	ldr	r1, [pc, #20]	; (5e08 <nrf_cc3xx_platform_abort+0x1c>)
    5df2:	4b06      	ldr	r3, [pc, #24]	; (5e0c <nrf_cc3xx_platform_abort+0x20>)
    5df4:	68ca      	ldr	r2, [r1, #12]
    5df6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5dfa:	4313      	orrs	r3, r2
    5dfc:	60cb      	str	r3, [r1, #12]
    5dfe:	f3bf 8f4f 	dsb	sy
    5e02:	bf00      	nop
    5e04:	e7fd      	b.n	5e02 <nrf_cc3xx_platform_abort+0x16>
    5e06:	bf00      	nop
    5e08:	e000ed00 	.word	0xe000ed00
    5e0c:	05fa0004 	.word	0x05fa0004

00005e10 <CC_PalAbort>:
    5e10:	b410      	push	{r4}
    5e12:	4b09      	ldr	r3, [pc, #36]	; (5e38 <CC_PalAbort+0x28>)
    5e14:	4909      	ldr	r1, [pc, #36]	; (5e3c <CC_PalAbort+0x2c>)
    5e16:	4c0a      	ldr	r4, [pc, #40]	; (5e40 <CC_PalAbort+0x30>)
    5e18:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5e1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5e20:	6849      	ldr	r1, [r1, #4]
    5e22:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5e26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5e2a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5e2e:	2300      	movs	r3, #0
    5e30:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5e34:	bc10      	pop	{r4}
    5e36:	4708      	bx	r1
    5e38:	5002b000 	.word	0x5002b000
    5e3c:	2000017c 	.word	0x2000017c
    5e40:	5002a000 	.word	0x5002a000

00005e44 <nrf_cc3xx_platform_set_abort>:
    5e44:	e9d0 1200 	ldrd	r1, r2, [r0]
    5e48:	4b01      	ldr	r3, [pc, #4]	; (5e50 <nrf_cc3xx_platform_set_abort+0xc>)
    5e4a:	e9c3 1200 	strd	r1, r2, [r3]
    5e4e:	4770      	bx	lr
    5e50:	2000017c 	.word	0x2000017c

00005e54 <mutex_free>:
    5e54:	b510      	push	{r4, lr}
    5e56:	4604      	mov	r4, r0
    5e58:	b130      	cbz	r0, 5e68 <mutex_free+0x14>
    5e5a:	6863      	ldr	r3, [r4, #4]
    5e5c:	06db      	lsls	r3, r3, #27
    5e5e:	d502      	bpl.n	5e66 <mutex_free+0x12>
    5e60:	2300      	movs	r3, #0
    5e62:	6023      	str	r3, [r4, #0]
    5e64:	6063      	str	r3, [r4, #4]
    5e66:	bd10      	pop	{r4, pc}
    5e68:	4b02      	ldr	r3, [pc, #8]	; (5e74 <mutex_free+0x20>)
    5e6a:	4803      	ldr	r0, [pc, #12]	; (5e78 <mutex_free+0x24>)
    5e6c:	685b      	ldr	r3, [r3, #4]
    5e6e:	4798      	blx	r3
    5e70:	e7f3      	b.n	5e5a <mutex_free+0x6>
    5e72:	bf00      	nop
    5e74:	2000017c 	.word	0x2000017c
    5e78:	0000751c 	.word	0x0000751c

00005e7c <mutex_lock>:
    5e7c:	b1b0      	cbz	r0, 5eac <mutex_lock+0x30>
    5e7e:	6843      	ldr	r3, [r0, #4]
    5e80:	b193      	cbz	r3, 5ea8 <mutex_lock+0x2c>
    5e82:	06db      	lsls	r3, r3, #27
    5e84:	d50e      	bpl.n	5ea4 <mutex_lock+0x28>
    5e86:	2301      	movs	r3, #1
    5e88:	e850 2f00 	ldrex	r2, [r0]
    5e8c:	4619      	mov	r1, r3
    5e8e:	e840 1c00 	strex	ip, r1, [r0]
    5e92:	f09c 0f00 	teq	ip, #0
    5e96:	d1f7      	bne.n	5e88 <mutex_lock+0xc>
    5e98:	2a01      	cmp	r2, #1
    5e9a:	d0f5      	beq.n	5e88 <mutex_lock+0xc>
    5e9c:	f3bf 8f5f 	dmb	sy
    5ea0:	2000      	movs	r0, #0
    5ea2:	4770      	bx	lr
    5ea4:	4803      	ldr	r0, [pc, #12]	; (5eb4 <mutex_lock+0x38>)
    5ea6:	4770      	bx	lr
    5ea8:	4803      	ldr	r0, [pc, #12]	; (5eb8 <mutex_lock+0x3c>)
    5eaa:	4770      	bx	lr
    5eac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5eb0:	4770      	bx	lr
    5eb2:	bf00      	nop
    5eb4:	ffff8fe9 	.word	0xffff8fe9
    5eb8:	ffff8fea 	.word	0xffff8fea

00005ebc <mutex_unlock>:
    5ebc:	b168      	cbz	r0, 5eda <mutex_unlock+0x1e>
    5ebe:	6843      	ldr	r3, [r0, #4]
    5ec0:	b13b      	cbz	r3, 5ed2 <mutex_unlock+0x16>
    5ec2:	06db      	lsls	r3, r3, #27
    5ec4:	d507      	bpl.n	5ed6 <mutex_unlock+0x1a>
    5ec6:	f3bf 8f5f 	dmb	sy
    5eca:	2300      	movs	r3, #0
    5ecc:	6003      	str	r3, [r0, #0]
    5ece:	4618      	mov	r0, r3
    5ed0:	4770      	bx	lr
    5ed2:	4803      	ldr	r0, [pc, #12]	; (5ee0 <mutex_unlock+0x24>)
    5ed4:	4770      	bx	lr
    5ed6:	4803      	ldr	r0, [pc, #12]	; (5ee4 <mutex_unlock+0x28>)
    5ed8:	4770      	bx	lr
    5eda:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5ede:	4770      	bx	lr
    5ee0:	ffff8fea 	.word	0xffff8fea
    5ee4:	ffff8fe9 	.word	0xffff8fe9

00005ee8 <mutex_init>:
    5ee8:	b510      	push	{r4, lr}
    5eea:	4604      	mov	r4, r0
    5eec:	b120      	cbz	r0, 5ef8 <mutex_init+0x10>
    5eee:	2200      	movs	r2, #0
    5ef0:	2311      	movs	r3, #17
    5ef2:	6022      	str	r2, [r4, #0]
    5ef4:	6063      	str	r3, [r4, #4]
    5ef6:	bd10      	pop	{r4, pc}
    5ef8:	4801      	ldr	r0, [pc, #4]	; (5f00 <mutex_init+0x18>)
    5efa:	f7ff ff89 	bl	5e10 <CC_PalAbort>
    5efe:	e7f6      	b.n	5eee <mutex_init+0x6>
    5f00:	00007544 	.word	0x00007544

00005f04 <nrf_cc3xx_platform_set_mutexes>:
    5f04:	b570      	push	{r4, r5, r6, lr}
    5f06:	e9d0 2300 	ldrd	r2, r3, [r0]
    5f0a:	4c13      	ldr	r4, [pc, #76]	; (5f58 <nrf_cc3xx_platform_set_mutexes+0x54>)
    5f0c:	4d13      	ldr	r5, [pc, #76]	; (5f5c <nrf_cc3xx_platform_set_mutexes+0x58>)
    5f0e:	6063      	str	r3, [r4, #4]
    5f10:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5f14:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5f18:	6022      	str	r2, [r4, #0]
    5f1a:	4b11      	ldr	r3, [pc, #68]	; (5f60 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5f1c:	6808      	ldr	r0, [r1, #0]
    5f1e:	6018      	str	r0, [r3, #0]
    5f20:	6848      	ldr	r0, [r1, #4]
    5f22:	6058      	str	r0, [r3, #4]
    5f24:	6888      	ldr	r0, [r1, #8]
    5f26:	6098      	str	r0, [r3, #8]
    5f28:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5f2c:	60d8      	str	r0, [r3, #12]
    5f2e:	6119      	str	r1, [r3, #16]
    5f30:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5f34:	06db      	lsls	r3, r3, #27
    5f36:	d50d      	bpl.n	5f54 <nrf_cc3xx_platform_set_mutexes+0x50>
    5f38:	2300      	movs	r3, #0
    5f3a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    5f3e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    5f42:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5f46:	4790      	blx	r2
    5f48:	6823      	ldr	r3, [r4, #0]
    5f4a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f52:	4718      	bx	r3
    5f54:	bd70      	pop	{r4, r5, r6, pc}
    5f56:	bf00      	nop
    5f58:	2000018c 	.word	0x2000018c
    5f5c:	20000aac 	.word	0x20000aac
    5f60:	2000019c 	.word	0x2000019c

00005f64 <CC_LibInitNoRng>:
    5f64:	b538      	push	{r3, r4, r5, lr}
    5f66:	f000 f82f 	bl	5fc8 <CC_HalInit>
    5f6a:	b120      	cbz	r0, 5f76 <CC_LibInitNoRng+0x12>
    5f6c:	2403      	movs	r4, #3
    5f6e:	f000 f863 	bl	6038 <CC_PalTerminate>
    5f72:	4620      	mov	r0, r4
    5f74:	bd38      	pop	{r3, r4, r5, pc}
    5f76:	f000 f831 	bl	5fdc <CC_PalInit>
    5f7a:	b998      	cbnz	r0, 5fa4 <CC_LibInitNoRng+0x40>
    5f7c:	f000 f8ac 	bl	60d8 <CC_PalPowerSaveModeSelect>
    5f80:	b998      	cbnz	r0, 5faa <CC_LibInitNoRng+0x46>
    5f82:	4d0f      	ldr	r5, [pc, #60]	; (5fc0 <CC_LibInitNoRng+0x5c>)
    5f84:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5f88:	0e1b      	lsrs	r3, r3, #24
    5f8a:	2bf0      	cmp	r3, #240	; 0xf0
    5f8c:	d108      	bne.n	5fa0 <CC_LibInitNoRng+0x3c>
    5f8e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5f92:	4b0c      	ldr	r3, [pc, #48]	; (5fc4 <CC_LibInitNoRng+0x60>)
    5f94:	429a      	cmp	r2, r3
    5f96:	d00a      	beq.n	5fae <CC_LibInitNoRng+0x4a>
    5f98:	2407      	movs	r4, #7
    5f9a:	f000 f817 	bl	5fcc <CC_HalTerminate>
    5f9e:	e7e6      	b.n	5f6e <CC_LibInitNoRng+0xa>
    5fa0:	2406      	movs	r4, #6
    5fa2:	e7fa      	b.n	5f9a <CC_LibInitNoRng+0x36>
    5fa4:	2404      	movs	r4, #4
    5fa6:	4620      	mov	r0, r4
    5fa8:	bd38      	pop	{r3, r4, r5, pc}
    5faa:	2400      	movs	r4, #0
    5fac:	e7f5      	b.n	5f9a <CC_LibInitNoRng+0x36>
    5fae:	2001      	movs	r0, #1
    5fb0:	f000 f892 	bl	60d8 <CC_PalPowerSaveModeSelect>
    5fb4:	4604      	mov	r4, r0
    5fb6:	2800      	cmp	r0, #0
    5fb8:	d1f7      	bne.n	5faa <CC_LibInitNoRng+0x46>
    5fba:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5fbe:	e7d8      	b.n	5f72 <CC_LibInitNoRng+0xe>
    5fc0:	5002b000 	.word	0x5002b000
    5fc4:	20e00000 	.word	0x20e00000

00005fc8 <CC_HalInit>:
    5fc8:	2000      	movs	r0, #0
    5fca:	4770      	bx	lr

00005fcc <CC_HalTerminate>:
    5fcc:	2000      	movs	r0, #0
    5fce:	4770      	bx	lr

00005fd0 <CC_HalMaskInterrupt>:
    5fd0:	4b01      	ldr	r3, [pc, #4]	; (5fd8 <CC_HalMaskInterrupt+0x8>)
    5fd2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5fd6:	4770      	bx	lr
    5fd8:	5002b000 	.word	0x5002b000

00005fdc <CC_PalInit>:
    5fdc:	b510      	push	{r4, lr}
    5fde:	4811      	ldr	r0, [pc, #68]	; (6024 <CC_PalInit+0x48>)
    5fe0:	f000 f848 	bl	6074 <CC_PalMutexCreate>
    5fe4:	b100      	cbz	r0, 5fe8 <CC_PalInit+0xc>
    5fe6:	bd10      	pop	{r4, pc}
    5fe8:	480f      	ldr	r0, [pc, #60]	; (6028 <CC_PalInit+0x4c>)
    5fea:	f000 f843 	bl	6074 <CC_PalMutexCreate>
    5fee:	2800      	cmp	r0, #0
    5ff0:	d1f9      	bne.n	5fe6 <CC_PalInit+0xa>
    5ff2:	4c0e      	ldr	r4, [pc, #56]	; (602c <CC_PalInit+0x50>)
    5ff4:	4620      	mov	r0, r4
    5ff6:	f000 f83d 	bl	6074 <CC_PalMutexCreate>
    5ffa:	2800      	cmp	r0, #0
    5ffc:	d1f3      	bne.n	5fe6 <CC_PalInit+0xa>
    5ffe:	4b0c      	ldr	r3, [pc, #48]	; (6030 <CC_PalInit+0x54>)
    6000:	480c      	ldr	r0, [pc, #48]	; (6034 <CC_PalInit+0x58>)
    6002:	601c      	str	r4, [r3, #0]
    6004:	f000 f836 	bl	6074 <CC_PalMutexCreate>
    6008:	4601      	mov	r1, r0
    600a:	2800      	cmp	r0, #0
    600c:	d1eb      	bne.n	5fe6 <CC_PalInit+0xa>
    600e:	f000 f82d 	bl	606c <CC_PalDmaInit>
    6012:	4604      	mov	r4, r0
    6014:	b108      	cbz	r0, 601a <CC_PalInit+0x3e>
    6016:	4620      	mov	r0, r4
    6018:	bd10      	pop	{r4, pc}
    601a:	f000 f83f 	bl	609c <CC_PalPowerSaveModeInit>
    601e:	4620      	mov	r0, r4
    6020:	e7fa      	b.n	6018 <CC_PalInit+0x3c>
    6022:	bf00      	nop
    6024:	200001d4 	.word	0x200001d4
    6028:	200001c8 	.word	0x200001c8
    602c:	200001d0 	.word	0x200001d0
    6030:	200001d8 	.word	0x200001d8
    6034:	200001cc 	.word	0x200001cc

00006038 <CC_PalTerminate>:
    6038:	b508      	push	{r3, lr}
    603a:	4808      	ldr	r0, [pc, #32]	; (605c <CC_PalTerminate+0x24>)
    603c:	f000 f824 	bl	6088 <CC_PalMutexDestroy>
    6040:	4807      	ldr	r0, [pc, #28]	; (6060 <CC_PalTerminate+0x28>)
    6042:	f000 f821 	bl	6088 <CC_PalMutexDestroy>
    6046:	4807      	ldr	r0, [pc, #28]	; (6064 <CC_PalTerminate+0x2c>)
    6048:	f000 f81e 	bl	6088 <CC_PalMutexDestroy>
    604c:	4806      	ldr	r0, [pc, #24]	; (6068 <CC_PalTerminate+0x30>)
    604e:	f000 f81b 	bl	6088 <CC_PalMutexDestroy>
    6052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6056:	f000 b80b 	b.w	6070 <CC_PalDmaTerminate>
    605a:	bf00      	nop
    605c:	200001d4 	.word	0x200001d4
    6060:	200001c8 	.word	0x200001c8
    6064:	200001d0 	.word	0x200001d0
    6068:	200001cc 	.word	0x200001cc

0000606c <CC_PalDmaInit>:
    606c:	2000      	movs	r0, #0
    606e:	4770      	bx	lr

00006070 <CC_PalDmaTerminate>:
    6070:	4770      	bx	lr
    6072:	bf00      	nop

00006074 <CC_PalMutexCreate>:
    6074:	b508      	push	{r3, lr}
    6076:	4b03      	ldr	r3, [pc, #12]	; (6084 <CC_PalMutexCreate+0x10>)
    6078:	6802      	ldr	r2, [r0, #0]
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	6810      	ldr	r0, [r2, #0]
    607e:	4798      	blx	r3
    6080:	2000      	movs	r0, #0
    6082:	bd08      	pop	{r3, pc}
    6084:	2000018c 	.word	0x2000018c

00006088 <CC_PalMutexDestroy>:
    6088:	b508      	push	{r3, lr}
    608a:	4b03      	ldr	r3, [pc, #12]	; (6098 <CC_PalMutexDestroy+0x10>)
    608c:	6802      	ldr	r2, [r0, #0]
    608e:	685b      	ldr	r3, [r3, #4]
    6090:	6810      	ldr	r0, [r2, #0]
    6092:	4798      	blx	r3
    6094:	2000      	movs	r0, #0
    6096:	bd08      	pop	{r3, pc}
    6098:	2000018c 	.word	0x2000018c

0000609c <CC_PalPowerSaveModeInit>:
    609c:	b570      	push	{r4, r5, r6, lr}
    609e:	4c09      	ldr	r4, [pc, #36]	; (60c4 <CC_PalPowerSaveModeInit+0x28>)
    60a0:	4d09      	ldr	r5, [pc, #36]	; (60c8 <CC_PalPowerSaveModeInit+0x2c>)
    60a2:	6920      	ldr	r0, [r4, #16]
    60a4:	68ab      	ldr	r3, [r5, #8]
    60a6:	4798      	blx	r3
    60a8:	b118      	cbz	r0, 60b2 <CC_PalPowerSaveModeInit+0x16>
    60aa:	4b08      	ldr	r3, [pc, #32]	; (60cc <CC_PalPowerSaveModeInit+0x30>)
    60ac:	4808      	ldr	r0, [pc, #32]	; (60d0 <CC_PalPowerSaveModeInit+0x34>)
    60ae:	685b      	ldr	r3, [r3, #4]
    60b0:	4798      	blx	r3
    60b2:	4a08      	ldr	r2, [pc, #32]	; (60d4 <CC_PalPowerSaveModeInit+0x38>)
    60b4:	68eb      	ldr	r3, [r5, #12]
    60b6:	6920      	ldr	r0, [r4, #16]
    60b8:	2100      	movs	r1, #0
    60ba:	6011      	str	r1, [r2, #0]
    60bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60c0:	4718      	bx	r3
    60c2:	bf00      	nop
    60c4:	2000019c 	.word	0x2000019c
    60c8:	2000018c 	.word	0x2000018c
    60cc:	2000017c 	.word	0x2000017c
    60d0:	00007568 	.word	0x00007568
    60d4:	20000aa8 	.word	0x20000aa8

000060d8 <CC_PalPowerSaveModeSelect>:
    60d8:	b570      	push	{r4, r5, r6, lr}
    60da:	4d1b      	ldr	r5, [pc, #108]	; (6148 <CC_PalPowerSaveModeSelect+0x70>)
    60dc:	4e1b      	ldr	r6, [pc, #108]	; (614c <CC_PalPowerSaveModeSelect+0x74>)
    60de:	4604      	mov	r4, r0
    60e0:	68b2      	ldr	r2, [r6, #8]
    60e2:	6928      	ldr	r0, [r5, #16]
    60e4:	4790      	blx	r2
    60e6:	b9f8      	cbnz	r0, 6128 <CC_PalPowerSaveModeSelect+0x50>
    60e8:	b15c      	cbz	r4, 6102 <CC_PalPowerSaveModeSelect+0x2a>
    60ea:	4c19      	ldr	r4, [pc, #100]	; (6150 <CC_PalPowerSaveModeSelect+0x78>)
    60ec:	6823      	ldr	r3, [r4, #0]
    60ee:	b1b3      	cbz	r3, 611e <CC_PalPowerSaveModeSelect+0x46>
    60f0:	2b01      	cmp	r3, #1
    60f2:	d01b      	beq.n	612c <CC_PalPowerSaveModeSelect+0x54>
    60f4:	3b01      	subs	r3, #1
    60f6:	6023      	str	r3, [r4, #0]
    60f8:	6928      	ldr	r0, [r5, #16]
    60fa:	68f3      	ldr	r3, [r6, #12]
    60fc:	4798      	blx	r3
    60fe:	2000      	movs	r0, #0
    6100:	bd70      	pop	{r4, r5, r6, pc}
    6102:	4c13      	ldr	r4, [pc, #76]	; (6150 <CC_PalPowerSaveModeSelect+0x78>)
    6104:	6821      	ldr	r1, [r4, #0]
    6106:	b941      	cbnz	r1, 611a <CC_PalPowerSaveModeSelect+0x42>
    6108:	4b12      	ldr	r3, [pc, #72]	; (6154 <CC_PalPowerSaveModeSelect+0x7c>)
    610a:	2201      	movs	r2, #1
    610c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    6110:	4a11      	ldr	r2, [pc, #68]	; (6158 <CC_PalPowerSaveModeSelect+0x80>)
    6112:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6116:	2b00      	cmp	r3, #0
    6118:	d1fb      	bne.n	6112 <CC_PalPowerSaveModeSelect+0x3a>
    611a:	3101      	adds	r1, #1
    611c:	6021      	str	r1, [r4, #0]
    611e:	68f3      	ldr	r3, [r6, #12]
    6120:	6928      	ldr	r0, [r5, #16]
    6122:	4798      	blx	r3
    6124:	2000      	movs	r0, #0
    6126:	bd70      	pop	{r4, r5, r6, pc}
    6128:	480c      	ldr	r0, [pc, #48]	; (615c <CC_PalPowerSaveModeSelect+0x84>)
    612a:	bd70      	pop	{r4, r5, r6, pc}
    612c:	4a0a      	ldr	r2, [pc, #40]	; (6158 <CC_PalPowerSaveModeSelect+0x80>)
    612e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6132:	2b00      	cmp	r3, #0
    6134:	d1fb      	bne.n	612e <CC_PalPowerSaveModeSelect+0x56>
    6136:	4a07      	ldr	r2, [pc, #28]	; (6154 <CC_PalPowerSaveModeSelect+0x7c>)
    6138:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    613c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6140:	f7ff ff46 	bl	5fd0 <CC_HalMaskInterrupt>
    6144:	6823      	ldr	r3, [r4, #0]
    6146:	e7d5      	b.n	60f4 <CC_PalPowerSaveModeSelect+0x1c>
    6148:	2000019c 	.word	0x2000019c
    614c:	2000018c 	.word	0x2000018c
    6150:	20000aa8 	.word	0x20000aa8
    6154:	5002a000 	.word	0x5002a000
    6158:	5002b000 	.word	0x5002b000
    615c:	ffff8fe9 	.word	0xffff8fe9

00006160 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6160:	4770      	bx	lr

00006162 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    6162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6166:	4607      	mov	r7, r0
    6168:	460e      	mov	r6, r1
    616a:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    616c:	461d      	mov	r5, r3
    616e:	b30b      	cbz	r3, 61b4 <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6170:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    6172:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    6174:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    6178:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    617a:	441c      	add	r4, r3
    617c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    6180:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    6182:	f04f 0900 	mov.w	r9, #0
    6186:	45d1      	cmp	r9, sl
    6188:	d308      	bcc.n	619c <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    618a:	686a      	ldr	r2, [r5, #4]
    618c:	f105 0308 	add.w	r3, r5, #8
    6190:	4641      	mov	r1, r8
    6192:	4638      	mov	r0, r7
    6194:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    6196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    619a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    619c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    61a0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    61a4:	4620      	mov	r0, r4
    61a6:	f000 f9fe 	bl	65a6 <strlen>
    61aa:	3001      	adds	r0, #1
    61ac:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    61ae:	f109 0901 	add.w	r9, r9, #1
    61b2:	e7e8      	b.n	6186 <cbpprintf_external+0x24>
}
    61b4:	f06f 0015 	mvn.w	r0, #21
    61b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000061bc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    61bc:	4603      	mov	r3, r0
    61be:	b158      	cbz	r0, 61d8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    61c0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    61c2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    61c6:	2a01      	cmp	r2, #1
    61c8:	d003      	beq.n	61d2 <sys_notify_validate+0x16>
    61ca:	2a03      	cmp	r2, #3
    61cc:	d104      	bne.n	61d8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    61ce:	6802      	ldr	r2, [r0, #0]
    61d0:	b112      	cbz	r2, 61d8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    61d2:	2000      	movs	r0, #0
    61d4:	6098      	str	r0, [r3, #8]
    61d6:	4770      	bx	lr
		return -EINVAL;
    61d8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    61dc:	4770      	bx	lr

000061de <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    61de:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    61e0:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    61e2:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    61e6:	2a03      	cmp	r2, #3
    61e8:	f04f 0200 	mov.w	r2, #0
{
    61ec:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    61ee:	bf0c      	ite	eq
    61f0:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    61f2:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    61f4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    61f6:	4770      	bx	lr

000061f8 <arch_printk_char_out>:
}
    61f8:	2000      	movs	r0, #0
    61fa:	4770      	bx	lr

000061fc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    61fc:	b40f      	push	{r0, r1, r2, r3}
    61fe:	b507      	push	{r0, r1, r2, lr}
    6200:	a904      	add	r1, sp, #16
    6202:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6206:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    6208:	f000 f91b 	bl	6442 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    620c:	b003      	add	sp, #12
    620e:	f85d eb04 	ldr.w	lr, [sp], #4
    6212:	b004      	add	sp, #16
    6214:	4770      	bx	lr

00006216 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6216:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6218:	f013 0307 	ands.w	r3, r3, #7
    621c:	d105      	bne.n	622a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    621e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6220:	2b00      	cmp	r3, #0
    6222:	bf0c      	ite	eq
    6224:	2000      	moveq	r0, #0
    6226:	2003      	movne	r0, #3
    6228:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    622a:	2b02      	cmp	r3, #2
    622c:	d105      	bne.n	623a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    622e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    6230:	2b00      	cmp	r3, #0
    6232:	bf14      	ite	ne
    6234:	2000      	movne	r0, #0
    6236:	2004      	moveq	r0, #4
    6238:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    623a:	2b01      	cmp	r3, #1
    623c:	d105      	bne.n	624a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    623e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6240:	2b00      	cmp	r3, #0
    6242:	bf0c      	ite	eq
    6244:	2000      	moveq	r0, #0
    6246:	2005      	movne	r0, #5
    6248:	4770      	bx	lr
	int evt = EVT_NOP;
    624a:	2000      	movs	r0, #0
}
    624c:	4770      	bx	lr

0000624e <notify_one>:
{
    624e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6252:	460d      	mov	r5, r1
    6254:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6256:	4619      	mov	r1, r3
    6258:	1d28      	adds	r0, r5, #4
{
    625a:	4690      	mov	r8, r2
    625c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    625e:	f7ff ffbe 	bl	61de <sys_notify_finalize>
	if (cb) {
    6262:	4604      	mov	r4, r0
    6264:	b138      	cbz	r0, 6276 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6266:	4633      	mov	r3, r6
    6268:	4642      	mov	r2, r8
    626a:	4629      	mov	r1, r5
    626c:	4638      	mov	r0, r7
    626e:	46a4      	mov	ip, r4
}
    6270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6274:	4760      	bx	ip
}
    6276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000627a <transition_complete>:
{
    627a:	b410      	push	{r4}
	__asm__ volatile(
    627c:	f04f 0420 	mov.w	r4, #32
    6280:	f3ef 8211 	mrs	r2, BASEPRI
    6284:	f384 8812 	msr	BASEPRI_MAX, r4
    6288:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    628c:	6141      	str	r1, [r0, #20]
}
    628e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6290:	2101      	movs	r1, #1
    6292:	f7fa bd4f 	b.w	d34 <process_event>

00006296 <validate_args>:
{
    6296:	b510      	push	{r4, lr}
    6298:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    629a:	b140      	cbz	r0, 62ae <validate_args+0x18>
    629c:	b139      	cbz	r1, 62ae <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    629e:	1d08      	adds	r0, r1, #4
    62a0:	f7ff ff8c 	bl	61bc <sys_notify_validate>
	if ((rv == 0)
    62a4:	b928      	cbnz	r0, 62b2 <validate_args+0x1c>
	    && ((cli->notify.flags
    62a6:	68a3      	ldr	r3, [r4, #8]
    62a8:	f033 0303 	bics.w	r3, r3, #3
    62ac:	d001      	beq.n	62b2 <validate_args+0x1c>
		rv = -EINVAL;
    62ae:	f06f 0015 	mvn.w	r0, #21
}
    62b2:	bd10      	pop	{r4, pc}

000062b4 <onoff_manager_init>:
{
    62b4:	b538      	push	{r3, r4, r5, lr}
    62b6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    62b8:	4605      	mov	r5, r0
    62ba:	b158      	cbz	r0, 62d4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    62bc:	b151      	cbz	r1, 62d4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    62be:	680b      	ldr	r3, [r1, #0]
    62c0:	b143      	cbz	r3, 62d4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    62c2:	684b      	ldr	r3, [r1, #4]
    62c4:	b133      	cbz	r3, 62d4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    62c6:	221c      	movs	r2, #28
    62c8:	2100      	movs	r1, #0
    62ca:	f000 f993 	bl	65f4 <memset>
    62ce:	612c      	str	r4, [r5, #16]
	return 0;
    62d0:	2000      	movs	r0, #0
}
    62d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    62d4:	f06f 0015 	mvn.w	r0, #21
    62d8:	e7fb      	b.n	62d2 <onoff_manager_init+0x1e>

000062da <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    62da:	b570      	push	{r4, r5, r6, lr}
    62dc:	4604      	mov	r4, r0
    62de:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    62e0:	f7ff ffd9 	bl	6296 <validate_args>

	if (rv < 0) {
    62e4:	1e05      	subs	r5, r0, #0
    62e6:	db31      	blt.n	634c <onoff_request+0x72>
    62e8:	f04f 0320 	mov.w	r3, #32
    62ec:	f3ef 8111 	mrs	r1, BASEPRI
    62f0:	f383 8812 	msr	BASEPRI_MAX, r3
    62f4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    62f8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    62fa:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    62fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6300:	42ab      	cmp	r3, r5
    6302:	f000 0207 	and.w	r2, r0, #7
    6306:	d02e      	beq.n	6366 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6308:	2a02      	cmp	r2, #2
    630a:	d10e      	bne.n	632a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    630c:	3301      	adds	r3, #1
    630e:	8363      	strh	r3, [r4, #26]
	rv = state;
    6310:	4615      	mov	r5, r2
		notify = true;
    6312:	2301      	movs	r3, #1
	__asm__ volatile(
    6314:	f381 8811 	msr	BASEPRI, r1
    6318:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    631c:	b1b3      	cbz	r3, 634c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    631e:	2300      	movs	r3, #0
    6320:	4631      	mov	r1, r6
    6322:	4620      	mov	r0, r4
    6324:	f7ff ff93 	bl	624e <notify_one>
    6328:	e010      	b.n	634c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    632a:	0783      	lsls	r3, r0, #30
    632c:	d001      	beq.n	6332 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    632e:	2a06      	cmp	r2, #6
    6330:	d10e      	bne.n	6350 <onoff_request+0x76>
	parent->next = child;
    6332:	2300      	movs	r3, #0
    6334:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6336:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6338:	b993      	cbnz	r3, 6360 <onoff_request+0x86>
	list->head = node;
    633a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    633e:	4615      	mov	r5, r2
    6340:	b962      	cbnz	r2, 635c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    6342:	460a      	mov	r2, r1
    6344:	4620      	mov	r0, r4
    6346:	2102      	movs	r1, #2
    6348:	f7fa fcf4 	bl	d34 <process_event>
		}
	}

	return rv;
}
    634c:	4628      	mov	r0, r5
    634e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    6350:	2a05      	cmp	r2, #5
    6352:	bf0c      	ite	eq
    6354:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6358:	f06f 0504 	mvnne.w	r5, #4
    635c:	2300      	movs	r3, #0
    635e:	e7d9      	b.n	6314 <onoff_request+0x3a>
	parent->next = child;
    6360:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6362:	6066      	str	r6, [r4, #4]
}
    6364:	e7eb      	b.n	633e <onoff_request+0x64>
		rv = -EAGAIN;
    6366:	f06f 050a 	mvn.w	r5, #10
    636a:	e7f7      	b.n	635c <onoff_request+0x82>

0000636c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    636c:	4604      	mov	r4, r0
    636e:	b508      	push	{r3, lr}
    6370:	4608      	mov	r0, r1
    6372:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6374:	461a      	mov	r2, r3
    6376:	47a0      	blx	r4
	return z_impl_z_current_get();
    6378:	f7ff face 	bl	5918 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    637c:	f7fc fbea 	bl	2b54 <z_impl_k_thread_abort>

00006380 <encode_uint>:
{
    6380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6384:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6386:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6388:	2b6f      	cmp	r3, #111	; 0x6f
{
    638a:	4680      	mov	r8, r0
    638c:	460f      	mov	r7, r1
    638e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6390:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6394:	d029      	beq.n	63ea <encode_uint+0x6a>
    6396:	d824      	bhi.n	63e2 <encode_uint+0x62>
		return 16;
    6398:	2b58      	cmp	r3, #88	; 0x58
    639a:	bf14      	ite	ne
    639c:	260a      	movne	r6, #10
    639e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    63a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    63a4:	4632      	mov	r2, r6
    63a6:	2300      	movs	r3, #0
    63a8:	4640      	mov	r0, r8
    63aa:	4639      	mov	r1, r7
    63ac:	f7fa f88a 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63b0:	2a09      	cmp	r2, #9
    63b2:	b2d4      	uxtb	r4, r2
    63b4:	d81e      	bhi.n	63f4 <encode_uint+0x74>
    63b6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    63b8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63ba:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    63bc:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63c0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    63c4:	d301      	bcc.n	63ca <encode_uint+0x4a>
    63c6:	45d1      	cmp	r9, sl
    63c8:	d811      	bhi.n	63ee <encode_uint+0x6e>
	if (conv->flag_hash) {
    63ca:	782b      	ldrb	r3, [r5, #0]
    63cc:	069b      	lsls	r3, r3, #26
    63ce:	d505      	bpl.n	63dc <encode_uint+0x5c>
		if (radix == 8) {
    63d0:	2e08      	cmp	r6, #8
    63d2:	d115      	bne.n	6400 <encode_uint+0x80>
			conv->altform_0 = true;
    63d4:	78ab      	ldrb	r3, [r5, #2]
    63d6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    63da:	70ab      	strb	r3, [r5, #2]
}
    63dc:	4648      	mov	r0, r9
    63de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    63e2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    63e6:	2b70      	cmp	r3, #112	; 0x70
    63e8:	e7d7      	b.n	639a <encode_uint+0x1a>
	switch (specifier) {
    63ea:	2608      	movs	r6, #8
    63ec:	e7d8      	b.n	63a0 <encode_uint+0x20>
		value /= radix;
    63ee:	4680      	mov	r8, r0
    63f0:	460f      	mov	r7, r1
    63f2:	e7d7      	b.n	63a4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63f4:	f1bb 0f19 	cmp.w	fp, #25
    63f8:	bf94      	ite	ls
    63fa:	3437      	addls	r4, #55	; 0x37
    63fc:	3457      	addhi	r4, #87	; 0x57
    63fe:	e7db      	b.n	63b8 <encode_uint+0x38>
		} else if (radix == 16) {
    6400:	2e10      	cmp	r6, #16
    6402:	d1eb      	bne.n	63dc <encode_uint+0x5c>
			conv->altform_0c = true;
    6404:	78ab      	ldrb	r3, [r5, #2]
    6406:	f043 0310 	orr.w	r3, r3, #16
    640a:	e7e6      	b.n	63da <encode_uint+0x5a>

0000640c <outs>:
{
    640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6410:	4607      	mov	r7, r0
    6412:	4688      	mov	r8, r1
    6414:	4615      	mov	r5, r2
    6416:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6418:	4614      	mov	r4, r2
    641a:	42b4      	cmp	r4, r6
    641c:	eba4 0005 	sub.w	r0, r4, r5
    6420:	d302      	bcc.n	6428 <outs+0x1c>
    6422:	b93e      	cbnz	r6, 6434 <outs+0x28>
    6424:	7823      	ldrb	r3, [r4, #0]
    6426:	b12b      	cbz	r3, 6434 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6428:	f814 0b01 	ldrb.w	r0, [r4], #1
    642c:	4641      	mov	r1, r8
    642e:	47b8      	blx	r7
		if (rc < 0) {
    6430:	2800      	cmp	r0, #0
    6432:	daf2      	bge.n	641a <outs+0xe>
}
    6434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006438 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6438:	4770      	bx	lr

0000643a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    643a:	f000 ba8d 	b.w	6958 <sys_clock_cycle_get_32>

0000643e <dummy_timestamp>:
    643e:	2000      	movs	r0, #0
    6440:	4770      	bx	lr

00006442 <z_log_vprintk>:
{
    6442:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6444:	2300      	movs	r3, #0
    6446:	e9cd 0102 	strd	r0, r1, [sp, #8]
    644a:	e9cd 3300 	strd	r3, r3, [sp]
    644e:	461a      	mov	r2, r3
    6450:	4619      	mov	r1, r3
    6452:	4618      	mov	r0, r3
    6454:	f7fb fbb0 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    6458:	b005      	add	sp, #20
    645a:	f85d fb04 	ldr.w	pc, [sp], #4

0000645e <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    645e:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    6460:	f7fb f952 	bl	1708 <log_init>
	}

	return 0;
}
    6464:	2000      	movs	r0, #0
    6466:	bd08      	pop	{r3, pc}

00006468 <z_log_get_tag>:
}
    6468:	2000      	movs	r0, #0
    646a:	4770      	bx	lr

0000646c <out_func>:
{
    646c:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    646e:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    6472:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    6476:	6852      	ldr	r2, [r2, #4]
    6478:	2101      	movs	r1, #1
    647a:	f10d 0007 	add.w	r0, sp, #7
    647e:	4798      	blx	r3
}
    6480:	2000      	movs	r0, #0
    6482:	b003      	add	sp, #12
    6484:	f85d fb04 	ldr.w	pc, [sp], #4

00006488 <cr_out_func>:
{
    6488:	b538      	push	{r3, r4, r5, lr}
    648a:	4605      	mov	r5, r0
    648c:	460c      	mov	r4, r1
	out_func(c, ctx);
    648e:	f7ff ffed 	bl	646c <out_func>
	if (c == '\n') {
    6492:	2d0a      	cmp	r5, #10
    6494:	d103      	bne.n	649e <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    6496:	4621      	mov	r1, r4
    6498:	200d      	movs	r0, #13
    649a:	f7ff ffe7 	bl	646c <out_func>
}
    649e:	2000      	movs	r0, #0
    64a0:	bd38      	pop	{r3, r4, r5, pc}

000064a2 <buffer_write>:
{
    64a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64a4:	4606      	mov	r6, r0
    64a6:	460d      	mov	r5, r1
    64a8:	4614      	mov	r4, r2
    64aa:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    64ac:	4621      	mov	r1, r4
    64ae:	4628      	mov	r0, r5
    64b0:	463a      	mov	r2, r7
    64b2:	47b0      	blx	r6
	} while (len != 0);
    64b4:	1a24      	subs	r4, r4, r0
		buf += processed;
    64b6:	4405      	add	r5, r0
	} while (len != 0);
    64b8:	d1f8      	bne.n	64ac <buffer_write+0xa>
}
    64ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064bc <log_output_flush>:
		     output->control_block->offset,
    64bc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    64be:	6881      	ldr	r1, [r0, #8]
{
    64c0:	b510      	push	{r4, lr}
    64c2:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    64c4:	e9d2 2300 	ldrd	r2, r3, [r2]
    64c8:	6800      	ldr	r0, [r0, #0]
    64ca:	f7ff ffea 	bl	64a2 <buffer_write>
	output->control_block->offset = 0;
    64ce:	6863      	ldr	r3, [r4, #4]
    64d0:	2200      	movs	r2, #0
    64d2:	601a      	str	r2, [r3, #0]
}
    64d4:	bd10      	pop	{r4, pc}

000064d6 <z_log_msg2_finalize>:
{
    64d6:	b570      	push	{r4, r5, r6, lr}
    64d8:	460e      	mov	r6, r1
    64da:	4615      	mov	r5, r2
    64dc:	4619      	mov	r1, r3
	if (!msg) {
    64de:	4604      	mov	r4, r0
    64e0:	b918      	cbnz	r0, 64ea <z_log_msg2_finalize+0x14>
}
    64e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    64e6:	f7fb b961 	b.w	17ac <z_log_dropped>
	if (data) {
    64ea:	b143      	cbz	r3, 64fe <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    64ec:	f100 0310 	add.w	r3, r0, #16
    64f0:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    64f4:	4418      	add	r0, r3
    64f6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    64fa:	f000 f870 	bl	65de <memcpy>
	msg->hdr.source = source;
    64fe:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    6502:	4620      	mov	r0, r4
}
    6504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    6508:	f7fb b96e 	b.w	17e8 <z_log_msg2_commit>

0000650c <abort_function>:
{
    650c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    650e:	2000      	movs	r0, #0
    6510:	f7fb f8b2 	bl	1678 <sys_reboot>

00006514 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6516:	ab0b      	add	r3, sp, #44	; 0x2c
    6518:	9305      	str	r3, [sp, #20]
    651a:	9303      	str	r3, [sp, #12]
    651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    651e:	9302      	str	r3, [sp, #8]
    6520:	2300      	movs	r3, #0
    6522:	e9cd 3300 	strd	r3, r3, [sp]
    6526:	2201      	movs	r2, #1
    6528:	4618      	mov	r0, r3
    652a:	f7fb fb45 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    652e:	b007      	add	sp, #28
    6530:	f85d fb04 	ldr.w	pc, [sp], #4

00006534 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6534:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6536:	6800      	ldr	r0, [r0, #0]
    6538:	f7fb be66 	b.w	2208 <z_arm_fatal_error>

0000653c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    653c:	2100      	movs	r1, #0
    653e:	2001      	movs	r0, #1
    6540:	f7fb be62 	b.w	2208 <z_arm_fatal_error>

00006544 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6544:	b508      	push	{r3, lr}
	handler();
    6546:	f7fb fee5 	bl	2314 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    654a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    654e:	f7fb bfbd 	b.w	24cc <z_arm_exc_exit>

00006552 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6552:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6554:	ab0b      	add	r3, sp, #44	; 0x2c
    6556:	9305      	str	r3, [sp, #20]
    6558:	9303      	str	r3, [sp, #12]
    655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    655c:	9302      	str	r3, [sp, #8]
    655e:	2300      	movs	r3, #0
    6560:	e9cd 3300 	strd	r3, r3, [sp]
    6564:	2201      	movs	r2, #1
    6566:	4618      	mov	r0, r3
    6568:	f7fb fb26 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    656c:	b007      	add	sp, #28
    656e:	f85d fb04 	ldr.w	pc, [sp], #4

00006572 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6572:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6574:	ab0b      	add	r3, sp, #44	; 0x2c
    6576:	9305      	str	r3, [sp, #20]
    6578:	9303      	str	r3, [sp, #12]
    657a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    657c:	9302      	str	r3, [sp, #8]
    657e:	2300      	movs	r3, #0
    6580:	e9cd 3300 	strd	r3, r3, [sp]
    6584:	2201      	movs	r2, #1
    6586:	4618      	mov	r0, r3
    6588:	f7fb fb16 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    658c:	b007      	add	sp, #28
    658e:	f85d fb04 	ldr.w	pc, [sp], #4

00006592 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6592:	3901      	subs	r1, #1
    6594:	4603      	mov	r3, r0
    6596:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    659a:	b90a      	cbnz	r2, 65a0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    659c:	701a      	strb	r2, [r3, #0]

	return dest;
}
    659e:	4770      	bx	lr
		*d = *s;
    65a0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    65a4:	e7f7      	b.n	6596 <strcpy+0x4>

000065a6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    65a6:	4603      	mov	r3, r0
	size_t n = 0;
    65a8:	2000      	movs	r0, #0

	while (*s != '\0') {
    65aa:	5c1a      	ldrb	r2, [r3, r0]
    65ac:	b902      	cbnz	r2, 65b0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    65ae:	4770      	bx	lr
		n++;
    65b0:	3001      	adds	r0, #1
    65b2:	e7fa      	b.n	65aa <strlen+0x4>

000065b4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    65b4:	4603      	mov	r3, r0
	size_t n = 0;
    65b6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    65b8:	5c1a      	ldrb	r2, [r3, r0]
    65ba:	b10a      	cbz	r2, 65c0 <strnlen+0xc>
    65bc:	4288      	cmp	r0, r1
    65be:	d100      	bne.n	65c2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    65c0:	4770      	bx	lr
		n++;
    65c2:	3001      	adds	r0, #1
    65c4:	e7f8      	b.n	65b8 <strnlen+0x4>

000065c6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    65c6:	1e43      	subs	r3, r0, #1
    65c8:	3901      	subs	r1, #1
    65ca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    65ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    65d2:	4282      	cmp	r2, r0
    65d4:	d101      	bne.n	65da <strcmp+0x14>
    65d6:	2a00      	cmp	r2, #0
    65d8:	d1f7      	bne.n	65ca <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    65da:	1a10      	subs	r0, r2, r0
    65dc:	4770      	bx	lr

000065de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    65de:	b510      	push	{r4, lr}
    65e0:	1e43      	subs	r3, r0, #1
    65e2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    65e4:	4291      	cmp	r1, r2
    65e6:	d100      	bne.n	65ea <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    65e8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    65ea:	f811 4b01 	ldrb.w	r4, [r1], #1
    65ee:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    65f2:	e7f7      	b.n	65e4 <memcpy+0x6>

000065f4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    65f4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    65f6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    65f8:	4603      	mov	r3, r0
	while (n > 0) {
    65fa:	4293      	cmp	r3, r2
    65fc:	d100      	bne.n	6600 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    65fe:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6600:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6604:	e7f9      	b.n	65fa <memset+0x6>

00006606 <_stdout_hook_default>:
}
    6606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    660a:	4770      	bx	lr

0000660c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    660c:	2806      	cmp	r0, #6
    660e:	d108      	bne.n	6622 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6614:	2201      	movs	r2, #1
    6616:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    661a:	f3bf 8f4f 	dsb	sy
        __WFE();
    661e:	bf20      	wfe
    while (true)
    6620:	e7fd      	b.n	661e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6622:	4770      	bx	lr

00006624 <pm_state_exit_post_ops>:
    6624:	2300      	movs	r3, #0
    6626:	f383 8811 	msr	BASEPRI, r3
    662a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    662e:	4770      	bx	lr

00006630 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6632:	ab0b      	add	r3, sp, #44	; 0x2c
    6634:	9305      	str	r3, [sp, #20]
    6636:	9303      	str	r3, [sp, #12]
    6638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    663a:	9302      	str	r3, [sp, #8]
    663c:	2300      	movs	r3, #0
    663e:	e9cd 3300 	strd	r3, r3, [sp]
    6642:	2201      	movs	r2, #1
    6644:	4618      	mov	r0, r3
    6646:	f7fb fab7 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    664a:	b007      	add	sp, #28
    664c:	f85d fb04 	ldr.w	pc, [sp], #4

00006650 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6650:	f1a0 0308 	sub.w	r3, r0, #8
    6654:	f3bf 8f5b 	dmb	ish
    6658:	e853 2f00 	ldrex	r2, [r3]
    665c:	1c51      	adds	r1, r2, #1
    665e:	e843 1c00 	strex	ip, r1, [r3]
    6662:	f1bc 0f00 	cmp.w	ip, #0
    6666:	d1f7      	bne.n	6658 <adc_context_on_timer_expired+0x8>
    6668:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    666c:	b91a      	cbnz	r2, 6676 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    666e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    6672:	f7fc bc3b 	b.w	2eec <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    6676:	f06f 030f 	mvn.w	r3, #15
    667a:	6583      	str	r3, [r0, #88]	; 0x58
}
    667c:	4770      	bx	lr

0000667e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    667e:	6903      	ldr	r3, [r0, #16]
    6680:	b2c9      	uxtb	r1, r1
    6682:	220c      	movs	r2, #12
    6684:	fb01 3302 	mla	r3, r1, r2, r3
    6688:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    668a:	f000 0007 	and.w	r0, r0, #7
    668e:	4770      	bx	lr

00006690 <set_on_state>:
	__asm__ volatile(
    6690:	f04f 0320 	mov.w	r3, #32
    6694:	f3ef 8211 	mrs	r2, BASEPRI
    6698:	f383 8812 	msr	BASEPRI_MAX, r3
    669c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    66a0:	6803      	ldr	r3, [r0, #0]
    66a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    66a6:	f043 0302 	orr.w	r3, r3, #2
    66aa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    66ac:	f382 8811 	msr	BASEPRI, r2
    66b0:	f3bf 8f6f 	isb	sy
}
    66b4:	4770      	bx	lr

000066b6 <stop>:
{
    66b6:	4603      	mov	r3, r0
    66b8:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    66ba:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    66bc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    66be:	f04f 0420 	mov.w	r4, #32
    66c2:	f3ef 8611 	mrs	r6, BASEPRI
    66c6:	f384 8812 	msr	BASEPRI_MAX, r4
    66ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    66ce:	250c      	movs	r5, #12
    66d0:	fb05 0401 	mla	r4, r5, r1, r0
    66d4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    66d6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    66da:	d001      	beq.n	66e0 <stop+0x2a>
    66dc:	42a2      	cmp	r2, r4
    66de:	d111      	bne.n	6704 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    66e0:	fb05 0001 	mla	r0, r5, r1, r0
    66e4:	2201      	movs	r2, #1
    66e6:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    66e8:	2000      	movs	r0, #0
	__asm__ volatile(
    66ea:	f386 8811 	msr	BASEPRI, r6
    66ee:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    66f2:	b930      	cbnz	r0, 6702 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    66f4:	685b      	ldr	r3, [r3, #4]
    66f6:	220c      	movs	r2, #12
    66f8:	fb02 3101 	mla	r1, r2, r1, r3
    66fc:	684b      	ldr	r3, [r1, #4]
    66fe:	4798      	blx	r3
	return 0;
    6700:	2000      	movs	r0, #0
}
    6702:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6708:	e7ef      	b.n	66ea <stop+0x34>

0000670a <api_stop>:
	return stop(dev, subsys, CTX_API);
    670a:	2280      	movs	r2, #128	; 0x80
    670c:	f7ff bfd3 	b.w	66b6 <stop>

00006710 <async_start>:
{
    6710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6712:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6714:	6904      	ldr	r4, [r0, #16]
{
    6716:	4605      	mov	r5, r0
    6718:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    671a:	f04f 0020 	mov.w	r0, #32
    671e:	f3ef 8c11 	mrs	ip, BASEPRI
    6722:	f380 8812 	msr	BASEPRI_MAX, r0
    6726:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    672a:	260c      	movs	r6, #12
    672c:	fb06 4601 	mla	r6, r6, r1, r4
    6730:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6732:	f000 0e07 	and.w	lr, r0, #7
    6736:	f1be 0f01 	cmp.w	lr, #1
    673a:	d110      	bne.n	675e <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    673c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    673e:	2600      	movs	r6, #0
	__asm__ volatile(
    6740:	f38c 8811 	msr	BASEPRI, ip
    6744:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6748:	b93e      	cbnz	r6, 675a <async_start+0x4a>
	subdata->cb = cb;
    674a:	200c      	movs	r0, #12
    674c:	4341      	muls	r1, r0
    674e:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6750:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6754:	686b      	ldr	r3, [r5, #4]
    6756:	585b      	ldr	r3, [r3, r1]
    6758:	4798      	blx	r3
}
    675a:	4630      	mov	r0, r6
    675c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    675e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6762:	4287      	cmp	r7, r0
    6764:	bf14      	ite	ne
    6766:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    676a:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    676e:	e7e7      	b.n	6740 <async_start+0x30>

00006770 <api_start>:
{
    6770:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6772:	2480      	movs	r4, #128	; 0x80
    6774:	9400      	str	r4, [sp, #0]
    6776:	f7ff ffcb 	bl	6710 <async_start>
}
    677a:	b002      	add	sp, #8
    677c:	bd10      	pop	{r4, pc}

0000677e <onoff_started_callback>:
	return &data->mgr[type];
    677e:	6900      	ldr	r0, [r0, #16]
{
    6780:	b410      	push	{r4}
	return &data->mgr[type];
    6782:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6784:	241c      	movs	r4, #28
    6786:	fb03 0004 	mla	r0, r3, r4, r0
    678a:	2100      	movs	r1, #0
}
    678c:	bc10      	pop	{r4}
	notify(mgr, 0);
    678e:	4710      	bx	r2

00006790 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6790:	2000      	movs	r0, #0
    6792:	f000 b9c5 	b.w	6b20 <nrfx_clock_start>

00006796 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6796:	2000      	movs	r0, #0
    6798:	f000 b9ff 	b.w	6b9a <nrfx_clock_stop>

0000679c <blocking_start_callback>:
{
    679c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    679e:	f7fe bd81 	b.w	52a4 <z_impl_k_sem_give>

000067a2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67a2:	6843      	ldr	r3, [r0, #4]
    67a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    67a6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    67aa:	600b      	str	r3, [r1, #0]
}
    67ac:	2000      	movs	r0, #0
    67ae:	4770      	bx	lr

000067b0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67b0:	6843      	ldr	r3, [r0, #4]
    67b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    67b4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    67b8:	4042      	eors	r2, r0
    67ba:	400a      	ands	r2, r1
    67bc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    67be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    67c2:	2000      	movs	r0, #0
    67c4:	4770      	bx	lr

000067c6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67c6:	6843      	ldr	r3, [r0, #4]
    67c8:	685b      	ldr	r3, [r3, #4]
}
    67ca:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    67cc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    67d0:	4770      	bx	lr

000067d2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67d2:	6843      	ldr	r3, [r0, #4]
    67d4:	685b      	ldr	r3, [r3, #4]
}
    67d6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    67d8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    67dc:	4770      	bx	lr

000067de <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67de:	6843      	ldr	r3, [r0, #4]
    67e0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    67e2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    67e6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    67e8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    67ec:	2000      	movs	r0, #0
    67ee:	4770      	bx	lr

000067f0 <gpio_nrfx_manage_callback>:
	return port->data;
    67f0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    67f2:	6858      	ldr	r0, [r3, #4]
{
    67f4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    67f6:	b158      	cbz	r0, 6810 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    67f8:	2400      	movs	r4, #0
    67fa:	4281      	cmp	r1, r0
    67fc:	d112      	bne.n	6824 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    67fe:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6800:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6802:	b954      	cbnz	r4, 681a <gpio_nrfx_manage_callback+0x2a>
    6804:	428d      	cmp	r5, r1
	list->head = node;
    6806:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6808:	d100      	bne.n	680c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    680a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    680c:	2000      	movs	r0, #0
    680e:	6008      	str	r0, [r1, #0]
	if (set) {
    6810:	b96a      	cbnz	r2, 682e <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6812:	2000      	movs	r0, #0
}
    6814:	bd30      	pop	{r4, r5, pc}
    6816:	4628      	mov	r0, r5
    6818:	e7ef      	b.n	67fa <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    681a:	428d      	cmp	r5, r1
	parent->next = child;
    681c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    681e:	bf08      	it	eq
    6820:	609c      	streq	r4, [r3, #8]
}
    6822:	e7f3      	b.n	680c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6824:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6826:	4604      	mov	r4, r0
    6828:	2d00      	cmp	r5, #0
    682a:	d1f4      	bne.n	6816 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    682c:	b13a      	cbz	r2, 683e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    682e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6830:	685a      	ldr	r2, [r3, #4]
    6832:	600a      	str	r2, [r1, #0]
	list->head = node;
    6834:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6836:	2800      	cmp	r0, #0
    6838:	d1eb      	bne.n	6812 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    683a:	6099      	str	r1, [r3, #8]
}
    683c:	e7ea      	b.n	6814 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    683e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6842:	e7e7      	b.n	6814 <gpio_nrfx_manage_callback+0x24>

00006844 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    6844:	6902      	ldr	r2, [r0, #16]
{
    6846:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6848:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    684c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6850:	2000      	movs	r0, #0
    6852:	4770      	bx	lr

00006854 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6854:	6843      	ldr	r3, [r0, #4]
    6856:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6858:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    685c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6860:	4770      	bx	lr

00006862 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6862:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6864:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6866:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6868:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    686c:	b148      	cbz	r0, 6882 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    686e:	7c52      	ldrb	r2, [r2, #17]
    6870:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6872:	2000      	movs	r0, #0
    6874:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6878:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    687c:	2201      	movs	r2, #1
    687e:	601a      	str	r2, [r3, #0]
	return 0;
    6880:	4770      	bx	lr
		return -1;
    6882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6886:	4770      	bx	lr

00006888 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6888:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    688a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    688c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6890:	b940      	cbnz	r0, 68a4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6892:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6894:	079b      	lsls	r3, r3, #30
    6896:	d406      	bmi.n	68a6 <is_tx_ready.isra.0+0x1e>
    6898:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    689c:	3800      	subs	r0, #0
    689e:	bf18      	it	ne
    68a0:	2001      	movne	r0, #1
    68a2:	4770      	bx	lr
    68a4:	2001      	movs	r0, #1
}
    68a6:	4770      	bx	lr

000068a8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    68a8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    68aa:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    68ac:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    68b0:	05c9      	lsls	r1, r1, #23
    68b2:	d518      	bpl.n	68e6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    68b8:	b1a9      	cbz	r1, 68e6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    68ba:	f04f 0020 	mov.w	r0, #32
    68be:	f3ef 8111 	mrs	r1, BASEPRI
    68c2:	f380 8812 	msr	BASEPRI_MAX, r0
    68c6:	f3bf 8f6f 	isb	sy
    68ca:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    68ce:	b130      	cbz	r0, 68de <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68d0:	2000      	movs	r0, #0
    68d2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    68d6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68da:	2001      	movs	r0, #1
    68dc:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    68de:	f381 8811 	msr	BASEPRI, r1
    68e2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    68e6:	6852      	ldr	r2, [r2, #4]
    68e8:	06d2      	lsls	r2, r2, #27
    68ea:	d515      	bpl.n	6918 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    68ec:	f04f 0120 	mov.w	r1, #32
    68f0:	f3ef 8211 	mrs	r2, BASEPRI
    68f4:	f381 8812 	msr	BASEPRI_MAX, r1
    68f8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68fc:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6900:	b111      	cbz	r1, 6908 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6902:	2100      	movs	r1, #0
    6904:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    690c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6910:	f382 8811 	msr	BASEPRI, r2
    6914:	f3bf 8f6f 	isb	sy
}
    6918:	4770      	bx	lr

0000691a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    691a:	b510      	push	{r4, lr}
    691c:	2200      	movs	r2, #0
    691e:	4604      	mov	r4, r0
    6920:	2101      	movs	r1, #1
    6922:	2028      	movs	r0, #40	; 0x28
    6924:	f7fb fcde 	bl	22e4 <z_arm_irq_priority_set>
    6928:	2028      	movs	r0, #40	; 0x28
    692a:	f7fb fcbd 	bl	22a8 <arch_irq_enable>
    692e:	4620      	mov	r0, r4
    6930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6934:	f7fd b820 	b.w	3978 <uarte_instance_init.constprop.0>

00006938 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6938:	b510      	push	{r4, lr}
    693a:	2200      	movs	r2, #0
    693c:	4604      	mov	r4, r0
    693e:	2101      	movs	r1, #1
    6940:	2002      	movs	r0, #2
    6942:	f7fb fccf 	bl	22e4 <z_arm_irq_priority_set>
    6946:	2002      	movs	r0, #2
    6948:	f7fb fcae 	bl	22a8 <arch_irq_enable>
    694c:	4620      	mov	r0, r4
    694e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6952:	f7fd b811 	b.w	3978 <uarte_instance_init.constprop.0>

00006956 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6956:	4770      	bx	lr

00006958 <sys_clock_cycle_get_32>:
{
    6958:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    695a:	f7fd f985 	bl	3c68 <z_nrf_rtc_timer_read>
}
    695e:	bd08      	pop	{r3, pc}

00006960 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6960:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6962:	6843      	ldr	r3, [r0, #4]
    6964:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6966:	7a03      	ldrb	r3, [r0, #8]
    6968:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    696c:	3b01      	subs	r3, #1
    696e:	00db      	lsls	r3, r3, #3
    6970:	6845      	ldr	r5, [r0, #4]
    6972:	6814      	ldr	r4, [r2, #0]
    6974:	441d      	add	r5, r3
    6976:	42ac      	cmp	r4, r5
    6978:	d902      	bls.n	6980 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    697a:	f06f 0001 	mvn.w	r0, #1
}
    697e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6980:	7965      	ldrb	r5, [r4, #5]
    6982:	428d      	cmp	r5, r1
    6984:	d002      	beq.n	698c <pinctrl_lookup_state+0x2c>
		(*state)++;
    6986:	3408      	adds	r4, #8
    6988:	6014      	str	r4, [r2, #0]
    698a:	e7f1      	b.n	6970 <pinctrl_lookup_state+0x10>
			return 0;
    698c:	2000      	movs	r0, #0
    698e:	e7f6      	b.n	697e <pinctrl_lookup_state+0x1e>

00006990 <nrf_gpio_pin_write>:
    if (value == 0)
    6990:	b909      	cbnz	r1, 6996 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    6992:	f7fd bb21 	b.w	3fd8 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    6996:	f7fd bb51 	b.w	403c <nrf_gpio_pin_set>

0000699a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    699a:	b570      	push	{r4, r5, r6, lr}
    699c:	4615      	mov	r5, r2
    699e:	4604      	mov	r4, r0
    69a0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    69a4:	42a6      	cmp	r6, r4
    69a6:	d101      	bne.n	69ac <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    69a8:	2000      	movs	r0, #0
}
    69aa:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    69ac:	6823      	ldr	r3, [r4, #0]
    69ae:	0c1a      	lsrs	r2, r3, #16
    69b0:	2a22      	cmp	r2, #34	; 0x22
    69b2:	f200 808e 	bhi.w	6ad2 <pinctrl_configure_pins+0x138>
    69b6:	e8df f002 	tbb	[pc, r2]
    69ba:	1d12      	.short	0x1d12
    69bc:	39294324 	.word	0x39294324
    69c0:	8c8c8c43 	.word	0x8c8c8c43
    69c4:	8c4d488c 	.word	0x8c4d488c
    69c8:	8c8c8c8c 	.word	0x8c8c8c8c
    69cc:	8c8c8c8c 	.word	0x8c8c8c8c
    69d0:	68635e52 	.word	0x68635e52
    69d4:	6d8c8c8c 	.word	0x6d8c8c8c
    69d8:	827d7873 	.word	0x827d7873
    69dc:	87          	.byte	0x87
    69dd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    69de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69e2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    69e6:	6820      	ldr	r0, [r4, #0]
    69e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    69ec:	f7fd fb26 	bl	403c <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    69f0:	2201      	movs	r2, #1
    69f2:	e015      	b.n	6a20 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    69f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69f8:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    69fc:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    69fe:	2100      	movs	r1, #0
    6a00:	e00f      	b.n	6a22 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a06:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    6a0a:	e7ec      	b.n	69e6 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a10:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6a14:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    6a16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6a1a:	f7fd fadd 	bl	3fd8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6a1e:	2200      	movs	r2, #0
    6a20:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a22:	6820      	ldr	r0, [r4, #0]
    6a24:	f7fd fae8 	bl	3ff8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6a28:	3404      	adds	r4, #4
    6a2a:	e7bb      	b.n	69a4 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a30:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6a34:	6820      	ldr	r0, [r4, #0]
    6a36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6a3a:	f7fd facd 	bl	3fd8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6a3e:	e7d7      	b.n	69f0 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a44:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a48:	e7d8      	b.n	69fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a4e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a52:	e7d3      	b.n	69fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a58:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    6a5c:	e7ce      	b.n	69fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a62:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6a66:	6820      	ldr	r0, [r4, #0]
    6a68:	f3c0 3140 	ubfx	r1, r0, #13, #1
    6a6c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6a70:	f7ff ff8e 	bl	6990 <nrf_gpio_pin_write>
    6a74:	e7bc      	b.n	69f0 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a7a:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6a7e:	e7f2      	b.n	6a66 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a84:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6a88:	e7ed      	b.n	6a66 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    6a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a8e:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    6a92:	e7e8      	b.n	6a66 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    6a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a98:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a9c:	2201      	movs	r2, #1
    6a9e:	e7ae      	b.n	69fe <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    6aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6aa4:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6aa8:	e7f8      	b.n	6a9c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    6aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6aae:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6ab2:	e7f3      	b.n	6a9c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ab8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6abc:	e7ee      	b.n	6a9c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ac2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6ac6:	e7e9      	b.n	6a9c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    6ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6acc:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    6ad0:	e7e4      	b.n	6a9c <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    6ad2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6ad6:	e768      	b.n	69aa <pinctrl_configure_pins+0x10>

00006ad8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6ad8:	f7ff b96c 	b.w	5db4 <nrf_cc3xx_platform_init_no_rng>

00006adc <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6adc:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6ade:	f7fb faab 	bl	2038 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6ae2:	f7fb fb5d 	bl	21a0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6aea:	f7ff b963 	b.w	5db4 <nrf_cc3xx_platform_init_no_rng>

00006aee <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6aee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6af2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    6af6:	f1a0 0308 	sub.w	r3, r0, #8
    6afa:	4258      	negs	r0, r3
    6afc:	4158      	adcs	r0, r3
    6afe:	4770      	bx	lr

00006b00 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6b00:	4700      	bx	r0

00006b02 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6b02:	f000 ba35 	b.w	6f70 <z_impl_k_busy_wait>

00006b06 <nrfx_clock_enable>:
{
    6b06:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6b08:	2000      	movs	r0, #0
    6b0a:	f7fb fbdd 	bl	22c8 <arch_irq_is_enabled>
    6b0e:	b908      	cbnz	r0, 6b14 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6b10:	f7fb fbca 	bl	22a8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b18:	2200      	movs	r2, #0
    6b1a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6b1e:	bd08      	pop	{r3, pc}

00006b20 <nrfx_clock_start>:
{
    6b20:	b508      	push	{r3, lr}
    switch (domain)
    6b22:	b110      	cbz	r0, 6b2a <nrfx_clock_start+0xa>
    6b24:	2801      	cmp	r0, #1
    6b26:	d02d      	beq.n	6b84 <nrfx_clock_start+0x64>
}
    6b28:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6b2e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b32:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6b36:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    6b3a:	d10b      	bne.n	6b54 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6b3c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6b40:	07c9      	lsls	r1, r1, #31
    6b42:	d510      	bpl.n	6b66 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6b44:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    6b48:	079b      	lsls	r3, r3, #30
    6b4a:	d408      	bmi.n	6b5e <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    6b4c:	2302      	movs	r3, #2
    6b4e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    6b52:	e7e9      	b.n	6b28 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6b54:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6b58:	2b01      	cmp	r3, #1
    6b5a:	d004      	beq.n	6b66 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    6b5c:	b11b      	cbz	r3, 6b66 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6b5e:	2000      	movs	r0, #0
    6b60:	f7fd fbf0 	bl	4344 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6b64:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6b6a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b6e:	2300      	movs	r3, #0
    6b70:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6b74:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6b78:	2302      	movs	r3, #2
    6b7a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b7e:	2301      	movs	r3, #1
    6b80:	6093      	str	r3, [r2, #8]
}
    6b82:	e7d1      	b.n	6b28 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b88:	2200      	movs	r2, #0
    6b8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6b8e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6b92:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b96:	6018      	str	r0, [r3, #0]
}
    6b98:	e7c6      	b.n	6b28 <nrfx_clock_start+0x8>

00006b9a <nrfx_clock_stop>:
    clock_stop(domain);
    6b9a:	f7fd bbd3 	b.w	4344 <clock_stop>

00006b9e <nrf_gpio_reconfigure>:
{
    6b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ba0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ba2:	a801      	add	r0, sp, #4
{
    6ba4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6ba8:	4617      	mov	r7, r2
    6baa:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6bac:	f7fd fc62 	bl	4474 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6bb0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6bb2:	2f00      	cmp	r7, #0
    6bb4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6bb8:	bf14      	ite	ne
    6bba:	2302      	movne	r3, #2
    6bbc:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6bbe:	2900      	cmp	r1, #0
    6bc0:	bf18      	it	ne
    6bc2:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6bc6:	2d00      	cmp	r5, #0
    6bc8:	bf14      	ite	ne
    6bca:	f04f 0c0c 	movne.w	ip, #12
    6bce:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6bd2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6bd4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6bd8:	bf14      	ite	ne
    6bda:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6bde:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6be2:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6be4:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6be8:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6bec:	bf14      	ite	ne
    6bee:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6bf2:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6bf6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6bfa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6bfe:	b101      	cbz	r1, 6c02 <nrf_gpio_reconfigure+0x64>
    6c00:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6c02:	b10f      	cbz	r7, 6c08 <nrf_gpio_reconfigure+0x6a>
    6c04:	783f      	ldrb	r7, [r7, #0]
    6c06:	007f      	lsls	r7, r7, #1
    6c08:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6c0a:	b10d      	cbz	r5, 6c10 <nrf_gpio_reconfigure+0x72>
    6c0c:	782d      	ldrb	r5, [r5, #0]
    6c0e:	00ad      	lsls	r5, r5, #2
    6c10:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6c12:	b10c      	cbz	r4, 6c18 <nrf_gpio_reconfigure+0x7a>
    6c14:	7822      	ldrb	r2, [r4, #0]
    6c16:	0214      	lsls	r4, r2, #8
    6c18:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6c1a:	b10e      	cbz	r6, 6c20 <nrf_gpio_reconfigure+0x82>
    6c1c:	7836      	ldrb	r6, [r6, #0]
    6c1e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6c20:	432c      	orrs	r4, r5
    6c22:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    6c24:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6c28:	b003      	add	sp, #12
    6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c2c <nrf_gpio_cfg_sense_set>:
{
    6c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6c2e:	f10d 030f 	add.w	r3, sp, #15
    6c32:	9301      	str	r3, [sp, #4]
    6c34:	2300      	movs	r3, #0
{
    6c36:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6c3a:	9300      	str	r3, [sp, #0]
    6c3c:	461a      	mov	r2, r3
    6c3e:	4619      	mov	r1, r3
    6c40:	f7ff ffad 	bl	6b9e <nrf_gpio_reconfigure>
}
    6c44:	b005      	add	sp, #20
    6c46:	f85d fb04 	ldr.w	pc, [sp], #4

00006c4a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6c4a:	f7fd bf79 	b.w	4b40 <_DoInit>

00006c4e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6c4e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6c50:	f7ff fffb 	bl	6c4a <SEGGER_RTT_Init>

	return 0;
}
    6c54:	2000      	movs	r0, #0
    6c56:	bd08      	pop	{r3, pc}

00006c58 <z_device_state_init>:
}
    6c58:	4770      	bx	lr

00006c5a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6c5a:	b138      	cbz	r0, 6c6c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6c5c:	68c3      	ldr	r3, [r0, #12]
    6c5e:	8818      	ldrh	r0, [r3, #0]
    6c60:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6c64:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6c68:	4258      	negs	r0, r3
    6c6a:	4158      	adcs	r0, r3
}
    6c6c:	4770      	bx	lr

00006c6e <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6c6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6c70:	ab0b      	add	r3, sp, #44	; 0x2c
    6c72:	9305      	str	r3, [sp, #20]
    6c74:	9303      	str	r3, [sp, #12]
    6c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c78:	9302      	str	r3, [sp, #8]
    6c7a:	2300      	movs	r3, #0
    6c7c:	e9cd 3300 	strd	r3, r3, [sp]
    6c80:	2201      	movs	r2, #1
    6c82:	4618      	mov	r0, r3
    6c84:	f7fa ff98 	bl	1bb8 <z_impl_z_log_msg2_runtime_vcreate>
}
    6c88:	b007      	add	sp, #28
    6c8a:	f85d fb04 	ldr.w	pc, [sp], #4

00006c8e <z_early_memset>:
	(void) memset(dst, c, n);
    6c8e:	f7ff bcb1 	b.w	65f4 <memset>

00006c92 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6c92:	f7ff bca4 	b.w	65de <memcpy>

00006c96 <k_mem_slab_init>:
{
    6c96:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6c98:	2400      	movs	r4, #0
    6c9a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6c9c:	ea41 0402 	orr.w	r4, r1, r2
    6ca0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6ca4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    6ca8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6caa:	d10c      	bne.n	6cc6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    6cac:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6cae:	42a3      	cmp	r3, r4
    6cb0:	d103      	bne.n	6cba <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    6cb2:	e9c0 0000 	strd	r0, r0, [r0]
}
    6cb6:	2000      	movs	r0, #0
}
    6cb8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6cba:	6945      	ldr	r5, [r0, #20]
    6cbc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6cbe:	3401      	adds	r4, #1
		slab->free_list = p;
    6cc0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    6cc2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6cc4:	e7f3      	b.n	6cae <k_mem_slab_init+0x18>
		return -EINVAL;
    6cc6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6cca:	e7f5      	b.n	6cb8 <k_mem_slab_init+0x22>

00006ccc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cce:	4604      	mov	r4, r0
    6cd0:	460d      	mov	r5, r1
	__asm__ volatile(
    6cd2:	f04f 0320 	mov.w	r3, #32
    6cd6:	f3ef 8611 	mrs	r6, BASEPRI
    6cda:	f383 8812 	msr	BASEPRI_MAX, r3
    6cde:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6ce2:	6947      	ldr	r7, [r0, #20]
    6ce4:	b977      	cbnz	r7, 6d04 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6ce6:	f000 f8e7 	bl	6eb8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6cea:	b158      	cbz	r0, 6d04 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6cec:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6cee:	6142      	str	r2, [r0, #20]
    6cf0:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6cf2:	f000 f870 	bl	6dd6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6cf6:	4631      	mov	r1, r6
    6cf8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6d00:	f7fe bb5e 	b.w	53c0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6d04:	682b      	ldr	r3, [r5, #0]
    6d06:	6962      	ldr	r2, [r4, #20]
    6d08:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6d0a:	682b      	ldr	r3, [r5, #0]
    6d0c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6d0e:	69a3      	ldr	r3, [r4, #24]
    6d10:	3b01      	subs	r3, #1
    6d12:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6d14:	f386 8811 	msr	BASEPRI, r6
    6d18:	f3bf 8f6f 	isb	sy
}
    6d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006d1e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6d1e:	f3ef 8005 	mrs	r0, IPSR
}
    6d22:	3800      	subs	r0, #0
    6d24:	bf18      	it	ne
    6d26:	2001      	movne	r0, #1
    6d28:	4770      	bx	lr

00006d2a <k_thread_name_get>:
}
    6d2a:	2000      	movs	r0, #0
    6d2c:	4770      	bx	lr

00006d2e <z_pm_save_idle_exit>:
{
    6d2e:	b508      	push	{r3, lr}
	pm_system_resume();
    6d30:	f7fb f86a 	bl	1e08 <pm_system_resume>
}
    6d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6d38:	f7ff be0d 	b.w	6956 <sys_clock_idle_exit>

00006d3c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6d3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6d40:	428b      	cmp	r3, r1
    6d42:	d001      	beq.n	6d48 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6d44:	f7fe bca4 	b.w	5690 <z_set_prio>
}
    6d48:	2000      	movs	r0, #0
    6d4a:	4770      	bx	lr

00006d4c <z_impl_k_mutex_init>:
{
    6d4c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6d4e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6d50:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6d54:	e9c3 3300 	strd	r3, r3, [r3]
}
    6d58:	4770      	bx	lr

00006d5a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6d5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6d5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6d60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6d62:	2300      	movs	r3, #0
	node->prev = NULL;
    6d64:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6d68:	4770      	bx	lr

00006d6a <unpend_thread_no_timeout>:
{
    6d6a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6d6c:	f7ff fff5 	bl	6d5a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6d70:	7b43      	ldrb	r3, [r0, #13]
    6d72:	f023 0302 	bic.w	r3, r3, #2
    6d76:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6d78:	2300      	movs	r3, #0
    6d7a:	6083      	str	r3, [r0, #8]
}
    6d7c:	bd08      	pop	{r3, pc}

00006d7e <z_unpend_thread_no_timeout>:
{
    6d7e:	b508      	push	{r3, lr}
	__asm__ volatile(
    6d80:	f04f 0320 	mov.w	r3, #32
    6d84:	f3ef 8111 	mrs	r1, BASEPRI
    6d88:	f383 8812 	msr	BASEPRI_MAX, r3
    6d8c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6d90:	f7ff ffeb 	bl	6d6a <unpend_thread_no_timeout>
	__asm__ volatile(
    6d94:	f381 8811 	msr	BASEPRI, r1
    6d98:	f3bf 8f6f 	isb	sy
}
    6d9c:	bd08      	pop	{r3, pc}

00006d9e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6d9e:	4603      	mov	r3, r0
    6da0:	b920      	cbnz	r0, 6dac <z_reschedule_irqlock+0xe>
    6da2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6da6:	b90a      	cbnz	r2, 6dac <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6da8:	f7fb bad4 	b.w	2354 <arch_swap>
    6dac:	f383 8811 	msr	BASEPRI, r3
    6db0:	f3bf 8f6f 	isb	sy
}
    6db4:	4770      	bx	lr

00006db6 <z_reschedule_unlocked>:
	__asm__ volatile(
    6db6:	f04f 0320 	mov.w	r3, #32
    6dba:	f3ef 8011 	mrs	r0, BASEPRI
    6dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    6dc2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6dc6:	f7ff bfea 	b.w	6d9e <z_reschedule_irqlock>

00006dca <z_priq_dumb_best>:
{
    6dca:	4603      	mov	r3, r0
	return list->head == list;
    6dcc:	6800      	ldr	r0, [r0, #0]
}
    6dce:	4283      	cmp	r3, r0
    6dd0:	bf08      	it	eq
    6dd2:	2000      	moveq	r0, #0
    6dd4:	4770      	bx	lr

00006dd6 <z_ready_thread>:
{
    6dd6:	b510      	push	{r4, lr}
    6dd8:	f04f 0320 	mov.w	r3, #32
    6ddc:	f3ef 8411 	mrs	r4, BASEPRI
    6de0:	f383 8812 	msr	BASEPRI_MAX, r3
    6de4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6de8:	f7fe fbac 	bl	5544 <ready_thread>
	__asm__ volatile(
    6dec:	f384 8811 	msr	BASEPRI, r4
    6df0:	f3bf 8f6f 	isb	sy
}
    6df4:	bd10      	pop	{r4, pc}

00006df6 <z_thread_timeout>:
{
    6df6:	b510      	push	{r4, lr}
    6df8:	4601      	mov	r1, r0
	__asm__ volatile(
    6dfa:	f04f 0320 	mov.w	r3, #32
    6dfe:	f3ef 8411 	mrs	r4, BASEPRI
    6e02:	f383 8812 	msr	BASEPRI_MAX, r3
    6e06:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6e0a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6e0e:	f013 0f28 	tst.w	r3, #40	; 0x28
    6e12:	d10d      	bne.n	6e30 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6e14:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6e18:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6e1a:	b10b      	cbz	r3, 6e20 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6e1c:	f7ff ffa5 	bl	6d6a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6e20:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6e24:	f023 0314 	bic.w	r3, r3, #20
    6e28:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6e2c:	f7fe fb8a 	bl	5544 <ready_thread>
	__asm__ volatile(
    6e30:	f384 8811 	msr	BASEPRI, r4
    6e34:	f3bf 8f6f 	isb	sy
}
    6e38:	bd10      	pop	{r4, pc}

00006e3a <add_to_waitq_locked>:
{
    6e3a:	b538      	push	{r3, r4, r5, lr}
    6e3c:	4604      	mov	r4, r0
    6e3e:	460d      	mov	r5, r1
	unready_thread(thread);
    6e40:	f7fe fbd4 	bl	55ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6e44:	7b63      	ldrb	r3, [r4, #13]
    6e46:	f043 0302 	orr.w	r3, r3, #2
    6e4a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6e4c:	b195      	cbz	r5, 6e74 <add_to_waitq_locked+0x3a>
    6e4e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6e50:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e52:	429d      	cmp	r5, r3
    6e54:	d015      	beq.n	6e82 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e56:	b1a3      	cbz	r3, 6e82 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    6e58:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6e5c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6e60:	4291      	cmp	r1, r2
    6e62:	d008      	beq.n	6e76 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    6e64:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e66:	2a00      	cmp	r2, #0
    6e68:	dd05      	ble.n	6e76 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6e6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6e6c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6e70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6e72:	605c      	str	r4, [r3, #4]
}
    6e74:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6e76:	686a      	ldr	r2, [r5, #4]
    6e78:	4293      	cmp	r3, r2
    6e7a:	d002      	beq.n	6e82 <add_to_waitq_locked+0x48>
    6e7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d1ec      	bne.n	6e5c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6e82:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6e84:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6e88:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6e8a:	606c      	str	r4, [r5, #4]
}
    6e8c:	e7f2      	b.n	6e74 <add_to_waitq_locked+0x3a>

00006e8e <z_unpend1_no_timeout>:
{
    6e8e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6e90:	f04f 0320 	mov.w	r3, #32
    6e94:	f3ef 8411 	mrs	r4, BASEPRI
    6e98:	f383 8812 	msr	BASEPRI_MAX, r3
    6e9c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6ea0:	f7ff ff93 	bl	6dca <z_priq_dumb_best>
		if (thread != NULL) {
    6ea4:	4601      	mov	r1, r0
    6ea6:	b108      	cbz	r0, 6eac <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    6ea8:	f7ff ff5f 	bl	6d6a <unpend_thread_no_timeout>
	__asm__ volatile(
    6eac:	f384 8811 	msr	BASEPRI, r4
    6eb0:	f3bf 8f6f 	isb	sy
}
    6eb4:	4608      	mov	r0, r1
    6eb6:	bd10      	pop	{r4, pc}

00006eb8 <z_unpend_first_thread>:
{
    6eb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6eba:	f04f 0320 	mov.w	r3, #32
    6ebe:	f3ef 8511 	mrs	r5, BASEPRI
    6ec2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ec6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6eca:	f7ff ff7e 	bl	6dca <z_priq_dumb_best>
		if (thread != NULL) {
    6ece:	4604      	mov	r4, r0
    6ed0:	b120      	cbz	r0, 6edc <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    6ed2:	f7ff ff4a 	bl	6d6a <unpend_thread_no_timeout>
    6ed6:	3018      	adds	r0, #24
    6ed8:	f000 f806 	bl	6ee8 <z_abort_timeout>
	__asm__ volatile(
    6edc:	f385 8811 	msr	BASEPRI, r5
    6ee0:	f3bf 8f6f 	isb	sy
}
    6ee4:	4620      	mov	r0, r4
    6ee6:	bd38      	pop	{r3, r4, r5, pc}

00006ee8 <z_abort_timeout>:
{
    6ee8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6eea:	f04f 0220 	mov.w	r2, #32
    6eee:	f3ef 8411 	mrs	r4, BASEPRI
    6ef2:	f382 8812 	msr	BASEPRI_MAX, r2
    6ef6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6efa:	6803      	ldr	r3, [r0, #0]
    6efc:	b13b      	cbz	r3, 6f0e <z_abort_timeout+0x26>
			remove_timeout(to);
    6efe:	f7fe fdad 	bl	5a5c <remove_timeout>
			ret = 0;
    6f02:	2000      	movs	r0, #0
	__asm__ volatile(
    6f04:	f384 8811 	msr	BASEPRI, r4
    6f08:	f3bf 8f6f 	isb	sy
}
    6f0c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6f0e:	f06f 0015 	mvn.w	r0, #21
    6f12:	e7f7      	b.n	6f04 <z_abort_timeout+0x1c>

00006f14 <z_get_next_timeout_expiry>:
{
    6f14:	b510      	push	{r4, lr}
	__asm__ volatile(
    6f16:	f04f 0320 	mov.w	r3, #32
    6f1a:	f3ef 8411 	mrs	r4, BASEPRI
    6f1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f22:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6f26:	f7fe fd73 	bl	5a10 <next_timeout>
	__asm__ volatile(
    6f2a:	f384 8811 	msr	BASEPRI, r4
    6f2e:	f3bf 8f6f 	isb	sy
}
    6f32:	bd10      	pop	{r4, pc}

00006f34 <z_set_timeout_expiry>:
{
    6f34:	b570      	push	{r4, r5, r6, lr}
    6f36:	4604      	mov	r4, r0
    6f38:	460d      	mov	r5, r1
	__asm__ volatile(
    6f3a:	f04f 0320 	mov.w	r3, #32
    6f3e:	f3ef 8611 	mrs	r6, BASEPRI
    6f42:	f383 8812 	msr	BASEPRI_MAX, r3
    6f46:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6f4a:	f7fe fd61 	bl	5a10 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6f4e:	2801      	cmp	r0, #1
    6f50:	dd05      	ble.n	6f5e <z_set_timeout_expiry+0x2a>
    6f52:	42a0      	cmp	r0, r4
    6f54:	db03      	blt.n	6f5e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6f56:	4629      	mov	r1, r5
    6f58:	4620      	mov	r0, r4
    6f5a:	f7fd f801 	bl	3f60 <sys_clock_set_timeout>
	__asm__ volatile(
    6f5e:	f386 8811 	msr	BASEPRI, r6
    6f62:	f3bf 8f6f 	isb	sy
}
    6f66:	bd70      	pop	{r4, r5, r6, pc}

00006f68 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6f68:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6f6a:	f7fe fe67 	bl	5c3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6f6e:	bd08      	pop	{r3, pc}

00006f70 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6f70:	b108      	cbz	r0, 6f76 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6f72:	f7fb bf2d 	b.w	2dd0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6f76:	4770      	bx	lr

00006f78 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6f78:	b510      	push	{r4, lr}
    6f7a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6f7c:	f7ff ffb4 	bl	6ee8 <z_abort_timeout>

	if (inactive) {
    6f80:	b9b0      	cbnz	r0, 6fb0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    6f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f84:	b10b      	cbz	r3, 6f8a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6f86:	4620      	mov	r0, r4
    6f88:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    6f8a:	f104 0018 	add.w	r0, r4, #24
    6f8e:	f7ff ff7e 	bl	6e8e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    6f92:	b168      	cbz	r0, 6fb0 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    6f94:	f7ff ff1f 	bl	6dd6 <z_ready_thread>
	__asm__ volatile(
    6f98:	f04f 0320 	mov.w	r3, #32
    6f9c:	f3ef 8011 	mrs	r0, BASEPRI
    6fa0:	f383 8812 	msr	BASEPRI_MAX, r3
    6fa4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    6fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    6fac:	f7ff bef7 	b.w	6d9e <z_reschedule_irqlock>
    6fb0:	bd10      	pop	{r4, pc}
	...

00006fb4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6fb4:	f7fd b894 	b.w	40e0 <SystemInit>
