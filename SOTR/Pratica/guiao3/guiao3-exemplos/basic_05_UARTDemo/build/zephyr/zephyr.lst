
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20 16 00 20 a5 1e 00 00 c5 74 00 00 79 1e 00 00      .. .....t..y...
  10:	79 1e 00 00 79 1e 00 00 79 1e 00 00 00 00 00 00     y...y...y.......
	...
  2c:	d5 1a 00 00 79 1e 00 00 00 00 00 00 81 1a 00 00     ....y...........
  3c:	79 1e 00 00                                         y...

00000040 <_irq_vector_table>:
  40:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  50:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  60:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  70:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  80:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  90:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  a0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  b0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  c0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  d0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  e0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................
  f0:	85 1b 00 00 85 1b 00 00 85 1b 00 00 85 1b 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x22>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <uart_cb>:
/* UART callback implementation */
/* Note that callback functions are executed in the scope of interrupt handlers. */
/* They run asynchronously after hardware/software interrupts and have a higher priority than all threads */
/* Should be kept as short and simple as possible. Heavier processing should be deferred to a task with suitable priority*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
     3dc:	b538      	push	{r3, r4, r5, lr}
    int err;

    switch (evt->type) {
     3de:	780b      	ldrb	r3, [r1, #0]
{
     3e0:	460c      	mov	r4, r1
    switch (evt->type) {
     3e2:	2b06      	cmp	r3, #6
     3e4:	d83b      	bhi.n	45e <CONFIG_FLASH_SIZE+0x5e>
     3e6:	e8df f003 	tbb	[pc, r3]
     3ea:	0904      	.short	0x0904
     3ec:	201e1c0b 	.word	0x201e1c0b
     3f0:	38          	.byte	0x38
     3f1:	00          	.byte	0x00
	
        case UART_TX_DONE:
		    printk("UART_TX_DONE event \n\r");
     3f2:	481c      	ldr	r0, [pc, #112]	; (464 <CONFIG_FLASH_SIZE+0x64>)
	    default:
            printk("UART: unknown event \n\r");
		    break;
    }

     3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            printk("UART: unknown event \n\r");
     3f8:	f006 bf4e 	b.w	7298 <printk>
	    	printk("UART_TX_ABORTED event \n\r");
     3fc:	481a      	ldr	r0, [pc, #104]	; (468 <CONFIG_FLASH_SIZE+0x68>)
     3fe:	e7f9      	b.n	3f4 <uart_cb+0x18>
		    printk("UART_RX_RDY event \n\r");
     400:	481a      	ldr	r0, [pc, #104]	; (46c <CONFIG_FLASH_SIZE+0x6c>)
            memcpy(&rx_chars[uart_rxbuf_nchar],&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
     402:	4d1b      	ldr	r5, [pc, #108]	; (470 <CONFIG_FLASH_SIZE+0x70>)
		    printk("UART_RX_RDY event \n\r");
     404:	f006 ff48 	bl	7298 <printk>
            memcpy(&rx_chars[uart_rxbuf_nchar],&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
     408:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
     40c:	4819      	ldr	r0, [pc, #100]	; (474 <CONFIG_FLASH_SIZE+0x74>)
     40e:	682b      	ldr	r3, [r5, #0]
     410:	4401      	add	r1, r0
     412:	4819      	ldr	r0, [pc, #100]	; (478 <CONFIG_FLASH_SIZE+0x78>)
     414:	4418      	add	r0, r3
     416:	f007 f882 	bl	751e <memcpy>
            uart_rxbuf_nchar++;           
     41a:	682b      	ldr	r3, [r5, #0]
     41c:	3301      	adds	r3, #1
     41e:	602b      	str	r3, [r5, #0]
     420:	bd38      	pop	{r3, r4, r5, pc}
		    printk("UART_RX_BUF_REQUEST event \n\r");
     422:	4816      	ldr	r0, [pc, #88]	; (47c <CONFIG_FLASH_SIZE+0x7c>)
     424:	e7e6      	b.n	3f4 <uart_cb+0x18>
		    printk("UART_RX_BUF_RELEASED event \n\r");
     426:	4816      	ldr	r0, [pc, #88]	; (480 <CONFIG_FLASH_SIZE+0x80>)
     428:	e7e4      	b.n	3f4 <uart_cb+0x18>
            printk("UART_RX_DISABLED event \n\r");
     42a:	4816      	ldr	r0, [pc, #88]	; (484 <CONFIG_FLASH_SIZE+0x84>)
     42c:	f006 ff34 	bl	7298 <printk>
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
     430:	4b15      	ldr	r3, [pc, #84]	; (488 <CONFIG_FLASH_SIZE+0x88>)
     432:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     434:	6883      	ldr	r3, [r0, #8]
     436:	490f      	ldr	r1, [pc, #60]	; (474 <CONFIG_FLASH_SIZE+0x74>)
     438:	68dc      	ldr	r4, [r3, #12]
     43a:	223c      	movs	r2, #60	; 0x3c
     43c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     440:	47a0      	blx	r4
            if (err) {
     442:	4601      	mov	r1, r0
     444:	2800      	cmp	r0, #0
     446:	d0eb      	beq.n	420 <CONFIG_FLASH_SIZE+0x20>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
     448:	4810      	ldr	r0, [pc, #64]	; (48c <CONFIG_FLASH_SIZE+0x8c>)
     44a:	f006 ff25 	bl	7298 <printk>
     44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1
void _exit(int status);
static inline void exit(int status)
{
	_exit(status);
     452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     456:	f001 bed9 	b.w	220c <_exit>
		    printk("UART_RX_STOPPED event \n\r");
     45a:	480d      	ldr	r0, [pc, #52]	; (490 <CONFIG_FLASH_SIZE+0x90>)
     45c:	e7ca      	b.n	3f4 <uart_cb+0x18>
            printk("UART: unknown event \n\r");
     45e:	480d      	ldr	r0, [pc, #52]	; (494 <CONFIG_FLASH_SIZE+0x94>)
     460:	e7c8      	b.n	3f4 <uart_cb+0x18>
     462:	bf00      	nop
     464:	0000839c 	.word	0x0000839c
     468:	000083b2 	.word	0x000083b2
     46c:	000083cb 	.word	0x000083cb
     470:	200004a4 	.word	0x200004a4
     474:	20000d7c 	.word	0x20000d7c
     478:	20000db8 	.word	0x20000db8
     47c:	000083e0 	.word	0x000083e0
     480:	000083fd 	.word	0x000083fd
     484:	0000841b 	.word	0x0000841b
     488:	200004a0 	.word	0x200004a0
     48c:	00008435 	.word	0x00008435
     490:	0000845d 	.word	0x0000845d
     494:	00008476 	.word	0x00008476

00000498 <main>:
{
     498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     49c:	b0a4      	sub	sp, #144	; 0x90
    uint8_t welcome_mesg[] = "UART demo: Type a few chars in a row and then pause for a little while ...\n\r"; 
     49e:	4935      	ldr	r1, [pc, #212]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     4a0:	224d      	movs	r2, #77	; 0x4d
     4a2:	a810      	add	r0, sp, #64	; 0x40
     4a4:	f007 f83b 	bl	751e <memcpy>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4a8:	4833      	ldr	r0, [pc, #204]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
     4aa:	4c34      	ldr	r4, [pc, #208]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     4ac:	f004 f960 	bl	4770 <z_impl_device_get_binding>
     4b0:	6020      	str	r0, [r4, #0]
    if (uart_dev == NULL) {
     4b2:	b920      	cbnz	r0, 4be <main+0x26>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
     4b4:	4930      	ldr	r1, [pc, #192]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     4b6:	4832      	ldr	r0, [pc, #200]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
                printk("uart_tx() error. Error code:%d\n\r",err);
     4b8:	f006 feee 	bl	7298 <printk>
                return;
     4bc:	e009      	b.n	4d2 <main+0x3a>
        printk("UART binding successful\n\r");
     4be:	4831      	ldr	r0, [pc, #196]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     4c0:	f006 feea 	bl	7298 <printk>
    err = uart_configure(uart_dev, &uart_cfg);
     4c4:	6820      	ldr	r0, [r4, #0]
	if (api->configure == NULL) {
     4c6:	6883      	ldr	r3, [r0, #8]
     4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     4ca:	b92b      	cbnz	r3, 4d8 <main+0x40>
        printk("uart_configure() error. Invalid configuration\n\r");
     4cc:	482e      	ldr	r0, [pc, #184]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4ce:	f006 fee3 	bl	7298 <printk>
}
     4d2:	b024      	add	sp, #144	; 0x90
     4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->configure(dev, cfg);
     4d8:	492c      	ldr	r1, [pc, #176]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     4da:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
     4dc:	3058      	adds	r0, #88	; 0x58
     4de:	d0f5      	beq.n	4cc <main+0x34>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
     4e0:	6820      	ldr	r0, [r4, #0]
	if (api->callback_set == NULL) {
     4e2:	6883      	ldr	r3, [r0, #8]
     4e4:	681b      	ldr	r3, [r3, #0]
     4e6:	b133      	cbz	r3, 4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
	return api->callback_set(dev, callback, user_data);
     4e8:	4929      	ldr	r1, [pc, #164]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     4ea:	2200      	movs	r2, #0
     4ec:	4798      	blx	r3
    if (err) {
     4ee:	4601      	mov	r1, r0
     4f0:	b120      	cbz	r0, 4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
     4f2:	4828      	ldr	r0, [pc, #160]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     4f4:	e7e0      	b.n	4b8 <main+0x20>
		return -ENOSYS;
     4f6:	f06f 0157 	mvn.w	r1, #87	; 0x57
     4fa:	e7fa      	b.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
     4fc:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
     4fe:	6883      	ldr	r3, [r0, #8]
     500:	4925      	ldr	r1, [pc, #148]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     502:	68dd      	ldr	r5, [r3, #12]
     504:	223c      	movs	r2, #60	; 0x3c
     506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     50a:	47a8      	blx	r5
    if (err) {
     50c:	4601      	mov	r1, r0
     50e:	b108      	cbz	r0, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
     510:	4822      	ldr	r0, [pc, #136]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     512:	e7d1      	b.n	4b8 <main+0x20>
    err = uart_tx(uart_dev, welcome_mesg, sizeof(welcome_mesg), SYS_FOREVER_MS);
     514:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
     516:	6883      	ldr	r3, [r0, #8]
     518:	a910      	add	r1, sp, #64	; 0x40
     51a:	685d      	ldr	r5, [r3, #4]
     51c:	224d      	movs	r2, #77	; 0x4d
     51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     522:	47a8      	blx	r5
    if (err) {
     524:	4601      	mov	r1, r0
     526:	bb10      	cbnz	r0, 56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
        if(uart_rxbuf_nchar > 0) {
     528:	4d1d      	ldr	r5, [pc, #116]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
            rx_chars[uart_rxbuf_nchar] = 0; /* Terminate the string */
     52a:	4f1e      	ldr	r7, [pc, #120]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     52c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     530:	2100      	movs	r1, #0
     532:	f005 ff75 	bl	6420 <z_impl_k_sleep>
        if(uart_rxbuf_nchar > 0) {
     536:	682b      	ldr	r3, [r5, #0]
     538:	2b00      	cmp	r3, #0
     53a:	ddf7      	ble.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
            rx_chars[uart_rxbuf_nchar] = 0; /* Terminate the string */
     53c:	682a      	ldr	r2, [r5, #0]
            sprintf(rep_mesg,"You typed [%s]\n\r",rx_chars);            
     53e:	491a      	ldr	r1, [pc, #104]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
            rx_chars[uart_rxbuf_nchar] = 0; /* Terminate the string */
     540:	2300      	movs	r3, #0
     542:	54bb      	strb	r3, [r7, r2]
            sprintf(rep_mesg,"You typed [%s]\n\r",rx_chars);            
     544:	a801      	add	r0, sp, #4
     546:	4a17      	ldr	r2, [pc, #92]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
            uart_rxbuf_nchar = 0;           /* Reset counter */
     548:	602b      	str	r3, [r5, #0]
            sprintf(rep_mesg,"You typed [%s]\n\r",rx_chars);            
     54a:	f001 fe6d 	bl	2228 <sprintf>
            err = uart_tx(uart_dev, rep_mesg, strlen(rep_mesg), SYS_FOREVER_MS);
     54e:	a801      	add	r0, sp, #4
     550:	6826      	ldr	r6, [r4, #0]
     552:	f006 ffc8 	bl	74e6 <strlen>
     556:	4602      	mov	r2, r0
     558:	68b3      	ldr	r3, [r6, #8]
     55a:	a901      	add	r1, sp, #4
     55c:	f8d3 8004 	ldr.w	r8, [r3, #4]
     560:	4630      	mov	r0, r6
     562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     566:	47c0      	blx	r8
            if (err) {
     568:	4601      	mov	r1, r0
     56a:	2800      	cmp	r0, #0
     56c:	d0de      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
                printk("uart_tx() error. Error code:%d\n\r",err);
     56e:	480f      	ldr	r0, [pc, #60]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     570:	e7a2      	b.n	4b8 <main+0x20>
     572:	bf00      	nop
     574:	00008567 	.word	0x00008567
     578:	0000848d 	.word	0x0000848d
     57c:	200004a0 	.word	0x200004a0
     580:	00008494 	.word	0x00008494
     584:	000084c0 	.word	0x000084c0
     588:	000084da 	.word	0x000084da
     58c:	00008188 	.word	0x00008188
     590:	000003dd 	.word	0x000003dd
     594:	0000850a 	.word	0x0000850a
     598:	20000d7c 	.word	0x20000d7c
     59c:	00008435 	.word	0x00008435
     5a0:	200004a4 	.word	0x200004a4
     5a4:	20000db8 	.word	0x20000db8
     5a8:	00008556 	.word	0x00008556
     5ac:	00008535 	.word	0x00008535

000005b0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     5b0:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     5b2:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     5b4:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     5b6:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     5ba:	2c03      	cmp	r4, #3
{
     5bc:	4605      	mov	r5, r0
	switch (method) {
     5be:	d002      	beq.n	5c6 <sys_notify_finalize+0x16>
     5c0:	b12c      	cbz	r4, 5ce <sys_notify_finalize+0x1e>
     5c2:	2000      	movs	r0, #0
     5c4:	e000      	b.n	5c8 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     5c6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     5c8:	2300      	movs	r3, #0
     5ca:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     5cc:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     5ce:	4a05      	ldr	r2, [pc, #20]	; (5e4 <sys_notify_finalize+0x34>)
     5d0:	4905      	ldr	r1, [pc, #20]	; (5e8 <sys_notify_finalize+0x38>)
     5d2:	4806      	ldr	r0, [pc, #24]	; (5ec <sys_notify_finalize+0x3c>)
     5d4:	2345      	movs	r3, #69	; 0x45
     5d6:	f006 ff59 	bl	748c <assert_print>
     5da:	4802      	ldr	r0, [pc, #8]	; (5e4 <sys_notify_finalize+0x34>)
     5dc:	2145      	movs	r1, #69	; 0x45
     5de:	f006 ff4e 	bl	747e <assert_post_action>
     5e2:	e7ee      	b.n	5c2 <sys_notify_finalize+0x12>
     5e4:	000085b4 	.word	0x000085b4
     5e8:	0000867f 	.word	0x0000867f
     5ec:	000085d7 	.word	0x000085d7

000005f0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5f0:	680b      	ldr	r3, [r1, #0]
     5f2:	3301      	adds	r3, #1
     5f4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5f6:	4b01      	ldr	r3, [pc, #4]	; (5fc <char_out+0xc>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	4718      	bx	r3
     5fc:	20000000 	.word	0x20000000

00000600 <__printk_hook_install>:
	_char_out = fn;
     600:	4b01      	ldr	r3, [pc, #4]	; (608 <__printk_hook_install+0x8>)
     602:	6018      	str	r0, [r3, #0]
}
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	20000000 	.word	0x20000000

0000060c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     60c:	b507      	push	{r0, r1, r2, lr}
     60e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     610:	2100      	movs	r1, #0
{
     612:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     614:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     616:	4803      	ldr	r0, [pc, #12]	; (624 <vprintk+0x18>)
     618:	a901      	add	r1, sp, #4
     61a:	f000 fb53 	bl	cc4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     61e:	b003      	add	sp, #12
     620:	f85d fb04 	ldr.w	pc, [sp], #4
     624:	000005f1 	.word	0x000005f1

00000628 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     630:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     632:	f019 0f08 	tst.w	r9, #8
{
     636:	4604      	mov	r4, r0
	if (processing) {
     638:	d022      	beq.n	680 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
     63a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     63c:	bf0c      	ite	eq
     63e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     642:	f049 0920 	orrne.w	r9, r9, #32
     646:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     64a:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     64c:	4620      	mov	r0, r4
     64e:	f004 fbb9 	bl	4dc4 <z_spin_unlock_valid>
     652:	b968      	cbnz	r0, 670 <process_event+0x48>
     654:	4a9b      	ldr	r2, [pc, #620]	; (8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     656:	499c      	ldr	r1, [pc, #624]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     658:	489c      	ldr	r0, [pc, #624]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     65a:	23b9      	movs	r3, #185	; 0xb9
     65c:	f006 ff16 	bl	748c <assert_print>
     660:	489b      	ldr	r0, [pc, #620]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     662:	4621      	mov	r1, r4
     664:	f006 ff12 	bl	748c <assert_print>
     668:	4896      	ldr	r0, [pc, #600]	; (8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     66a:	21b9      	movs	r1, #185	; 0xb9
     66c:	f006 ff07 	bl	747e <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     670:	9b00      	ldr	r3, [sp, #0]
     672:	f383 8811 	msr	BASEPRI, r3
     676:	f3bf 8f6f 	isb	sy
}
     67a:	b003      	add	sp, #12
     67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     680:	4f94      	ldr	r7, [pc, #592]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     682:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8cc <CONFIG_ISR_STACK_SIZE+0xcc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     686:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     68a:	2902      	cmp	r1, #2
     68c:	d106      	bne.n	69c <process_event+0x74>
			evt = process_recheck(mgr);
     68e:	4620      	mov	r0, r4
     690:	f006 fe0f 	bl	72b2 <process_recheck>
		if (evt == EVT_NOP) {
     694:	2800      	cmp	r0, #0
     696:	d0d8      	beq.n	64a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     698:	2801      	cmp	r0, #1
     69a:	d164      	bne.n	766 <process_event+0x13e>
			res = mgr->last_res;
     69c:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6a0:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     6a2:	f1bb 0f00 	cmp.w	fp, #0
     6a6:	da19      	bge.n	6dc <process_event+0xb4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     6a8:	2600      	movs	r6, #0
		*clients = mgr->clients;
     6aa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ac:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     6b0:	e9c4 6600 	strd	r6, r6, [r4]
     6b4:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b8:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6ba:	8ba3      	ldrh	r3, [r4, #28]
     6bc:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6c0:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6c2:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
     6c4:	d003      	beq.n	6ce <process_event+0xa6>
		if (do_monitors
     6c6:	68a2      	ldr	r2, [r4, #8]
     6c8:	2a00      	cmp	r2, #0
     6ca:	f040 8113 	bne.w	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
		    || !sys_slist_is_empty(&clients)
     6ce:	b915      	cbnz	r5, 6d6 <process_event+0xae>
		    || (transit != NULL)) {
     6d0:	2e00      	cmp	r6, #0
     6d2:	f000 8159 	beq.w	988 <CONFIG_ISR_STACK_SIZE+0x188>
     6d6:	f04f 0a00 	mov.w	sl, #0
     6da:	e10d      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6dc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6e0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6e2:	2901      	cmp	r1, #1
     6e4:	d820      	bhi.n	728 <process_event+0x100>
	list->head = NULL;
     6e6:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6e8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     6ec:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     6ee:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6f0:	b29b      	uxth	r3, r3
	list->tail = NULL;
     6f2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6f6:	d10a      	bne.n	70e <process_event+0xe6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6f8:	b13d      	cbz	r5, 70a <process_event+0xe2>
     6fa:	8be2      	ldrh	r2, [r4, #30]
     6fc:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     6fe:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     700:	3201      	adds	r2, #1
     702:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     704:	2900      	cmp	r1, #0
     706:	d1fa      	bne.n	6fe <process_event+0xd6>
     708:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     70a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     70e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     710:	4620      	mov	r0, r4
     712:	f006 fdce 	bl	72b2 <process_recheck>
     716:	4606      	mov	r6, r0
     718:	2800      	cmp	r0, #0
     71a:	d0ce      	beq.n	6ba <process_event+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     71c:	8ba3      	ldrh	r3, [r4, #28]
     71e:	f043 0320 	orr.w	r3, r3, #32
     722:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     724:	2600      	movs	r6, #0
     726:	e7c8      	b.n	6ba <process_event+0x92>
	} else if (state == ONOFF_STATE_TO_OFF) {
     728:	2a04      	cmp	r2, #4
     72a:	d10d      	bne.n	748 <process_event+0x120>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72c:	f023 0307 	bic.w	r3, r3, #7
     730:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     732:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     734:	4620      	mov	r0, r4
     736:	f006 fdbc 	bl	72b2 <process_recheck>
     73a:	4605      	mov	r5, r0
     73c:	b188      	cbz	r0, 762 <process_event+0x13a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     73e:	f042 0220 	orr.w	r2, r2, #32
     742:	83a2      	strh	r2, [r4, #28]
     744:	2500      	movs	r5, #0
     746:	e7ed      	b.n	724 <process_event+0xfc>
		__ASSERT_NO_MSG(false);
     748:	4963      	ldr	r1, [pc, #396]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     74a:	f240 131b 	movw	r3, #283	; 0x11b
     74e:	463a      	mov	r2, r7
     750:	4640      	mov	r0, r8
     752:	f006 fe9b 	bl	748c <assert_print>
     756:	f240 111b 	movw	r1, #283	; 0x11b
     75a:	4638      	mov	r0, r7
     75c:	f006 fe8f 	bl	747e <assert_post_action>
     760:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     762:	462e      	mov	r6, r5
     764:	e7a9      	b.n	6ba <process_event+0x92>
		} else if (evt == EVT_START) {
     766:	2803      	cmp	r0, #3
     768:	d134      	bne.n	7d4 <process_event+0x1ac>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     76a:	f1b9 0f00 	cmp.w	r9, #0
     76e:	d00b      	beq.n	788 <process_event+0x160>
     770:	495a      	ldr	r1, [pc, #360]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     772:	4640      	mov	r0, r8
     774:	f44f 73ab 	mov.w	r3, #342	; 0x156
     778:	463a      	mov	r2, r7
     77a:	f006 fe87 	bl	748c <assert_print>
     77e:	f44f 71ab 	mov.w	r1, #342	; 0x156
     782:	4638      	mov	r0, r7
     784:	f006 fe7b 	bl	747e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     788:	6823      	ldr	r3, [r4, #0]
     78a:	b95b      	cbnz	r3, 7a4 <process_event+0x17c>
     78c:	4954      	ldr	r1, [pc, #336]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     78e:	4640      	mov	r0, r8
     790:	f240 1357 	movw	r3, #343	; 0x157
     794:	463a      	mov	r2, r7
     796:	f006 fe79 	bl	748c <assert_print>
     79a:	f240 1157 	movw	r1, #343	; 0x157
     79e:	4638      	mov	r0, r7
     7a0:	f006 fe6d 	bl	747e <assert_post_action>
			transit = mgr->transitions->start;
     7a4:	6923      	ldr	r3, [r4, #16]
     7a6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     7a8:	b95e      	cbnz	r6, 7c2 <process_event+0x19a>
     7aa:	494e      	ldr	r1, [pc, #312]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     7ac:	4640      	mov	r0, r8
     7ae:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     7b2:	463a      	mov	r2, r7
     7b4:	f006 fe6a 	bl	748c <assert_print>
     7b8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     7bc:	4638      	mov	r0, r7
     7be:	f006 fe5e 	bl	747e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7c2:	8ba3      	ldrh	r3, [r4, #28]
     7c4:	f023 0307 	bic.w	r3, r3, #7
     7c8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     7cc:	83a3      	strh	r3, [r4, #28]
}
     7ce:	2500      	movs	r5, #0
		res = 0;
     7d0:	46ab      	mov	fp, r5
}
     7d2:	e772      	b.n	6ba <process_event+0x92>
		} else if (evt == EVT_STOP) {
     7d4:	2804      	cmp	r0, #4
     7d6:	d131      	bne.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     7d8:	f1b9 0f02 	cmp.w	r9, #2
     7dc:	d00b      	beq.n	7f6 <process_event+0x1ce>
     7de:	4942      	ldr	r1, [pc, #264]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     7e0:	4640      	mov	r0, r8
     7e2:	f240 135d 	movw	r3, #349	; 0x15d
     7e6:	463a      	mov	r2, r7
     7e8:	f006 fe50 	bl	748c <assert_print>
     7ec:	f240 115d 	movw	r1, #349	; 0x15d
     7f0:	4638      	mov	r0, r7
     7f2:	f006 fe44 	bl	747e <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     7f6:	8be3      	ldrh	r3, [r4, #30]
     7f8:	b15b      	cbz	r3, 812 <CONFIG_ISR_STACK_SIZE+0x12>
     7fa:	493c      	ldr	r1, [pc, #240]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     7fc:	4640      	mov	r0, r8
     7fe:	f44f 73af 	mov.w	r3, #350	; 0x15e
     802:	463a      	mov	r2, r7
     804:	f006 fe42 	bl	748c <assert_print>
     808:	f44f 71af 	mov.w	r1, #350	; 0x15e
     80c:	4638      	mov	r0, r7
     80e:	f006 fe36 	bl	747e <assert_post_action>
			transit = mgr->transitions->stop;
     812:	6923      	ldr	r3, [r4, #16]
     814:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     816:	b95e      	cbnz	r6, 830 <CONFIG_ISR_STACK_SIZE+0x30>
     818:	4932      	ldr	r1, [pc, #200]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     81a:	4640      	mov	r0, r8
     81c:	f240 1361 	movw	r3, #353	; 0x161
     820:	463a      	mov	r2, r7
     822:	f006 fe33 	bl	748c <assert_print>
     826:	f240 1161 	movw	r1, #353	; 0x161
     82a:	4638      	mov	r0, r7
     82c:	f006 fe27 	bl	747e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     830:	8ba3      	ldrh	r3, [r4, #28]
     832:	f023 0307 	bic.w	r3, r3, #7
     836:	f043 0304 	orr.w	r3, r3, #4
     83a:	e7c7      	b.n	7cc <process_event+0x1a4>
		} else if (evt == EVT_RESET) {
     83c:	2805      	cmp	r0, #5
     83e:	d131      	bne.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     840:	f1b9 0f01 	cmp.w	r9, #1
     844:	d00b      	beq.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
     846:	492a      	ldr	r1, [pc, #168]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     848:	4640      	mov	r0, r8
     84a:	f44f 73b2 	mov.w	r3, #356	; 0x164
     84e:	463a      	mov	r2, r7
     850:	f006 fe1c 	bl	748c <assert_print>
     854:	f44f 71b2 	mov.w	r1, #356	; 0x164
     858:	4638      	mov	r0, r7
     85a:	f006 fe10 	bl	747e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     85e:	6823      	ldr	r3, [r4, #0]
     860:	b95b      	cbnz	r3, 87a <CONFIG_ISR_STACK_SIZE+0x7a>
     862:	491f      	ldr	r1, [pc, #124]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     864:	4640      	mov	r0, r8
     866:	f240 1365 	movw	r3, #357	; 0x165
     86a:	463a      	mov	r2, r7
     86c:	f006 fe0e 	bl	748c <assert_print>
     870:	f240 1165 	movw	r1, #357	; 0x165
     874:	4638      	mov	r0, r7
     876:	f006 fe02 	bl	747e <assert_post_action>
			transit = mgr->transitions->reset;
     87a:	6923      	ldr	r3, [r4, #16]
     87c:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     87e:	b95e      	cbnz	r6, 898 <CONFIG_ISR_STACK_SIZE+0x98>
     880:	4918      	ldr	r1, [pc, #96]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     882:	4640      	mov	r0, r8
     884:	f44f 73b4 	mov.w	r3, #360	; 0x168
     888:	463a      	mov	r2, r7
     88a:	f006 fdff 	bl	748c <assert_print>
     88e:	f44f 71b4 	mov.w	r1, #360	; 0x168
     892:	4638      	mov	r0, r7
     894:	f006 fdf3 	bl	747e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     898:	8ba3      	ldrh	r3, [r4, #28]
     89a:	f023 0307 	bic.w	r3, r3, #7
     89e:	f043 0305 	orr.w	r3, r3, #5
     8a2:	e793      	b.n	7cc <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
     8a4:	490c      	ldr	r1, [pc, #48]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     8a6:	f240 136b 	movw	r3, #363	; 0x16b
     8aa:	463a      	mov	r2, r7
     8ac:	4640      	mov	r0, r8
     8ae:	f006 fded 	bl	748c <assert_print>
     8b2:	2500      	movs	r5, #0
     8b4:	f240 116b 	movw	r1, #363	; 0x16b
     8b8:	4638      	mov	r0, r7
     8ba:	f006 fde0 	bl	747e <assert_post_action>
		onoff_transition_fn transit = NULL;
     8be:	462e      	mov	r6, r5
     8c0:	e786      	b.n	7d0 <process_event+0x1a8>
     8c2:	bf00      	nop
     8c4:	00008697 	.word	0x00008697
     8c8:	000086c4 	.word	0x000086c4
     8cc:	000085d7 	.word	0x000085d7
     8d0:	000086db 	.word	0x000086db
     8d4:	000085f4 	.word	0x000085f4
     8d8:	0000867f 	.word	0x0000867f
     8dc:	00008616 	.word	0x00008616
     8e0:	00008622 	.word	0x00008622
     8e4:	00008645 	.word	0x00008645
     8e8:	0000865c 	.word	0x0000865c
     8ec:	00008672 	.word	0x00008672
     8f0:	00008681 	.word	0x00008681
				   && !sys_slist_is_empty(&mgr->monitors);
     8f4:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     8f8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     8fc:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
     900:	83a3      	strh	r3, [r4, #28]
     902:	4648      	mov	r0, r9
     904:	f004 fa5e 	bl	4dc4 <z_spin_unlock_valid>
     908:	b968      	cbnz	r0, 926 <CONFIG_ISR_STACK_SIZE+0x126>
     90a:	4a38      	ldr	r2, [pc, #224]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     90c:	4938      	ldr	r1, [pc, #224]	; (9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>)
     90e:	23b9      	movs	r3, #185	; 0xb9
     910:	4640      	mov	r0, r8
     912:	f006 fdbb 	bl	748c <assert_print>
     916:	4837      	ldr	r0, [pc, #220]	; (9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>)
     918:	4649      	mov	r1, r9
     91a:	f006 fdb7 	bl	748c <assert_print>
     91e:	4833      	ldr	r0, [pc, #204]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     920:	21b9      	movs	r1, #185	; 0xb9
     922:	f006 fdac 	bl	747e <assert_post_action>
     926:	9b00      	ldr	r3, [sp, #0]
     928:	f383 8811 	msr	BASEPRI, r3
     92c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     930:	f1ba 0f00 	cmp.w	sl, #0
     934:	d137      	bne.n	9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
	while (!sys_slist_is_empty(list)) {
     936:	2d00      	cmp	r5, #0
     938:	d147      	bne.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
			if (transit != NULL) {
     93a:	b116      	cbz	r6, 942 <CONFIG_ISR_STACK_SIZE+0x142>
				transit(mgr, transition_complete);
     93c:	492e      	ldr	r1, [pc, #184]	; (9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>)
     93e:	4620      	mov	r0, r4
     940:	47b0      	blx	r6
	__asm__ volatile(
     942:	f04f 0320 	mov.w	r3, #32
     946:	f3ef 8b11 	mrs	fp, BASEPRI
     94a:	f383 8812 	msr	BASEPRI_MAX, r3
     94e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     952:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
     954:	f8cd b000 	str.w	fp, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     958:	f004 fa26 	bl	4da8 <z_spin_lock_valid>
     95c:	b968      	cbnz	r0, 97a <CONFIG_ISR_STACK_SIZE+0x17a>
     95e:	4a23      	ldr	r2, [pc, #140]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     960:	4926      	ldr	r1, [pc, #152]	; (9fc <CONFIG_ISR_STACK_SIZE+0x1fc>)
     962:	238e      	movs	r3, #142	; 0x8e
     964:	4640      	mov	r0, r8
     966:	f006 fd91 	bl	748c <assert_print>
     96a:	4825      	ldr	r0, [pc, #148]	; (a00 <CONFIG_ISR_STACK_SIZE+0x200>)
     96c:	4649      	mov	r1, r9
     96e:	f006 fd8d 	bl	748c <assert_print>
     972:	481e      	ldr	r0, [pc, #120]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     974:	218e      	movs	r1, #142	; 0x8e
     976:	f006 fd82 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
     97a:	4648      	mov	r0, r9
     97c:	f004 fa32 	bl	4de4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     980:	8ba3      	ldrh	r3, [r4, #28]
     982:	f023 0308 	bic.w	r3, r3, #8
     986:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     988:	8ba3      	ldrh	r3, [r4, #28]
     98a:	06da      	lsls	r2, r3, #27
     98c:	d525      	bpl.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     98e:	f023 0310 	bic.w	r3, r3, #16
     992:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     994:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     996:	f8b4 901c 	ldrh.w	r9, [r4, #28]
     99a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     99e:	2900      	cmp	r1, #0
     9a0:	f47f ae73 	bne.w	68a <process_event+0x62>
out:
     9a4:	e651      	b.n	64a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     9a6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9a8:	2900      	cmp	r1, #0
     9aa:	d0c4      	beq.n	936 <CONFIG_ISR_STACK_SIZE+0x136>
	return node->next;
     9ac:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
     9b0:	684b      	ldr	r3, [r1, #4]
     9b2:	9a01      	ldr	r2, [sp, #4]
     9b4:	469c      	mov	ip, r3
     9b6:	4620      	mov	r0, r4
     9b8:	465b      	mov	r3, fp
     9ba:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9bc:	f1ba 0f00 	cmp.w	sl, #0
     9c0:	d0b9      	beq.n	936 <CONFIG_ISR_STACK_SIZE+0x136>
     9c2:	4651      	mov	r1, sl
     9c4:	f8da a000 	ldr.w	sl, [sl]
     9c8:	e7f2      	b.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
     9ca:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     9cc:	9a01      	ldr	r2, [sp, #4]
     9ce:	682d      	ldr	r5, [r5, #0]
     9d0:	465b      	mov	r3, fp
     9d2:	4620      	mov	r0, r4
     9d4:	f006 fc89 	bl	72ea <notify_one>
     9d8:	e7ad      	b.n	936 <CONFIG_ISR_STACK_SIZE+0x136>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     9da:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     9de:	bf1e      	ittt	ne
     9e0:	f023 0320 	bicne.w	r3, r3, #32
     9e4:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     9e6:	2102      	movne	r1, #2
     9e8:	e7d5      	b.n	996 <CONFIG_ISR_STACK_SIZE+0x196>
     9ea:	bf00      	nop
     9ec:	00008697 	.word	0x00008697
     9f0:	000086c4 	.word	0x000086c4
     9f4:	000086db 	.word	0x000086db
     9f8:	00000a05 	.word	0x00000a05
     9fc:	000086f0 	.word	0x000086f0
     a00:	00008705 	.word	0x00008705

00000a04 <transition_complete>:
{
     a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a06:	4604      	mov	r4, r0
     a08:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a0a:	f100 0614 	add.w	r6, r0, #20
     a0e:	f04f 0320 	mov.w	r3, #32
     a12:	f3ef 8711 	mrs	r7, BASEPRI
     a16:	f383 8812 	msr	BASEPRI_MAX, r3
     a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a1e:	4630      	mov	r0, r6
     a20:	f004 f9c2 	bl	4da8 <z_spin_lock_valid>
     a24:	b968      	cbnz	r0, a42 <transition_complete+0x3e>
     a26:	4a0c      	ldr	r2, [pc, #48]	; (a58 <transition_complete+0x54>)
     a28:	490c      	ldr	r1, [pc, #48]	; (a5c <transition_complete+0x58>)
     a2a:	480d      	ldr	r0, [pc, #52]	; (a60 <transition_complete+0x5c>)
     a2c:	238e      	movs	r3, #142	; 0x8e
     a2e:	f006 fd2d 	bl	748c <assert_print>
     a32:	480c      	ldr	r0, [pc, #48]	; (a64 <transition_complete+0x60>)
     a34:	4631      	mov	r1, r6
     a36:	f006 fd29 	bl	748c <assert_print>
     a3a:	4807      	ldr	r0, [pc, #28]	; (a58 <transition_complete+0x54>)
     a3c:	218e      	movs	r1, #142	; 0x8e
     a3e:	f006 fd1e 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
     a42:	4630      	mov	r0, r6
     a44:	f004 f9ce 	bl	4de4 <z_spin_lock_set_owner>
	mgr->last_res = res;
     a48:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     a4a:	463a      	mov	r2, r7
     a4c:	4620      	mov	r0, r4
     a4e:	2101      	movs	r1, #1
}
     a50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     a54:	f7ff bde8 	b.w	628 <process_event>
     a58:	00008697 	.word	0x00008697
     a5c:	000086f0 	.word	0x000086f0
     a60:	000085d7 	.word	0x000085d7
     a64:	00008705 	.word	0x00008705

00000a68 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a6c:	4604      	mov	r4, r0
     a6e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     a70:	f006 fc51 	bl	7316 <validate_args>

	if (rv < 0) {
     a74:	1e05      	subs	r5, r0, #0
     a76:	db5e      	blt.n	b36 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a78:	f104 0914 	add.w	r9, r4, #20
     a7c:	f04f 0320 	mov.w	r3, #32
     a80:	f3ef 8a11 	mrs	sl, BASEPRI
     a84:	f383 8812 	msr	BASEPRI_MAX, r3
     a88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a8c:	4648      	mov	r0, r9
     a8e:	f004 f98b 	bl	4da8 <z_spin_lock_valid>
     a92:	b968      	cbnz	r0, ab0 <onoff_request+0x48>
     a94:	4a38      	ldr	r2, [pc, #224]	; (b78 <onoff_request+0x110>)
     a96:	4939      	ldr	r1, [pc, #228]	; (b7c <onoff_request+0x114>)
     a98:	4839      	ldr	r0, [pc, #228]	; (b80 <onoff_request+0x118>)
     a9a:	238e      	movs	r3, #142	; 0x8e
     a9c:	f006 fcf6 	bl	748c <assert_print>
     aa0:	4838      	ldr	r0, [pc, #224]	; (b84 <onoff_request+0x11c>)
     aa2:	4649      	mov	r1, r9
     aa4:	f006 fcf2 	bl	748c <assert_print>
     aa8:	4833      	ldr	r0, [pc, #204]	; (b78 <onoff_request+0x110>)
     aaa:	218e      	movs	r1, #142	; 0x8e
     aac:	f006 fce7 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
     ab0:	4648      	mov	r0, r9
     ab2:	f004 f997 	bl	4de4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     ab6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ab8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
     abe:	428b      	cmp	r3, r1
     ac0:	f002 0607 	and.w	r6, r2, #7
     ac4:	d050      	beq.n	b68 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     ac6:	2e02      	cmp	r6, #2
     ac8:	d124      	bne.n	b14 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     aca:	3301      	adds	r3, #1
     acc:	83e3      	strh	r3, [r4, #30]
	rv = state;
     ace:	4635      	mov	r5, r6
		notify = true;
     ad0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     ad4:	4648      	mov	r0, r9
     ad6:	f004 f975 	bl	4dc4 <z_spin_unlock_valid>
     ada:	b968      	cbnz	r0, af8 <onoff_request+0x90>
     adc:	4a26      	ldr	r2, [pc, #152]	; (b78 <onoff_request+0x110>)
     ade:	492a      	ldr	r1, [pc, #168]	; (b88 <onoff_request+0x120>)
     ae0:	4827      	ldr	r0, [pc, #156]	; (b80 <onoff_request+0x118>)
     ae2:	23b9      	movs	r3, #185	; 0xb9
     ae4:	f006 fcd2 	bl	748c <assert_print>
     ae8:	4828      	ldr	r0, [pc, #160]	; (b8c <onoff_request+0x124>)
     aea:	4649      	mov	r1, r9
     aec:	f006 fcce 	bl	748c <assert_print>
     af0:	4821      	ldr	r0, [pc, #132]	; (b78 <onoff_request+0x110>)
     af2:	21b9      	movs	r1, #185	; 0xb9
     af4:	f006 fcc3 	bl	747e <assert_post_action>
	__asm__ volatile(
     af8:	f38a 8811 	msr	BASEPRI, sl
     afc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     b00:	f1b8 0f00 	cmp.w	r8, #0
     b04:	d017      	beq.n	b36 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
     b06:	2300      	movs	r3, #0
     b08:	4632      	mov	r2, r6
     b0a:	4639      	mov	r1, r7
     b0c:	4620      	mov	r0, r4
     b0e:	f006 fbec 	bl	72ea <notify_one>
     b12:	e010      	b.n	b36 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
     b14:	0793      	lsls	r3, r2, #30
     b16:	d001      	beq.n	b1c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
     b18:	2e06      	cmp	r6, #6
     b1a:	d10f      	bne.n	b3c <onoff_request+0xd4>
	parent->next = child;
     b1c:	2300      	movs	r3, #0
     b1e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     b20:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     b22:	b9f3      	cbnz	r3, b62 <onoff_request+0xfa>
	list->head = node;
     b24:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     b28:	4635      	mov	r5, r6
     b2a:	b9fe      	cbnz	r6, b6c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
     b2c:	4652      	mov	r2, sl
     b2e:	2102      	movs	r1, #2
     b30:	4620      	mov	r0, r4
     b32:	f7ff fd79 	bl	628 <process_event>
		}
	}

	return rv;
}
     b36:	4628      	mov	r0, r5
     b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     b3c:	2e05      	cmp	r6, #5
     b3e:	d018      	beq.n	b72 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b40:	2e01      	cmp	r6, #1
     b42:	d00b      	beq.n	b5c <onoff_request+0xf4>
     b44:	4912      	ldr	r1, [pc, #72]	; (b90 <onoff_request+0x128>)
     b46:	480e      	ldr	r0, [pc, #56]	; (b80 <onoff_request+0x118>)
     b48:	4a12      	ldr	r2, [pc, #72]	; (b94 <onoff_request+0x12c>)
     b4a:	f240 13c9 	movw	r3, #457	; 0x1c9
     b4e:	f006 fc9d 	bl	748c <assert_print>
     b52:	4810      	ldr	r0, [pc, #64]	; (b94 <onoff_request+0x12c>)
     b54:	f240 11c9 	movw	r1, #457	; 0x1c9
     b58:	f006 fc91 	bl	747e <assert_post_action>
		rv = -EIO;
     b5c:	f06f 0504 	mvn.w	r5, #4
     b60:	e004      	b.n	b6c <onoff_request+0x104>
	parent->next = child;
     b62:	601f      	str	r7, [r3, #0]
	list->tail = node;
     b64:	6067      	str	r7, [r4, #4]
}
     b66:	e7df      	b.n	b28 <onoff_request+0xc0>
		rv = -EAGAIN;
     b68:	f06f 050a 	mvn.w	r5, #10
     b6c:	f04f 0800 	mov.w	r8, #0
     b70:	e7b0      	b.n	ad4 <onoff_request+0x6c>
		rv = -ENOTSUP;
     b72:	f06f 0585 	mvn.w	r5, #133	; 0x85
     b76:	e7f9      	b.n	b6c <onoff_request+0x104>
     b78:	00008697 	.word	0x00008697
     b7c:	000086f0 	.word	0x000086f0
     b80:	000085d7 	.word	0x000085d7
     b84:	00008705 	.word	0x00008705
     b88:	000086c4 	.word	0x000086c4
     b8c:	000086db 	.word	0x000086db
     b90:	00008681 	.word	0x00008681
     b94:	000085f4 	.word	0x000085f4

00000b98 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     b98:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
     b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ba0:	4604      	mov	r4, r0
     ba2:	460e      	mov	r6, r1
     ba4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     ba6:	d36a      	bcc.n	c7e <sys_heap_init+0xe6>
     ba8:	493e      	ldr	r1, [pc, #248]	; (ca4 <sys_heap_init+0x10c>)
     baa:	4a3f      	ldr	r2, [pc, #252]	; (ca8 <sys_heap_init+0x110>)
     bac:	483f      	ldr	r0, [pc, #252]	; (cac <sys_heap_init+0x114>)
     bae:	f240 13e3 	movw	r3, #483	; 0x1e3
     bb2:	f006 fc6b 	bl	748c <assert_print>
     bb6:	483e      	ldr	r0, [pc, #248]	; (cb0 <sys_heap_init+0x118>)
     bb8:	f006 fc68 	bl	748c <assert_print>
     bbc:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     bc0:	4839      	ldr	r0, [pc, #228]	; (ca8 <sys_heap_init+0x110>)
     bc2:	f006 fc5c 	bl	747e <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
     bc6:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     bc8:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     bca:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     bcc:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     bd0:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     bd4:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     bd6:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     bd8:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     bdc:	d80e      	bhi.n	bfc <sys_heap_init+0x64>
     bde:	4935      	ldr	r1, [pc, #212]	; (cb4 <sys_heap_init+0x11c>)
     be0:	4a31      	ldr	r2, [pc, #196]	; (ca8 <sys_heap_init+0x110>)
     be2:	4832      	ldr	r0, [pc, #200]	; (cac <sys_heap_init+0x114>)
     be4:	f240 13f3 	movw	r3, #499	; 0x1f3
     be8:	f006 fc50 	bl	748c <assert_print>
     bec:	4832      	ldr	r0, [pc, #200]	; (cb8 <sys_heap_init+0x120>)
     bee:	f006 fc4d 	bl	748c <assert_print>
     bf2:	482d      	ldr	r0, [pc, #180]	; (ca8 <sys_heap_init+0x110>)
     bf4:	f240 11f3 	movw	r1, #499	; 0x1f3
     bf8:	f006 fc41 	bl	747e <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
     bfc:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
     bfe:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     c02:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     c06:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
     c0a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     c0c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
     c0e:	2300      	movs	r3, #0
     c10:	08e4      	lsrs	r4, r4, #3
     c12:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     c14:	1c63      	adds	r3, r4, #1
     c16:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
     c18:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     c1a:	d90e      	bls.n	c3a <sys_heap_init+0xa2>
     c1c:	4927      	ldr	r1, [pc, #156]	; (cbc <sys_heap_init+0x124>)
     c1e:	4a22      	ldr	r2, [pc, #136]	; (ca8 <sys_heap_init+0x110>)
     c20:	4822      	ldr	r0, [pc, #136]	; (cac <sys_heap_init+0x114>)
     c22:	f44f 7301 	mov.w	r3, #516	; 0x204
     c26:	f006 fc31 	bl	748c <assert_print>
     c2a:	4823      	ldr	r0, [pc, #140]	; (cb8 <sys_heap_init+0x120>)
     c2c:	f006 fc2e 	bl	748c <assert_print>
     c30:	481d      	ldr	r0, [pc, #116]	; (ca8 <sys_heap_init+0x110>)
     c32:	f44f 7101 	mov.w	r1, #516	; 0x204
     c36:	f006 fc22 	bl	747e <assert_post_action>
     c3a:	f105 0310 	add.w	r3, r5, #16
     c3e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     c42:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
     c44:	4598      	cmp	r8, r3
     c46:	d129      	bne.n	c9c <sys_heap_init+0x104>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     c48:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     c4a:	f043 0301 	orr.w	r3, r3, #1
     c4e:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
     c50:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     c54:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     c56:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
     c58:	802a      	strh	r2, [r5, #0]
     c5a:	8048      	strh	r0, [r1, #2]
     c5c:	19a9      	adds	r1, r5, r6
     c5e:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
     c62:	804a      	strh	r2, [r1, #2]
     c64:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
     c66:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
     c6a:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     c6c:	885a      	ldrh	r2, [r3, #2]
     c6e:	f042 0201 	orr.w	r2, r2, #1
     c72:	4628      	mov	r0, r5
     c74:	805a      	strh	r2, [r3, #2]
}
     c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
     c7a:	f006 bb7d 	b.w	7378 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     c7e:	2a04      	cmp	r2, #4
     c80:	d8a1      	bhi.n	bc6 <sys_heap_init+0x2e>
     c82:	490f      	ldr	r1, [pc, #60]	; (cc0 <sys_heap_init+0x128>)
     c84:	4a08      	ldr	r2, [pc, #32]	; (ca8 <sys_heap_init+0x110>)
     c86:	4809      	ldr	r0, [pc, #36]	; (cac <sys_heap_init+0x114>)
     c88:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
     c8c:	f006 fbfe 	bl	748c <assert_print>
     c90:	4809      	ldr	r0, [pc, #36]	; (cb8 <sys_heap_init+0x120>)
     c92:	f006 fbfb 	bl	748c <assert_print>
     c96:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
     c9a:	e791      	b.n	bc0 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
     c9c:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
     ca0:	e7d0      	b.n	c44 <sys_heap_init+0xac>
     ca2:	bf00      	nop
     ca4:	000087e9 	.word	0x000087e9
     ca8:	0000871d 	.word	0x0000871d
     cac:	000085d7 	.word	0x000085d7
     cb0:	000087ff 	.word	0x000087ff
     cb4:	00008850 	.word	0x00008850
     cb8:	00008837 	.word	0x00008837
     cbc:	00008879 	.word	0x00008879
     cc0:	00008816 	.word	0x00008816

00000cc4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc8:	b091      	sub	sp, #68	; 0x44
     cca:	468b      	mov	fp, r1
     ccc:	9002      	str	r0, [sp, #8]
     cce:	4692      	mov	sl, r2
     cd0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     cd2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     cd4:	f89a 0000 	ldrb.w	r0, [sl]
     cd8:	b908      	cbnz	r0, cde <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     cda:	4628      	mov	r0, r5
     cdc:	e35f      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		if (*fp != '%') {
     cde:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ce0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     ce4:	d007      	beq.n	cf6 <cbvprintf+0x32>
			OUTC('%');
     ce6:	9b02      	ldr	r3, [sp, #8]
     ce8:	4659      	mov	r1, fp
     cea:	4798      	blx	r3
     cec:	2800      	cmp	r0, #0
     cee:	f2c0 8356 	blt.w	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
     cf2:	3501      	adds	r5, #1
			break;
     cf4:	e212      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		} state = {
     cf6:	2218      	movs	r2, #24
     cf8:	2100      	movs	r1, #0
     cfa:	a80a      	add	r0, sp, #40	; 0x28
     cfc:	f006 fc1a 	bl	7534 <memset>
	if (*sp == '%') {
     d00:	f89a 3001 	ldrb.w	r3, [sl, #1]
     d04:	2b25      	cmp	r3, #37	; 0x25
     d06:	d078      	beq.n	dfa <cbvprintf+0x136>
     d08:	2200      	movs	r2, #0
     d0a:	4610      	mov	r0, r2
     d0c:	4696      	mov	lr, r2
     d0e:	4694      	mov	ip, r2
     d10:	4616      	mov	r6, r2
     d12:	4639      	mov	r1, r7
		switch (*sp) {
     d14:	f817 3b01 	ldrb.w	r3, [r7], #1
     d18:	2b2b      	cmp	r3, #43	; 0x2b
     d1a:	f000 809d 	beq.w	e58 <cbvprintf+0x194>
     d1e:	f200 8094 	bhi.w	e4a <cbvprintf+0x186>
     d22:	2b20      	cmp	r3, #32
     d24:	f000 809b 	beq.w	e5e <cbvprintf+0x19a>
     d28:	2b23      	cmp	r3, #35	; 0x23
     d2a:	f000 809b 	beq.w	e64 <cbvprintf+0x1a0>
     d2e:	b12e      	cbz	r6, d3c <cbvprintf+0x78>
     d30:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d34:	f046 0604 	orr.w	r6, r6, #4
     d38:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d3c:	f1bc 0f00 	cmp.w	ip, #0
     d40:	d005      	beq.n	d4e <cbvprintf+0x8a>
     d42:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d46:	f046 0608 	orr.w	r6, r6, #8
     d4a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d4e:	f1be 0f00 	cmp.w	lr, #0
     d52:	d005      	beq.n	d60 <cbvprintf+0x9c>
     d54:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d58:	f046 0610 	orr.w	r6, r6, #16
     d5c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d60:	b128      	cbz	r0, d6e <cbvprintf+0xaa>
     d62:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     d66:	f040 0020 	orr.w	r0, r0, #32
     d6a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     d6e:	b12a      	cbz	r2, d7c <cbvprintf+0xb8>
     d70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     d78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     d7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d80:	f002 0044 	and.w	r0, r2, #68	; 0x44
     d84:	2844      	cmp	r0, #68	; 0x44
     d86:	d103      	bne.n	d90 <cbvprintf+0xcc>
		conv->flag_zero = false;
     d88:	f36f 1286 	bfc	r2, #6, #1
     d8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     d90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     d94:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d9a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     d9e:	d17b      	bne.n	e98 <cbvprintf+0x1d4>
		conv->width_star = true;
     da0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     da4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     da8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     daa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     dae:	781a      	ldrb	r2, [r3, #0]
     db0:	2a2e      	cmp	r2, #46	; 0x2e
     db2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     db6:	bf0c      	ite	eq
     db8:	2101      	moveq	r1, #1
     dba:	2100      	movne	r1, #0
     dbc:	f361 0241 	bfi	r2, r1, #1, #1
     dc0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     dc4:	d174      	bne.n	eb0 <cbvprintf+0x1ec>
	if (*sp == '*') {
     dc6:	785a      	ldrb	r2, [r3, #1]
     dc8:	2a2a      	cmp	r2, #42	; 0x2a
     dca:	d06a      	beq.n	ea2 <cbvprintf+0x1de>
	++sp;
     dcc:	3301      	adds	r3, #1
	size_t val = 0;
     dce:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     dd0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     dd2:	4618      	mov	r0, r3
     dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
     dd8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ddc:	2f09      	cmp	r7, #9
     dde:	f240 808e 	bls.w	efe <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     de2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     de6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     de8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     dec:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     df0:	f361 0241 	bfi	r2, r1, #1, #1
     df4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     df8:	e05a      	b.n	eb0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     dfa:	f10a 0702 	add.w	r7, sl, #2
     dfe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     e02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e06:	07d9      	lsls	r1, r3, #31
     e08:	f140 8149 	bpl.w	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
			width = va_arg(ap, int);
     e0c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     e10:	f1b9 0f00 	cmp.w	r9, #0
     e14:	da07      	bge.n	e26 <cbvprintf+0x162>
				conv->flag_dash = true;
     e16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e1a:	f042 0204 	orr.w	r2, r2, #4
     e1e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     e22:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     e26:	075a      	lsls	r2, r3, #29
     e28:	f140 8142 	bpl.w	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
			int arg = va_arg(ap, int);
     e2c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     e30:	f1b8 0f00 	cmp.w	r8, #0
     e34:	f280 8141 	bge.w	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
				conv->prec_present = false;
     e38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e3c:	f36f 0341 	bfc	r3, #1, #1
     e40:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     e44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     e48:	e137      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		switch (*sp) {
     e4a:	2b2d      	cmp	r3, #45	; 0x2d
     e4c:	d00c      	beq.n	e68 <cbvprintf+0x1a4>
     e4e:	2b30      	cmp	r3, #48	; 0x30
     e50:	f47f af6d 	bne.w	d2e <cbvprintf+0x6a>
			conv->flag_zero = true;
     e54:	2201      	movs	r2, #1
	} while (loop);
     e56:	e75c      	b.n	d12 <cbvprintf+0x4e>
			conv->flag_plus = true;
     e58:	f04f 0c01 	mov.w	ip, #1
     e5c:	e759      	b.n	d12 <cbvprintf+0x4e>
			conv->flag_space = true;
     e5e:	f04f 0e01 	mov.w	lr, #1
     e62:	e756      	b.n	d12 <cbvprintf+0x4e>
			conv->flag_hash = true;
     e64:	2001      	movs	r0, #1
     e66:	e754      	b.n	d12 <cbvprintf+0x4e>
		switch (*sp) {
     e68:	2601      	movs	r6, #1
     e6a:	e752      	b.n	d12 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     e6c:	fb0c 0202 	mla	r2, ip, r2, r0
     e70:	3a30      	subs	r2, #48	; 0x30
     e72:	4633      	mov	r3, r6
     e74:	461e      	mov	r6, r3
     e76:	f816 0b01 	ldrb.w	r0, [r6], #1
     e7a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e7e:	2f09      	cmp	r7, #9
     e80:	d9f4      	bls.n	e6c <cbvprintf+0x1a8>
	if (sp != wp) {
     e82:	4299      	cmp	r1, r3
     e84:	d093      	beq.n	dae <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     e86:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     e8a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     e8c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     e8e:	f362 0141 	bfi	r1, r2, #1, #1
     e92:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     e96:	e78a      	b.n	dae <cbvprintf+0xea>
     e98:	460b      	mov	r3, r1
	size_t val = 0;
     e9a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     e9c:	f04f 0c0a 	mov.w	ip, #10
     ea0:	e7e8      	b.n	e74 <cbvprintf+0x1b0>
		conv->prec_star = true;
     ea2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ea6:	f042 0204 	orr.w	r2, r2, #4
     eaa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     eae:	3302      	adds	r3, #2
	switch (*sp) {
     eb0:	461f      	mov	r7, r3
     eb2:	f817 2b01 	ldrb.w	r2, [r7], #1
     eb6:	2a6c      	cmp	r2, #108	; 0x6c
     eb8:	d041      	beq.n	f3e <cbvprintf+0x27a>
     eba:	d825      	bhi.n	f08 <cbvprintf+0x244>
     ebc:	2a68      	cmp	r2, #104	; 0x68
     ebe:	d02b      	beq.n	f18 <cbvprintf+0x254>
     ec0:	2a6a      	cmp	r2, #106	; 0x6a
     ec2:	d046      	beq.n	f52 <cbvprintf+0x28e>
     ec4:	2a4c      	cmp	r2, #76	; 0x4c
     ec6:	d04c      	beq.n	f62 <cbvprintf+0x29e>
     ec8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     eca:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     ece:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     ed2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     ed6:	2a78      	cmp	r2, #120	; 0x78
     ed8:	f200 80d9 	bhi.w	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
     edc:	2a57      	cmp	r2, #87	; 0x57
     ede:	d84d      	bhi.n	f7c <cbvprintf+0x2b8>
     ee0:	2a41      	cmp	r2, #65	; 0x41
     ee2:	d003      	beq.n	eec <cbvprintf+0x228>
     ee4:	3a45      	subs	r2, #69	; 0x45
     ee6:	2a02      	cmp	r2, #2
     ee8:	f200 80d1 	bhi.w	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_FP;
     eec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ef0:	2204      	movs	r2, #4
     ef2:	f362 0302 	bfi	r3, r2, #0, #3
     ef6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     efa:	2301      	movs	r3, #1
			break;
     efc:	e09e      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		val = 10U * val + *sp++ - '0';
     efe:	fb06 2101 	mla	r1, r6, r1, r2
     f02:	3930      	subs	r1, #48	; 0x30
     f04:	4603      	mov	r3, r0
     f06:	e764      	b.n	dd2 <cbvprintf+0x10e>
	switch (*sp) {
     f08:	2a74      	cmp	r2, #116	; 0x74
     f0a:	d026      	beq.n	f5a <cbvprintf+0x296>
     f0c:	2a7a      	cmp	r2, #122	; 0x7a
     f0e:	d1db      	bne.n	ec8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     f10:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f14:	2206      	movs	r2, #6
     f16:	e00d      	b.n	f34 <cbvprintf+0x270>
		if (*++sp == 'h') {
     f18:	785a      	ldrb	r2, [r3, #1]
     f1a:	2a68      	cmp	r2, #104	; 0x68
     f1c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f20:	d106      	bne.n	f30 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     f22:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     f24:	f361 02c6 	bfi	r2, r1, #3, #4
     f28:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     f2c:	1c9f      	adds	r7, r3, #2
     f2e:	e7cc      	b.n	eca <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     f30:	4613      	mov	r3, r2
     f32:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     f34:	f362 03c6 	bfi	r3, r2, #3, #4
     f38:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     f3c:	e7c5      	b.n	eca <cbvprintf+0x206>
		if (*++sp == 'l') {
     f3e:	785a      	ldrb	r2, [r3, #1]
     f40:	2a6c      	cmp	r2, #108	; 0x6c
     f42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f46:	d101      	bne.n	f4c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     f48:	2104      	movs	r1, #4
     f4a:	e7eb      	b.n	f24 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     f4c:	4613      	mov	r3, r2
     f4e:	2203      	movs	r2, #3
     f50:	e7f0      	b.n	f34 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     f52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f56:	2205      	movs	r2, #5
     f58:	e7ec      	b.n	f34 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     f5a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f5e:	2207      	movs	r2, #7
     f60:	e7e8      	b.n	f34 <cbvprintf+0x270>
		conv->unsupported = true;
     f62:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     f66:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     f6a:	f023 0302 	bic.w	r3, r3, #2
     f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f72:	f043 0302 	orr.w	r3, r3, #2
     f76:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     f7a:	e7a6      	b.n	eca <cbvprintf+0x206>
	switch (conv->specifier) {
     f7c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     f80:	2920      	cmp	r1, #32
     f82:	f200 8084 	bhi.w	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
     f86:	a001      	add	r0, pc, #4	; (adr r0, f8c <cbvprintf+0x2c8>)
     f88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     f8c:	00001051 	.word	0x00001051
     f90:	0000108f 	.word	0x0000108f
     f94:	0000108f 	.word	0x0000108f
     f98:	0000108f 	.word	0x0000108f
     f9c:	0000108f 	.word	0x0000108f
     fa0:	0000108f 	.word	0x0000108f
     fa4:	0000108f 	.word	0x0000108f
     fa8:	0000108f 	.word	0x0000108f
     fac:	0000108f 	.word	0x0000108f
     fb0:	00000eed 	.word	0x00000eed
     fb4:	0000108f 	.word	0x0000108f
     fb8:	00001051 	.word	0x00001051
     fbc:	00001011 	.word	0x00001011
     fc0:	00000eed 	.word	0x00000eed
     fc4:	00000eed 	.word	0x00000eed
     fc8:	00000eed 	.word	0x00000eed
     fcc:	0000108f 	.word	0x0000108f
     fd0:	00001011 	.word	0x00001011
     fd4:	0000108f 	.word	0x0000108f
     fd8:	0000108f 	.word	0x0000108f
     fdc:	0000108f 	.word	0x0000108f
     fe0:	0000108f 	.word	0x0000108f
     fe4:	00001059 	.word	0x00001059
     fe8:	00001051 	.word	0x00001051
     fec:	00001075 	.word	0x00001075
     ff0:	0000108f 	.word	0x0000108f
     ff4:	0000108f 	.word	0x0000108f
     ff8:	00001075 	.word	0x00001075
     ffc:	0000108f 	.word	0x0000108f
    1000:	00001051 	.word	0x00001051
    1004:	0000108f 	.word	0x0000108f
    1008:	0000108f 	.word	0x0000108f
    100c:	00001051 	.word	0x00001051
		conv->specifier_cat = SPECIFIER_SINT;
    1010:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1014:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1016:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    101a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    101e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1020:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1024:	bf02      	ittt	eq
    1026:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    102a:	f041 0101 	orreq.w	r1, r1, #1
    102e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1032:	2a63      	cmp	r2, #99	; 0x63
    1034:	d131      	bne.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1036:	3b00      	subs	r3, #0
    1038:	bf18      	it	ne
    103a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    103c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1040:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1044:	430b      	orrs	r3, r1
    1046:	f363 0241 	bfi	r2, r3, #1, #1
    104a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    104e:	e6d8      	b.n	e02 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1050:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1054:	2002      	movs	r0, #2
    1056:	e7de      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
		conv->specifier_cat = SPECIFIER_PTR;
    1058:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    105c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1060:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1064:	2103      	movs	r1, #3
    1066:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    106a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    106c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1070:	4143      	adcs	r3, r0
    1072:	e7e3      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		conv->specifier_cat = SPECIFIER_PTR;
    1074:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1078:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    107a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    107e:	f361 0202 	bfi	r2, r1, #0, #3
    1082:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1086:	bf14      	ite	ne
    1088:	2301      	movne	r3, #1
    108a:	2300      	moveq	r3, #0
    108c:	e7d6      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		conv->invalid = true;
    108e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1092:	f043 0301 	orr.w	r3, r3, #1
    1096:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    109a:	2300      	movs	r3, #0
    109c:	e7ce      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		} else if (conv->width_present) {
    109e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    10a2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    10a4:	bfb4      	ite	lt
    10a6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    10aa:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    10ae:	e6ba      	b.n	e26 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    10b0:	079b      	lsls	r3, r3, #30
    10b2:	f57f aec7 	bpl.w	e44 <cbvprintf+0x180>
			precision = conv->prec_value;
    10b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    10ba:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    10be:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    10c0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    10c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    10c8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    10cc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    10ce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    10d2:	d138      	bne.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
			switch (length_mod) {
    10d4:	1ecb      	subs	r3, r1, #3
    10d6:	2b04      	cmp	r3, #4
    10d8:	d822      	bhi.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    10da:	e8df f003 	tbb	[pc, r3]
    10de:	0903      	.short	0x0903
    10e0:	2109      	.short	0x2109
    10e2:	21          	.byte	0x21
    10e3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    10e4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    10e8:	17da      	asrs	r2, r3, #31
    10ea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    10ee:	e006      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
					(sint_value_type)va_arg(ap, intmax_t);
    10f0:	3407      	adds	r4, #7
    10f2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    10f6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    10fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    10fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1102:	f013 0603 	ands.w	r6, r3, #3
    1106:	d056      	beq.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
			OUTS(sp, fp);
    1108:	9802      	ldr	r0, [sp, #8]
    110a:	463b      	mov	r3, r7
    110c:	4652      	mov	r2, sl
    110e:	4659      	mov	r1, fp
    1110:	f006 f99f 	bl	7452 <outs>
    1114:	2800      	cmp	r0, #0
    1116:	f2c0 8142 	blt.w	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    111a:	4405      	add	r5, r0
			continue;
    111c:	46ba      	mov	sl, r7
    111e:	e5d9      	b.n	cd4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1120:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1124:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1126:	ea4f 72e3 	mov.w	r2, r3, asr #31
    112a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    112e:	d105      	bne.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
				value->uint = (unsigned char)value->uint;
    1130:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1134:	930a      	str	r3, [sp, #40]	; 0x28
    1136:	2300      	movs	r3, #0
    1138:	930b      	str	r3, [sp, #44]	; 0x2c
    113a:	e7e0      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
			} else if (length_mod == LENGTH_H) {
    113c:	2902      	cmp	r1, #2
    113e:	d1de      	bne.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
				value->sint = (short)value->sint;
    1140:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1144:	e7d0      	b.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1146:	2b02      	cmp	r3, #2
    1148:	d123      	bne.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
			switch (length_mod) {
    114a:	1ecb      	subs	r3, r1, #3
    114c:	2b04      	cmp	r3, #4
    114e:	d813      	bhi.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1150:	e8df f003 	tbb	[pc, r3]
    1154:	120a0a03 	.word	0x120a0a03
    1158:	12          	.byte	0x12
    1159:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    115a:	6822      	ldr	r2, [r4, #0]
    115c:	920a      	str	r2, [sp, #40]	; 0x28
    115e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1160:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1162:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1164:	4604      	mov	r4, r0
    1166:	e7ca      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
					(uint_value_type)va_arg(ap,
    1168:	1de0      	adds	r0, r4, #7
    116a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    116e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1172:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1176:	e7f5      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
					(uint_value_type)va_arg(ap, size_t);
    1178:	f854 3b04 	ldr.w	r3, [r4], #4
    117c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    117e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1180:	f04f 0300 	mov.w	r3, #0
    1184:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1186:	d0d3      	beq.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
			} else if (length_mod == LENGTH_H) {
    1188:	2902      	cmp	r1, #2
    118a:	d1b8      	bne.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
				value->uint = (unsigned short)value->uint;
    118c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1190:	e7d0      	b.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
		} else if (specifier_cat == SPECIFIER_FP) {
    1192:	2b04      	cmp	r3, #4
    1194:	d109      	bne.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
					(sint_value_type)va_arg(ap, long long);
    1196:	1de3      	adds	r3, r4, #7
    1198:	f023 0307 	bic.w	r3, r3, #7
    119c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    11a8:	e7a9      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		} else if (specifier_cat == SPECIFIER_PTR) {
    11aa:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    11ac:	bf04      	itt	eq
    11ae:	f854 3b04 	ldreq.w	r3, [r4], #4
    11b2:	930a      	streq	r3, [sp, #40]	; 0x28
    11b4:	e7a3      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		switch (conv->specifier) {
    11b6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11ba:	2878      	cmp	r0, #120	; 0x78
    11bc:	d8ae      	bhi.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    11be:	2862      	cmp	r0, #98	; 0x62
    11c0:	d822      	bhi.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    11c2:	2825      	cmp	r0, #37	; 0x25
    11c4:	f43f ad8f 	beq.w	ce6 <cbvprintf+0x22>
    11c8:	2858      	cmp	r0, #88	; 0x58
    11ca:	d1a7      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    11cc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    11d0:	9300      	str	r3, [sp, #0]
    11d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    11d6:	ab04      	add	r3, sp, #16
    11d8:	aa0c      	add	r2, sp, #48	; 0x30
    11da:	f006 f8f4 	bl	73c6 <encode_uint>
    11de:	4682      	mov	sl, r0
			if (precision >= 0) {
    11e0:	f1b8 0f00 	cmp.w	r8, #0
    11e4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    11e8:	db0c      	blt.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
				conv->flag_zero = false;
    11ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    11ee:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    11f2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    11f6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    11f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    11fc:	d902      	bls.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
					conv->pad0_value = precision - (int)len;
    11fe:	eba8 0303 	sub.w	r3, r8, r3
    1202:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1204:	4680      	mov	r8, r0
    1206:	e03d      	b.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
		switch (conv->specifier) {
    1208:	3863      	subs	r0, #99	; 0x63
    120a:	2815      	cmp	r0, #21
    120c:	d886      	bhi.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    120e:	a201      	add	r2, pc, #4	; (adr r2, 1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    1210:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1214:	00001295 	.word	0x00001295
    1218:	000012f9 	.word	0x000012f9
    121c:	0000111d 	.word	0x0000111d
    1220:	0000111d 	.word	0x0000111d
    1224:	0000111d 	.word	0x0000111d
    1228:	0000111d 	.word	0x0000111d
    122c:	000012f9 	.word	0x000012f9
    1230:	0000111d 	.word	0x0000111d
    1234:	0000111d 	.word	0x0000111d
    1238:	0000111d 	.word	0x0000111d
    123c:	0000111d 	.word	0x0000111d
    1240:	00001353 	.word	0x00001353
    1244:	00001321 	.word	0x00001321
    1248:	00001325 	.word	0x00001325
    124c:	0000111d 	.word	0x0000111d
    1250:	0000111d 	.word	0x0000111d
    1254:	0000126d 	.word	0x0000126d
    1258:	0000111d 	.word	0x0000111d
    125c:	00001321 	.word	0x00001321
    1260:	0000111d 	.word	0x0000111d
    1264:	0000111d 	.word	0x0000111d
    1268:	00001321 	.word	0x00001321
			if (precision >= 0) {
    126c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1270:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1274:	db0a      	blt.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
				len = strnlen(bps, precision);
    1276:	4641      	mov	r1, r8
    1278:	4650      	mov	r0, sl
    127a:	f006 f93b 	bl	74f4 <strnlen>
			bpe = bps + len;
    127e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1282:	2600      	movs	r6, #0
		if (bps == NULL) {
    1284:	f1ba 0f00 	cmp.w	sl, #0
    1288:	d10c      	bne.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    128a:	e747      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
				len = strlen(bps);
    128c:	4650      	mov	r0, sl
    128e:	f006 f92a 	bl	74e6 <strlen>
    1292:	e7f4      	b.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1296:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    129a:	2600      	movs	r6, #0
			bps = buf;
    129c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    12a0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    12a4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    12a8:	b106      	cbz	r6, 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
			nj_len += 1U;
    12aa:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    12ac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    12b0:	06d0      	lsls	r0, r2, #27
    12b2:	d568      	bpl.n	1386 <CONFIG_FPROTECT_BLOCK_SIZE+0x386>
			nj_len += 2U;
    12b4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    12b6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    12b8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    12ba:	bf48      	it	mi
    12bc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    12be:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    12c0:	bf48      	it	mi
    12c2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    12c4:	f1b9 0f00 	cmp.w	r9, #0
    12c8:	dd76      	ble.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
			if (!conv->flag_dash) {
    12ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    12ce:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    12d2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    12d6:	9303      	str	r3, [sp, #12]
    12d8:	0753      	lsls	r3, r2, #29
    12da:	d46d      	bmi.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
				if (conv->flag_zero) {
    12dc:	0650      	lsls	r0, r2, #25
    12de:	d561      	bpl.n	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
					if (sign != 0) {
    12e0:	b146      	cbz	r6, 12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
						OUTC(sign);
    12e2:	9b02      	ldr	r3, [sp, #8]
    12e4:	4659      	mov	r1, fp
    12e6:	4630      	mov	r0, r6
    12e8:	4798      	blx	r3
    12ea:	2800      	cmp	r0, #0
    12ec:	db57      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
						sign = 0;
    12ee:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    12f0:	3501      	adds	r5, #1
						sign = 0;
    12f2:	461e      	mov	r6, r3
					pad = '0';
    12f4:	2330      	movs	r3, #48	; 0x30
    12f6:	e056      	b.n	13a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a6>
			if (conv->flag_plus) {
    12f8:	071e      	lsls	r6, r3, #28
    12fa:	d40f      	bmi.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
				sign = ' ';
    12fc:	f013 0610 	ands.w	r6, r3, #16
    1300:	bf18      	it	ne
    1302:	2620      	movne	r6, #32
			sint = value->sint;
    1304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1308:	2b00      	cmp	r3, #0
    130a:	f6bf af5f 	bge.w	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
				value->uint = (uint_value_type)-sint;
    130e:	4252      	negs	r2, r2
    1310:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1318:	262d      	movs	r6, #45	; 0x2d
    131a:	e757      	b.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
				sign = '+';
    131c:	262b      	movs	r6, #43	; 0x2b
    131e:	e7f1      	b.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
		switch (conv->specifier) {
    1320:	2600      	movs	r6, #0
    1322:	e753      	b.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
			if (value->ptr != NULL) {
    1324:	980a      	ldr	r0, [sp, #40]	; 0x28
    1326:	b340      	cbz	r0, 137a <CONFIG_FPROTECT_BLOCK_SIZE+0x37a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1328:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    132c:	9300      	str	r3, [sp, #0]
    132e:	aa0c      	add	r2, sp, #48	; 0x30
    1330:	ab04      	add	r3, sp, #16
    1332:	2100      	movs	r1, #0
    1334:	f006 f847 	bl	73c6 <encode_uint>
				conv->altform_0c = true;
    1338:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    133c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1340:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1344:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1348:	4682      	mov	sl, r0
				conv->altform_0c = true;
    134a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    134e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1350:	e746      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
				store_count(conv, value->ptr, count);
    1352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1354:	2907      	cmp	r1, #7
    1356:	f63f aee1 	bhi.w	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    135a:	e8df f001 	tbb	[pc, r1]
    135e:	040c      	.short	0x040c
    1360:	08080c06 	.word	0x08080c06
    1364:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1366:	701d      	strb	r5, [r3, #0]
		break;
    1368:	e6d8      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		*(short *)dp = (short)count;
    136a:	801d      	strh	r5, [r3, #0]
		break;
    136c:	e6d6      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		*(intmax_t *)dp = (intmax_t)count;
    136e:	17ea      	asrs	r2, r5, #31
    1370:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1374:	e6d2      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1376:	601d      	str	r5, [r3, #0]
		break;
    1378:	e6d0      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			bps = "(nil)";
    137a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1444 <CONFIG_FPROTECT_BLOCK_SIZE+0x444>
    137e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1380:	f10a 0805 	add.w	r8, sl, #5
    1384:	e78e      	b.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
		} else if (conv->altform_0) {
    1386:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1388:	bf48      	it	mi
    138a:	3301      	addmi	r3, #1
    138c:	e793      	b.n	12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
					OUTC(pad);
    138e:	4618      	mov	r0, r3
    1390:	9303      	str	r3, [sp, #12]
    1392:	4659      	mov	r1, fp
    1394:	9b02      	ldr	r3, [sp, #8]
    1396:	4798      	blx	r3
    1398:	2800      	cmp	r0, #0
    139a:	9b03      	ldr	r3, [sp, #12]
    139c:	da04      	bge.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
#undef OUTS
#undef OUTC
}
    139e:	b011      	add	sp, #68	; 0x44
    13a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    13a4:	2320      	movs	r3, #32
    13a6:	444d      	add	r5, r9
    13a8:	464a      	mov	r2, r9
				while (width-- > 0) {
    13aa:	2a00      	cmp	r2, #0
    13ac:	eba5 0109 	sub.w	r1, r5, r9
    13b0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    13b4:	dceb      	bgt.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
    13b6:	460d      	mov	r5, r1
		if (sign != 0) {
    13b8:	b136      	cbz	r6, 13c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c8>
			OUTC(sign);
    13ba:	9b02      	ldr	r3, [sp, #8]
    13bc:	4659      	mov	r1, fp
    13be:	4630      	mov	r0, r6
    13c0:	4798      	blx	r3
    13c2:	2800      	cmp	r0, #0
    13c4:	dbeb      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    13c6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    13c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    13cc:	06d9      	lsls	r1, r3, #27
    13ce:	d401      	bmi.n	13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
    13d0:	071a      	lsls	r2, r3, #28
    13d2:	d506      	bpl.n	13e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e2>
				OUTC('0');
    13d4:	9b02      	ldr	r3, [sp, #8]
    13d6:	4659      	mov	r1, fp
    13d8:	2030      	movs	r0, #48	; 0x30
    13da:	4798      	blx	r3
    13dc:	2800      	cmp	r0, #0
    13de:	dbde      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    13e0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    13e2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    13e6:	06db      	lsls	r3, r3, #27
    13e8:	d507      	bpl.n	13fa <CONFIG_FPROTECT_BLOCK_SIZE+0x3fa>
				OUTC(conv->specifier);
    13ea:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    13ee:	9b02      	ldr	r3, [sp, #8]
    13f0:	4659      	mov	r1, fp
    13f2:	4798      	blx	r3
    13f4:	2800      	cmp	r0, #0
    13f6:	dbd2      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    13f8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    13fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    13fc:	442e      	add	r6, r5
    13fe:	1b73      	subs	r3, r6, r5
    1400:	2b00      	cmp	r3, #0
    1402:	dc16      	bgt.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
			OUTS(bps, bpe);
    1404:	9802      	ldr	r0, [sp, #8]
    1406:	4643      	mov	r3, r8
    1408:	4652      	mov	r2, sl
    140a:	4659      	mov	r1, fp
    140c:	f006 f821 	bl	7452 <outs>
    1410:	2800      	cmp	r0, #0
    1412:	dbc4      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    1414:	4405      	add	r5, r0
		while (width > 0) {
    1416:	44a9      	add	r9, r5
    1418:	eba9 0305 	sub.w	r3, r9, r5
    141c:	2b00      	cmp	r3, #0
    141e:	f77f ae7d 	ble.w	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			OUTC(' ');
    1422:	9b02      	ldr	r3, [sp, #8]
    1424:	4659      	mov	r1, fp
    1426:	2020      	movs	r0, #32
    1428:	4798      	blx	r3
    142a:	2800      	cmp	r0, #0
    142c:	dbb7      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    142e:	3501      	adds	r5, #1
			--width;
    1430:	e7f2      	b.n	1418 <CONFIG_FPROTECT_BLOCK_SIZE+0x418>
				OUTC('0');
    1432:	9b02      	ldr	r3, [sp, #8]
    1434:	4659      	mov	r1, fp
    1436:	2030      	movs	r0, #48	; 0x30
    1438:	4798      	blx	r3
    143a:	2800      	cmp	r0, #0
    143c:	dbaf      	blt.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    143e:	3501      	adds	r5, #1
    1440:	e7dd      	b.n	13fe <CONFIG_FPROTECT_BLOCK_SIZE+0x3fe>
    1442:	bf00      	nop
    1444:	000088a4 	.word	0x000088a4

00001448 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1448:	b508      	push	{r3, lr}
	__asm__ volatile(
    144a:	f04f 0220 	mov.w	r2, #32
    144e:	f3ef 8311 	mrs	r3, BASEPRI
    1452:	f382 8812 	msr	BASEPRI_MAX, r2
    1456:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    145a:	f000 ff2d 	bl	22b8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    145e:	4803      	ldr	r0, [pc, #12]	; (146c <sys_reboot+0x24>)
    1460:	f005 ff1a 	bl	7298 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1464:	f000 fa68 	bl	1938 <arch_cpu_idle>
    1468:	e7fc      	b.n	1464 <sys_reboot+0x1c>
    146a:	bf00      	nop
    146c:	000088aa 	.word	0x000088aa

00001470 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1474:	4605      	mov	r5, r0
    1476:	f04f 0320 	mov.w	r3, #32
    147a:	f3ef 8611 	mrs	r6, BASEPRI
    147e:	f383 8812 	msr	BASEPRI_MAX, r3
    1482:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1486:	4822      	ldr	r0, [pc, #136]	; (1510 <pm_state_notify+0xa0>)
    1488:	f003 fc8e 	bl	4da8 <z_spin_lock_valid>
    148c:	b968      	cbnz	r0, 14aa <pm_state_notify+0x3a>
    148e:	4a21      	ldr	r2, [pc, #132]	; (1514 <pm_state_notify+0xa4>)
    1490:	4921      	ldr	r1, [pc, #132]	; (1518 <pm_state_notify+0xa8>)
    1492:	4822      	ldr	r0, [pc, #136]	; (151c <pm_state_notify+0xac>)
    1494:	238e      	movs	r3, #142	; 0x8e
    1496:	f005 fff9 	bl	748c <assert_print>
    149a:	491d      	ldr	r1, [pc, #116]	; (1510 <pm_state_notify+0xa0>)
    149c:	4820      	ldr	r0, [pc, #128]	; (1520 <pm_state_notify+0xb0>)
    149e:	f005 fff5 	bl	748c <assert_print>
    14a2:	481c      	ldr	r0, [pc, #112]	; (1514 <pm_state_notify+0xa4>)
    14a4:	218e      	movs	r1, #142	; 0x8e
    14a6:	f005 ffea 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    14aa:	4819      	ldr	r0, [pc, #100]	; (1510 <pm_state_notify+0xa0>)
    14ac:	f003 fc9a 	bl	4de4 <z_spin_lock_set_owner>
	return list->head;
    14b0:	4b1c      	ldr	r3, [pc, #112]	; (1524 <pm_state_notify+0xb4>)
    14b2:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    14b4:	b19c      	cbz	r4, 14de <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    14b6:	4f1c      	ldr	r7, [pc, #112]	; (1528 <pm_state_notify+0xb8>)
    14b8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 152c <pm_state_notify+0xbc>
    14bc:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    14c0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    14c4:	2d00      	cmp	r5, #0
    14c6:	bf08      	it	eq
    14c8:	4613      	moveq	r3, r2
		if (callback) {
    14ca:	b12b      	cbz	r3, 14d8 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    14cc:	f898 2014 	ldrb.w	r2, [r8, #20]
    14d0:	fb09 f202 	mul.w	r2, r9, r2
    14d4:	5cb8      	ldrb	r0, [r7, r2]
    14d6:	4798      	blx	r3
	return node->next;
    14d8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    14da:	2c00      	cmp	r4, #0
    14dc:	d1f0      	bne.n	14c0 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    14de:	480c      	ldr	r0, [pc, #48]	; (1510 <pm_state_notify+0xa0>)
    14e0:	f003 fc70 	bl	4dc4 <z_spin_unlock_valid>
    14e4:	b968      	cbnz	r0, 1502 <pm_state_notify+0x92>
    14e6:	4a0b      	ldr	r2, [pc, #44]	; (1514 <pm_state_notify+0xa4>)
    14e8:	4911      	ldr	r1, [pc, #68]	; (1530 <pm_state_notify+0xc0>)
    14ea:	480c      	ldr	r0, [pc, #48]	; (151c <pm_state_notify+0xac>)
    14ec:	23b9      	movs	r3, #185	; 0xb9
    14ee:	f005 ffcd 	bl	748c <assert_print>
    14f2:	4907      	ldr	r1, [pc, #28]	; (1510 <pm_state_notify+0xa0>)
    14f4:	480f      	ldr	r0, [pc, #60]	; (1534 <pm_state_notify+0xc4>)
    14f6:	f005 ffc9 	bl	748c <assert_print>
    14fa:	4806      	ldr	r0, [pc, #24]	; (1514 <pm_state_notify+0xa4>)
    14fc:	21b9      	movs	r1, #185	; 0xb9
    14fe:	f005 ffbe 	bl	747e <assert_post_action>
	__asm__ volatile(
    1502:	f386 8811 	msr	BASEPRI, r6
    1506:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    150a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    150e:	bf00      	nop
    1510:	200004a8 	.word	0x200004a8
    1514:	00008697 	.word	0x00008697
    1518:	000086f0 	.word	0x000086f0
    151c:	000085d7 	.word	0x000085d7
    1520:	00008705 	.word	0x00008705
    1524:	200004ac 	.word	0x200004ac
    1528:	200004b4 	.word	0x200004b4
    152c:	20000b58 	.word	0x20000b58
    1530:	000086c4 	.word	0x000086c4
    1534:	000086db 	.word	0x000086db

00001538 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1538:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    153a:	2301      	movs	r3, #1
    153c:	f000 001f 	and.w	r0, r0, #31
    1540:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1544:	4b07      	ldr	r3, [pc, #28]	; (1564 <atomic_clear_bit.constprop.0+0x2c>)
    1546:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    154a:	43c0      	mvns	r0, r0
    154c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1550:	e853 2f00 	ldrex	r2, [r3]
    1554:	4002      	ands	r2, r0
    1556:	e843 2100 	strex	r1, r2, [r3]
    155a:	2900      	cmp	r1, #0
    155c:	d1f8      	bne.n	1550 <atomic_clear_bit.constprop.0+0x18>
    155e:	f3bf 8f5b 	dmb	ish
}
    1562:	4770      	bx	lr
    1564:	200004c0 	.word	0x200004c0

00001568 <pm_system_resume>:

void pm_system_resume(void)
{
    1568:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    156a:	4b1a      	ldr	r3, [pc, #104]	; (15d4 <pm_system_resume+0x6c>)
    156c:	7d1c      	ldrb	r4, [r3, #20]
    156e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1572:	f004 031f 	and.w	r3, r4, #31
    1576:	2201      	movs	r2, #1
    1578:	409a      	lsls	r2, r3
    157a:	4b17      	ldr	r3, [pc, #92]	; (15d8 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    157c:	0961      	lsrs	r1, r4, #5
    157e:	43d0      	mvns	r0, r2
    1580:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1584:	e853 1f00 	ldrex	r1, [r3]
    1588:	ea01 0500 	and.w	r5, r1, r0
    158c:	e843 5c00 	strex	ip, r5, [r3]
    1590:	f1bc 0f00 	cmp.w	ip, #0
    1594:	d1f6      	bne.n	1584 <pm_system_resume+0x1c>
    1596:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    159a:	4211      	tst	r1, r2
    159c:	d013      	beq.n	15c6 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    159e:	4b0f      	ldr	r3, [pc, #60]	; (15dc <pm_system_resume+0x74>)
    15a0:	4d0f      	ldr	r5, [pc, #60]	; (15e0 <pm_system_resume+0x78>)
    15a2:	b18b      	cbz	r3, 15c8 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    15a4:	230c      	movs	r3, #12
    15a6:	4363      	muls	r3, r4
    15a8:	18ea      	adds	r2, r5, r3
    15aa:	5ce8      	ldrb	r0, [r5, r3]
    15ac:	7851      	ldrb	r1, [r2, #1]
    15ae:	f005 ffe6 	bl	757e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    15b2:	2000      	movs	r0, #0
    15b4:	f7ff ff5c 	bl	1470 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    15b8:	230c      	movs	r3, #12
    15ba:	435c      	muls	r4, r3
    15bc:	192a      	adds	r2, r5, r4
    15be:	2300      	movs	r3, #0
    15c0:	512b      	str	r3, [r5, r4]
    15c2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    15c6:	bd38      	pop	{r3, r4, r5, pc}
    15c8:	f383 8811 	msr	BASEPRI, r3
    15cc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15d0:	e7ef      	b.n	15b2 <pm_system_resume+0x4a>
    15d2:	bf00      	nop
    15d4:	20000b58 	.word	0x20000b58
    15d8:	200004c4 	.word	0x200004c4
    15dc:	0000757f 	.word	0x0000757f
    15e0:	200004b4 	.word	0x200004b4

000015e4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    15e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    15e8:	4b32      	ldr	r3, [pc, #200]	; (16b4 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    15ea:	4a33      	ldr	r2, [pc, #204]	; (16b8 <pm_system_suspend+0xd4>)
    15ec:	7d1c      	ldrb	r4, [r3, #20]
    15ee:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    15f2:	0963      	lsrs	r3, r4, #5
    15f4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    15f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    15fc:	4e2f      	ldr	r6, [pc, #188]	; (16bc <pm_system_suspend+0xd8>)
    15fe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1602:	f004 081f 	and.w	r8, r4, #31
    1606:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    160a:	f013 0f01 	tst.w	r3, #1
{
    160e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1610:	d10a      	bne.n	1628 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1612:	4601      	mov	r1, r0
    1614:	4620      	mov	r0, r4
    1616:	f000 f869 	bl	16ec <pm_policy_next_state>
		if (info != NULL) {
    161a:	b128      	cbz	r0, 1628 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    161c:	c807      	ldmia	r0, {r0, r1, r2}
    161e:	230c      	movs	r3, #12
    1620:	fb03 6304 	mla	r3, r3, r4, r6
    1624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1628:	230c      	movs	r3, #12
    162a:	4363      	muls	r3, r4
    162c:	18f2      	adds	r2, r6, r3
    162e:	5cf5      	ldrb	r5, [r6, r3]
    1630:	b92d      	cbnz	r5, 163e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1632:	4620      	mov	r0, r4
    1634:	f7ff ff80 	bl	1538 <atomic_clear_bit.constprop.0>
		ret = false;
    1638:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    163a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    163e:	1c7b      	adds	r3, r7, #1
    1640:	d00f      	beq.n	1662 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1642:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1646:	481e      	ldr	r0, [pc, #120]	; (16c0 <pm_system_suspend+0xdc>)
    1648:	4a1e      	ldr	r2, [pc, #120]	; (16c4 <pm_system_suspend+0xe0>)
    164a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    164e:	2100      	movs	r1, #0
    1650:	2300      	movs	r3, #0
    1652:	fbec 0105 	umlal	r0, r1, ip, r5
    1656:	f7fe fd53 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    165a:	2101      	movs	r1, #1
    165c:	1a38      	subs	r0, r7, r0
    165e:	f005 f993 	bl	6988 <z_set_timeout_expiry>
	k_sched_lock();
    1662:	f003 ff85 	bl	5570 <k_sched_lock>
	pm_state_notify(true);
    1666:	2001      	movs	r0, #1
    1668:	f7ff ff02 	bl	1470 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    166c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1670:	2301      	movs	r3, #1
    1672:	fa03 f808 	lsl.w	r8, r3, r8
    1676:	4b14      	ldr	r3, [pc, #80]	; (16c8 <pm_system_suspend+0xe4>)
    1678:	4499      	add	r9, r3
    167a:	e859 3f00 	ldrex	r3, [r9]
    167e:	ea43 0308 	orr.w	r3, r3, r8
    1682:	e849 3200 	strex	r2, r3, [r9]
    1686:	2a00      	cmp	r2, #0
    1688:	d1f7      	bne.n	167a <pm_system_suspend+0x96>
    168a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    168e:	4b0f      	ldr	r3, [pc, #60]	; (16cc <pm_system_suspend+0xe8>)
    1690:	b133      	cbz	r3, 16a0 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1692:	230c      	movs	r3, #12
    1694:	4363      	muls	r3, r4
    1696:	18f2      	adds	r2, r6, r3
    1698:	5cf0      	ldrb	r0, [r6, r3]
    169a:	7851      	ldrb	r1, [r2, #1]
    169c:	f005 ff63 	bl	7566 <pm_state_set>
	pm_system_resume();
    16a0:	f7ff ff62 	bl	1568 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    16a4:	4620      	mov	r0, r4
    16a6:	f7ff ff47 	bl	1538 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    16aa:	f004 fc4b 	bl	5f44 <k_sched_unlock>
	bool ret = true;
    16ae:	2001      	movs	r0, #1
    16b0:	e7c3      	b.n	163a <pm_system_suspend+0x56>
    16b2:	bf00      	nop
    16b4:	20000b58 	.word	0x20000b58
    16b8:	200004c0 	.word	0x200004c0
    16bc:	200004b4 	.word	0x200004b4
    16c0:	000f423f 	.word	0x000f423f
    16c4:	000f4240 	.word	0x000f4240
    16c8:	200004c4 	.word	0x200004c4
    16cc:	00007567 	.word	0x00007567

000016d0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <pm_policy_state_lock_is_active+0x18>)
    16d2:	f3bf 8f5b 	dmb	ish
    16d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    16da:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    16de:	3800      	subs	r0, #0
    16e0:	bf18      	it	ne
    16e2:	2001      	movne	r0, #1
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	200004c8 	.word	0x200004c8

000016ec <pm_policy_next_state>:
{
    16ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16f0:	b085      	sub	sp, #20
    16f2:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    16f4:	a903      	add	r1, sp, #12
    16f6:	f000 f847 	bl	1788 <pm_state_cpu_get_all>
    16fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 177c <pm_policy_next_state+0x90>
    16fe:	f8df a080 	ldr.w	sl, [pc, #128]	; 1780 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1702:	1e44      	subs	r4, r0, #1
    1704:	b224      	sxth	r4, r4
    1706:	f04f 0b00 	mov.w	fp, #0
    170a:	1c63      	adds	r3, r4, #1
    170c:	d104      	bne.n	1718 <pm_policy_next_state+0x2c>
	return NULL;
    170e:	2600      	movs	r6, #0
}
    1710:	4630      	mov	r0, r6
    1712:	b005      	add	sp, #20
    1714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1718:	9a03      	ldr	r2, [sp, #12]
    171a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    171e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1722:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1726:	f7ff ffd3 	bl	16d0 <pm_policy_state_lock_is_active>
    172a:	4605      	mov	r5, r0
    172c:	bb10      	cbnz	r0, 1774 <pm_policy_next_state+0x88>
    172e:	6870      	ldr	r0, [r6, #4]
    1730:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1734:	46c4      	mov	ip, r8
    1736:	4629      	mov	r1, r5
    1738:	fbe0 c109 	umlal	ip, r1, r0, r9
    173c:	4652      	mov	r2, sl
    173e:	465b      	mov	r3, fp
    1740:	4660      	mov	r0, ip
    1742:	f7fe fcdd 	bl	100 <__aeabi_uldivmod>
    1746:	9001      	str	r0, [sp, #4]
    1748:	68b0      	ldr	r0, [r6, #8]
    174a:	46c4      	mov	ip, r8
    174c:	4629      	mov	r1, r5
    174e:	fbe0 c109 	umlal	ip, r1, r0, r9
    1752:	465b      	mov	r3, fp
    1754:	4652      	mov	r2, sl
    1756:	4660      	mov	r0, ip
    1758:	f7fe fcd2 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    175c:	4b09      	ldr	r3, [pc, #36]	; (1784 <pm_policy_next_state+0x98>)
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	1c59      	adds	r1, r3, #1
    1762:	d001      	beq.n	1768 <pm_policy_next_state+0x7c>
    1764:	4283      	cmp	r3, r0
    1766:	d905      	bls.n	1774 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1768:	1c7a      	adds	r2, r7, #1
    176a:	d0d1      	beq.n	1710 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    176c:	9b01      	ldr	r3, [sp, #4]
    176e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1770:	42b8      	cmp	r0, r7
    1772:	d9cd      	bls.n	1710 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1774:	3c01      	subs	r4, #1
    1776:	b224      	sxth	r4, r4
    1778:	e7c7      	b.n	170a <pm_policy_next_state+0x1e>
    177a:	bf00      	nop
    177c:	000f423f 	.word	0x000f423f
    1780:	000f4240 	.word	0x000f4240
    1784:	20000004 	.word	0x20000004

00001788 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1788:	b908      	cbnz	r0, 178e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    178a:	4b02      	ldr	r3, [pc, #8]	; (1794 <pm_state_cpu_get_all+0xc>)
    178c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    178e:	2000      	movs	r0, #0
    1790:	4770      	bx	lr
    1792:	bf00      	nop
    1794:	00008190 	.word	0x00008190

00001798 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1798:	4801      	ldr	r0, [pc, #4]	; (17a0 <nrf_cc3xx_platform_abort_init+0x8>)
    179a:	f005 bbdb 	b.w	6f54 <nrf_cc3xx_platform_set_abort>
    179e:	bf00      	nop
    17a0:	00008190 	.word	0x00008190

000017a4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17a4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    17a6:	4604      	mov	r4, r0
    17a8:	b918      	cbnz	r0, 17b2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    17aa:	4b0d      	ldr	r3, [pc, #52]	; (17e0 <mutex_free_platform+0x3c>)
    17ac:	480d      	ldr	r0, [pc, #52]	; (17e4 <mutex_free_platform+0x40>)
    17ae:	685b      	ldr	r3, [r3, #4]
    17b0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17b2:	6861      	ldr	r1, [r4, #4]
    17b4:	2908      	cmp	r1, #8
    17b6:	d00d      	beq.n	17d4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17b8:	f031 0304 	bics.w	r3, r1, #4
    17bc:	d00a      	beq.n	17d4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    17be:	f011 0102 	ands.w	r1, r1, #2
    17c2:	d008      	beq.n	17d6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    17c4:	4808      	ldr	r0, [pc, #32]	; (17e8 <mutex_free_platform+0x44>)
    17c6:	4621      	mov	r1, r4
    17c8:	f003 f99e 	bl	4b08 <k_mem_slab_free>
        mutex->mutex = NULL;
    17cc:	2300      	movs	r3, #0
    17ce:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    17d0:	2300      	movs	r3, #0
    17d2:	6063      	str	r3, [r4, #4]
}
    17d4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    17d6:	6820      	ldr	r0, [r4, #0]
    17d8:	2214      	movs	r2, #20
    17da:	f005 feab 	bl	7534 <memset>
    17de:	e7f7      	b.n	17d0 <mutex_free_platform+0x2c>
    17e0:	200000e8 	.word	0x200000e8
    17e4:	000088d3 	.word	0x000088d3
    17e8:	200004e4 	.word	0x200004e4

000017ec <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17ec:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    17ee:	b308      	cbz	r0, 1834 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    17f0:	6843      	ldr	r3, [r0, #4]
    17f2:	2b04      	cmp	r3, #4
    17f4:	d110      	bne.n	1818 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    17f6:	2201      	movs	r2, #1
    17f8:	6803      	ldr	r3, [r0, #0]
    17fa:	f3bf 8f5b 	dmb	ish
    17fe:	e853 1f00 	ldrex	r1, [r3]
    1802:	2900      	cmp	r1, #0
    1804:	d103      	bne.n	180e <mutex_lock_platform+0x22>
    1806:	e843 2000 	strex	r0, r2, [r3]
    180a:	2800      	cmp	r0, #0
    180c:	d1f7      	bne.n	17fe <mutex_lock_platform+0x12>
    180e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1812:	d10b      	bne.n	182c <mutex_lock_platform+0x40>
    1814:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1816:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1818:	b153      	cbz	r3, 1830 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    181a:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    181c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1824:	f003 fb18 	bl	4e58 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1828:	2800      	cmp	r0, #0
    182a:	d0f3      	beq.n	1814 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    182c:	4803      	ldr	r0, [pc, #12]	; (183c <mutex_lock_platform+0x50>)
    182e:	e7f2      	b.n	1816 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1830:	4803      	ldr	r0, [pc, #12]	; (1840 <mutex_lock_platform+0x54>)
    1832:	e7f0      	b.n	1816 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1834:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1838:	e7ed      	b.n	1816 <mutex_lock_platform+0x2a>
    183a:	bf00      	nop
    183c:	ffff8fe9 	.word	0xffff8fe9
    1840:	ffff8fea 	.word	0xffff8fea

00001844 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1844:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1846:	b1d0      	cbz	r0, 187e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1848:	6843      	ldr	r3, [r0, #4]
    184a:	2b04      	cmp	r3, #4
    184c:	d111      	bne.n	1872 <mutex_unlock_platform+0x2e>
    184e:	2200      	movs	r2, #0
    1850:	6803      	ldr	r3, [r0, #0]
    1852:	f3bf 8f5b 	dmb	ish
    1856:	e853 1f00 	ldrex	r1, [r3]
    185a:	2901      	cmp	r1, #1
    185c:	d103      	bne.n	1866 <mutex_unlock_platform+0x22>
    185e:	e843 2000 	strex	r0, r2, [r3]
    1862:	2800      	cmp	r0, #0
    1864:	d1f7      	bne.n	1856 <mutex_unlock_platform+0x12>
    1866:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    186a:	4807      	ldr	r0, [pc, #28]	; (1888 <mutex_unlock_platform+0x44>)
    186c:	bf08      	it	eq
    186e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1870:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1872:	b13b      	cbz	r3, 1884 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1874:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1876:	f003 fbe9 	bl	504c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    187a:	2000      	movs	r0, #0
    187c:	e7f8      	b.n	1870 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    187e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1882:	e7f5      	b.n	1870 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1884:	4801      	ldr	r0, [pc, #4]	; (188c <mutex_unlock_platform+0x48>)
    1886:	e7f3      	b.n	1870 <mutex_unlock_platform+0x2c>
    1888:	ffff8fe9 	.word	0xffff8fe9
    188c:	ffff8fea 	.word	0xffff8fea

00001890 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1890:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1892:	4604      	mov	r4, r0
    1894:	b918      	cbnz	r0, 189e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1896:	4b16      	ldr	r3, [pc, #88]	; (18f0 <mutex_init_platform+0x60>)
    1898:	4816      	ldr	r0, [pc, #88]	; (18f4 <mutex_init_platform+0x64>)
    189a:	685b      	ldr	r3, [r3, #4]
    189c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    189e:	6863      	ldr	r3, [r4, #4]
    18a0:	2b04      	cmp	r3, #4
    18a2:	d023      	beq.n	18ec <mutex_init_platform+0x5c>
    18a4:	2b08      	cmp	r3, #8
    18a6:	d021      	beq.n	18ec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    18a8:	b9cb      	cbnz	r3, 18de <mutex_init_platform+0x4e>
    18aa:	6823      	ldr	r3, [r4, #0]
    18ac:	b9bb      	cbnz	r3, 18de <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    18ae:	4812      	ldr	r0, [pc, #72]	; (18f8 <mutex_init_platform+0x68>)
    18b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    18b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    18b8:	4621      	mov	r1, r4
    18ba:	f003 f8b9 	bl	4a30 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    18be:	b908      	cbnz	r0, 18c4 <mutex_init_platform+0x34>
    18c0:	6823      	ldr	r3, [r4, #0]
    18c2:	b91b      	cbnz	r3, 18cc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    18c4:	4b0a      	ldr	r3, [pc, #40]	; (18f0 <mutex_init_platform+0x60>)
    18c6:	480d      	ldr	r0, [pc, #52]	; (18fc <mutex_init_platform+0x6c>)
    18c8:	685b      	ldr	r3, [r3, #4]
    18ca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    18cc:	6820      	ldr	r0, [r4, #0]
    18ce:	2214      	movs	r2, #20
    18d0:	2100      	movs	r1, #0
    18d2:	f005 fe2f 	bl	7534 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    18d6:	6863      	ldr	r3, [r4, #4]
    18d8:	f043 0302 	orr.w	r3, r3, #2
    18dc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    18de:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    18e0:	f006 faaa 	bl	7e38 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    18e4:	6863      	ldr	r3, [r4, #4]
    18e6:	f043 0301 	orr.w	r3, r3, #1
    18ea:	6063      	str	r3, [r4, #4]
}
    18ec:	bd10      	pop	{r4, pc}
    18ee:	bf00      	nop
    18f0:	200000e8 	.word	0x200000e8
    18f4:	000088d3 	.word	0x000088d3
    18f8:	200004e4 	.word	0x200004e4
    18fc:	000088f9 	.word	0x000088f9

00001900 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1900:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1902:	4906      	ldr	r1, [pc, #24]	; (191c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1904:	4806      	ldr	r0, [pc, #24]	; (1920 <nrf_cc3xx_platform_mutex_init+0x20>)
    1906:	2340      	movs	r3, #64	; 0x40
    1908:	2214      	movs	r2, #20
    190a:	f006 fa64 	bl	7dd6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    190e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1912:	4904      	ldr	r1, [pc, #16]	; (1924 <nrf_cc3xx_platform_mutex_init+0x24>)
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <nrf_cc3xx_platform_mutex_init+0x28>)
    1916:	f005 bb7d 	b.w	7014 <nrf_cc3xx_platform_set_mutexes>
    191a:	bf00      	nop
    191c:	20000504 	.word	0x20000504
    1920:	200004e4 	.word	0x200004e4
    1924:	000081a8 	.word	0x000081a8
    1928:	00008198 	.word	0x00008198

0000192c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    192c:	4901      	ldr	r1, [pc, #4]	; (1934 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    192e:	2210      	movs	r2, #16
	str	r2, [r1]
    1930:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1932:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1934:	e000ed10 	.word	0xe000ed10

00001938 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1938:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    193a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    193c:	f380 8811 	msr	BASEPRI, r0
	isb
    1940:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1944:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1948:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    194a:	b662      	cpsie	i
	isb
    194c:	f3bf 8f6f 	isb	sy

	bx	lr
    1950:	4770      	bx	lr
    1952:	bf00      	nop

00001954 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1954:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1956:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1958:	f381 8811 	msr	BASEPRI, r1

	wfe
    195c:	bf20      	wfe

	msr	BASEPRI, r0
    195e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1962:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1964:	4770      	bx	lr
    1966:	bf00      	nop

00001968 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1968:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    196a:	2b00      	cmp	r3, #0
    196c:	db08      	blt.n	1980 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    196e:	2201      	movs	r2, #1
    1970:	f000 001f 	and.w	r0, r0, #31
    1974:	fa02 f000 	lsl.w	r0, r2, r0
    1978:	095b      	lsrs	r3, r3, #5
    197a:	4a02      	ldr	r2, [pc, #8]	; (1984 <arch_irq_enable+0x1c>)
    197c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	e000e100 	.word	0xe000e100

00001988 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <arch_irq_is_enabled+0x18>)
    198a:	0942      	lsrs	r2, r0, #5
    198c:	f000 001f 	and.w	r0, r0, #31
    1990:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1994:	2301      	movs	r3, #1
    1996:	fa03 f000 	lsl.w	r0, r3, r0
}
    199a:	4010      	ands	r0, r2
    199c:	4770      	bx	lr
    199e:	bf00      	nop
    19a0:	e000e100 	.word	0xe000e100

000019a4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    19a4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    19a6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19a8:	2c07      	cmp	r4, #7
{
    19aa:	4605      	mov	r5, r0
    19ac:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19ae:	d90f      	bls.n	19d0 <z_arm_irq_priority_set+0x2c>
    19b0:	4a11      	ldr	r2, [pc, #68]	; (19f8 <z_arm_irq_priority_set+0x54>)
    19b2:	4912      	ldr	r1, [pc, #72]	; (19fc <z_arm_irq_priority_set+0x58>)
    19b4:	4812      	ldr	r0, [pc, #72]	; (1a00 <z_arm_irq_priority_set+0x5c>)
    19b6:	2357      	movs	r3, #87	; 0x57
    19b8:	f005 fd68 	bl	748c <assert_print>
    19bc:	4811      	ldr	r0, [pc, #68]	; (1a04 <z_arm_irq_priority_set+0x60>)
    19be:	4631      	mov	r1, r6
    19c0:	2307      	movs	r3, #7
    19c2:	462a      	mov	r2, r5
    19c4:	f005 fd62 	bl	748c <assert_print>
    19c8:	480b      	ldr	r0, [pc, #44]	; (19f8 <z_arm_irq_priority_set+0x54>)
    19ca:	2157      	movs	r1, #87	; 0x57
    19cc:	f005 fd57 	bl	747e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19d0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19d2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19d4:	bfac      	ite	ge
    19d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19da:	4b0b      	ldrlt	r3, [pc, #44]	; (1a08 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19dc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e0:	bfb8      	it	lt
    19e2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e6:	b2e4      	uxtb	r4, r4
    19e8:	bfaa      	itet	ge
    19ea:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ee:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19f0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    19f4:	bd70      	pop	{r4, r5, r6, pc}
    19f6:	bf00      	nop
    19f8:	00008926 	.word	0x00008926
    19fc:	0000895c 	.word	0x0000895c
    1a00:	000085d7 	.word	0x000085d7
    1a04:	00008977 	.word	0x00008977
    1a08:	e000ed14 	.word	0xe000ed14

00001a0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a0c:	bf30      	wfi
    b z_SysNmiOnReset
    1a0e:	f7ff bffd 	b.w	1a0c <z_SysNmiOnReset>
    1a12:	bf00      	nop

00001a14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a14:	4a0b      	ldr	r2, [pc, #44]	; (1a44 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1a16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a18:	4b0b      	ldr	r3, [pc, #44]	; (1a48 <z_arm_prep_c+0x34>)
    1a1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a34:	f002 ff12 	bl	485c <z_bss_zero>
	z_data_copy();
    1a38:	f004 fde4 	bl	6604 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a3c:	f000 fa26 	bl	1e8c <z_arm_interrupt_init>
	z_cstart();
    1a40:	f002 ff50 	bl	48e4 <z_cstart>
    1a44:	00000000 	.word	0x00000000
    1a48:	e000ed00 	.word	0xe000ed00

00001a4c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a4c:	4a09      	ldr	r2, [pc, #36]	; (1a74 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a4e:	490a      	ldr	r1, [pc, #40]	; (1a78 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a50:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a52:	6809      	ldr	r1, [r1, #0]
    1a54:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a56:	4909      	ldr	r1, [pc, #36]	; (1a7c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a58:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a5a:	684b      	ldr	r3, [r1, #4]
    1a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a60:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1a62:	2300      	movs	r3, #0
    1a64:	f383 8811 	msr	BASEPRI, r3
    1a68:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a6c:	6893      	ldr	r3, [r2, #8]
}
    1a6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	20000b58 	.word	0x20000b58
    1a78:	00008310 	.word	0x00008310
    1a7c:	e000ed00 	.word	0xe000ed00

00001a80 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a80:	4912      	ldr	r1, [pc, #72]	; (1acc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a82:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a84:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a88:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a8a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a8e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a92:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a94:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a98:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a9c:	4f0c      	ldr	r7, [pc, #48]	; (1ad0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a9e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1aa2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1aa4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1aa6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1aa8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1aaa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1aac:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1aae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ab2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ab4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ab6:	f000 fa85 	bl	1fc4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1aba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1abe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1ac2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1ac6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1aca:	4770      	bx	lr
    ldr r1, =_kernel
    1acc:	20000b58 	.word	0x20000b58
    ldr v4, =_SCS_ICSR
    1ad0:	e000ed04 	.word	0xe000ed04

00001ad4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ad4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ad8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ada:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1ade:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ae2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ae4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ae8:	2902      	cmp	r1, #2
    beq _oops
    1aea:	d0ff      	beq.n	1aec <_oops>

00001aec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1aec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1aee:	f005 fce1 	bl	74b4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1af2:	bd01      	pop	{r0, pc}

00001af4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1af4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1af8:	9b00      	ldr	r3, [sp, #0]
    1afa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1afe:	490a      	ldr	r1, [pc, #40]	; (1b28 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1b00:	9b01      	ldr	r3, [sp, #4]
    1b02:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b06:	9b02      	ldr	r3, [sp, #8]
    1b08:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b0c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b14:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b18:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b1c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b1e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1b20:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1b22:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	0000735b 	.word	0x0000735b

00001b2c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1b2c:	4a09      	ldr	r2, [pc, #36]	; (1b54 <z_check_thread_stack_fail+0x28>)
{
    1b2e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1b30:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1b32:	b170      	cbz	r0, 1b52 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1b34:	f113 0f16 	cmn.w	r3, #22
    1b38:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1b3a:	d005      	beq.n	1b48 <z_check_thread_stack_fail+0x1c>
    1b3c:	f1a0 0220 	sub.w	r2, r0, #32
    1b40:	429a      	cmp	r2, r3
    1b42:	d805      	bhi.n	1b50 <z_check_thread_stack_fail+0x24>
    1b44:	4283      	cmp	r3, r0
    1b46:	d203      	bcs.n	1b50 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1b48:	4281      	cmp	r1, r0
    1b4a:	bf28      	it	cs
    1b4c:	2000      	movcs	r0, #0
    1b4e:	4770      	bx	lr
    1b50:	2000      	movs	r0, #0
}
    1b52:	4770      	bx	lr
    1b54:	20000b58 	.word	0x20000b58

00001b58 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1b58:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1b5a:	4b09      	ldr	r3, [pc, #36]	; (1b80 <arch_switch_to_main_thread+0x28>)
    1b5c:	6098      	str	r0, [r3, #8]
{
    1b5e:	460d      	mov	r5, r1
    1b60:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1b62:	f000 fa2f 	bl	1fc4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1b66:	4620      	mov	r0, r4
    1b68:	f385 8809 	msr	PSP, r5
    1b6c:	2100      	movs	r1, #0
    1b6e:	b663      	cpsie	if
    1b70:	f381 8811 	msr	BASEPRI, r1
    1b74:	f3bf 8f6f 	isb	sy
    1b78:	2200      	movs	r2, #0
    1b7a:	2300      	movs	r3, #0
    1b7c:	f005 fbed 	bl	735a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b80:	20000b58 	.word	0x20000b58

00001b84 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b88:	4a0b      	ldr	r2, [pc, #44]	; (1bb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b8a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b8e:	bf1e      	ittt	ne
	movne	r1, #0
    1b90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b92:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b94:	f006 f941 	blne	7e1a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b98:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ba2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1ba6:	4905      	ldr	r1, [pc, #20]	; (1bbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ba8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1baa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1bac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1bae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1bb2:	4903      	ldr	r1, [pc, #12]	; (1bc0 <_isr_wrapper+0x3c>)
	bx r1
    1bb4:	4708      	bx	r1
    1bb6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1bb8:	20000b58 	.word	0x20000b58
	ldr r1, =_sw_isr_table
    1bbc:	00007fdc 	.word	0x00007fdc
	ldr r1, =z_arm_int_exit
    1bc0:	00001bc5 	.word	0x00001bc5

00001bc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1bc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1bc8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1bca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1bcc:	d003      	beq.n	1bd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1bce:	4903      	ldr	r1, [pc, #12]	; (1bdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1bd4:	600a      	str	r2, [r1, #0]

00001bd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1bd6:	4770      	bx	lr
	ldr r3, =_kernel
    1bd8:	20000b58 	.word	0x20000b58
	ldr r1, =_SCS_ICSR
    1bdc:	e000ed04 	.word	0xe000ed04

00001be0 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1be0:	4b26      	ldr	r3, [pc, #152]	; (1c7c <mem_manage_fault+0x9c>)
{
    1be2:	b570      	push	{r4, r5, r6, lr}
    1be4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bec:	0792      	lsls	r2, r2, #30
{
    1bee:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1bf0:	d521      	bpl.n	1c36 <mem_manage_fault+0x56>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1bf2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bf6:	0616      	lsls	r6, r2, #24
    1bf8:	d51d      	bpl.n	1c36 <mem_manage_fault+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1bfa:	b119      	cbz	r1, 1c04 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c02:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c0a:	06d1      	lsls	r1, r2, #27
    1c0c:	d416      	bmi.n	1c3c <mem_manage_fault+0x5c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c10:	079a      	lsls	r2, r3, #30
    1c12:	d413      	bmi.n	1c3c <mem_manage_fault+0x5c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c14:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c16:	4b19      	ldr	r3, [pc, #100]	; (1c7c <mem_manage_fault+0x9c>)
    1c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c1a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c1c:	bf42      	ittt	mi
    1c1e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1c20:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1c24:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c28:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1c2c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1c2e:	2300      	movs	r3, #0
    1c30:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1c32:	4620      	mov	r0, r4
    1c34:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1c36:	f06f 0015 	mvn.w	r0, #21
    1c3a:	e7e3      	b.n	1c04 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1c3c:	4e0f      	ldr	r6, [pc, #60]	; (1c7c <mem_manage_fault+0x9c>)
    1c3e:	6873      	ldr	r3, [r6, #4]
    1c40:	051b      	lsls	r3, r3, #20
    1c42:	d5e7      	bpl.n	1c14 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1c44:	4621      	mov	r1, r4
    1c46:	f7ff ff71 	bl	1b2c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1c4a:	4604      	mov	r4, r0
    1c4c:	b118      	cbz	r0, 1c56 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1c4e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1c52:	2402      	movs	r4, #2
    1c54:	e7df      	b.n	1c16 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1c56:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1c58:	06d9      	lsls	r1, r3, #27
    1c5a:	d5db      	bpl.n	1c14 <mem_manage_fault+0x34>
    1c5c:	4a08      	ldr	r2, [pc, #32]	; (1c80 <mem_manage_fault+0xa0>)
    1c5e:	4909      	ldr	r1, [pc, #36]	; (1c84 <mem_manage_fault+0xa4>)
    1c60:	4809      	ldr	r0, [pc, #36]	; (1c88 <mem_manage_fault+0xa8>)
    1c62:	f240 1349 	movw	r3, #329	; 0x149
    1c66:	f005 fc11 	bl	748c <assert_print>
    1c6a:	4808      	ldr	r0, [pc, #32]	; (1c8c <mem_manage_fault+0xac>)
    1c6c:	f005 fc0e 	bl	748c <assert_print>
    1c70:	4803      	ldr	r0, [pc, #12]	; (1c80 <mem_manage_fault+0xa0>)
    1c72:	f240 1149 	movw	r1, #329	; 0x149
    1c76:	f005 fc02 	bl	747e <assert_post_action>
    1c7a:	e7cc      	b.n	1c16 <mem_manage_fault+0x36>
    1c7c:	e000ed00 	.word	0xe000ed00
    1c80:	000089b7 	.word	0x000089b7
    1c84:	000089f1 	.word	0x000089f1
    1c88:	000085d7 	.word	0x000085d7
    1c8c:	00008a3b 	.word	0x00008a3b

00001c90 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1c90:	4b0d      	ldr	r3, [pc, #52]	; (1cc8 <bus_fault.constprop.0+0x38>)
    1c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c98:	0592      	lsls	r2, r2, #22
    1c9a:	d508      	bpl.n	1cae <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ca0:	0412      	lsls	r2, r2, #16
    1ca2:	d504      	bpl.n	1cae <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1ca4:	b118      	cbz	r0, 1cae <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1cac:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1cae:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <bus_fault.constprop.0+0x38>)
    1cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cb4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1cb6:	bf58      	it	pl
    1cb8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1cbc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cbe:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1cc2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1cc4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1cc6:	4770      	bx	lr
    1cc8:	e000ed00 	.word	0xe000ed00

00001ccc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1cce:	4b5e      	ldr	r3, [pc, #376]	; (1e48 <z_arm_fault+0x17c>)
    1cd0:	685c      	ldr	r4, [r3, #4]
{
    1cd2:	b08a      	sub	sp, #40	; 0x28
    1cd4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1cd6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1cda:	2600      	movs	r6, #0
    1cdc:	f386 8811 	msr	BASEPRI, r6
    1ce0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1ce4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1ce8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1cec:	d108      	bne.n	1d00 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1cee:	f002 030c 	and.w	r3, r2, #12
    1cf2:	2b08      	cmp	r3, #8
    1cf4:	d004      	beq.n	1d00 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1cf6:	0711      	lsls	r1, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1cf8:	bf5c      	itt	pl
    1cfa:	4605      	movpl	r5, r0
			*nested_exc = true;
    1cfc:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1cfe:	b97d      	cbnz	r5, 1d20 <z_arm_fault+0x54>
    1d00:	4a52      	ldr	r2, [pc, #328]	; (1e4c <z_arm_fault+0x180>)
    1d02:	4953      	ldr	r1, [pc, #332]	; (1e50 <z_arm_fault+0x184>)
    1d04:	4853      	ldr	r0, [pc, #332]	; (1e54 <z_arm_fault+0x188>)
    1d06:	f240 33fb 	movw	r3, #1019	; 0x3fb
    1d0a:	f005 fbbf 	bl	748c <assert_print>
    1d0e:	4852      	ldr	r0, [pc, #328]	; (1e58 <z_arm_fault+0x18c>)
    1d10:	f005 fbbc 	bl	748c <assert_print>
    1d14:	484d      	ldr	r0, [pc, #308]	; (1e4c <z_arm_fault+0x180>)
    1d16:	f240 31fb 	movw	r1, #1019	; 0x3fb
    1d1a:	f005 fbb0 	bl	747e <assert_post_action>
    1d1e:	2500      	movs	r5, #0
	*recoverable = false;
    1d20:	2300      	movs	r3, #0
    1d22:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1d26:	1ee3      	subs	r3, r4, #3
    1d28:	2b03      	cmp	r3, #3
    1d2a:	f200 8086 	bhi.w	1e3a <z_arm_fault+0x16e>
    1d2e:	e8df f003 	tbb	[pc, r3]
    1d32:	6f02      	.short	0x6f02
    1d34:	7773      	.short	0x7773
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1d36:	4b44      	ldr	r3, [pc, #272]	; (1e48 <z_arm_fault+0x17c>)
    1d38:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1d3a:	f014 0402 	ands.w	r4, r4, #2
    1d3e:	d17c      	bne.n	1e3a <z_arm_fault+0x16e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d42:	2a00      	cmp	r2, #0
    1d44:	db0a      	blt.n	1d5c <z_arm_fault+0x90>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d48:	0052      	lsls	r2, r2, #1
    1d4a:	d554      	bpl.n	1df6 <z_arm_fault+0x12a>
	uint16_t fault_insn = *(ret_addr - 1);
    1d4c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1d4e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1d52:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1d56:	4291      	cmp	r1, r2
    1d58:	d119      	bne.n	1d8e <z_arm_fault+0xc2>
			reason = esf->basic.r0;
    1d5a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d60:	b99b      	cbnz	r3, 1d8a <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1d62:	2220      	movs	r2, #32
    1d64:	4629      	mov	r1, r5
    1d66:	a802      	add	r0, sp, #8
    1d68:	f005 fbd9 	bl	751e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d6e:	2e00      	cmp	r6, #0
    1d70:	d065      	beq.n	1e3e <z_arm_fault+0x172>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d76:	b922      	cbnz	r2, 1d82 <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d78:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d7c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d80:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d82:	a902      	add	r1, sp, #8
    1d84:	4620      	mov	r0, r4
    1d86:	f005 fb93 	bl	74b0 <z_arm_fatal_error>
}
    1d8a:	b00a      	add	sp, #40	; 0x28
    1d8c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_MMFSR != 0) {
    1d8e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1d92:	b13a      	cbz	r2, 1da4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d94:	f10d 0207 	add.w	r2, sp, #7
    1d98:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1d9a:	4628      	mov	r0, r5
    1d9c:	f7ff ff20 	bl	1be0 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1da0:	4604      	mov	r4, r0
		break;
    1da2:	e7db      	b.n	1d5c <z_arm_fault+0x90>
		} else if (SCB_BFSR != 0) {
    1da4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1da8:	b12a      	cbz	r2, 1db6 <z_arm_fault+0xea>
			reason = bus_fault(esf, 1, recoverable);
    1daa:	f10d 0107 	add.w	r1, sp, #7
    1dae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1db0:	f7ff ff6e 	bl	1c90 <bus_fault.constprop.0>
    1db4:	e7f4      	b.n	1da0 <z_arm_fault+0xd4>
		} else if (SCB_UFSR != 0) {
    1db6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1db8:	b292      	uxth	r2, r2
    1dba:	b162      	cbz	r2, 1dd6 <z_arm_fault+0x10a>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dca:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1dce:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1dd2:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1dd4:	e7c2      	b.n	1d5c <z_arm_fault+0x90>
			__ASSERT(0,
    1dd6:	4921      	ldr	r1, [pc, #132]	; (1e5c <z_arm_fault+0x190>)
    1dd8:	4a1c      	ldr	r2, [pc, #112]	; (1e4c <z_arm_fault+0x180>)
    1dda:	481e      	ldr	r0, [pc, #120]	; (1e54 <z_arm_fault+0x188>)
    1ddc:	f240 23cd 	movw	r3, #717	; 0x2cd
    1de0:	f005 fb54 	bl	748c <assert_print>
    1de4:	481e      	ldr	r0, [pc, #120]	; (1e60 <z_arm_fault+0x194>)
    1de6:	f005 fb51 	bl	748c <assert_print>
    1dea:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    1dee:	4817      	ldr	r0, [pc, #92]	; (1e4c <z_arm_fault+0x180>)
    1df0:	f005 fb45 	bl	747e <assert_post_action>
    1df4:	e7b2      	b.n	1d5c <z_arm_fault+0x90>
    1df6:	4919      	ldr	r1, [pc, #100]	; (1e5c <z_arm_fault+0x190>)
    1df8:	4a14      	ldr	r2, [pc, #80]	; (1e4c <z_arm_fault+0x180>)
    1dfa:	4816      	ldr	r0, [pc, #88]	; (1e54 <z_arm_fault+0x188>)
    1dfc:	f240 23d1 	movw	r3, #721	; 0x2d1
    1e00:	f005 fb44 	bl	748c <assert_print>
    1e04:	4817      	ldr	r0, [pc, #92]	; (1e64 <z_arm_fault+0x198>)
    1e06:	f005 fb41 	bl	748c <assert_print>
    1e0a:	f240 21d1 	movw	r1, #721	; 0x2d1
    1e0e:	e7ee      	b.n	1dee <z_arm_fault+0x122>
		reason = mem_manage_fault(esf, 0, recoverable);
    1e10:	f10d 0207 	add.w	r2, sp, #7
    1e14:	2100      	movs	r1, #0
    1e16:	e7c0      	b.n	1d9a <z_arm_fault+0xce>
		reason = bus_fault(esf, 0, recoverable);
    1e18:	f10d 0107 	add.w	r1, sp, #7
    1e1c:	2000      	movs	r0, #0
    1e1e:	e7c7      	b.n	1db0 <z_arm_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e20:	4b09      	ldr	r3, [pc, #36]	; (1e48 <z_arm_fault+0x17c>)
    1e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e30:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e34:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e38:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1e3a:	2400      	movs	r4, #0
    1e3c:	e78e      	b.n	1d5c <z_arm_fault+0x90>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1e3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1e42:	f023 0301 	bic.w	r3, r3, #1
    1e46:	e79b      	b.n	1d80 <z_arm_fault+0xb4>
    1e48:	e000ed00 	.word	0xe000ed00
    1e4c:	000089b7 	.word	0x000089b7
    1e50:	00008a5e 	.word	0x00008a5e
    1e54:	000085d7 	.word	0x000085d7
    1e58:	00008a71 	.word	0x00008a71
    1e5c:	0000867f 	.word	0x0000867f
    1e60:	00008aaf 	.word	0x00008aaf
    1e64:	00008ad3 	.word	0x00008ad3

00001e68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e68:	4a02      	ldr	r2, [pc, #8]	; (1e74 <z_arm_fault_init+0xc>)
    1e6a:	6953      	ldr	r3, [r2, #20]
    1e6c:	f043 0310 	orr.w	r3, r3, #16
    1e70:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1e72:	4770      	bx	lr
    1e74:	e000ed00 	.word	0xe000ed00

00001e78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1e78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1e7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1e80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1e82:	4672      	mov	r2, lr
	bl z_arm_fault
    1e84:	f7ff ff22 	bl	1ccc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e88:	bd01      	pop	{r0, pc}
    1e8a:	bf00      	nop

00001e8c <z_arm_interrupt_init>:
    1e8c:	4804      	ldr	r0, [pc, #16]	; (1ea0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e8e:	2300      	movs	r3, #0
    1e90:	2120      	movs	r1, #32
    1e92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e94:	3301      	adds	r3, #1
    1e96:	2b30      	cmp	r3, #48	; 0x30
    1e98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e9c:	d1f9      	bne.n	1e92 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e9e:	4770      	bx	lr
    1ea0:	e000e100 	.word	0xe000e100

00001ea4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1ea4:	2000      	movs	r0, #0
    msr CONTROL, r0
    1ea6:	f380 8814 	msr	CONTROL, r0
    isb
    1eaa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1eae:	f006 f81f 	bl	7ef0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1eb2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1eb4:	490d      	ldr	r1, [pc, #52]	; (1eec <__start+0x48>)
    str r0, [r1]
    1eb6:	6008      	str	r0, [r1, #0]
    dsb
    1eb8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ebc:	480c      	ldr	r0, [pc, #48]	; (1ef0 <__start+0x4c>)
    msr msp, r0
    1ebe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1ec2:	f000 f82b 	bl	1f1c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ec6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ec8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1ecc:	4809      	ldr	r0, [pc, #36]	; (1ef4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1ece:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1ed2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1ed4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1ed8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1edc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ede:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ee0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ee4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1ee8:	f7ff fd94 	bl	1a14 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1eec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ef0:	20001620 	.word	0x20001620
    ldr r0, =z_interrupt_stacks
    1ef4:	200017a0 	.word	0x200017a0

00001ef8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1ef8:	4907      	ldr	r1, [pc, #28]	; (1f18 <z_arm_clear_arm_mpu_config+0x20>)
    1efa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1efe:	2300      	movs	r3, #0
	int num_regions =
    1f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1f04:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1f06:	4293      	cmp	r3, r2
    1f08:	d100      	bne.n	1f0c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1f0a:	4770      	bx	lr
  MPU->RNR = rnr;
    1f0c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1f10:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1f14:	3301      	adds	r3, #1
    1f16:	e7f6      	b.n	1f06 <z_arm_clear_arm_mpu_config+0xe>
    1f18:	e000ed00 	.word	0xe000ed00

00001f1c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1f1c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1f1e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1f20:	2300      	movs	r3, #0
    1f22:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f26:	f7ff ffe7 	bl	1ef8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f2a:	4b14      	ldr	r3, [pc, #80]	; (1f7c <z_arm_init_arch_hw_at_boot+0x60>)
    1f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1f44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1f48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1f4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1f54:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1f58:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1f5c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1f60:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1f64:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1f68:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1f6c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1f70:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f76:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1f7a:	bd08      	pop	{r3, pc}
    1f7c:	e000e100 	.word	0xe000e100

00001f80 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1f80:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <z_impl_k_thread_abort+0x24>)
    1f82:	689b      	ldr	r3, [r3, #8]
    1f84:	4283      	cmp	r3, r0
    1f86:	d10b      	bne.n	1fa0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f88:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f8c:	b143      	cbz	r3, 1fa0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f8e:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <z_impl_k_thread_abort+0x28>)
    1f90:	685a      	ldr	r2, [r3, #4]
    1f92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1f96:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1f9e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1fa0:	f004 ba7c 	b.w	649c <z_thread_abort>
    1fa4:	20000b58 	.word	0x20000b58
    1fa8:	e000ed00 	.word	0xe000ed00

00001fac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1fac:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <z_arm_configure_static_mpu_regions+0xc>)
    1fae:	4a03      	ldr	r2, [pc, #12]	; (1fbc <z_arm_configure_static_mpu_regions+0x10>)
    1fb0:	4803      	ldr	r0, [pc, #12]	; (1fc0 <z_arm_configure_static_mpu_regions+0x14>)
    1fb2:	2101      	movs	r1, #1
    1fb4:	f000 b86e 	b.w	2094 <arm_core_mpu_configure_static_mpu_regions>
    1fb8:	20040000 	.word	0x20040000
    1fbc:	20000000 	.word	0x20000000
    1fc0:	000081bc 	.word	0x000081bc

00001fc4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1fc4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1fc8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1fca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1fcc:	4a04      	ldr	r2, [pc, #16]	; (1fe0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1fce:	2120      	movs	r1, #32
    1fd0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1fd4:	4618      	mov	r0, r3
    1fd6:	2101      	movs	r1, #1
    1fd8:	f000 b884 	b.w	20e4 <arm_core_mpu_configure_dynamic_mpu_regions>
    1fdc:	20000a04 	.word	0x20000a04
    1fe0:	150b0000 	.word	0x150b0000

00001fe4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1fe6:	4f1f      	ldr	r7, [pc, #124]	; (2064 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1fe8:	2600      	movs	r6, #0
    1fea:	428e      	cmp	r6, r1
    1fec:	db01      	blt.n	1ff2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1fee:	4610      	mov	r0, r2
    1ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1ff2:	6844      	ldr	r4, [r0, #4]
    1ff4:	b39c      	cbz	r4, 205e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1ff6:	b153      	cbz	r3, 200e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1ff8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1ffc:	ea14 0f0c 	tst.w	r4, ip
    2000:	d118      	bne.n	2034 <mpu_configure_regions+0x50>
		&&
    2002:	2c1f      	cmp	r4, #31
    2004:	d916      	bls.n	2034 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2006:	6805      	ldr	r5, [r0, #0]
		&&
    2008:	ea1c 0f05 	tst.w	ip, r5
    200c:	d112      	bne.n	2034 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    200e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2010:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2012:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2016:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2018:	d90f      	bls.n	203a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    201a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    201e:	d80e      	bhi.n	203e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2020:	3c01      	subs	r4, #1
    2022:	fab4 f484 	clz	r4, r4
    2026:	f1c4 041f 	rsb	r4, r4, #31
    202a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    202c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    202e:	ea4c 0404 	orr.w	r4, ip, r4
    2032:	d906      	bls.n	2042 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2034:	f06f 0215 	mvn.w	r2, #21
    2038:	e7d9      	b.n	1fee <mpu_configure_regions+0xa>
		return REGION_32B;
    203a:	2408      	movs	r4, #8
    203c:	e7f6      	b.n	202c <mpu_configure_regions+0x48>
		return REGION_4G;
    203e:	243e      	movs	r4, #62	; 0x3e
    2040:	e7f4      	b.n	202c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2042:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2046:	4315      	orrs	r5, r2
    2048:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    204c:	f044 0401 	orr.w	r4, r4, #1
    2050:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2054:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    2058:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    205a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    205e:	3601      	adds	r6, #1
    2060:	300c      	adds	r0, #12
    2062:	e7c2      	b.n	1fea <mpu_configure_regions+0x6>
    2064:	e000ed00 	.word	0xe000ed00

00002068 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2068:	4b04      	ldr	r3, [pc, #16]	; (207c <arm_core_mpu_enable+0x14>)
    206a:	2205      	movs	r2, #5
    206c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2070:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2074:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2078:	4770      	bx	lr
    207a:	bf00      	nop
    207c:	e000ed00 	.word	0xe000ed00

00002080 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2080:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2084:	4b02      	ldr	r3, [pc, #8]	; (2090 <arm_core_mpu_disable+0x10>)
    2086:	2200      	movs	r2, #0
    2088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	e000ed00 	.word	0xe000ed00

00002094 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2094:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2096:	4d0e      	ldr	r5, [pc, #56]	; (20d0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2098:	2301      	movs	r3, #1
    209a:	782a      	ldrb	r2, [r5, #0]
    209c:	f7ff ffa2 	bl	1fe4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    20a0:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    20a2:	3016      	adds	r0, #22
{
    20a4:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    20a6:	d111      	bne.n	20cc <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    20a8:	f240 1311 	movw	r3, #273	; 0x111
    20ac:	4a09      	ldr	r2, [pc, #36]	; (20d4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    20ae:	490a      	ldr	r1, [pc, #40]	; (20d8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    20b0:	480a      	ldr	r0, [pc, #40]	; (20dc <arm_core_mpu_configure_static_mpu_regions+0x48>)
    20b2:	f005 f9eb 	bl	748c <assert_print>
    20b6:	4621      	mov	r1, r4
    20b8:	4809      	ldr	r0, [pc, #36]	; (20e0 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    20ba:	f005 f9e7 	bl	748c <assert_print>
			regions_num);
	}
}
    20be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    20c2:	4804      	ldr	r0, [pc, #16]	; (20d4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    20c4:	f240 1111 	movw	r1, #273	; 0x111
    20c8:	f005 b9d9 	b.w	747e <assert_post_action>
}
    20cc:	bd38      	pop	{r3, r4, r5, pc}
    20ce:	bf00      	nop
    20d0:	20000df4 	.word	0x20000df4
    20d4:	00008b03 	.word	0x00008b03
    20d8:	0000867f 	.word	0x0000867f
    20dc:	000085d7 	.word	0x000085d7
    20e0:	00008b3a 	.word	0x00008b3a

000020e4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    20e4:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    20e6:	4a12      	ldr	r2, [pc, #72]	; (2130 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    20e8:	2300      	movs	r3, #0
    20ea:	7812      	ldrb	r2, [r2, #0]
    20ec:	f7ff ff7a 	bl	1fe4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    20f0:	f110 0f16 	cmn.w	r0, #22
    20f4:	460c      	mov	r4, r1
    20f6:	d009      	beq.n	210c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
    20f8:	4a0e      	ldr	r2, [pc, #56]	; (2134 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    20fa:	2807      	cmp	r0, #7
    20fc:	dd00      	ble.n	2100 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    20fe:	bd10      	pop	{r4, pc}
    2100:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2104:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2108:	3001      	adds	r0, #1
    210a:	e7f6      	b.n	20fa <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    210c:	4a0a      	ldr	r2, [pc, #40]	; (2138 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    210e:	490b      	ldr	r1, [pc, #44]	; (213c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2110:	480b      	ldr	r0, [pc, #44]	; (2140 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2112:	f44f 7398 	mov.w	r3, #304	; 0x130
    2116:	f005 f9b9 	bl	748c <assert_print>
    211a:	4621      	mov	r1, r4
    211c:	4809      	ldr	r0, [pc, #36]	; (2144 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    211e:	f005 f9b5 	bl	748c <assert_print>
}
    2122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2126:	4804      	ldr	r0, [pc, #16]	; (2138 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2128:	f44f 7198 	mov.w	r1, #304	; 0x130
    212c:	f005 b9a7 	b.w	747e <assert_post_action>
    2130:	20000df4 	.word	0x20000df4
    2134:	e000ed00 	.word	0xe000ed00
    2138:	00008b03 	.word	0x00008b03
    213c:	0000867f 	.word	0x0000867f
    2140:	000085d7 	.word	0x000085d7
    2144:	00008b66 	.word	0x00008b66

00002148 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2148:	4927      	ldr	r1, [pc, #156]	; (21e8 <z_arm_mpu_init+0xa0>)
{
    214a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    214c:	680c      	ldr	r4, [r1, #0]
    214e:	2c08      	cmp	r4, #8
    2150:	d913      	bls.n	217a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2152:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2156:	4a25      	ldr	r2, [pc, #148]	; (21ec <z_arm_mpu_init+0xa4>)
    2158:	4925      	ldr	r1, [pc, #148]	; (21f0 <z_arm_mpu_init+0xa8>)
    215a:	4826      	ldr	r0, [pc, #152]	; (21f4 <z_arm_mpu_init+0xac>)
    215c:	f005 f996 	bl	748c <assert_print>
    2160:	4825      	ldr	r0, [pc, #148]	; (21f8 <z_arm_mpu_init+0xb0>)
    2162:	2208      	movs	r2, #8
    2164:	4621      	mov	r1, r4
    2166:	f005 f991 	bl	748c <assert_print>
    216a:	4820      	ldr	r0, [pc, #128]	; (21ec <z_arm_mpu_init+0xa4>)
    216c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2170:	f005 f985 	bl	747e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2178:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    217a:	f7ff ff81 	bl	2080 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    217e:	6848      	ldr	r0, [r1, #4]
    2180:	491e      	ldr	r1, [pc, #120]	; (21fc <z_arm_mpu_init+0xb4>)
    2182:	2200      	movs	r2, #0
    2184:	4294      	cmp	r4, r2
    2186:	f100 000c 	add.w	r0, r0, #12
    218a:	d11a      	bne.n	21c2 <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    218c:	4b1c      	ldr	r3, [pc, #112]	; (2200 <z_arm_mpu_init+0xb8>)
    218e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2190:	f7ff ff6a 	bl	2068 <arm_core_mpu_enable>
	__ASSERT(
    2194:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    2198:	f3c3 2307 	ubfx	r3, r3, #8, #8
    219c:	2b08      	cmp	r3, #8
    219e:	d00e      	beq.n	21be <z_arm_mpu_init+0x76>
    21a0:	4918      	ldr	r1, [pc, #96]	; (2204 <z_arm_mpu_init+0xbc>)
    21a2:	4a12      	ldr	r2, [pc, #72]	; (21ec <z_arm_mpu_init+0xa4>)
    21a4:	4813      	ldr	r0, [pc, #76]	; (21f4 <z_arm_mpu_init+0xac>)
    21a6:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    21aa:	f005 f96f 	bl	748c <assert_print>
    21ae:	4816      	ldr	r0, [pc, #88]	; (2208 <z_arm_mpu_init+0xc0>)
    21b0:	f005 f96c 	bl	748c <assert_print>
    21b4:	480d      	ldr	r0, [pc, #52]	; (21ec <z_arm_mpu_init+0xa4>)
    21b6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    21ba:	f005 f960 	bl	747e <assert_post_action>
	return 0;
    21be:	2000      	movs	r0, #0
    21c0:	e7da      	b.n	2178 <z_arm_mpu_init+0x30>
    21c2:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21c6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    21ca:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    21ce:	4313      	orrs	r3, r2
    21d0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    21d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    21dc:	f043 0301 	orr.w	r3, r3, #1
    21e0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    21e4:	3201      	adds	r2, #1
    21e6:	e7cd      	b.n	2184 <z_arm_mpu_init+0x3c>
    21e8:	000081c8 	.word	0x000081c8
    21ec:	00008b03 	.word	0x00008b03
    21f0:	0000867f 	.word	0x0000867f
    21f4:	000085d7 	.word	0x000085d7
    21f8:	00008b93 	.word	0x00008b93
    21fc:	e000ed00 	.word	0xe000ed00
    2200:	20000df4 	.word	0x20000df4
    2204:	00008bc7 	.word	0x00008bc7
    2208:	00008c17 	.word	0x00008c17

0000220c <_exit>:

#include <stdlib.h>
#include <zephyr.h>

void _exit(int status)
{
    220c:	b508      	push	{r3, lr}
	printk("exit\n");
    220e:	4802      	ldr	r0, [pc, #8]	; (2218 <_exit+0xc>)
    2210:	f005 f842 	bl	7298 <printk>
	while (1) {
    2214:	e7fe      	b.n	2214 <_exit+0x8>
    2216:	bf00      	nop
    2218:	00008c38 	.word	0x00008c38

0000221c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    221c:	4b01      	ldr	r3, [pc, #4]	; (2224 <__stdout_hook_install+0x8>)
    221e:	6018      	str	r0, [r3, #0]
}
    2220:	4770      	bx	lr
    2222:	bf00      	nop
    2224:	20000028 	.word	0x20000028

00002228 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
    2228:	b40e      	push	{r1, r2, r3}
    222a:	b50f      	push	{r0, r1, r2, r3, lr}
    222c:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    222e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    2232:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
    2236:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    2238:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    223a:	4806      	ldr	r0, [pc, #24]	; (2254 <sprintf+0x2c>)
	va_start(vargs, format);
    223c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    223e:	a902      	add	r1, sp, #8
    2240:	f7fe fd40 	bl	cc4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    2244:	9b02      	ldr	r3, [sp, #8]
    2246:	2200      	movs	r2, #0
    2248:	701a      	strb	r2, [r3, #0]
	return r;
}
    224a:	b004      	add	sp, #16
    224c:	f85d eb04 	ldr.w	lr, [sp], #4
    2250:	b003      	add	sp, #12
    2252:	4770      	bx	lr
    2254:	0000754d 	.word	0x0000754d

00002258 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2258:	b510      	push	{r4, lr}
	__asm__ volatile(
    225a:	f04f 0320 	mov.w	r3, #32
    225e:	f3ef 8011 	mrs	r0, BASEPRI
    2262:	f383 8812 	msr	BASEPRI_MAX, r3
    2266:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    226a:	4a11      	ldr	r2, [pc, #68]	; (22b0 <nordicsemi_nrf52_init+0x58>)
    226c:	2301      	movs	r3, #1
    226e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2276:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    227a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    227e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2282:	2c08      	cmp	r4, #8
    2284:	d108      	bne.n	2298 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2286:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    228a:	2905      	cmp	r1, #5
    228c:	d804      	bhi.n	2298 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    228e:	4c09      	ldr	r4, [pc, #36]	; (22b4 <nordicsemi_nrf52_init+0x5c>)
    2290:	5c61      	ldrb	r1, [r4, r1]
    2292:	b109      	cbz	r1, 2298 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2294:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    229c:	2201      	movs	r2, #1
    229e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    22a2:	f380 8811 	msr	BASEPRI, r0
    22a6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    22aa:	2000      	movs	r0, #0
    22ac:	bd10      	pop	{r4, pc}
    22ae:	bf00      	nop
    22b0:	4001e000 	.word	0x4001e000
    22b4:	00008c4d 	.word	0x00008c4d

000022b8 <sys_arch_reboot>:
    *p_gpregret = val;
    22b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22bc:	b2c0      	uxtb	r0, r0
    22be:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    22c2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    22c6:	4905      	ldr	r1, [pc, #20]	; (22dc <sys_arch_reboot+0x24>)
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <sys_arch_reboot+0x28>)
    22ca:	68ca      	ldr	r2, [r1, #12]
    22cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    22d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    22d2:	60cb      	str	r3, [r1, #12]
    22d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    22d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    22da:	e7fd      	b.n	22d8 <sys_arch_reboot+0x20>
    22dc:	e000ed00 	.word	0xe000ed00
    22e0:	05fa0004 	.word	0x05fa0004

000022e4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    22e4:	b120      	cbz	r0, 22f0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    22e6:	4b03      	ldr	r3, [pc, #12]	; (22f4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    22e8:	0180      	lsls	r0, r0, #6
    22ea:	f043 0301 	orr.w	r3, r3, #1
    22ee:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    22f0:	4770      	bx	lr
    22f2:	bf00      	nop
    22f4:	00008180 	.word	0x00008180

000022f8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    22f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22fa:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    22fc:	490a      	ldr	r1, [pc, #40]	; (2328 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22fe:	4a0b      	ldr	r2, [pc, #44]	; (232c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    2300:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2302:	2340      	movs	r3, #64	; 0x40
    2304:	9300      	str	r3, [sp, #0]
    2306:	1149      	asrs	r1, r1, #5
{
    2308:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    230a:	4623      	mov	r3, r4
    230c:	4808      	ldr	r0, [pc, #32]	; (2330 <onoff_start+0x38>)
    230e:	f005 f94f 	bl	75b0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2312:	1e01      	subs	r1, r0, #0
    2314:	da05      	bge.n	2322 <onoff_start+0x2a>
		notify(mgr, err);
    2316:	4628      	mov	r0, r5
    2318:	4623      	mov	r3, r4
	}
}
    231a:	b003      	add	sp, #12
    231c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    2320:	4718      	bx	r3
}
    2322:	b003      	add	sp, #12
    2324:	bd30      	pop	{r4, r5, pc}
    2326:	bf00      	nop
    2328:	20000a20 	.word	0x20000a20
    232c:	00007621 	.word	0x00007621
    2330:	00007f64 	.word	0x00007f64

00002334 <get_status>:
{
    2334:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2336:	b2cc      	uxtb	r4, r1
    2338:	2c01      	cmp	r4, #1
{
    233a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    233c:	d909      	bls.n	2352 <get_status+0x1e>
    233e:	4909      	ldr	r1, [pc, #36]	; (2364 <get_status+0x30>)
    2340:	4809      	ldr	r0, [pc, #36]	; (2368 <get_status+0x34>)
    2342:	4a0a      	ldr	r2, [pc, #40]	; (236c <get_status+0x38>)
    2344:	2379      	movs	r3, #121	; 0x79
    2346:	f005 f8a1 	bl	748c <assert_print>
    234a:	4808      	ldr	r0, [pc, #32]	; (236c <get_status+0x38>)
    234c:	2179      	movs	r1, #121	; 0x79
    234e:	f005 f896 	bl	747e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2352:	6929      	ldr	r1, [r5, #16]
    2354:	230c      	movs	r3, #12
    2356:	fb04 1403 	mla	r4, r4, r3, r1
    235a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    235c:	f000 0007 	and.w	r0, r0, #7
    2360:	bd38      	pop	{r3, r4, r5, pc}
    2362:	bf00      	nop
    2364:	00008c90 	.word	0x00008c90
    2368:	000085d7 	.word	0x000085d7
    236c:	00008c53 	.word	0x00008c53

00002370 <stop>:
{
    2370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2372:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2374:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    2376:	6906      	ldr	r6, [r0, #16]
{
    2378:	4605      	mov	r5, r0
    237a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    237c:	d90b      	bls.n	2396 <stop+0x26>
    237e:	4918      	ldr	r1, [pc, #96]	; (23e0 <stop+0x70>)
    2380:	4818      	ldr	r0, [pc, #96]	; (23e4 <stop+0x74>)
    2382:	4a19      	ldr	r2, [pc, #100]	; (23e8 <stop+0x78>)
    2384:	f240 134d 	movw	r3, #333	; 0x14d
    2388:	f005 f880 	bl	748c <assert_print>
    238c:	4816      	ldr	r0, [pc, #88]	; (23e8 <stop+0x78>)
    238e:	f240 114d 	movw	r1, #333	; 0x14d
    2392:	f005 f874 	bl	747e <assert_post_action>
	__asm__ volatile(
    2396:	f04f 0320 	mov.w	r3, #32
    239a:	f3ef 8111 	mrs	r1, BASEPRI
    239e:	f383 8812 	msr	BASEPRI_MAX, r3
    23a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    23a6:	220c      	movs	r2, #12
    23a8:	fb02 6304 	mla	r3, r2, r4, r6
    23ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    23ae:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    23b2:	d001      	beq.n	23b8 <stop+0x48>
    23b4:	429f      	cmp	r7, r3
    23b6:	d110      	bne.n	23da <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    23b8:	fb02 6604 	mla	r6, r2, r4, r6
    23bc:	2301      	movs	r3, #1
    23be:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    23c0:	2000      	movs	r0, #0
	__asm__ volatile(
    23c2:	f381 8811 	msr	BASEPRI, r1
    23c6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    23ca:	b928      	cbnz	r0, 23d8 <stop+0x68>
	get_sub_config(dev, type)->stop();
    23cc:	6869      	ldr	r1, [r5, #4]
    23ce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    23d2:	6863      	ldr	r3, [r4, #4]
    23d4:	4798      	blx	r3
	return 0;
    23d6:	2000      	movs	r0, #0
}
    23d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    23da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23de:	e7f0      	b.n	23c2 <stop+0x52>
    23e0:	00008c90 	.word	0x00008c90
    23e4:	000085d7 	.word	0x000085d7
    23e8:	00008c53 	.word	0x00008c53

000023ec <onoff_stop>:
{
    23ec:	b570      	push	{r4, r5, r6, lr}
    23ee:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    23f0:	4906      	ldr	r1, [pc, #24]	; (240c <onoff_stop+0x20>)
    23f2:	1a41      	subs	r1, r0, r1
{
    23f4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23f6:	1149      	asrs	r1, r1, #5
    23f8:	4805      	ldr	r0, [pc, #20]	; (2410 <onoff_stop+0x24>)
    23fa:	2240      	movs	r2, #64	; 0x40
    23fc:	f7ff ffb8 	bl	2370 <stop>
	notify(mgr, res);
    2400:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2402:	4601      	mov	r1, r0
	notify(mgr, res);
    2404:	4620      	mov	r0, r4
}
    2406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    240a:	4718      	bx	r3
    240c:	20000a20 	.word	0x20000a20
    2410:	00007f64 	.word	0x00007f64

00002414 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2414:	2200      	movs	r2, #0
{
    2416:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2418:	2101      	movs	r1, #1
{
    241a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    241c:	4610      	mov	r0, r2
    241e:	f7ff fac1 	bl	19a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2422:	480f      	ldr	r0, [pc, #60]	; (2460 <clk_init+0x4c>)
    2424:	f001 fc4e 	bl	3cc4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2428:	4b0e      	ldr	r3, [pc, #56]	; (2464 <clk_init+0x50>)
    242a:	4298      	cmp	r0, r3
    242c:	d115      	bne.n	245a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    242e:	f001 fc6f 	bl	3d10 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2432:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2434:	490c      	ldr	r1, [pc, #48]	; (2468 <clk_init+0x54>)
    2436:	4630      	mov	r0, r6
    2438:	f004 ff7c 	bl	7334 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    243c:	2800      	cmp	r0, #0
    243e:	db0b      	blt.n	2458 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2440:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2442:	4909      	ldr	r1, [pc, #36]	; (2468 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2444:	2501      	movs	r5, #1
    2446:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2448:	f104 0020 	add.w	r0, r4, #32
    244c:	f004 ff72 	bl	7334 <onoff_manager_init>
		if (err < 0) {
    2450:	2800      	cmp	r0, #0
    2452:	db01      	blt.n	2458 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2454:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2456:	2000      	movs	r0, #0
}
    2458:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    245a:	f06f 0004 	mvn.w	r0, #4
    245e:	e7fb      	b.n	2458 <clk_init+0x44>
    2460:	000024a1 	.word	0x000024a1
    2464:	0bad0000 	.word	0x0bad0000
    2468:	00008210 	.word	0x00008210

0000246c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    246c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    246e:	230c      	movs	r3, #12
    2470:	4809      	ldr	r0, [pc, #36]	; (2498 <clkstarted_handle.constprop.0+0x2c>)
    2472:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2474:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2476:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2478:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    247c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    247e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2480:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2482:	4418      	add	r0, r3
    2484:	f005 f881 	bl	758a <set_on_state>
	if (callback) {
    2488:	b12d      	cbz	r5, 2496 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    248a:	4632      	mov	r2, r6
    248c:	462b      	mov	r3, r5
    248e:	4803      	ldr	r0, [pc, #12]	; (249c <clkstarted_handle.constprop.0+0x30>)
}
    2490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2494:	4718      	bx	r3
}
    2496:	bd70      	pop	{r4, r5, r6, pc}
    2498:	20000a20 	.word	0x20000a20
    249c:	00007f64 	.word	0x00007f64

000024a0 <clock_event_handler>:
	switch (event) {
    24a0:	2801      	cmp	r0, #1
{
    24a2:	b508      	push	{r3, lr}
	switch (event) {
    24a4:	d006      	beq.n	24b4 <clock_event_handler+0x14>
    24a6:	2803      	cmp	r0, #3
    24a8:	d008      	beq.n	24bc <clock_event_handler+0x1c>
    24aa:	b9a8      	cbnz	r0, 24d8 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    24ac:	4b10      	ldr	r3, [pc, #64]	; (24f0 <clock_event_handler+0x50>)
    24ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    24b0:	075b      	lsls	r3, r3, #29
    24b2:	d11b      	bne.n	24ec <clock_event_handler+0x4c>
}
    24b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    24b8:	f7ff bfd8 	b.w	246c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    24bc:	490d      	ldr	r1, [pc, #52]	; (24f4 <clock_event_handler+0x54>)
    24be:	4a0e      	ldr	r2, [pc, #56]	; (24f8 <clock_event_handler+0x58>)
    24c0:	480e      	ldr	r0, [pc, #56]	; (24fc <clock_event_handler+0x5c>)
    24c2:	f240 235e 	movw	r3, #606	; 0x25e
    24c6:	f004 ffe1 	bl	748c <assert_print>
    24ca:	f240 215e 	movw	r1, #606	; 0x25e
}
    24ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    24d2:	4809      	ldr	r0, [pc, #36]	; (24f8 <clock_event_handler+0x58>)
    24d4:	f004 bfd3 	b.w	747e <assert_post_action>
    24d8:	4906      	ldr	r1, [pc, #24]	; (24f4 <clock_event_handler+0x54>)
    24da:	4a07      	ldr	r2, [pc, #28]	; (24f8 <clock_event_handler+0x58>)
    24dc:	4807      	ldr	r0, [pc, #28]	; (24fc <clock_event_handler+0x5c>)
    24de:	f240 2362 	movw	r3, #610	; 0x262
    24e2:	f004 ffd3 	bl	748c <assert_print>
    24e6:	f240 2162 	movw	r1, #610	; 0x262
    24ea:	e7f0      	b.n	24ce <clock_event_handler+0x2e>
}
    24ec:	bd08      	pop	{r3, pc}
    24ee:	bf00      	nop
    24f0:	20000a20 	.word	0x20000a20
    24f4:	0000867f 	.word	0x0000867f
    24f8:	00008c53 	.word	0x00008c53
    24fc:	000085d7 	.word	0x000085d7

00002500 <generic_hfclk_start>:
{
    2500:	b508      	push	{r3, lr}
	__asm__ volatile(
    2502:	f04f 0320 	mov.w	r3, #32
    2506:	f3ef 8111 	mrs	r1, BASEPRI
    250a:	f383 8812 	msr	BASEPRI_MAX, r3
    250e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2512:	4a12      	ldr	r2, [pc, #72]	; (255c <generic_hfclk_start+0x5c>)
    2514:	6813      	ldr	r3, [r2, #0]
    2516:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    251a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    251e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2520:	d00c      	beq.n	253c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2526:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    252a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    252e:	f013 0301 	ands.w	r3, r3, #1
    2532:	d003      	beq.n	253c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2534:	480a      	ldr	r0, [pc, #40]	; (2560 <generic_hfclk_start+0x60>)
    2536:	f005 f828 	bl	758a <set_on_state>
			already_started = true;
    253a:	2301      	movs	r3, #1
	__asm__ volatile(
    253c:	f381 8811 	msr	BASEPRI, r1
    2540:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2544:	b123      	cbz	r3, 2550 <generic_hfclk_start+0x50>
}
    2546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    254a:	2000      	movs	r0, #0
    254c:	f7ff bf8e 	b.w	246c <clkstarted_handle.constprop.0>
}
    2550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2554:	2001      	movs	r0, #1
    2556:	f001 bbff 	b.w	3d58 <nrfx_clock_start>
    255a:	bf00      	nop
    255c:	20000a78 	.word	0x20000a78
    2560:	20000a68 	.word	0x20000a68

00002564 <api_blocking_start>:
{
    2564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2566:	2200      	movs	r2, #0
    2568:	2301      	movs	r3, #1
    256a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    256e:	4a09      	ldr	r2, [pc, #36]	; (2594 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2570:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2574:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2576:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    257a:	f005 f84a 	bl	7612 <api_start>
	if (err < 0) {
    257e:	2800      	cmp	r0, #0
    2580:	db05      	blt.n	258e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2586:	2300      	movs	r3, #0
    2588:	4668      	mov	r0, sp
    258a:	f002 fe61 	bl	5250 <z_impl_k_sem_take>
}
    258e:	b005      	add	sp, #20
    2590:	f85d fb04 	ldr.w	pc, [sp], #4
    2594:	0000763f 	.word	0x0000763f

00002598 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2598:	4b09      	ldr	r3, [pc, #36]	; (25c0 <generic_hfclk_stop+0x28>)
    259a:	f3bf 8f5b 	dmb	ish
    259e:	e853 2f00 	ldrex	r2, [r3]
    25a2:	f022 0102 	bic.w	r1, r2, #2
    25a6:	e843 1000 	strex	r0, r1, [r3]
    25aa:	2800      	cmp	r0, #0
    25ac:	d1f7      	bne.n	259e <generic_hfclk_stop+0x6>
    25ae:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    25b2:	07d3      	lsls	r3, r2, #31
    25b4:	d402      	bmi.n	25bc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    25b6:	2001      	movs	r0, #1
    25b8:	f001 bc32 	b.w	3e20 <nrfx_clock_stop>
}
    25bc:	4770      	bx	lr
    25be:	bf00      	nop
    25c0:	20000a78 	.word	0x20000a78

000025c4 <z_nrf_clock_control_lf_on>:
{
    25c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25c8:	4947      	ldr	r1, [pc, #284]	; (26e8 <z_nrf_clock_control_lf_on+0x124>)
    25ca:	f3bf 8f5b 	dmb	ish
    25ce:	4606      	mov	r6, r0
    25d0:	2201      	movs	r2, #1
    25d2:	e851 3f00 	ldrex	r3, [r1]
    25d6:	e841 2000 	strex	r0, r2, [r1]
    25da:	2800      	cmp	r0, #0
    25dc:	d1f9      	bne.n	25d2 <z_nrf_clock_control_lf_on+0xe>
    25de:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    25e2:	b9a3      	cbnz	r3, 260e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    25e4:	4941      	ldr	r1, [pc, #260]	; (26ec <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    25e6:	4842      	ldr	r0, [pc, #264]	; (26f0 <z_nrf_clock_control_lf_on+0x12c>)
    25e8:	604b      	str	r3, [r1, #4]
    25ea:	60cb      	str	r3, [r1, #12]
    25ec:	608a      	str	r2, [r1, #8]
    25ee:	f7fe fa3b 	bl	a68 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    25f2:	2800      	cmp	r0, #0
    25f4:	da0b      	bge.n	260e <z_nrf_clock_control_lf_on+0x4a>
    25f6:	493f      	ldr	r1, [pc, #252]	; (26f4 <z_nrf_clock_control_lf_on+0x130>)
    25f8:	483f      	ldr	r0, [pc, #252]	; (26f8 <z_nrf_clock_control_lf_on+0x134>)
    25fa:	4a40      	ldr	r2, [pc, #256]	; (26fc <z_nrf_clock_control_lf_on+0x138>)
    25fc:	f44f 7308 	mov.w	r3, #544	; 0x220
    2600:	f004 ff44 	bl	748c <assert_print>
    2604:	483d      	ldr	r0, [pc, #244]	; (26fc <z_nrf_clock_control_lf_on+0x138>)
    2606:	f44f 7108 	mov.w	r1, #544	; 0x220
    260a:	f004 ff38 	bl	747e <assert_post_action>
	switch (start_mode) {
    260e:	b396      	cbz	r6, 2676 <z_nrf_clock_control_lf_on+0xb2>
    2610:	1e73      	subs	r3, r6, #1
    2612:	2b01      	cmp	r3, #1
    2614:	d853      	bhi.n	26be <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2616:	2e01      	cmp	r6, #1
    2618:	d107      	bne.n	262a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    261e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2622:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2626:	2b01      	cmp	r3, #1
    2628:	d025      	beq.n	2676 <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    262a:	f005 fbf0 	bl	7e0e <k_is_in_isr>
    262e:	4604      	mov	r4, r0
    2630:	b918      	cbnz	r0, 263a <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2632:	4b33      	ldr	r3, [pc, #204]	; (2700 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	2b00      	cmp	r3, #0
    2638:	d14f      	bne.n	26da <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    263a:	f04f 0320 	mov.w	r3, #32
    263e:	f3ef 8711 	mrs	r7, BASEPRI
    2642:	f383 8812 	msr	BASEPRI_MAX, r3
    2646:	f3bf 8f6f 	isb	sy
    264a:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    264c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2704 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2650:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2654:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2658:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    265c:	03d2      	lsls	r2, r2, #15
    265e:	d50c      	bpl.n	267a <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2660:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2664:	2b01      	cmp	r3, #1
    2666:	d001      	beq.n	266c <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2668:	2e01      	cmp	r6, #1
    266a:	d106      	bne.n	267a <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    266c:	b30c      	cbz	r4, 26b2 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    266e:	f387 8811 	msr	BASEPRI, r7
    2672:	f3bf 8f6f 	isb	sy
}
    2676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    267a:	b1ac      	cbz	r4, 26a8 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    267c:	4638      	mov	r0, r7
    267e:	f7ff f969 	bl	1954 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2682:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2686:	2b00      	cmp	r3, #0
    2688:	d1e4      	bne.n	2654 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    268a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    268e:	2a00      	cmp	r2, #0
    2690:	d0e0      	beq.n	2654 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2692:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2696:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    269a:	2301      	movs	r3, #1
    269c:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    26a0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26a4:	60ab      	str	r3, [r5, #8]
}
    26a6:	e7d5      	b.n	2654 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    26a8:	2100      	movs	r1, #0
    26aa:	2021      	movs	r0, #33	; 0x21
    26ac:	f003 feb8 	bl	6420 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    26b0:	e7e7      	b.n	2682 <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    26b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26b6:	2202      	movs	r2, #2
    26b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    26bc:	e7db      	b.n	2676 <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    26be:	4912      	ldr	r1, [pc, #72]	; (2708 <z_nrf_clock_control_lf_on+0x144>)
    26c0:	480d      	ldr	r0, [pc, #52]	; (26f8 <z_nrf_clock_control_lf_on+0x134>)
    26c2:	4a0e      	ldr	r2, [pc, #56]	; (26fc <z_nrf_clock_control_lf_on+0x138>)
    26c4:	f240 2332 	movw	r3, #562	; 0x232
    26c8:	f004 fee0 	bl	748c <assert_print>
}
    26cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    26d0:	480a      	ldr	r0, [pc, #40]	; (26fc <z_nrf_clock_control_lf_on+0x138>)
    26d2:	f240 2132 	movw	r1, #562	; 0x232
    26d6:	f004 bed2 	b.w	747e <assert_post_action>
    p_reg->INTENCLR = mask;
    26da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26de:	2202      	movs	r2, #2
    26e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    26e4:	4607      	mov	r7, r0
}
    26e6:	e7b1      	b.n	264c <z_nrf_clock_control_lf_on+0x88>
    26e8:	20000a7c 	.word	0x20000a7c
    26ec:	20000a10 	.word	0x20000a10
    26f0:	20000a40 	.word	0x20000a40
    26f4:	00008cb4 	.word	0x00008cb4
    26f8:	000085d7 	.word	0x000085d7
    26fc:	00008c53 	.word	0x00008c53
    2700:	20001205 	.word	0x20001205
    2704:	e000e100 	.word	0xe000e100
    2708:	0000867f 	.word	0x0000867f

0000270c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    270c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    270e:	4b08      	ldr	r3, [pc, #32]	; (2730 <uart_console_init+0x24>)
    2710:	4808      	ldr	r0, [pc, #32]	; (2734 <uart_console_init+0x28>)
    2712:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2714:	f005 fb51 	bl	7dba <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2718:	b138      	cbz	r0, 272a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    271a:	4807      	ldr	r0, [pc, #28]	; (2738 <uart_console_init+0x2c>)
    271c:	f7ff fd7e 	bl	221c <__stdout_hook_install>
	__printk_hook_install(console_out);
    2720:	4805      	ldr	r0, [pc, #20]	; (2738 <uart_console_init+0x2c>)
    2722:	f7fd ff6d 	bl	600 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2726:	2000      	movs	r0, #0
}
    2728:	bd08      	pop	{r3, pc}
		return -ENODEV;
    272a:	f06f 0012 	mvn.w	r0, #18
    272e:	e7fb      	b.n	2728 <uart_console_init+0x1c>
    2730:	20000a80 	.word	0x20000a80
    2734:	00007fc4 	.word	0x00007fc4
    2738:	0000273d 	.word	0x0000273d

0000273c <console_out>:
	if ('\n' == c) {
    273c:	280a      	cmp	r0, #10
{
    273e:	b538      	push	{r3, r4, r5, lr}
    2740:	4d07      	ldr	r5, [pc, #28]	; (2760 <console_out+0x24>)
    2742:	4604      	mov	r4, r0
	if ('\n' == c) {
    2744:	d104      	bne.n	2750 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2746:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    2748:	6883      	ldr	r3, [r0, #8]
    274a:	210d      	movs	r1, #13
    274c:	69db      	ldr	r3, [r3, #28]
    274e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2750:	6828      	ldr	r0, [r5, #0]
    2752:	6883      	ldr	r3, [r0, #8]
    2754:	b2e1      	uxtb	r1, r4
    2756:	69db      	ldr	r3, [r3, #28]
    2758:	4798      	blx	r3
}
    275a:	4620      	mov	r0, r4
    275c:	bd38      	pop	{r3, r4, r5, pc}
    275e:	bf00      	nop
    2760:	20000a80 	.word	0x20000a80

00002764 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2764:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    2766:	6905      	ldr	r5, [r0, #16]
{
    2768:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    276a:	460c      	mov	r4, r1
    276c:	b961      	cbnz	r1, 2788 <gpio_nrfx_manage_callback+0x24>
    276e:	4922      	ldr	r1, [pc, #136]	; (27f8 <gpio_nrfx_manage_callback+0x94>)
    2770:	4a22      	ldr	r2, [pc, #136]	; (27fc <gpio_nrfx_manage_callback+0x98>)
    2772:	4823      	ldr	r0, [pc, #140]	; (2800 <gpio_nrfx_manage_callback+0x9c>)
    2774:	2324      	movs	r3, #36	; 0x24
    2776:	f004 fe89 	bl	748c <assert_print>
    277a:	4822      	ldr	r0, [pc, #136]	; (2804 <gpio_nrfx_manage_callback+0xa0>)
    277c:	f004 fe86 	bl	748c <assert_print>
    2780:	481e      	ldr	r0, [pc, #120]	; (27fc <gpio_nrfx_manage_callback+0x98>)
    2782:	2124      	movs	r1, #36	; 0x24
    2784:	f004 fe7b 	bl	747e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2788:	6863      	ldr	r3, [r4, #4]
    278a:	b963      	cbnz	r3, 27a6 <gpio_nrfx_manage_callback+0x42>
    278c:	491e      	ldr	r1, [pc, #120]	; (2808 <gpio_nrfx_manage_callback+0xa4>)
    278e:	4a1b      	ldr	r2, [pc, #108]	; (27fc <gpio_nrfx_manage_callback+0x98>)
    2790:	481b      	ldr	r0, [pc, #108]	; (2800 <gpio_nrfx_manage_callback+0x9c>)
    2792:	2325      	movs	r3, #37	; 0x25
    2794:	f004 fe7a 	bl	748c <assert_print>
    2798:	481c      	ldr	r0, [pc, #112]	; (280c <gpio_nrfx_manage_callback+0xa8>)
    279a:	f004 fe77 	bl	748c <assert_print>
    279e:	4817      	ldr	r0, [pc, #92]	; (27fc <gpio_nrfx_manage_callback+0x98>)
    27a0:	2125      	movs	r1, #37	; 0x25
    27a2:	f004 fe6c 	bl	747e <assert_post_action>
	return list->head;
    27a6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    27a8:	b15b      	cbz	r3, 27c2 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    27aa:	2200      	movs	r2, #0
    27ac:	429c      	cmp	r4, r3
    27ae:	d112      	bne.n	27d6 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    27b0:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    27b2:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    27b4:	b952      	cbnz	r2, 27cc <gpio_nrfx_manage_callback+0x68>
    27b6:	42a1      	cmp	r1, r4
	list->head = node;
    27b8:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    27ba:	d100      	bne.n	27be <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    27bc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    27be:	2300      	movs	r3, #0
    27c0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    27c2:	b96e      	cbnz	r6, 27e0 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    27c4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    27c6:	bd70      	pop	{r4, r5, r6, pc}
    27c8:	460b      	mov	r3, r1
    27ca:	e7ef      	b.n	27ac <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    27cc:	42a1      	cmp	r1, r4
	parent->next = child;
    27ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
    27d0:	bf08      	it	eq
    27d2:	60aa      	streq	r2, [r5, #8]
}
    27d4:	e7f3      	b.n	27be <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    27d6:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    27d8:	461a      	mov	r2, r3
    27da:	2900      	cmp	r1, #0
    27dc:	d1f4      	bne.n	27c8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    27de:	b13e      	cbz	r6, 27f0 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    27e0:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    27e2:	686b      	ldr	r3, [r5, #4]
    27e4:	6023      	str	r3, [r4, #0]
	list->head = node;
    27e6:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    27e8:	2800      	cmp	r0, #0
    27ea:	d1eb      	bne.n	27c4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    27ec:	60ac      	str	r4, [r5, #8]
}
    27ee:	e7ea      	b.n	27c6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    27f0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    27f4:	e7e7      	b.n	27c6 <gpio_nrfx_manage_callback+0x62>
    27f6:	bf00      	nop
    27f8:	00008cf0 	.word	0x00008cf0
    27fc:	00008cc3 	.word	0x00008cc3
    2800:	000085d7 	.word	0x000085d7
    2804:	00008cf9 	.word	0x00008cf9
    2808:	00008d08 	.word	0x00008d08
    280c:	00008d1a 	.word	0x00008d1a

00002810 <gpio_nrfx_pin_interrupt_configure>:
{
    2810:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    2812:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2814:	7b05      	ldrb	r5, [r0, #12]
    2816:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    281a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    281e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2822:	f04f 0500 	mov.w	r5, #0
    2826:	d104      	bne.n	2832 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2828:	4620      	mov	r0, r4
    282a:	f001 fe1f 	bl	446c <nrfx_gpiote_trigger_disable>
	return 0;
    282e:	2000      	movs	r0, #0
    2830:	e054      	b.n	28dc <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2832:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2836:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    283a:	d151      	bne.n	28e0 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    283c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2840:	bf0c      	ite	eq
    2842:	2304      	moveq	r3, #4
    2844:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2846:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    284a:	6883      	ldr	r3, [r0, #8]
    284c:	fa23 f101 	lsr.w	r1, r3, r1
    2850:	f011 0101 	ands.w	r1, r1, #1
    2854:	d155      	bne.n	2902 <gpio_nrfx_pin_interrupt_configure+0xf2>
    2856:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    285a:	d152      	bne.n	2902 <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    285c:	0966      	lsrs	r6, r4, #5
    285e:	d04a      	beq.n	28f6 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    2860:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2864:	2e01      	cmp	r6, #1
    2866:	bf08      	it	eq
    2868:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    286a:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    286e:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2870:	07ca      	lsls	r2, r1, #31
    2872:	d40b      	bmi.n	288c <gpio_nrfx_pin_interrupt_configure+0x7c>
    2874:	492b      	ldr	r1, [pc, #172]	; (2924 <gpio_nrfx_pin_interrupt_configure+0x114>)
    2876:	482c      	ldr	r0, [pc, #176]	; (2928 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2878:	4a2c      	ldr	r2, [pc, #176]	; (292c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    287a:	f240 2329 	movw	r3, #553	; 0x229
    287e:	f004 fe05 	bl	748c <assert_print>
    2882:	482a      	ldr	r0, [pc, #168]	; (292c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2884:	f240 2129 	movw	r1, #553	; 0x229
    2888:	f004 fdf9 	bl	747e <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    288c:	b16e      	cbz	r6, 28aa <gpio_nrfx_pin_interrupt_configure+0x9a>
    288e:	2e01      	cmp	r6, #1
    2890:	d034      	beq.n	28fc <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    2892:	4927      	ldr	r1, [pc, #156]	; (2930 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2894:	4824      	ldr	r0, [pc, #144]	; (2928 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2896:	4a25      	ldr	r2, [pc, #148]	; (292c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2898:	f240 232e 	movw	r3, #558	; 0x22e
    289c:	f004 fdf6 	bl	748c <assert_print>
    28a0:	4822      	ldr	r0, [pc, #136]	; (292c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    28a2:	f240 212e 	movw	r1, #558	; 0x22e
    28a6:	f004 fdea 	bl	747e <assert_post_action>
        case 0: return NRF_P0;
    28aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    28ae:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    28b2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    28b6:	07db      	lsls	r3, r3, #31
    28b8:	d423      	bmi.n	2902 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28ba:	f10d 0507 	add.w	r5, sp, #7
    28be:	4629      	mov	r1, r5
    28c0:	4620      	mov	r0, r4
    28c2:	f001 fcf7 	bl	42b4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    28c6:	4b1b      	ldr	r3, [pc, #108]	; (2934 <gpio_nrfx_pin_interrupt_configure+0x124>)
    28c8:	4298      	cmp	r0, r3
    28ca:	d119      	bne.n	2900 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    28cc:	4628      	mov	r0, r5
    28ce:	f001 fd53 	bl	4378 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    28d2:	4b19      	ldr	r3, [pc, #100]	; (2938 <gpio_nrfx_pin_interrupt_configure+0x128>)
    28d4:	4298      	cmp	r0, r3
    28d6:	d013      	beq.n	2900 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    28d8:	f06f 000b 	mvn.w	r0, #11
}
    28dc:	b004      	add	sp, #16
    28de:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    28e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    28e4:	d005      	beq.n	28f2 <gpio_nrfx_pin_interrupt_configure+0xe2>
    28e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    28ea:	bf0c      	ite	eq
    28ec:	2302      	moveq	r3, #2
    28ee:	2301      	movne	r3, #1
    28f0:	e7a9      	b.n	2846 <gpio_nrfx_pin_interrupt_configure+0x36>
    28f2:	2303      	movs	r3, #3
    28f4:	e7a7      	b.n	2846 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    28f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28fa:	e7b6      	b.n	286a <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    28fc:	4b0f      	ldr	r3, [pc, #60]	; (293c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    28fe:	e7d6      	b.n	28ae <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2900:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2902:	2300      	movs	r3, #0
    2904:	4619      	mov	r1, r3
    2906:	aa02      	add	r2, sp, #8
    2908:	4620      	mov	r0, r4
    290a:	f001 fbab 	bl	4064 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    290e:	4b0a      	ldr	r3, [pc, #40]	; (2938 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2910:	4298      	cmp	r0, r3
    2912:	d104      	bne.n	291e <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2914:	2101      	movs	r1, #1
    2916:	4620      	mov	r0, r4
    2918:	f001 fd34 	bl	4384 <nrfx_gpiote_trigger_enable>
    291c:	e787      	b.n	282e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    291e:	f06f 0004 	mvn.w	r0, #4
    2922:	e7db      	b.n	28dc <gpio_nrfx_pin_interrupt_configure+0xcc>
    2924:	00008d64 	.word	0x00008d64
    2928:	000085d7 	.word	0x000085d7
    292c:	00008d31 	.word	0x00008d31
    2930:	0000867f 	.word	0x0000867f
    2934:	0bad0004 	.word	0x0bad0004
    2938:	0bad0000 	.word	0x0bad0000
    293c:	50000300 	.word	0x50000300

00002940 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2940:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2942:	f001 fd09 	bl	4358 <nrfx_gpiote_is_init>
    2946:	4604      	mov	r4, r0
    2948:	b968      	cbnz	r0, 2966 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    294a:	f001 fcdd 	bl	4308 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    294e:	4b08      	ldr	r3, [pc, #32]	; (2970 <gpio_nrfx_init+0x30>)
    2950:	4298      	cmp	r0, r3
    2952:	d10a      	bne.n	296a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2954:	4807      	ldr	r0, [pc, #28]	; (2974 <gpio_nrfx_init+0x34>)
    2956:	4621      	mov	r1, r4
    2958:	f001 fca6 	bl	42a8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    295c:	4622      	mov	r2, r4
    295e:	2105      	movs	r1, #5
    2960:	2006      	movs	r0, #6
    2962:	f7ff f81f 	bl	19a4 <z_arm_irq_priority_set>
		return 0;
    2966:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2968:	bd10      	pop	{r4, pc}
		return -EIO;
    296a:	f06f 0004 	mvn.w	r0, #4
    296e:	e7fb      	b.n	2968 <gpio_nrfx_init+0x28>
    2970:	0bad0000 	.word	0x0bad0000
    2974:	00002979 	.word	0x00002979

00002978 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2978:	0943      	lsrs	r3, r0, #5
{
    297a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    297e:	d003      	beq.n	2988 <nrfx_gpio_handler+0x10>
    2980:	2b01      	cmp	r3, #1
    2982:	d02e      	beq.n	29e2 <nrfx_gpio_handler+0x6a>
}
    2984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2988:	4f17      	ldr	r7, [pc, #92]	; (29e8 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    298a:	693b      	ldr	r3, [r7, #16]
    298c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    298e:	2c00      	cmp	r4, #0
    2990:	d0f8      	beq.n	2984 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2992:	f000 001f 	and.w	r0, r0, #31
    2996:	2601      	movs	r6, #1
	return node->next;
    2998:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    299a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 29ec <nrfx_gpio_handler+0x74>
    299e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 29f0 <nrfx_gpio_handler+0x78>
    29a2:	f8df a050 	ldr.w	sl, [pc, #80]	; 29f4 <nrfx_gpio_handler+0x7c>
    29a6:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    29a8:	68a3      	ldr	r3, [r4, #8]
    29aa:	421e      	tst	r6, r3
    29ac:	d014      	beq.n	29d8 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    29ae:	6863      	ldr	r3, [r4, #4]
    29b0:	b963      	cbnz	r3, 29cc <nrfx_gpio_handler+0x54>
    29b2:	4649      	mov	r1, r9
    29b4:	2345      	movs	r3, #69	; 0x45
    29b6:	4642      	mov	r2, r8
    29b8:	4650      	mov	r0, sl
    29ba:	f004 fd67 	bl	748c <assert_print>
    29be:	480e      	ldr	r0, [pc, #56]	; (29f8 <nrfx_gpio_handler+0x80>)
    29c0:	f004 fd64 	bl	748c <assert_print>
    29c4:	2145      	movs	r1, #69	; 0x45
    29c6:	4640      	mov	r0, r8
    29c8:	f004 fd59 	bl	747e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    29cc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    29d0:	4621      	mov	r1, r4
    29d2:	4032      	ands	r2, r6
    29d4:	4638      	mov	r0, r7
    29d6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29d8:	2d00      	cmp	r5, #0
    29da:	d0d3      	beq.n	2984 <nrfx_gpio_handler+0xc>
    29dc:	462c      	mov	r4, r5
    29de:	682d      	ldr	r5, [r5, #0]
    29e0:	e7e2      	b.n	29a8 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29e2:	4f06      	ldr	r7, [pc, #24]	; (29fc <nrfx_gpio_handler+0x84>)
    29e4:	e7d1      	b.n	298a <nrfx_gpio_handler+0x12>
    29e6:	bf00      	nop
    29e8:	00007f7c 	.word	0x00007f7c
    29ec:	00008cc3 	.word	0x00008cc3
    29f0:	00008d87 	.word	0x00008d87
    29f4:	000085d7 	.word	0x000085d7
    29f8:	00008d1a 	.word	0x00008d1a
    29fc:	00007f94 	.word	0x00007f94

00002a00 <gpio_nrfx_pin_configure>:
{
    2a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2a04:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a06:	7b3b      	ldrb	r3, [r7, #12]
    2a08:	f001 051f 	and.w	r5, r1, #31
{
    2a0c:	b085      	sub	sp, #20
    2a0e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a10:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2a14:	4614      	mov	r4, r2
    2a16:	b9ca      	cbnz	r2, 2a4c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a18:	a902      	add	r1, sp, #8
    2a1a:	4628      	mov	r0, r5
    2a1c:	f001 fc4a 	bl	42b4 <nrfx_gpiote_channel_get>
    2a20:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2a22:	4628      	mov	r0, r5
    2a24:	f001 fd4c 	bl	44c0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2a28:	4b4a      	ldr	r3, [pc, #296]	; (2b54 <gpio_nrfx_pin_configure+0x154>)
    2a2a:	4298      	cmp	r0, r3
    2a2c:	d004      	beq.n	2a38 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2a2e:	f06f 0004 	mvn.w	r0, #4
}
    2a32:	b005      	add	sp, #20
    2a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2a38:	4284      	cmp	r4, r0
    2a3a:	d105      	bne.n	2a48 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2a3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2a40:	f001 fc94 	bl	436c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2a44:	42a0      	cmp	r0, r4
    2a46:	d1f2      	bne.n	2a2e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a48:	2000      	movs	r0, #0
    2a4a:	e7f2      	b.n	2a32 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a4c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a50:	f10d 0103 	add.w	r1, sp, #3
    2a54:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a56:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a5a:	f001 fc2b 	bl	42b4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a5e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a60:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a62:	aa02      	add	r2, sp, #8
    2a64:	4649      	mov	r1, r9
    2a66:	4628      	mov	r0, r5
    2a68:	f001 fafc 	bl	4064 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2a6c:	4b39      	ldr	r3, [pc, #228]	; (2b54 <gpio_nrfx_pin_configure+0x154>)
    2a6e:	4298      	cmp	r0, r3
    2a70:	d002      	beq.n	2a78 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2a72:	f06f 0015 	mvn.w	r0, #21
    2a76:	e7dc      	b.n	2a32 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2a78:	4580      	cmp	r8, r0
    2a7a:	d103      	bne.n	2a84 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2a7c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2a80:	f001 fc74 	bl	436c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2a84:	03a3      	lsls	r3, r4, #14
    2a86:	d551      	bpl.n	2b2c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2a88:	f240 6306 	movw	r3, #1542	; 0x606
    2a8c:	4023      	ands	r3, r4
    2a8e:	f240 2206 	movw	r2, #518	; 0x206
    2a92:	4293      	cmp	r3, r2
    2a94:	d03b      	beq.n	2b0e <gpio_nrfx_pin_configure+0x10e>
    2a96:	d80c      	bhi.n	2ab2 <gpio_nrfx_pin_configure+0xb2>
    2a98:	2b06      	cmp	r3, #6
    2a9a:	d015      	beq.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
    2a9c:	d804      	bhi.n	2aa8 <gpio_nrfx_pin_configure+0xa8>
    2a9e:	b19b      	cbz	r3, 2ac8 <gpio_nrfx_pin_configure+0xc8>
    2aa0:	2b02      	cmp	r3, #2
    2aa2:	d1e6      	bne.n	2a72 <gpio_nrfx_pin_configure+0x72>
    2aa4:	2304      	movs	r3, #4
    2aa6:	e00f      	b.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
    2aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2aac:	d1e1      	bne.n	2a72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2aae:	2301      	movs	r3, #1
    2ab0:	e00a      	b.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2ab2:	f240 4202 	movw	r2, #1026	; 0x402
    2ab6:	4293      	cmp	r3, r2
    2ab8:	d02b      	beq.n	2b12 <gpio_nrfx_pin_configure+0x112>
    2aba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2abe:	d02a      	beq.n	2b16 <gpio_nrfx_pin_configure+0x116>
    2ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2ac4:	d1d5      	bne.n	2a72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2ac6:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2ac8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2acc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2ad0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2ad4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2ad6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2ada:	bf54      	ite	pl
    2adc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2ae0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ae2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2ae4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ae8:	d517      	bpl.n	2b1a <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	2101      	movs	r1, #1
    2aee:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2af2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2af6:	2200      	movs	r2, #0
    2af8:	a901      	add	r1, sp, #4
    2afa:	4628      	mov	r0, r5
    2afc:	f001 fb60 	bl	41c0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b00:	4b14      	ldr	r3, [pc, #80]	; (2b54 <gpio_nrfx_pin_configure+0x154>)
    2b02:	4298      	cmp	r0, r3
    2b04:	bf14      	ite	ne
    2b06:	f06f 0015 	mvnne.w	r0, #21
    2b0a:	2000      	moveq	r0, #0
    2b0c:	e791      	b.n	2a32 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2b0e:	2307      	movs	r3, #7
    2b10:	e7da      	b.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2b12:	2305      	movs	r3, #5
    2b14:	e7d8      	b.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2b16:	2303      	movs	r3, #3
    2b18:	e7d6      	b.n	2ac8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2b1a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2b1c:	bf41      	itttt	mi
    2b1e:	687b      	ldrmi	r3, [r7, #4]
    2b20:	2101      	movmi	r1, #1
    2b22:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2b26:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2b2a:	e7e4      	b.n	2af6 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2b2c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b2e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2b32:	bf54      	ite	pl
    2b34:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2b38:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b3a:	461a      	mov	r2, r3
    2b3c:	a901      	add	r1, sp, #4
    2b3e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2b40:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b44:	f001 fa8e 	bl	4064 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b48:	4b02      	ldr	r3, [pc, #8]	; (2b54 <gpio_nrfx_pin_configure+0x154>)
    2b4a:	4298      	cmp	r0, r3
    2b4c:	f43f af7c 	beq.w	2a48 <gpio_nrfx_pin_configure+0x48>
    2b50:	e78f      	b.n	2a72 <gpio_nrfx_pin_configure+0x72>
    2b52:	bf00      	nop
    2b54:	0bad0000 	.word	0x0bad0000

00002b58 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    2b58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2b5c:	461c      	mov	r4, r3
	return config->uarte_regs;
    2b5e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    2b60:	6907      	ldr	r7, [r0, #16]
{
    2b62:	460e      	mov	r6, r1
    2b64:	4605      	mov	r5, r0
	return config->uarte_regs;
    2b66:	6819      	ldr	r1, [r3, #0]
	__asm__ volatile(
    2b68:	f04f 0320 	mov.w	r3, #32
    2b6c:	f3ef 8811 	mrs	r8, BASEPRI
    2b70:	f383 8812 	msr	BASEPRI_MAX, r3
    2b74:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    2b78:	68f8      	ldr	r0, [r7, #12]
    2b7a:	68c3      	ldr	r3, [r0, #12]
    2b7c:	b143      	cbz	r3, 2b90 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    2b7e:	f388 8811 	msr	BASEPRI, r8
    2b82:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    2b86:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    2b8a:	b002      	add	sp, #8
    2b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2b90:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    2b94:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    2b96:	6086      	str	r6, [r0, #8]
    2b98:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2b9c:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    2ba0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2ba4:	d128      	bne.n	2bf8 <uarte_nrfx_tx+0xa0>
		data->async->xfer_len = len;
    2ba6:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    2baa:	4639      	mov	r1, r7
    2bac:	4628      	mov	r0, r5
    2bae:	f004 fed8 	bl	7962 <start_tx_locked>
    2bb2:	f388 8811 	msr	BASEPRI, r8
    2bb6:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    2bba:	7afb      	ldrb	r3, [r7, #11]
    2bbc:	2b01      	cmp	r3, #1
    2bbe:	d119      	bne.n	2bf4 <uarte_nrfx_tx+0x9c>
	    && timeout != SYS_FOREVER_US) {
    2bc0:	1c63      	adds	r3, r4, #1
    2bc2:	d017      	beq.n	2bf4 <uarte_nrfx_tx+0x9c>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    2bc4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2bc8:	480d      	ldr	r0, [pc, #52]	; (2c00 <uarte_nrfx_tx+0xa8>)
    2bca:	68fe      	ldr	r6, [r7, #12]
    2bcc:	4a0d      	ldr	r2, [pc, #52]	; (2c04 <uarte_nrfx_tx+0xac>)
    2bce:	2400      	movs	r4, #0
    2bd0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2bd4:	4621      	mov	r1, r4
    2bd6:	2300      	movs	r3, #0
    2bd8:	fbc5 0107 	smlal	r0, r1, r5, r7
    2bdc:	f7fd fa90 	bl	100 <__aeabi_uldivmod>
    2be0:	3628      	adds	r6, #40	; 0x28
    2be2:	4602      	mov	r2, r0
    2be4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2be6:	2000      	movs	r0, #0
    2be8:	2100      	movs	r1, #0
    2bea:	e9cd 0100 	strd	r0, r1, [sp]
    2bee:	4630      	mov	r0, r6
    2bf0:	f004 f8da 	bl	6da8 <z_impl_k_timer_start>
	return 0;
    2bf4:	2000      	movs	r0, #0
    2bf6:	e7c8      	b.n	2b8a <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    2bf8:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    2bfa:	f004 fe67 	bl	78cc <setup_tx_cache.isra.0>
    2bfe:	e7d4      	b.n	2baa <uarte_nrfx_tx+0x52>
    2c00:	000f423f 	.word	0x000f423f
    2c04:	000f4240 	.word	0x000f4240

00002c08 <uarte_nrfx_configure>:
{
    2c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    2c0a:	794b      	ldrb	r3, [r1, #5]
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	d026      	beq.n	2c5e <uarte_nrfx_configure+0x56>
    2c10:	2b03      	cmp	r3, #3
    2c12:	d121      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2c14:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2c16:	798b      	ldrb	r3, [r1, #6]
    2c18:	2b03      	cmp	r3, #3
    2c1a:	d11d      	bne.n	2c58 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    2c1c:	79cc      	ldrb	r4, [r1, #7]
    2c1e:	b10c      	cbz	r4, 2c24 <uarte_nrfx_configure+0x1c>
    2c20:	2c01      	cmp	r4, #1
    2c22:	d119      	bne.n	2c58 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    2c24:	790a      	ldrb	r2, [r1, #4]
    2c26:	b112      	cbz	r2, 2c2e <uarte_nrfx_configure+0x26>
    2c28:	2a02      	cmp	r2, #2
    2c2a:	d115      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2c2c:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c2e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c30:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2c32:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c36:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2c38:	d065      	beq.n	2d06 <uarte_nrfx_configure+0xfe>
    2c3a:	d82d      	bhi.n	2c98 <uarte_nrfx_configure+0x90>
    2c3c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c40:	d064      	beq.n	2d0c <uarte_nrfx_configure+0x104>
    2c42:	d816      	bhi.n	2c72 <uarte_nrfx_configure+0x6a>
    2c44:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2c48:	d062      	beq.n	2d10 <uarte_nrfx_configure+0x108>
    2c4a:	d80a      	bhi.n	2c62 <uarte_nrfx_configure+0x5a>
    2c4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c50:	d061      	beq.n	2d16 <uarte_nrfx_configure+0x10e>
    2c52:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c56:	d061      	beq.n	2d1c <uarte_nrfx_configure+0x114>
    2c58:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c5c:	e052      	b.n	2d04 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2c5e:	2600      	movs	r6, #0
    2c60:	e7d9      	b.n	2c16 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2c62:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c66:	d05c      	beq.n	2d22 <uarte_nrfx_configure+0x11a>
    2c68:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c6c:	d1f4      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c6e:	4b37      	ldr	r3, [pc, #220]	; (2d4c <uarte_nrfx_configure+0x144>)
    2c70:	e03c      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c72:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c76:	d057      	beq.n	2d28 <uarte_nrfx_configure+0x120>
    2c78:	d807      	bhi.n	2c8a <uarte_nrfx_configure+0x82>
    2c7a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c7e:	d055      	beq.n	2d2c <uarte_nrfx_configure+0x124>
    2c80:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c84:	d1e8      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c86:	4b32      	ldr	r3, [pc, #200]	; (2d50 <uarte_nrfx_configure+0x148>)
    2c88:	e030      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c8a:	f647 2712 	movw	r7, #31250	; 0x7a12
    2c8e:	42bb      	cmp	r3, r7
    2c90:	d1e2      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2c92:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c96:	e029      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c98:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c9c:	d048      	beq.n	2d30 <uarte_nrfx_configure+0x128>
    2c9e:	d813      	bhi.n	2cc8 <uarte_nrfx_configure+0xc0>
    2ca0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2ca4:	d047      	beq.n	2d36 <uarte_nrfx_configure+0x12e>
    2ca6:	d809      	bhi.n	2cbc <uarte_nrfx_configure+0xb4>
    2ca8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2cac:	42bb      	cmp	r3, r7
    2cae:	d044      	beq.n	2d3a <uarte_nrfx_configure+0x132>
    2cb0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2cb4:	d1d0      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2cb6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2cba:	e017      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cbc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2cc0:	d1ca      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2cc2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2cc6:	e011      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cc8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2ccc:	d038      	beq.n	2d40 <uarte_nrfx_configure+0x138>
    2cce:	d808      	bhi.n	2ce2 <uarte_nrfx_configure+0xda>
    2cd0:	4f20      	ldr	r7, [pc, #128]	; (2d54 <uarte_nrfx_configure+0x14c>)
    2cd2:	42bb      	cmp	r3, r7
    2cd4:	d037      	beq.n	2d46 <uarte_nrfx_configure+0x13e>
    2cd6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2cda:	d1bd      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2cdc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2ce0:	e004      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ce2:	4f1d      	ldr	r7, [pc, #116]	; (2d58 <uarte_nrfx_configure+0x150>)
    2ce4:	42bb      	cmp	r3, r7
    2ce6:	d1b7      	bne.n	2c58 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2cec:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2cee:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    2cf2:	1d03      	adds	r3, r0, #4
    2cf4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2cf6:	4334      	orrs	r4, r6
    2cf8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2cfa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2cfe:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    2d02:	2000      	movs	r0, #0
}
    2d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2d06:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2d0a:	e7ef      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d0c:	4b13      	ldr	r3, [pc, #76]	; (2d5c <uarte_nrfx_configure+0x154>)
    2d0e:	e7ed      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2d10:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2d14:	e7ea      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2d16:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2d1a:	e7e7      	b.n	2cec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d1c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2d20:	e7e4      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d22:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d26:	e7e1      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d28:	4b0d      	ldr	r3, [pc, #52]	; (2d60 <uarte_nrfx_configure+0x158>)
    2d2a:	e7df      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2d2c:	4b0d      	ldr	r3, [pc, #52]	; (2d64 <uarte_nrfx_configure+0x15c>)
    2d2e:	e7dd      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d30:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d34:	e7da      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d36:	4b0c      	ldr	r3, [pc, #48]	; (2d68 <uarte_nrfx_configure+0x160>)
    2d38:	e7d8      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d3a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d3e:	e7d5      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d44:	e7d2      	b.n	2cec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d4a:	e7cf      	b.n	2cec <uarte_nrfx_configure+0xe4>
    2d4c:	0013b000 	.word	0x0013b000
    2d50:	004ea000 	.word	0x004ea000
    2d54:	0003d090 	.word	0x0003d090
    2d58:	000f4240 	.word	0x000f4240
    2d5c:	00275000 	.word	0x00275000
    2d60:	0075c000 	.word	0x0075c000
    2d64:	003af000 	.word	0x003af000
    2d68:	013a9000 	.word	0x013a9000

00002d6c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2d70:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2d74:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d76:	f8d9 4000 	ldr.w	r4, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2d7a:	f8d9 800c 	ldr.w	r8, [r9, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d7e:	2100      	movs	r1, #0
    2d80:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2d84:	4607      	mov	r7, r0
	data->dev = dev;
    2d86:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2d88:	aa01      	add	r2, sp, #4
    2d8a:	4640      	mov	r0, r8
    2d8c:	f004 fe82 	bl	7a94 <pinctrl_lookup_state>
	if (ret < 0) {
    2d90:	1e05      	subs	r5, r0, #0
    2d92:	f2c0 8087 	blt.w	2ea4 <uarte_instance_init.constprop.0+0x138>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2d96:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2d98:	f8d8 2000 	ldr.w	r2, [r8]
    2d9c:	7919      	ldrb	r1, [r3, #4]
    2d9e:	6818      	ldr	r0, [r3, #0]
    2da0:	f004 fecf 	bl	7b42 <pinctrl_configure_pins>
	if (err < 0) {
    2da4:	1e05      	subs	r5, r0, #0
    2da6:	db7d      	blt.n	2ea4 <uarte_instance_init.constprop.0+0x138>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2da8:	1d31      	adds	r1, r6, #4
    2daa:	4638      	mov	r0, r7
    2dac:	f7ff ff2c 	bl	2c08 <uarte_nrfx_configure>
	if (err) {
    2db0:	4605      	mov	r5, r0
    2db2:	2800      	cmp	r0, #0
    2db4:	d176      	bne.n	2ea4 <uarte_instance_init.constprop.0+0x138>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2db6:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2dba:	0799      	lsls	r1, r3, #30
    2dbc:	d51a      	bpl.n	2df4 <uarte_instance_init.constprop.0+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2dbe:	f106 0016 	add.w	r0, r6, #22
    2dc2:	f001 fc79 	bl	46b8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2dc6:	4b45      	ldr	r3, [pc, #276]	; (2edc <uarte_instance_init.constprop.0+0x170>)
    2dc8:	4298      	cmp	r0, r3
    2dca:	f040 8083 	bne.w	2ed4 <uarte_instance_init.constprop.0+0x168>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2dce:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2dd0:	00c3      	lsls	r3, r0, #3
    2dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dd6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2dda:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2dde:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2de2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2de6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2dea:	4a3d      	ldr	r2, [pc, #244]	; (2ee0 <uarte_instance_init.constprop.0+0x174>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2dec:	2301      	movs	r3, #1
    2dee:	4083      	lsls	r3, r0
    2df0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    2df4:	68f3      	ldr	r3, [r6, #12]
    2df6:	2b00      	cmp	r3, #0
    2df8:	d058      	beq.n	2eac <uarte_instance_init.constprop.0+0x140>
	return config->uarte_regs;
    2dfa:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    2dfc:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    2e00:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    2e02:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    2e06:	4937      	ldr	r1, [pc, #220]	; (2ee4 <uarte_instance_init.constprop.0+0x178>)
    2e08:	2204      	movs	r2, #4
    2e0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2e0e:	2201      	movs	r2, #1
    2e10:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    2e14:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e18:	2108      	movs	r1, #8
    2e1a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e1e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    2e22:	b1a1      	cbz	r1, 2e4e <uarte_instance_init.constprop.0+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e24:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e26:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    2e2a:	b91a      	cbnz	r2, 2e34 <uarte_instance_init.constprop.0+0xc8>
    2e2c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2e30:	2a00      	cmp	r2, #0
    2e32:	d0f8      	beq.n	2e26 <uarte_instance_init.constprop.0+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e34:	2200      	movs	r2, #0
    2e36:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    2e3a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    2e3e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2e42:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    2e46:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    2e4a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    2e4e:	4926      	ldr	r1, [pc, #152]	; (2ee8 <uarte_instance_init.constprop.0+0x17c>)
    2e50:	2200      	movs	r2, #0
    2e52:	3088      	adds	r0, #136	; 0x88
    2e54:	f005 f81b 	bl	7e8e <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    2e58:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    2e5c:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    2e60:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    2e64:	4921      	ldr	r1, [pc, #132]	; (2eec <uarte_instance_init.constprop.0+0x180>)
    2e66:	2200      	movs	r2, #0
    2e68:	3028      	adds	r0, #40	; 0x28
    2e6a:	f005 f810 	bl	7e8e <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    2e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2e72:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e76:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2e7a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2e7c:	bf5c      	itt	pl
    2e7e:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2e82:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e86:	06db      	lsls	r3, r3, #27
    2e88:	bf44      	itt	mi
    2e8a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e8e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2e92:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2e94:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e96:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e9a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e9e:	2301      	movs	r3, #1
    2ea0:	60a3      	str	r3, [r4, #8]
    2ea2:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2ea4:	4628      	mov	r0, r5
    2ea6:	b003      	add	sp, #12
    2ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2eac:	2308      	movs	r3, #8
    2eae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2eb2:	f899 3008 	ldrb.w	r3, [r9, #8]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d1dd      	bne.n	2e76 <uarte_instance_init.constprop.0+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2eba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2ebe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2ec2:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2ec6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2eca:	2301      	movs	r3, #1
    2ecc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ed0:	6023      	str	r3, [r4, #0]
}
    2ed2:	e7d0      	b.n	2e76 <uarte_instance_init.constprop.0+0x10a>
		return -EIO;
    2ed4:	f06f 0504 	mvn.w	r5, #4
    2ed8:	e7e4      	b.n	2ea4 <uarte_instance_init.constprop.0+0x138>
    2eda:	bf00      	nop
    2edc:	0bad0000 	.word	0x0bad0000
    2ee0:	4001f000 	.word	0x4001f000
    2ee4:	000a0210 	.word	0x000a0210
    2ee8:	000079d1 	.word	0x000079d1
    2eec:	00007a8b 	.word	0x00007a8b

00002ef0 <uarte_nrfx_poll_out>:
{
    2ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2ef2:	6906      	ldr	r6, [r0, #16]
{
    2ef4:	4604      	mov	r4, r0
    2ef6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ef8:	f004 ff89 	bl	7e0e <k_is_in_isr>
    2efc:	b910      	cbnz	r0, 2f04 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2efe:	4b28      	ldr	r3, [pc, #160]	; (2fa0 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	bb5b      	cbnz	r3, 2f5c <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    2f04:	f04f 0320 	mov.w	r3, #32
    2f08:	f3ef 8111 	mrs	r1, BASEPRI
    2f0c:	f383 8812 	msr	BASEPRI_MAX, r3
    2f10:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2f14:	6860      	ldr	r0, [r4, #4]
			key = irq_lock();
    2f16:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    2f18:	f004 fd13 	bl	7942 <is_tx_ready.isra.0>
    2f1c:	b1c8      	cbz	r0, 2f52 <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    2f1e:	68f3      	ldr	r3, [r6, #12]
    2f20:	b15b      	cbz	r3, 2f3a <uarte_nrfx_poll_out+0x4a>
    2f22:	68da      	ldr	r2, [r3, #12]
    2f24:	b14a      	cbz	r2, 2f3a <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    2f26:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    2f2a:	2a00      	cmp	r2, #0
    2f2c:	da05      	bge.n	2f3a <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    2f2e:	6862      	ldr	r2, [r4, #4]
    2f30:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    2f32:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    2f36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    2f3a:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    2f3c:	2201      	movs	r2, #1
	data->char_out = c;
    2f3e:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    2f42:	4620      	mov	r0, r4
    2f44:	f004 fbb4 	bl	76b0 <tx_start>
	__asm__ volatile(
    2f48:	f385 8811 	msr	BASEPRI, r5
    2f4c:	f3bf 8f6f 	isb	sy
}
    2f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f52:	f381 8811 	msr	BASEPRI, r1
    2f56:	f3bf 8f6f 	isb	sy
}
    2f5a:	e7d3      	b.n	2f04 <uarte_nrfx_poll_out+0x14>
{
    2f5c:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2f5e:	6860      	ldr	r0, [r4, #4]
    2f60:	f004 fcef 	bl	7942 <is_tx_ready.isra.0>
    2f64:	b948      	cbnz	r0, 2f7a <uarte_nrfx_poll_out+0x8a>
    2f66:	2001      	movs	r0, #1
    2f68:	f004 fea3 	bl	7cb2 <nrfx_busy_wait>
    2f6c:	3d01      	subs	r5, #1
    2f6e:	d1f6      	bne.n	2f5e <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
    2f70:	2100      	movs	r1, #0
    2f72:	2021      	movs	r0, #33	; 0x21
    2f74:	f003 fa54 	bl	6420 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2f78:	e7f0      	b.n	2f5c <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    2f7a:	f04f 0320 	mov.w	r3, #32
    2f7e:	f3ef 8511 	mrs	r5, BASEPRI
    2f82:	f383 8812 	msr	BASEPRI_MAX, r3
    2f86:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2f8a:	6860      	ldr	r0, [r4, #4]
    2f8c:	f004 fcd9 	bl	7942 <is_tx_ready.isra.0>
    2f90:	2800      	cmp	r0, #0
    2f92:	d1d2      	bne.n	2f3a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2f94:	f385 8811 	msr	BASEPRI, r5
    2f98:	f3bf 8f6f 	isb	sy
}
    2f9c:	e7e8      	b.n	2f70 <uarte_nrfx_poll_out+0x80>
    2f9e:	bf00      	nop
    2fa0:	20001205 	.word	0x20001205

00002fa4 <uarte_nrfx_rx_enable>:
{
    2fa4:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    2fa8:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    2fac:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    2fb0:	f8da 8000 	ldr.w	r8, [sl]
{
    2fb4:	4614      	mov	r4, r2
	if (cfg->disable_rx) {
    2fb6:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    2fba:	4606      	mov	r6, r0
    2fbc:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    2fbe:	b192      	cbz	r2, 2fe6 <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    2fc0:	4a43      	ldr	r2, [pc, #268]	; (30d0 <uarte_nrfx_rx_enable+0x12c>)
    2fc2:	4944      	ldr	r1, [pc, #272]	; (30d4 <uarte_nrfx_rx_enable+0x130>)
    2fc4:	4844      	ldr	r0, [pc, #272]	; (30d8 <uarte_nrfx_rx_enable+0x134>)
    2fc6:	f240 337f 	movw	r3, #895	; 0x37f
    2fca:	f004 fa5f 	bl	748c <assert_print>
    2fce:	4843      	ldr	r0, [pc, #268]	; (30dc <uarte_nrfx_rx_enable+0x138>)
    2fd0:	f004 fa5c 	bl	748c <assert_print>
    2fd4:	483e      	ldr	r0, [pc, #248]	; (30d0 <uarte_nrfx_rx_enable+0x12c>)
    2fd6:	f240 317f 	movw	r1, #895	; 0x37f
    2fda:	f004 fa50 	bl	747e <assert_post_action>
		return -ENOTSUP;
    2fde:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2fe2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    2fe6:	f8db 100c 	ldr.w	r1, [fp, #12]
    2fea:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    2fee:	2a00      	cmp	r2, #0
    2ff0:	d16b      	bne.n	30ca <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    2ff2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    2ff6:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    2ff8:	bfd2      	itee	le
    2ffa:	235c      	movle	r3, #92	; 0x5c
    2ffc:	2205      	movgt	r2, #5
    2ffe:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    3002:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    3006:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    3008:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    300c:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    300e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3012:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    3014:	e9c1 9418 	strd	r9, r4, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3018:	d523      	bpl.n	3062 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    301a:	f891 70d1 	ldrb.w	r7, [r1, #209]	; 0xd1
    301e:	b307      	cbz	r7, 3062 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    3020:	42a7      	cmp	r7, r4
    3022:	bf28      	it	cs
    3024:	4627      	movcs	r7, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    3026:	4648      	mov	r0, r9
    3028:	463a      	mov	r2, r7
    302a:	31cc      	adds	r1, #204	; 0xcc
    302c:	f004 fa77 	bl	751e <memcpy>
			if (!len) {
    3030:	1be4      	subs	r4, r4, r7
			buf += cpy_len;
    3032:	44b9      	add	r9, r7
			if (!len) {
    3034:	d115      	bne.n	3062 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    3036:	f8db 200c 	ldr.w	r2, [fp, #12]
    303a:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    303e:	1bdb      	subs	r3, r3, r7
    3040:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    3044:	4639      	mov	r1, r7
    3046:	4630      	mov	r0, r6
    3048:	f004 fb5f 	bl	770a <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    304c:	f8db 100c 	ldr.w	r1, [fp, #12]
    3050:	4630      	mov	r0, r6
    3052:	3160      	adds	r1, #96	; 0x60
    3054:	f004 fb72 	bl	773c <rx_buf_release>
				notify_rx_disable(dev);
    3058:	4630      	mov	r0, r6
    305a:	f004 fb87 	bl	776c <notify_rx_disable>
	return 0;
    305e:	2000      	movs	r0, #0
    3060:	e7bf      	b.n	2fe2 <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3062:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3064:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3068:	f8c8 4538 	str.w	r4, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    306c:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    3070:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    3074:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    3078:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    307c:	f8db 300c 	ldr.w	r3, [fp, #12]
    3080:	2201      	movs	r2, #1
    3082:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3086:	f8da 3004 	ldr.w	r3, [sl, #4]
    308a:	06db      	lsls	r3, r3, #27
    308c:	d519      	bpl.n	30c2 <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    308e:	f04f 0320 	mov.w	r3, #32
    3092:	f3ef 8111 	mrs	r1, BASEPRI
    3096:	f383 8812 	msr	BASEPRI_MAX, r3
    309a:	f3bf 8f6f 	isb	sy
	if (data->async) {
    309e:	6933      	ldr	r3, [r6, #16]
	const struct uarte_nrfx_config *config = dev->config;
    30a0:	6870      	ldr	r0, [r6, #4]
	if (data->async) {
    30a2:	68db      	ldr	r3, [r3, #12]
    30a4:	b12b      	cbz	r3, 30b2 <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    30a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    30aa:	f042 0202 	orr.w	r2, r2, #2
    30ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    30b2:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    30b4:	2208      	movs	r2, #8
    30b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    30ba:	f381 8811 	msr	BASEPRI, r1
    30be:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30c2:	2301      	movs	r3, #1
    30c4:	f8c8 3000 	str.w	r3, [r8]
    30c8:	e7c9      	b.n	305e <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    30ca:	f06f 000f 	mvn.w	r0, #15
    30ce:	e788      	b.n	2fe2 <uarte_nrfx_rx_enable+0x3e>
    30d0:	00008da1 	.word	0x00008da1
    30d4:	0000867f 	.word	0x0000867f
    30d8:	000085d7 	.word	0x000085d7
    30dc:	00008dd5 	.word	0x00008dd5

000030e0 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    30e0:	6843      	ldr	r3, [r0, #4]
{
    30e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    30e6:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    30e8:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    30ec:	b088      	sub	sp, #32
    30ee:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    30f0:	b171      	cbz	r1, 3110 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = dev->data;
    30f2:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30f4:	2200      	movs	r2, #0
    30f6:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    30fa:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    30fe:	68da      	ldr	r2, [r3, #12]
    3100:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    3104:	3301      	adds	r3, #1
    3106:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    310a:	b008      	add	sp, #32
    310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3110:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3114:	b313      	cbz	r3, 315c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3116:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    311a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    311e:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3122:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    3126:	2214      	movs	r2, #20
    3128:	a803      	add	r0, sp, #12
    312a:	f004 fa03 	bl	7534 <memset>
    312e:	2306      	movs	r3, #6
    3130:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    3134:	07f3      	lsls	r3, r6, #31
    3136:	f100 8100 	bmi.w	333a <uarte_nrfx_isr_async+0x25a>
    313a:	07b7      	lsls	r7, r6, #30
    313c:	f100 80ff 	bmi.w	333e <uarte_nrfx_isr_async+0x25e>
    3140:	0770      	lsls	r0, r6, #29
    3142:	f100 80fe 	bmi.w	3342 <uarte_nrfx_isr_async+0x262>
    3146:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    314a:	4620      	mov	r0, r4
    314c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    314e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    3152:	f004 fad3 	bl	76fc <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    3156:	4620      	mov	r0, r4
    3158:	f004 fb63 	bl	7822 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    315c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    3160:	b37b      	cbz	r3, 31c2 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    3162:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    3166:	06d9      	lsls	r1, r3, #27
    3168:	d52b      	bpl.n	31c2 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    316a:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    316e:	6927      	ldr	r7, [r4, #16]
    3170:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    3174:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    3178:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    317a:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    317c:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    317e:	2301      	movs	r3, #1
    3180:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    3184:	3088      	adds	r0, #136	; 0x88
    3186:	f004 fe8e 	bl	7ea6 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    318a:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    318c:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    3190:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    3194:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    3196:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    319a:	1a1b      	subs	r3, r3, r0
    319c:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    319e:	6f90      	ldr	r0, [r2, #120]	; 0x78
    31a0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    31a4:	4408      	add	r0, r1
	if (rx_len > 0) {
    31a6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    31a8:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    31aa:	dd02      	ble.n	31b2 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    31ac:	4620      	mov	r0, r4
    31ae:	f004 faac 	bl	770a <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    31b2:	68f9      	ldr	r1, [r7, #12]
    31b4:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    31b8:	2b00      	cmp	r3, #0
    31ba:	f040 80c4 	bne.w	3346 <uarte_nrfx_isr_async+0x266>
		data->async->is_in_irq = false;
    31be:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31c2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    31c6:	b37b      	cbz	r3, 3228 <uarte_nrfx_isr_async+0x148>
    31c8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    31cc:	bb66      	cbnz	r6, 3228 <uarte_nrfx_isr_async+0x148>
	struct uart_event evt = {
    31ce:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    31d0:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31d2:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    31d6:	4631      	mov	r1, r6
    31d8:	a803      	add	r0, sp, #12
    31da:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    31de:	f004 f9a9 	bl	7534 <memset>
    31e2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    31e4:	a903      	add	r1, sp, #12
    31e6:	4620      	mov	r0, r4
	struct uart_event evt = {
    31e8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    31ec:	f004 fa86 	bl	76fc <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    31f0:	68ff      	ldr	r7, [r7, #12]
    31f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    31f4:	1c5a      	adds	r2, r3, #1
    31f6:	d017      	beq.n	3228 <uarte_nrfx_isr_async+0x148>
		data->async->rx_timeout_left = data->async->rx_timeout;
    31f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    31fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3200:	4889      	ldr	r0, [pc, #548]	; (3428 <uarte_nrfx_isr_async+0x348>)
    3202:	4a8a      	ldr	r2, [pc, #552]	; (342c <uarte_nrfx_isr_async+0x34c>)
    3204:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    3208:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    320c:	4631      	mov	r1, r6
    320e:	2300      	movs	r3, #0
    3210:	fbcc 010e 	smlal	r0, r1, ip, lr
    3214:	f7fc ff74 	bl	100 <__aeabi_uldivmod>
    3218:	4602      	mov	r2, r0
    321a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    321c:	e9cd 0100 	strd	r0, r1, [sp]
    3220:	f107 0088 	add.w	r0, r7, #136	; 0x88
    3224:	f003 fdc0 	bl	6da8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3228:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    322c:	b333      	cbz	r3, 327c <uarte_nrfx_isr_async+0x19c>
    322e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    3232:	bb1e      	cbnz	r6, 327c <uarte_nrfx_isr_async+0x19c>
	struct uarte_nrfx_data *data = dev->data;
    3234:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3236:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    323a:	68f9      	ldr	r1, [r7, #12]
    323c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    3240:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    3244:	3160      	adds	r1, #96	; 0x60
    3246:	4620      	mov	r0, r4
    3248:	f004 fa78 	bl	773c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    324c:	68f9      	ldr	r1, [r7, #12]
    324e:	4620      	mov	r0, r4
    3250:	316c      	adds	r1, #108	; 0x6c
    3252:	f004 fa73 	bl	773c <rx_buf_release>
	if (data->async->rx_enabled) {
    3256:	68fb      	ldr	r3, [r7, #12]
    3258:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    325c:	2a00      	cmp	r2, #0
    325e:	f000 809f 	beq.w	33a0 <uarte_nrfx_isr_async+0x2c0>
		data->async->rx_enabled = false;
    3262:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3266:	f8d8 3004 	ldr.w	r3, [r8, #4]
    326a:	06d8      	lsls	r0, r3, #27
    326c:	d503      	bpl.n	3276 <uarte_nrfx_isr_async+0x196>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    326e:	2102      	movs	r1, #2
    3270:	4620      	mov	r0, r4
    3272:	f004 fb3f 	bl	78f4 <async_uart_release>
	notify_rx_disable(dev);
    3276:	4620      	mov	r0, r4
    3278:	f004 fa78 	bl	776c <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    327c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    3280:	b1db      	cbz	r3, 32ba <uarte_nrfx_isr_async+0x1da>
    return p_reg->INTENSET & mask;
    3282:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    3286:	05d9      	lsls	r1, r3, #23
    3288:	d517      	bpl.n	32ba <uarte_nrfx_isr_async+0x1da>
	return config->uarte_regs;
    328a:	6863      	ldr	r3, [r4, #4]
    328c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    328e:	f04f 0120 	mov.w	r1, #32
    3292:	f3ef 8211 	mrs	r2, BASEPRI
    3296:	f381 8812 	msr	BASEPRI_MAX, r1
    329a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    329e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    32a2:	b131      	cbz	r1, 32b2 <uarte_nrfx_isr_async+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32a4:	2100      	movs	r1, #0
    32a6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    32aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32ae:	2101      	movs	r1, #1
    32b0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    32b2:	f382 8811 	msr	BASEPRI, r2
    32b6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32ba:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    32be:	2b00      	cmp	r3, #0
    32c0:	f43f af23 	beq.w	310a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    32c4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    32c8:	025a      	lsls	r2, r3, #9
    32ca:	f57f af1e 	bpl.w	310a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    32ce:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    32d0:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    32d2:	e9d3 7300 	ldrd	r7, r3, [r3]
    32d6:	06db      	lsls	r3, r3, #27
    32d8:	d467      	bmi.n	33aa <uarte_nrfx_isr_async+0x2ca>
	if (!data->async->tx_buf) {
    32da:	68eb      	ldr	r3, [r5, #12]
    32dc:	689b      	ldr	r3, [r3, #8]
    32de:	2b00      	cmp	r3, #0
    32e0:	f43f af13 	beq.w	310a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    32e4:	f04f 0320 	mov.w	r3, #32
    32e8:	f3ef 8211 	mrs	r2, BASEPRI
    32ec:	f383 8812 	msr	BASEPRI_MAX, r3
    32f0:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    32f4:	68eb      	ldr	r3, [r5, #12]
    32f6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    32fa:	2900      	cmp	r1, #0
    32fc:	bfac      	ite	ge
    32fe:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    3302:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    3306:	f382 8811 	msr	BASEPRI, r2
    330a:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    330e:	68e8      	ldr	r0, [r5, #12]
    3310:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    3314:	2b00      	cmp	r3, #0
    3316:	d055      	beq.n	33c4 <uarte_nrfx_isr_async+0x2e4>
	__asm__ volatile(
    3318:	f04f 0320 	mov.w	r3, #32
    331c:	f3ef 8611 	mrs	r6, BASEPRI
    3320:	f383 8812 	msr	BASEPRI_MAX, r3
    3324:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    3328:	4629      	mov	r1, r5
    332a:	4620      	mov	r0, r4
    332c:	f004 fb19 	bl	7962 <start_tx_locked>
	__asm__ volatile(
    3330:	f386 8811 	msr	BASEPRI, r6
    3334:	f3bf 8f6f 	isb	sy
				return;
    3338:	e6e7      	b.n	310a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    333a:	2601      	movs	r6, #1
    333c:	e705      	b.n	314a <uarte_nrfx_isr_async+0x6a>
    333e:	2602      	movs	r6, #2
    3340:	e703      	b.n	314a <uarte_nrfx_isr_async+0x6a>
    3342:	2604      	movs	r6, #4
    3344:	e701      	b.n	314a <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    3346:	3160      	adds	r1, #96	; 0x60
    3348:	4620      	mov	r0, r4
    334a:	f004 f9f7 	bl	773c <rx_buf_release>
	__asm__ volatile(
    334e:	f04f 0320 	mov.w	r3, #32
    3352:	f3ef 8111 	mrs	r1, BASEPRI
    3356:	f383 8812 	msr	BASEPRI_MAX, r3
    335a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    335e:	68fb      	ldr	r3, [r7, #12]
    3360:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3362:	b1d2      	cbz	r2, 339a <uarte_nrfx_isr_async+0x2ba>
		data->async->rx_buf = data->async->rx_next_buf;
    3364:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    3366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3368:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    336a:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    336c:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    3370:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3372:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    3376:	b90b      	cbnz	r3, 337c <uarte_nrfx_isr_async+0x29c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3378:	2301      	movs	r3, #1
    337a:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    337c:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    3380:	f023 0320 	bic.w	r3, r3, #32
    3384:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    3388:	f381 8811 	msr	BASEPRI, r1
    338c:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    3390:	68fb      	ldr	r3, [r7, #12]
    3392:	2200      	movs	r2, #0
    3394:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    3398:	e713      	b.n	31c2 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    339a:	2301      	movs	r3, #1
    339c:	6073      	str	r3, [r6, #4]
}
    339e:	e7f3      	b.n	3388 <uarte_nrfx_isr_async+0x2a8>
		(void)rx_flush(dev, NULL, 0);
    33a0:	6860      	ldr	r0, [r4, #4]
    33a2:	4611      	mov	r1, r2
    33a4:	f004 fa5e 	bl	7864 <rx_flush.isra.0>
    33a8:	e75d      	b.n	3266 <uarte_nrfx_isr_async+0x186>
    p_reg->INTENCLR = mask;
    33aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    33ae:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    33b2:	2101      	movs	r1, #1
    33b4:	4620      	mov	r0, r4
    33b6:	f004 fa9d 	bl	78f4 <async_uart_release>
		if (!data->async->tx_size) {
    33ba:	68eb      	ldr	r3, [r5, #12]
    33bc:	68db      	ldr	r3, [r3, #12]
    33be:	2b00      	cmp	r3, #0
    33c0:	d18b      	bne.n	32da <uarte_nrfx_isr_async+0x1fa>
    33c2:	e6a2      	b.n	310a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    33c4:	6882      	ldr	r2, [r0, #8]
    33c6:	6903      	ldr	r3, [r0, #16]
    33c8:	429a      	cmp	r2, r3
    33ca:	d00b      	beq.n	33e4 <uarte_nrfx_isr_async+0x304>
		if (amount == data->async->xfer_len) {
    33cc:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    33ce:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    33d0:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    33d2:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    33d4:	d125      	bne.n	3422 <uarte_nrfx_isr_async+0x342>
			data->async->tx_cache_offset += amount;
    33d6:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    33d8:	f004 fa78 	bl	78cc <setup_tx_cache.isra.0>
    33dc:	2800      	cmp	r0, #0
    33de:	d19b      	bne.n	3318 <uarte_nrfx_isr_async+0x238>
			amount = data->async->tx_cache_offset;
    33e0:	68eb      	ldr	r3, [r5, #12]
    33e2:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    33e4:	68e8      	ldr	r0, [r5, #12]
    33e6:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    33e8:	f004 fd5d 	bl	7ea6 <z_impl_k_timer_stop>
	struct uart_event evt = {
    33ec:	2214      	movs	r2, #20
    33ee:	2100      	movs	r1, #0
    33f0:	a803      	add	r0, sp, #12
    33f2:	f004 f89f 	bl	7534 <memset>
		.data.tx.buf = data->async->tx_buf,
    33f6:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    33f8:	689a      	ldr	r2, [r3, #8]
    33fa:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    33fe:	68da      	ldr	r2, [r3, #12]
    3400:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    3402:	bf1c      	itt	ne
    3404:	2201      	movne	r2, #1
    3406:	f88d 200c 	strbne.w	r2, [sp, #12]
    340a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    340e:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    3412:	2200      	movs	r2, #0
    3414:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    3416:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    3418:	a903      	add	r1, sp, #12
    341a:	4620      	mov	r0, r4
    341c:	f004 f96e 	bl	76fc <user_callback>
    3420:	e673      	b.n	310a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    3422:	461e      	mov	r6, r3
    3424:	e7de      	b.n	33e4 <uarte_nrfx_isr_async+0x304>
    3426:	bf00      	nop
    3428:	000f423f 	.word	0x000f423f
    342c:	000f4240 	.word	0x000f4240

00003430 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3430:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3432:	2301      	movs	r3, #1
    3434:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3436:	4a11      	ldr	r2, [pc, #68]	; (347c <compare_int_lock+0x4c>)
    3438:	f3bf 8f5b 	dmb	ish
    343c:	43dc      	mvns	r4, r3
    343e:	e852 1f00 	ldrex	r1, [r2]
    3442:	ea01 0c04 	and.w	ip, r1, r4
    3446:	e842 ce00 	strex	lr, ip, [r2]
    344a:	f1be 0f00 	cmp.w	lr, #0
    344e:	d1f6      	bne.n	343e <compare_int_lock+0xe>
    3450:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3454:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3458:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    345c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3464:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3468:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    346c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3470:	420b      	tst	r3, r1
}
    3472:	bf14      	ite	ne
    3474:	2001      	movne	r0, #1
    3476:	2000      	moveq	r0, #0
    3478:	bd10      	pop	{r4, pc}
    347a:	bf00      	nop
    347c:	20000aa0 	.word	0x20000aa0

00003480 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3480:	4919      	ldr	r1, [pc, #100]	; (34e8 <sys_clock_timeout_handler+0x68>)
{
    3482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3484:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3486:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    348a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    348c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3490:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3494:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3496:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    349a:	d222      	bcs.n	34e2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    349c:	4b13      	ldr	r3, [pc, #76]	; (34ec <sys_clock_timeout_handler+0x6c>)
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	0a1a      	lsrs	r2, r3, #8
    34a2:	061b      	lsls	r3, r3, #24
    34a4:	195e      	adds	r6, r3, r5
    34a6:	4b12      	ldr	r3, [pc, #72]	; (34f0 <sys_clock_timeout_handler+0x70>)
    34a8:	f142 0700 	adc.w	r7, r2, #0
    34ac:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    34b0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    34b2:	f003 fab9 	bl	6a28 <sys_clock_announce>
    return p_reg->CC[ch];
    34b6:	00a3      	lsls	r3, r4, #2
    34b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    34bc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    34c0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    34c4:	42aa      	cmp	r2, r5
    34c6:	d10b      	bne.n	34e0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    34c8:	b91e      	cbnz	r6, 34d2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    34ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    34ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    34d2:	4b08      	ldr	r3, [pc, #32]	; (34f4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    34d8:	fa00 f404 	lsl.w	r4, r0, r4
    34dc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    34e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    34e2:	2600      	movs	r6, #0
    34e4:	e7e5      	b.n	34b2 <sys_clock_timeout_handler+0x32>
    34e6:	bf00      	nop
    34e8:	20000390 	.word	0x20000390
    34ec:	20000aa4 	.word	0x20000aa4
    34f0:	20000378 	.word	0x20000378
    34f4:	40011000 	.word	0x40011000

000034f8 <compare_int_unlock>:
	if (key) {
    34f8:	b319      	cbz	r1, 3542 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34fa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    34fe:	2301      	movs	r3, #1
    3500:	4a10      	ldr	r2, [pc, #64]	; (3544 <compare_int_unlock+0x4c>)
    3502:	4083      	lsls	r3, r0
    3504:	e852 1f00 	ldrex	r1, [r2]
    3508:	4319      	orrs	r1, r3
    350a:	e842 1c00 	strex	ip, r1, [r2]
    350e:	f1bc 0f00 	cmp.w	ip, #0
    3512:	d1f7      	bne.n	3504 <compare_int_unlock+0xc>
    3514:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3518:	4a0b      	ldr	r2, [pc, #44]	; (3548 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    351a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    351e:	4083      	lsls	r3, r0
    3520:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3524:	4b09      	ldr	r3, [pc, #36]	; (354c <compare_int_unlock+0x54>)
    3526:	f3bf 8f5b 	dmb	ish
    352a:	681b      	ldr	r3, [r3, #0]
    352c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3530:	fa23 f000 	lsr.w	r0, r3, r0
    3534:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3536:	bf42      	ittt	mi
    3538:	4b05      	ldrmi	r3, [pc, #20]	; (3550 <compare_int_unlock+0x58>)
    353a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    353e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3542:	4770      	bx	lr
    3544:	20000aa0 	.word	0x20000aa0
    3548:	40011000 	.word	0x40011000
    354c:	20000a9c 	.word	0x20000a9c
    3550:	e000e100 	.word	0xe000e100

00003554 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3554:	4b0d      	ldr	r3, [pc, #52]	; (358c <z_nrf_rtc_timer_read+0x38>)
    3556:	6818      	ldr	r0, [r3, #0]
    3558:	0a01      	lsrs	r1, r0, #8
    355a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    355c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3560:	4b0b      	ldr	r3, [pc, #44]	; (3590 <z_nrf_rtc_timer_read+0x3c>)
    3562:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3566:	1818      	adds	r0, r3, r0
    3568:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    356c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3570:	d20a      	bcs.n	3588 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3572:	4b08      	ldr	r3, [pc, #32]	; (3594 <z_nrf_rtc_timer_read+0x40>)
    3574:	e9d3 2300 	ldrd	r2, r3, [r3]
    3578:	4290      	cmp	r0, r2
    357a:	eb71 0303 	sbcs.w	r3, r1, r3
    357e:	d203      	bcs.n	3588 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3580:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3584:	f141 0100 	adc.w	r1, r1, #0
}
    3588:	4770      	bx	lr
    358a:	bf00      	nop
    358c:	20000aa4 	.word	0x20000aa4
    3590:	40011000 	.word	0x40011000
    3594:	20000378 	.word	0x20000378

00003598 <compare_set>:
{
    3598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    359c:	b085      	sub	sp, #20
    359e:	4616      	mov	r6, r2
    35a0:	4698      	mov	r8, r3
    35a2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    35a4:	f7ff ff44 	bl	3430 <compare_int_lock>
    35a8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    35aa:	f7ff ffd3 	bl	3554 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    35ae:	42b0      	cmp	r0, r6
    35b0:	eb71 0308 	sbcs.w	r3, r1, r8
    35b4:	d278      	bcs.n	36a8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    35b6:	4b46      	ldr	r3, [pc, #280]	; (36d0 <compare_set+0x138>)
    35b8:	1a30      	subs	r0, r6, r0
    35ba:	eb68 0101 	sbc.w	r1, r8, r1
    35be:	4298      	cmp	r0, r3
    35c0:	f171 0300 	sbcs.w	r3, r1, #0
    35c4:	f080 8081 	bcs.w	36ca <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    35c8:	4b42      	ldr	r3, [pc, #264]	; (36d4 <compare_set+0x13c>)
    35ca:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    35ce:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    35d2:	45d8      	cmp	r8, fp
    35d4:	bf08      	it	eq
    35d6:	4556      	cmpeq	r6, sl
    35d8:	d051      	beq.n	367e <compare_set+0xe6>
    35da:	ea4f 0985 	mov.w	r9, r5, lsl #2
    35de:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    35e2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    35e6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    35ea:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35ec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    35f0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35f4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    35f6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    35fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35fe:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3600:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3604:	4b34      	ldr	r3, [pc, #208]	; (36d8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3606:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    360a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    360c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3610:	1a40      	subs	r0, r0, r1
    3612:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3616:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    361a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    361c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3620:	d107      	bne.n	3632 <compare_set+0x9a>
    3622:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3626:	2013      	movs	r0, #19
    3628:	f004 fc2d 	bl	7e86 <z_impl_k_busy_wait>
    362c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3630:	4b29      	ldr	r3, [pc, #164]	; (36d8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3632:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3636:	eba4 000c 	sub.w	r0, r4, ip
    363a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    363e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3642:	bf88      	it	hi
    3644:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3646:	2000      	movs	r0, #0
    3648:	6038      	str	r0, [r7, #0]
    364a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    364c:	9801      	ldr	r0, [sp, #4]
    364e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3652:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3656:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    365a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    365e:	4281      	cmp	r1, r0
    3660:	d006      	beq.n	3670 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3662:	1a20      	subs	r0, r4, r0
    3664:	3802      	subs	r0, #2
    3666:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    366a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    366e:	d819      	bhi.n	36a4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3670:	1aa4      	subs	r4, r4, r2
    3672:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3676:	eb14 0a06 	adds.w	sl, r4, r6
    367a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    367e:	4915      	ldr	r1, [pc, #84]	; (36d4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3680:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3682:	012b      	lsls	r3, r5, #4
    3684:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3688:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    368c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    368e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3690:	6053      	str	r3, [r2, #4]
	return ret;
    3692:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3694:	4628      	mov	r0, r5
    3696:	9900      	ldr	r1, [sp, #0]
    3698:	f7ff ff2e 	bl	34f8 <compare_int_unlock>
}
    369c:	4620      	mov	r0, r4
    369e:	b005      	add	sp, #20
    36a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36a4:	4620      	mov	r0, r4
    36a6:	e7b1      	b.n	360c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    36a8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36aa:	4a0c      	ldr	r2, [pc, #48]	; (36dc <compare_set+0x144>)
    36ac:	f3bf 8f5b 	dmb	ish
    36b0:	40ab      	lsls	r3, r5
    36b2:	e852 1f00 	ldrex	r1, [r2]
    36b6:	4319      	orrs	r1, r3
    36b8:	e842 1000 	strex	r0, r1, [r2]
    36bc:	2800      	cmp	r0, #0
    36be:	d1f8      	bne.n	36b2 <compare_set+0x11a>
    36c0:	f3bf 8f5b 	dmb	ish
    36c4:	46b2      	mov	sl, r6
    36c6:	46c3      	mov	fp, r8
    36c8:	e7d9      	b.n	367e <compare_set+0xe6>
			return -EINVAL;
    36ca:	f06f 0415 	mvn.w	r4, #21
    36ce:	e7e1      	b.n	3694 <compare_set+0xfc>
    36d0:	01000001 	.word	0x01000001
    36d4:	20000380 	.word	0x20000380
    36d8:	40011000 	.word	0x40011000
    36dc:	20000a9c 	.word	0x20000a9c

000036e0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    36e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    36e2:	4b19      	ldr	r3, [pc, #100]	; (3748 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    36e4:	4d19      	ldr	r5, [pc, #100]	; (374c <sys_clock_driver_init+0x6c>)
    36e6:	2400      	movs	r4, #0
    36e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    36f0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    36f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    36f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    36fc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3700:	4b13      	ldr	r3, [pc, #76]	; (3750 <sys_clock_driver_init+0x70>)
    3702:	2602      	movs	r6, #2
    3704:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3708:	2101      	movs	r1, #1
    370a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    370e:	2011      	movs	r0, #17
    3710:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3714:	4622      	mov	r2, r4
    3716:	f7fe f945 	bl	19a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    371a:	2011      	movs	r0, #17
    371c:	f7fe f924 	bl	1968 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3720:	4a0c      	ldr	r2, [pc, #48]	; (3754 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3722:	2301      	movs	r3, #1
    3724:	60ab      	str	r3, [r5, #8]
    3726:	602b      	str	r3, [r5, #0]
    3728:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    372a:	4b0b      	ldr	r3, [pc, #44]	; (3758 <sys_clock_driver_init+0x78>)
    372c:	4a0b      	ldr	r2, [pc, #44]	; (375c <sys_clock_driver_init+0x7c>)
    372e:	9300      	str	r3, [sp, #0]
    3730:	9401      	str	r4, [sp, #4]
    3732:	2300      	movs	r3, #0
    3734:	4620      	mov	r0, r4
    3736:	f7ff ff2f 	bl	3598 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    373a:	4630      	mov	r0, r6
    373c:	f7fe ff42 	bl	25c4 <z_nrf_clock_control_lf_on>

	return 0;
}
    3740:	4620      	mov	r0, r4
    3742:	b002      	add	sp, #8
    3744:	bd70      	pop	{r4, r5, r6, pc}
    3746:	bf00      	nop
    3748:	20000380 	.word	0x20000380
    374c:	40011000 	.word	0x40011000
    3750:	e000e100 	.word	0xe000e100
    3754:	20000aa0 	.word	0x20000aa0
    3758:	00003481 	.word	0x00003481
    375c:	007fffff 	.word	0x007fffff

00003760 <rtc_nrf_isr>:
{
    3760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3764:	4c35      	ldr	r4, [pc, #212]	; (383c <rtc_nrf_isr+0xdc>)
    3766:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    376a:	079a      	lsls	r2, r3, #30
    376c:	d50b      	bpl.n	3786 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    376e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3772:	b143      	cbz	r3, 3786 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3774:	4a32      	ldr	r2, [pc, #200]	; (3840 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3776:	2300      	movs	r3, #0
    3778:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    377c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3780:	6813      	ldr	r3, [r2, #0]
    3782:	3301      	adds	r3, #1
    3784:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3786:	f04f 0320 	mov.w	r3, #32
    378a:	f3ef 8211 	mrs	r2, BASEPRI
    378e:	f383 8812 	msr	BASEPRI_MAX, r3
    3792:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3796:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    379a:	03db      	lsls	r3, r3, #15
    379c:	d512      	bpl.n	37c4 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    379e:	f3bf 8f5b 	dmb	ish
    37a2:	4b28      	ldr	r3, [pc, #160]	; (3844 <rtc_nrf_isr+0xe4>)
    37a4:	e853 1f00 	ldrex	r1, [r3]
    37a8:	f021 0001 	bic.w	r0, r1, #1
    37ac:	e843 0600 	strex	r6, r0, [r3]
    37b0:	2e00      	cmp	r6, #0
    37b2:	d1f7      	bne.n	37a4 <rtc_nrf_isr+0x44>
    37b4:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    37b8:	2900      	cmp	r1, #0
    37ba:	d136      	bne.n	382a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37bc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    37c0:	2b00      	cmp	r3, #0
    37c2:	d132      	bne.n	382a <rtc_nrf_isr+0xca>
{
    37c4:	2300      	movs	r3, #0
	__asm__ volatile(
    37c6:	f382 8811 	msr	BASEPRI, r2
    37ca:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    37ce:	b34b      	cbz	r3, 3824 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    37d0:	f7ff fec0 	bl	3554 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    37d4:	f04f 0320 	mov.w	r3, #32
    37d8:	f3ef 8c11 	mrs	ip, BASEPRI
    37dc:	f383 8812 	msr	BASEPRI_MAX, r3
    37e0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    37e4:	4b18      	ldr	r3, [pc, #96]	; (3848 <rtc_nrf_isr+0xe8>)
    37e6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    37ea:	42b0      	cmp	r0, r6
    37ec:	eb71 0207 	sbcs.w	r2, r1, r7
    37f0:	f04f 0200 	mov.w	r2, #0
    37f4:	d320      	bcc.n	3838 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    37f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    37fa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    37fe:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3802:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3806:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    380c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3810:	f38c 8811 	msr	BASEPRI, ip
    3814:	f3bf 8f6f 	isb	sy
		if (handler) {
    3818:	b121      	cbz	r1, 3824 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    381a:	9500      	str	r5, [sp, #0]
    381c:	4632      	mov	r2, r6
    381e:	463b      	mov	r3, r7
    3820:	2000      	movs	r0, #0
    3822:	4788      	blx	r1
}
    3824:	b003      	add	sp, #12
    3826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    382a:	2300      	movs	r3, #0
    382c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3830:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3834:	2301      	movs	r3, #1
}
    3836:	e7c6      	b.n	37c6 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3838:	4611      	mov	r1, r2
    383a:	e7e9      	b.n	3810 <rtc_nrf_isr+0xb0>
    383c:	40011000 	.word	0x40011000
    3840:	20000aa4 	.word	0x20000aa4
    3844:	20000a9c 	.word	0x20000a9c
    3848:	20000380 	.word	0x20000380

0000384c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    384c:	1c43      	adds	r3, r0, #1
{
    384e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3850:	d021      	beq.n	3896 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3852:	2801      	cmp	r0, #1
    3854:	dd21      	ble.n	389a <sys_clock_set_timeout+0x4e>
    3856:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    385a:	da20      	bge.n	389e <sys_clock_set_timeout+0x52>
    385c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    385e:	f7ff fe79 	bl	3554 <z_nrf_rtc_timer_read>
    3862:	4b10      	ldr	r3, [pc, #64]	; (38a4 <sys_clock_set_timeout+0x58>)
    3864:	e9d3 1300 	ldrd	r1, r3, [r3]
    3868:	1a40      	subs	r0, r0, r1
		ticks = 0;
    386a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    386e:	bf28      	it	cs
    3870:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3872:	3001      	adds	r0, #1
    3874:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3876:	480c      	ldr	r0, [pc, #48]	; (38a8 <sys_clock_set_timeout+0x5c>)
    3878:	4282      	cmp	r2, r0
    387a:	bf28      	it	cs
    387c:	4602      	movcs	r2, r0
    387e:	1852      	adds	r2, r2, r1
    3880:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3884:	4909      	ldr	r1, [pc, #36]	; (38ac <sys_clock_set_timeout+0x60>)
    3886:	9001      	str	r0, [sp, #4]
    3888:	9100      	str	r1, [sp, #0]
    388a:	f143 0300 	adc.w	r3, r3, #0
    388e:	f7ff fe83 	bl	3598 <compare_set>
}
    3892:	b002      	add	sp, #8
    3894:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3896:	4804      	ldr	r0, [pc, #16]	; (38a8 <sys_clock_set_timeout+0x5c>)
    3898:	e7e0      	b.n	385c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    389a:	2400      	movs	r4, #0
    389c:	e7df      	b.n	385e <sys_clock_set_timeout+0x12>
    389e:	4c02      	ldr	r4, [pc, #8]	; (38a8 <sys_clock_set_timeout+0x5c>)
    38a0:	e7dd      	b.n	385e <sys_clock_set_timeout+0x12>
    38a2:	bf00      	nop
    38a4:	20000390 	.word	0x20000390
    38a8:	007fffff 	.word	0x007fffff
    38ac:	00003481 	.word	0x00003481

000038b0 <sys_clock_elapsed>:
{
    38b0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    38b2:	f7ff fe4f 	bl	3554 <z_nrf_rtc_timer_read>
    38b6:	4b02      	ldr	r3, [pc, #8]	; (38c0 <sys_clock_elapsed+0x10>)
    38b8:	681b      	ldr	r3, [r3, #0]
}
    38ba:	1ac0      	subs	r0, r0, r3
    38bc:	bd08      	pop	{r3, pc}
    38be:	bf00      	nop
    38c0:	20000390 	.word	0x20000390

000038c4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38c4:	6802      	ldr	r2, [r0, #0]
    switch (port)
    38c6:	0953      	lsrs	r3, r2, #5
{
    38c8:	b510      	push	{r4, lr}
    38ca:	4604      	mov	r4, r0
    switch (port)
    38cc:	d02c      	beq.n	3928 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    38ce:	2b01      	cmp	r3, #1
    38d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    38d4:	bf18      	it	ne
    38d6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    38d8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    38dc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38de:	07db      	lsls	r3, r3, #31
    38e0:	d40b      	bmi.n	38fa <nrf_gpio_pin_port_decode+0x36>
    38e2:	4914      	ldr	r1, [pc, #80]	; (3934 <nrf_gpio_pin_port_decode+0x70>)
    38e4:	4814      	ldr	r0, [pc, #80]	; (3938 <nrf_gpio_pin_port_decode+0x74>)
    38e6:	4a15      	ldr	r2, [pc, #84]	; (393c <nrf_gpio_pin_port_decode+0x78>)
    38e8:	f240 2329 	movw	r3, #553	; 0x229
    38ec:	f003 fdce 	bl	748c <assert_print>
    38f0:	4812      	ldr	r0, [pc, #72]	; (393c <nrf_gpio_pin_port_decode+0x78>)
    38f2:	f240 2129 	movw	r1, #553	; 0x229
    38f6:	f003 fdc2 	bl	747e <assert_post_action>
    uint32_t pin_number = *p_pin;
    38fa:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    38fc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3900:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3902:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3904:	d00d      	beq.n	3922 <nrf_gpio_pin_port_decode+0x5e>
    3906:	2b01      	cmp	r3, #1
    3908:	d011      	beq.n	392e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    390a:	490d      	ldr	r1, [pc, #52]	; (3940 <nrf_gpio_pin_port_decode+0x7c>)
    390c:	480a      	ldr	r0, [pc, #40]	; (3938 <nrf_gpio_pin_port_decode+0x74>)
    390e:	4a0b      	ldr	r2, [pc, #44]	; (393c <nrf_gpio_pin_port_decode+0x78>)
    3910:	f240 232e 	movw	r3, #558	; 0x22e
    3914:	f003 fdba 	bl	748c <assert_print>
    3918:	4808      	ldr	r0, [pc, #32]	; (393c <nrf_gpio_pin_port_decode+0x78>)
    391a:	f240 212e 	movw	r1, #558	; 0x22e
    391e:	f003 fdae 	bl	747e <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3922:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3926:	bd10      	pop	{r4, pc}
    switch (port)
    3928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    392c:	e7d4      	b.n	38d8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    392e:	4805      	ldr	r0, [pc, #20]	; (3944 <nrf_gpio_pin_port_decode+0x80>)
    3930:	e7f9      	b.n	3926 <nrf_gpio_pin_port_decode+0x62>
    3932:	bf00      	nop
    3934:	00008d64 	.word	0x00008d64
    3938:	000085d7 	.word	0x000085d7
    393c:	00008d31 	.word	0x00008d31
    3940:	0000867f 	.word	0x0000867f
    3944:	50000300 	.word	0x50000300

00003948 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    394c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3950:	2a08      	cmp	r2, #8
    3952:	d106      	bne.n	3962 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3954:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3958:	2b05      	cmp	r3, #5
    395a:	d802      	bhi.n	3962 <nrf52_errata_103+0x1a>
    395c:	4a02      	ldr	r2, [pc, #8]	; (3968 <nrf52_errata_103+0x20>)
    395e:	5cd0      	ldrb	r0, [r2, r3]
    3960:	4770      	bx	lr
        return false;
    3962:	2000      	movs	r0, #0
}
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	00008dfb 	.word	0x00008dfb

0000396c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    396c:	4a02      	ldr	r2, [pc, #8]	; (3978 <nvmc_wait+0xc>)
    396e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3972:	2b00      	cmp	r3, #0
    3974:	d0fb      	beq.n	396e <nvmc_wait+0x2>
}
    3976:	4770      	bx	lr
    3978:	4001e000 	.word	0x4001e000

0000397c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    397c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    397e:	f004 f98e 	bl	7c9e <nrf52_errata_136>
    3982:	b140      	cbz	r0, 3996 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3988:	2200      	movs	r2, #0
    398a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    398e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3992:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3996:	f004 f982 	bl	7c9e <nrf52_errata_136>
    399a:	2800      	cmp	r0, #0
    399c:	d046      	beq.n	3a2c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    39a2:	4b60      	ldr	r3, [pc, #384]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    39a4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    39a8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    39ac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    39b0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    39b4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    39b8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    39bc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    39c0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    39c4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    39c8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    39cc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    39d0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    39d4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    39d8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    39dc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    39e0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    39e4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    39e8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    39ec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    39f0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    39f4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    39f8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    39fc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3a00:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3a04:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3a08:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3a0c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3a10:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3a14:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3a18:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3a1c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3a20:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3a24:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3a28:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3a2c:	f7ff ff8c 	bl	3948 <nrf52_errata_103>
    3a30:	b118      	cbz	r0, 3a3a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3a32:	4b3d      	ldr	r3, [pc, #244]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3a34:	4a3d      	ldr	r2, [pc, #244]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a36:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3a3a:	f7ff ff85 	bl	3948 <nrf52_errata_103>
    3a3e:	b118      	cbz	r0, 3a48 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3a40:	4b3b      	ldr	r3, [pc, #236]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3a42:	22fb      	movs	r2, #251	; 0xfb
    3a44:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3a48:	f7ff ff7e 	bl	3948 <nrf52_errata_103>
    3a4c:	b170      	cbz	r0, 3a6c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3a4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3a56:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3a5a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3a5e:	f022 020f 	bic.w	r2, r2, #15
    3a62:	f003 030f 	and.w	r3, r3, #15
    3a66:	4313      	orrs	r3, r2
    3a68:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3a6c:	f7ff ff6c 	bl	3948 <nrf52_errata_103>
    3a70:	b120      	cbz	r0, 3a7c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3a72:	4b30      	ldr	r3, [pc, #192]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a74:	f44f 7200 	mov.w	r2, #512	; 0x200
    3a78:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3a7c:	f004 f90f 	bl	7c9e <nrf52_errata_136>
    3a80:	b148      	cbz	r0, 3a96 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a86:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3a8a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3a8c:	bf44      	itt	mi
    3a8e:	f06f 0201 	mvnmi.w	r2, #1
    3a92:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3a96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3a9a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3a9e:	2a08      	cmp	r2, #8
    3aa0:	d10e      	bne.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3aa2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    3aa6:	2b05      	cmp	r3, #5
    3aa8:	d802      	bhi.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3aaa:	4a23      	ldr	r2, [pc, #140]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3aac:	5cd3      	ldrb	r3, [r2, r3]
    3aae:	b13b      	cbz	r3, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3ab0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3ab4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3abc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ac0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3ac8:	2a00      	cmp	r2, #0
    3aca:	db03      	blt.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3acc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	da22      	bge.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3ad4:	4919      	ldr	r1, [pc, #100]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3ad6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3ad8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3adc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3ae0:	2412      	movs	r4, #18
    nvmc_wait();
    3ae2:	f7ff ff43 	bl	396c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3ae6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3aea:	f7ff ff3f 	bl	396c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3aee:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3af2:	f7ff ff3b 	bl	396c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3af6:	2300      	movs	r3, #0
    3af8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3afc:	f7ff ff36 	bl	396c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3b00:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3b04:	490e      	ldr	r1, [pc, #56]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3b06:	4b0f      	ldr	r3, [pc, #60]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3b08:	68ca      	ldr	r2, [r1, #12]
    3b0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3b0e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3b10:	60cb      	str	r3, [r1, #12]
    3b12:	f3bf 8f4f 	dsb	sy
    __NOP();
    3b16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3b18:	e7fd      	b.n	3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3b1a:	4b0b      	ldr	r3, [pc, #44]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b1c:	4a0b      	ldr	r2, [pc, #44]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3b1e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3b20:	bd10      	pop	{r4, pc}
    3b22:	bf00      	nop
    3b24:	4000c000 	.word	0x4000c000
    3b28:	40005000 	.word	0x40005000
    3b2c:	00038148 	.word	0x00038148
    3b30:	4000f000 	.word	0x4000f000
    3b34:	40029000 	.word	0x40029000
    3b38:	00008df5 	.word	0x00008df5
    3b3c:	4001e000 	.word	0x4001e000
    3b40:	e000ed00 	.word	0xe000ed00
    3b44:	05fa0004 	.word	0x05fa0004
    3b48:	2000005c 	.word	0x2000005c
    3b4c:	03d09000 	.word	0x03d09000

00003b50 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3b50:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3b52:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3b54:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3b56:	fab2 f382 	clz	r3, r2
    3b5a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    3b5e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    3b60:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    3b62:	d014      	beq.n	3b8e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3b64:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3b68:	fa05 f303 	lsl.w	r3, r5, r3
    3b6c:	ea22 0303 	bic.w	r3, r2, r3
    3b70:	e850 6f00 	ldrex	r6, [r0]
    3b74:	4296      	cmp	r6, r2
    3b76:	d104      	bne.n	3b82 <nrfx_flag32_alloc+0x32>
    3b78:	e840 3c00 	strex	ip, r3, [r0]
    3b7c:	f1bc 0f00 	cmp.w	ip, #0
    3b80:	d1f6      	bne.n	3b70 <nrfx_flag32_alloc+0x20>
    3b82:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3b86:	d1e5      	bne.n	3b54 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3b88:	4802      	ldr	r0, [pc, #8]	; (3b94 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3b8a:	700c      	strb	r4, [r1, #0]
}
    3b8c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3b8e:	4802      	ldr	r0, [pc, #8]	; (3b98 <nrfx_flag32_alloc+0x48>)
    3b90:	e7fc      	b.n	3b8c <nrfx_flag32_alloc+0x3c>
    3b92:	bf00      	nop
    3b94:	0bad0000 	.word	0x0bad0000
    3b98:	0bad0002 	.word	0x0bad0002

00003b9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3b9c:	6803      	ldr	r3, [r0, #0]
    3b9e:	40cb      	lsrs	r3, r1
    3ba0:	07db      	lsls	r3, r3, #31
{
    3ba2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3ba4:	d415      	bmi.n	3bd2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3ba6:	2301      	movs	r3, #1
    3ba8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3bac:	6803      	ldr	r3, [r0, #0]
    3bae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3bb2:	ea41 0203 	orr.w	r2, r1, r3
    3bb6:	e850 4f00 	ldrex	r4, [r0]
    3bba:	429c      	cmp	r4, r3
    3bbc:	d104      	bne.n	3bc8 <nrfx_flag32_free+0x2c>
    3bbe:	e840 2c00 	strex	ip, r2, [r0]
    3bc2:	f1bc 0f00 	cmp.w	ip, #0
    3bc6:	d1f6      	bne.n	3bb6 <nrfx_flag32_free+0x1a>
    3bc8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3bcc:	d1ee      	bne.n	3bac <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3bce:	4802      	ldr	r0, [pc, #8]	; (3bd8 <nrfx_flag32_free+0x3c>)
}
    3bd0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3bd2:	4802      	ldr	r0, [pc, #8]	; (3bdc <nrfx_flag32_free+0x40>)
    3bd4:	e7fc      	b.n	3bd0 <nrfx_flag32_free+0x34>
    3bd6:	bf00      	nop
    3bd8:	0bad0000 	.word	0x0bad0000
    3bdc:	0bad0004 	.word	0x0bad0004

00003be0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3be2:	4604      	mov	r4, r0
    3be4:	b170      	cbz	r0, 3c04 <clock_stop+0x24>
    3be6:	2801      	cmp	r0, #1
    3be8:	d031      	beq.n	3c4e <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3bea:	4931      	ldr	r1, [pc, #196]	; (3cb0 <clock_stop+0xd0>)
    3bec:	4831      	ldr	r0, [pc, #196]	; (3cb4 <clock_stop+0xd4>)
    3bee:	4a32      	ldr	r2, [pc, #200]	; (3cb8 <clock_stop+0xd8>)
    3bf0:	23d8      	movs	r3, #216	; 0xd8
    3bf2:	f003 fc4b 	bl	748c <assert_print>
    3bf6:	4830      	ldr	r0, [pc, #192]	; (3cb8 <clock_stop+0xd8>)
    3bf8:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3bfa:	b003      	add	sp, #12
    3bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    3c00:	f003 bc3d 	b.w	747e <assert_post_action>
    p_reg->INTENCLR = mask;
    3c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c08:	2202      	movs	r2, #2
    3c0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c0e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3c12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c16:	2201      	movs	r2, #1
    3c18:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3c1a:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3c1c:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3c1e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3c22:	bf14      	ite	ne
    3c24:	2500      	movne	r5, #0
    3c26:	f10d 0507 	addeq.w	r5, sp, #7
    3c2a:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3c2e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3c32:	b1bc      	cbz	r4, 3c64 <clock_stop+0x84>
    3c34:	2c01      	cmp	r4, #1
    3c36:	d02c      	beq.n	3c92 <clock_stop+0xb2>
            NRFX_ASSERT(0);
    3c38:	491d      	ldr	r1, [pc, #116]	; (3cb0 <clock_stop+0xd0>)
    3c3a:	481e      	ldr	r0, [pc, #120]	; (3cb4 <clock_stop+0xd4>)
    3c3c:	4a1f      	ldr	r2, [pc, #124]	; (3cbc <clock_stop+0xdc>)
    3c3e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3c42:	f003 fc23 	bl	748c <assert_print>
    3c46:	481d      	ldr	r0, [pc, #116]	; (3cbc <clock_stop+0xdc>)
    3c48:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3c4c:	e7d5      	b.n	3bfa <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    3c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c52:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3c54:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3c5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c60:	6058      	str	r0, [r3, #4]
}
    3c62:	e7da      	b.n	3c1a <clock_stop+0x3a>
            if (p_clk_src != NULL)
    3c64:	b125      	cbz	r5, 3c70 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3c66:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3c6a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3c6e:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3c70:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3c74:	03da      	lsls	r2, r3, #15
    3c76:	d519      	bpl.n	3cac <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3c78:	b11d      	cbz	r5, 3c82 <clock_stop+0xa2>
    3c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3c7e:	2b01      	cmp	r3, #1
    3c80:	d104      	bne.n	3c8c <clock_stop+0xac>
    3c82:	2001      	movs	r0, #1
    3c84:	f004 f815 	bl	7cb2 <nrfx_busy_wait>
    3c88:	3f01      	subs	r7, #1
    3c8a:	d1d2      	bne.n	3c32 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3c8c:	2c01      	cmp	r4, #1
    3c8e:	d00a      	beq.n	3ca6 <clock_stop+0xc6>
    3c90:	e00c      	b.n	3cac <clock_stop+0xcc>
            if (p_clk_src != NULL)
    3c92:	b125      	cbz	r5, 3c9e <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3c94:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3c98:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3c9c:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3c9e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3ca2:	03db      	lsls	r3, r3, #15
    3ca4:	d4e8      	bmi.n	3c78 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    3ca6:	4b06      	ldr	r3, [pc, #24]	; (3cc0 <clock_stop+0xe0>)
    3ca8:	2200      	movs	r2, #0
    3caa:	715a      	strb	r2, [r3, #5]
}
    3cac:	b003      	add	sp, #12
    3cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cb0:	0000867f 	.word	0x0000867f
    3cb4:	000085d7 	.word	0x000085d7
    3cb8:	00008e01 	.word	0x00008e01
    3cbc:	00008e3e 	.word	0x00008e3e
    3cc0:	20000aa8 	.word	0x20000aa8

00003cc4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3cc4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3cc6:	4604      	mov	r4, r0
    3cc8:	b958      	cbnz	r0, 3ce2 <nrfx_clock_init+0x1e>
    3cca:	490b      	ldr	r1, [pc, #44]	; (3cf8 <nrfx_clock_init+0x34>)
    3ccc:	480b      	ldr	r0, [pc, #44]	; (3cfc <nrfx_clock_init+0x38>)
    3cce:	4a0c      	ldr	r2, [pc, #48]	; (3d00 <nrfx_clock_init+0x3c>)
    3cd0:	f240 1315 	movw	r3, #277	; 0x115
    3cd4:	f003 fbda 	bl	748c <assert_print>
    3cd8:	4809      	ldr	r0, [pc, #36]	; (3d00 <nrfx_clock_init+0x3c>)
    3cda:	f240 1115 	movw	r1, #277	; 0x115
    3cde:	f003 fbce 	bl	747e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3ce2:	4b08      	ldr	r3, [pc, #32]	; (3d04 <nrfx_clock_init+0x40>)
    3ce4:	791a      	ldrb	r2, [r3, #4]
    3ce6:	b922      	cbnz	r2, 3cf2 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3ce8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3cea:	4807      	ldr	r0, [pc, #28]	; (3d08 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    3cec:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3cee:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3cf0:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3cf2:	4806      	ldr	r0, [pc, #24]	; (3d0c <nrfx_clock_init+0x48>)
    return err_code;
    3cf4:	e7fc      	b.n	3cf0 <nrfx_clock_init+0x2c>
    3cf6:	bf00      	nop
    3cf8:	00008e72 	.word	0x00008e72
    3cfc:	000085d7 	.word	0x000085d7
    3d00:	00008e01 	.word	0x00008e01
    3d04:	20000aa8 	.word	0x20000aa8
    3d08:	0bad0000 	.word	0x0bad0000
    3d0c:	0bad000c 	.word	0x0bad000c

00003d10 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3d10:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d12:	4b0d      	ldr	r3, [pc, #52]	; (3d48 <nrfx_clock_enable+0x38>)
    3d14:	791b      	ldrb	r3, [r3, #4]
    3d16:	b95b      	cbnz	r3, 3d30 <nrfx_clock_enable+0x20>
    3d18:	490c      	ldr	r1, [pc, #48]	; (3d4c <nrfx_clock_enable+0x3c>)
    3d1a:	480d      	ldr	r0, [pc, #52]	; (3d50 <nrfx_clock_enable+0x40>)
    3d1c:	4a0d      	ldr	r2, [pc, #52]	; (3d54 <nrfx_clock_enable+0x44>)
    3d1e:	f44f 7397 	mov.w	r3, #302	; 0x12e
    3d22:	f003 fbb3 	bl	748c <assert_print>
    3d26:	480b      	ldr	r0, [pc, #44]	; (3d54 <nrfx_clock_enable+0x44>)
    3d28:	f44f 7197 	mov.w	r1, #302	; 0x12e
    3d2c:	f003 fba7 	bl	747e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3d30:	2000      	movs	r0, #0
    3d32:	f7fd fe29 	bl	1988 <arch_irq_is_enabled>
    3d36:	b908      	cbnz	r0, 3d3c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3d38:	f7fd fe16 	bl	1968 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d40:	2200      	movs	r2, #0
    3d42:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3d46:	bd08      	pop	{r3, pc}
    3d48:	20000aa8 	.word	0x20000aa8
    3d4c:	00008e80 	.word	0x00008e80
    3d50:	000085d7 	.word	0x000085d7
    3d54:	00008e01 	.word	0x00008e01

00003d58 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d58:	4b2c      	ldr	r3, [pc, #176]	; (3e0c <nrfx_clock_start+0xb4>)
    3d5a:	791b      	ldrb	r3, [r3, #4]
{
    3d5c:	b510      	push	{r4, lr}
    3d5e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d60:	b95b      	cbnz	r3, 3d7a <nrfx_clock_start+0x22>
    3d62:	492b      	ldr	r1, [pc, #172]	; (3e10 <nrfx_clock_start+0xb8>)
    3d64:	482b      	ldr	r0, [pc, #172]	; (3e14 <nrfx_clock_start+0xbc>)
    3d66:	4a2c      	ldr	r2, [pc, #176]	; (3e18 <nrfx_clock_start+0xc0>)
    3d68:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3d6c:	f003 fb8e 	bl	748c <assert_print>
    3d70:	4829      	ldr	r0, [pc, #164]	; (3e18 <nrfx_clock_start+0xc0>)
    3d72:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3d76:	f003 fb82 	bl	747e <assert_post_action>
    switch (domain)
    3d7a:	b17c      	cbz	r4, 3d9c <nrfx_clock_start+0x44>
    3d7c:	2c01      	cmp	r4, #1
    3d7e:	d03a      	beq.n	3df6 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3d80:	4926      	ldr	r1, [pc, #152]	; (3e1c <nrfx_clock_start+0xc4>)
    3d82:	4824      	ldr	r0, [pc, #144]	; (3e14 <nrfx_clock_start+0xbc>)
    3d84:	4a24      	ldr	r2, [pc, #144]	; (3e18 <nrfx_clock_start+0xc0>)
    3d86:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    3d8a:	f003 fb7f 	bl	748c <assert_print>
            break;
    }
}
    3d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    3d92:	4821      	ldr	r0, [pc, #132]	; (3e18 <nrfx_clock_start+0xc0>)
    3d94:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    3d98:	f003 bb71 	b.w	747e <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3da0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3da4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3da8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    3dac:	d10b      	bne.n	3dc6 <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    3dae:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    3db2:	07c9      	lsls	r1, r1, #31
    3db4:	d510      	bpl.n	3dd8 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3db6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    3dba:	079b      	lsls	r3, r3, #30
    3dbc:	d408      	bmi.n	3dd0 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    3dbe:	2302      	movs	r3, #2
    3dc0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    3dc4:	e016      	b.n	3df4 <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3dc6:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3dca:	2b01      	cmp	r3, #1
    3dcc:	d004      	beq.n	3dd8 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    3dce:	b11b      	cbz	r3, 3dd8 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    3dd0:	2000      	movs	r0, #0
    3dd2:	f7ff ff05 	bl	3be0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    3dd6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    3dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3ddc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3de0:	2300      	movs	r3, #0
    3de2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    3de6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    3dea:	2302      	movs	r3, #2
    3dec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3df0:	2301      	movs	r3, #1
    3df2:	6093      	str	r3, [r2, #8]
}
    3df4:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dfa:	2200      	movs	r2, #0
    3dfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3e00:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    3e04:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e08:	601c      	str	r4, [r3, #0]
}
    3e0a:	e7f3      	b.n	3df4 <nrfx_clock_start+0x9c>
    3e0c:	20000aa8 	.word	0x20000aa8
    3e10:	00008e80 	.word	0x00008e80
    3e14:	000085d7 	.word	0x000085d7
    3e18:	00008e01 	.word	0x00008e01
    3e1c:	0000867f 	.word	0x0000867f

00003e20 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e20:	4b0a      	ldr	r3, [pc, #40]	; (3e4c <nrfx_clock_stop+0x2c>)
    3e22:	791b      	ldrb	r3, [r3, #4]
{
    3e24:	b510      	push	{r4, lr}
    3e26:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e28:	b95b      	cbnz	r3, 3e42 <nrfx_clock_stop+0x22>
    3e2a:	4909      	ldr	r1, [pc, #36]	; (3e50 <nrfx_clock_stop+0x30>)
    3e2c:	4809      	ldr	r0, [pc, #36]	; (3e54 <nrfx_clock_stop+0x34>)
    3e2e:	4a0a      	ldr	r2, [pc, #40]	; (3e58 <nrfx_clock_stop+0x38>)
    3e30:	f240 13ad 	movw	r3, #429	; 0x1ad
    3e34:	f003 fb2a 	bl	748c <assert_print>
    3e38:	4807      	ldr	r0, [pc, #28]	; (3e58 <nrfx_clock_stop+0x38>)
    3e3a:	f240 11ad 	movw	r1, #429	; 0x1ad
    3e3e:	f003 fb1e 	bl	747e <assert_post_action>
    clock_stop(domain);
    3e42:	4620      	mov	r0, r4
}
    3e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    3e48:	f7ff beca 	b.w	3be0 <clock_stop>
    3e4c:	20000aa8 	.word	0x20000aa8
    3e50:	00008e80 	.word	0x00008e80
    3e54:	000085d7 	.word	0x000085d7
    3e58:	00008e01 	.word	0x00008e01

00003e5c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3e60:	b510      	push	{r4, lr}
    3e62:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3e66:	b16a      	cbz	r2, 3e84 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e68:	2200      	movs	r2, #0
    3e6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3e6e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3e72:	2201      	movs	r2, #1
    3e74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3e78:	4b11      	ldr	r3, [pc, #68]	; (3ec0 <nrfx_power_clock_irq_handler+0x64>)
    3e7a:	7958      	ldrb	r0, [r3, #5]
    3e7c:	b910      	cbnz	r0, 3e84 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3e7e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3e80:	681b      	ldr	r3, [r3, #0]
    3e82:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3e8c:	b172      	cbz	r2, 3eac <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e8e:	2200      	movs	r2, #0
    3e90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3e94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3e98:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3e9c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3ea0:	0792      	lsls	r2, r2, #30
    3ea2:	d104      	bne.n	3eae <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ea4:	2201      	movs	r2, #1
    3ea6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3eaa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3eac:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3eae:	2202      	movs	r2, #2
    3eb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3eb4:	4b02      	ldr	r3, [pc, #8]	; (3ec0 <nrfx_power_clock_irq_handler+0x64>)
}
    3eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	2001      	movs	r0, #1
    3ebe:	4718      	bx	r3
    3ec0:	20000aa8 	.word	0x20000aa8

00003ec4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ec4:	4b03      	ldr	r3, [pc, #12]	; (3ed4 <pin_in_use_by_te+0x10>)
    3ec6:	3008      	adds	r0, #8
    3ec8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ecc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop
    3ed4:	20000060 	.word	0x20000060

00003ed8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3ed8:	4b04      	ldr	r3, [pc, #16]	; (3eec <pin_has_trigger+0x14>)
    3eda:	3008      	adds	r0, #8
    3edc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ee0:	f010 001c 	ands.w	r0, r0, #28
    3ee4:	bf18      	it	ne
    3ee6:	2001      	movne	r0, #1
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	20000060 	.word	0x20000060

00003ef0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ef0:	4b03      	ldr	r3, [pc, #12]	; (3f00 <pin_is_output+0x10>)
    3ef2:	3008      	adds	r0, #8
    3ef4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ef8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop
    3f00:	20000060 	.word	0x20000060

00003f04 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3f06:	f100 0308 	add.w	r3, r0, #8
    3f0a:	4c0c      	ldr	r4, [pc, #48]	; (3f3c <call_handler+0x38>)
    3f0c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3f10:	05da      	lsls	r2, r3, #23
{
    3f12:	4605      	mov	r5, r0
    3f14:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3f16:	d507      	bpl.n	3f28 <call_handler+0x24>
    3f18:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3f1c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3f20:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3f24:	6852      	ldr	r2, [r2, #4]
    3f26:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3f28:	68a3      	ldr	r3, [r4, #8]
    3f2a:	b12b      	cbz	r3, 3f38 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3f2c:	68e2      	ldr	r2, [r4, #12]
    3f2e:	4631      	mov	r1, r6
    3f30:	4628      	mov	r0, r5
    }
}
    3f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3f36:	4718      	bx	r3
}
    3f38:	bd70      	pop	{r4, r5, r6, pc}
    3f3a:	bf00      	nop
    3f3c:	20000060 	.word	0x20000060

00003f40 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3f40:	4a19      	ldr	r2, [pc, #100]	; (3fa8 <release_handler+0x68>)
    3f42:	3008      	adds	r0, #8
{
    3f44:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3f46:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3f4a:	05d9      	lsls	r1, r3, #23
    3f4c:	d51d      	bpl.n	3f8a <release_handler+0x4a>
    3f4e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3f52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3f56:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3f5a:	f102 0410 	add.w	r4, r2, #16
    3f5e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3f60:	f834 3b02 	ldrh.w	r3, [r4], #2
    3f64:	f413 7f80 	tst.w	r3, #256	; 0x100
    3f68:	d003      	beq.n	3f72 <release_handler+0x32>
    3f6a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3f6e:	4299      	cmp	r1, r3
    3f70:	d00b      	beq.n	3f8a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3f72:	3001      	adds	r0, #1
    3f74:	2830      	cmp	r0, #48	; 0x30
    3f76:	d1f3      	bne.n	3f60 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3f78:	2300      	movs	r3, #0
    3f7a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3f7e:	480b      	ldr	r0, [pc, #44]	; (3fac <release_handler+0x6c>)
    3f80:	f7ff fe0c 	bl	3b9c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3f84:	4b0a      	ldr	r3, [pc, #40]	; (3fb0 <release_handler+0x70>)
    3f86:	4298      	cmp	r0, r3
    3f88:	d100      	bne.n	3f8c <release_handler+0x4c>
}
    3f8a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3f8c:	4909      	ldr	r1, [pc, #36]	; (3fb4 <release_handler+0x74>)
    3f8e:	480a      	ldr	r0, [pc, #40]	; (3fb8 <release_handler+0x78>)
    3f90:	4a0a      	ldr	r2, [pc, #40]	; (3fbc <release_handler+0x7c>)
    3f92:	f44f 7399 	mov.w	r3, #306	; 0x132
    3f96:	f003 fa79 	bl	748c <assert_print>
}
    3f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3f9e:	4807      	ldr	r0, [pc, #28]	; (3fbc <release_handler+0x7c>)
    3fa0:	f44f 7199 	mov.w	r1, #306	; 0x132
    3fa4:	f003 ba6b 	b.w	747e <assert_post_action>
    3fa8:	20000060 	.word	0x20000060
    3fac:	200000d4 	.word	0x200000d4
    3fb0:	0bad0000 	.word	0x0bad0000
    3fb4:	00008f02 	.word	0x00008f02
    3fb8:	000085d7 	.word	0x000085d7
    3fbc:	00008e9e 	.word	0x00008e9e

00003fc0 <pin_handler_trigger_uninit>:
{
    3fc0:	b538      	push	{r3, r4, r5, lr}
    3fc2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3fc4:	f7ff ff7e 	bl	3ec4 <pin_in_use_by_te>
    3fc8:	4c09      	ldr	r4, [pc, #36]	; (3ff0 <pin_handler_trigger_uninit+0x30>)
    3fca:	f102 0508 	add.w	r5, r2, #8
    3fce:	b140      	cbz	r0, 3fe2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fd0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3fd4:	4907      	ldr	r1, [pc, #28]	; (3ff4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3fd6:	0b5b      	lsrs	r3, r3, #13
    3fd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3fdc:	2000      	movs	r0, #0
    3fde:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3fe2:	4610      	mov	r0, r2
    3fe4:	f7ff ffac 	bl	3f40 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3fe8:	2300      	movs	r3, #0
    3fea:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3fee:	bd38      	pop	{r3, r4, r5, pc}
    3ff0:	20000060 	.word	0x20000060
    3ff4:	40006000 	.word	0x40006000

00003ff8 <nrf_gpio_pin_port_decode>:
{
    3ff8:	b510      	push	{r4, lr}
    3ffa:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ffc:	6800      	ldr	r0, [r0, #0]
    3ffe:	f003 fe5a 	bl	7cb6 <nrf_gpio_pin_present_check>
    4002:	b958      	cbnz	r0, 401c <nrf_gpio_pin_port_decode+0x24>
    4004:	4912      	ldr	r1, [pc, #72]	; (4050 <nrf_gpio_pin_port_decode+0x58>)
    4006:	4813      	ldr	r0, [pc, #76]	; (4054 <nrf_gpio_pin_port_decode+0x5c>)
    4008:	4a13      	ldr	r2, [pc, #76]	; (4058 <nrf_gpio_pin_port_decode+0x60>)
    400a:	f240 2329 	movw	r3, #553	; 0x229
    400e:	f003 fa3d 	bl	748c <assert_print>
    4012:	4811      	ldr	r0, [pc, #68]	; (4058 <nrf_gpio_pin_port_decode+0x60>)
    4014:	f240 2129 	movw	r1, #553	; 0x229
    4018:	f003 fa31 	bl	747e <assert_post_action>
    uint32_t pin_number = *p_pin;
    401c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    401e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4022:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4024:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4026:	d00d      	beq.n	4044 <nrf_gpio_pin_port_decode+0x4c>
    4028:	2b01      	cmp	r3, #1
    402a:	d00e      	beq.n	404a <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    402c:	490b      	ldr	r1, [pc, #44]	; (405c <nrf_gpio_pin_port_decode+0x64>)
    402e:	4809      	ldr	r0, [pc, #36]	; (4054 <nrf_gpio_pin_port_decode+0x5c>)
    4030:	4a09      	ldr	r2, [pc, #36]	; (4058 <nrf_gpio_pin_port_decode+0x60>)
    4032:	f240 232e 	movw	r3, #558	; 0x22e
    4036:	f003 fa29 	bl	748c <assert_print>
    403a:	4807      	ldr	r0, [pc, #28]	; (4058 <nrf_gpio_pin_port_decode+0x60>)
    403c:	f240 212e 	movw	r1, #558	; 0x22e
    4040:	f003 fa1d 	bl	747e <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4044:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4048:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    404a:	4805      	ldr	r0, [pc, #20]	; (4060 <nrf_gpio_pin_port_decode+0x68>)
    404c:	e7fc      	b.n	4048 <nrf_gpio_pin_port_decode+0x50>
    404e:	bf00      	nop
    4050:	00008d64 	.word	0x00008d64
    4054:	000085d7 	.word	0x000085d7
    4058:	00008d31 	.word	0x00008d31
    405c:	0000867f 	.word	0x0000867f
    4060:	50000300 	.word	0x50000300

00004064 <nrfx_gpiote_input_configure>:
{
    4064:	b5f0      	push	{r4, r5, r6, r7, lr}
    4066:	4604      	mov	r4, r0
    4068:	b085      	sub	sp, #20
    406a:	4617      	mov	r7, r2
    406c:	461d      	mov	r5, r3
    if (p_input_config)
    406e:	b1f1      	cbz	r1, 40ae <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4070:	f003 fe32 	bl	7cd8 <pin_is_task_output>
    4074:	b110      	cbz	r0, 407c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    4076:	484d      	ldr	r0, [pc, #308]	; (41ac <nrfx_gpiote_input_configure+0x148>)
}
    4078:	b005      	add	sp, #20
    407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    407c:	460b      	mov	r3, r1
    407e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4082:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4086:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    408a:	f10d 020f 	add.w	r2, sp, #15
    408e:	f10d 010e 	add.w	r1, sp, #14
    4092:	4620      	mov	r0, r4
    4094:	f003 fe2f 	bl	7cf6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4098:	4a45      	ldr	r2, [pc, #276]	; (41b0 <nrfx_gpiote_input_configure+0x14c>)
    409a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    409e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    40a2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    40a6:	f043 0301 	orr.w	r3, r3, #1
    40aa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    40ae:	b197      	cbz	r7, 40d6 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    40b0:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    40b2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    40b4:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    40b6:	f7ff ff1b 	bl	3ef0 <pin_is_output>
    40ba:	b180      	cbz	r0, 40de <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    40bc:	2a00      	cmp	r2, #0
    40be:	d1da      	bne.n	4076 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    40c0:	4a3b      	ldr	r2, [pc, #236]	; (41b0 <nrfx_gpiote_input_configure+0x14c>)
    40c2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    40c6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    40ca:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    40ce:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    40d2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    40d6:	2d00      	cmp	r5, #0
    40d8:	d13d      	bne.n	4156 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    40da:	4836      	ldr	r0, [pc, #216]	; (41b4 <nrfx_gpiote_input_configure+0x150>)
    40dc:	e7cc      	b.n	4078 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    40de:	4f34      	ldr	r7, [pc, #208]	; (41b0 <nrfx_gpiote_input_configure+0x14c>)
    40e0:	f104 0c08 	add.w	ip, r4, #8
    40e4:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    40e8:	f021 0120 	bic.w	r1, r1, #32
    40ec:	04c9      	lsls	r1, r1, #19
    40ee:	0cc9      	lsrs	r1, r1, #19
    40f0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    40f4:	2a00      	cmp	r2, #0
    40f6:	d0e3      	beq.n	40c0 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    40f8:	2e03      	cmp	r6, #3
    40fa:	d8bc      	bhi.n	4076 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    40fc:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    40fe:	b92e      	cbnz	r6, 410c <nrfx_gpiote_input_configure+0xa8>
    4100:	4a2d      	ldr	r2, [pc, #180]	; (41b8 <nrfx_gpiote_input_configure+0x154>)
    4102:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    4106:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    410a:	e7d9      	b.n	40c0 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    410c:	009a      	lsls	r2, r3, #2
    410e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4112:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4116:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    411a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    411e:	f020 0003 	bic.w	r0, r0, #3
    4122:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4126:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    412a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    412e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4132:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4136:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    413a:	0220      	lsls	r0, r4, #8
    413c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4140:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4144:	ea40 000e 	orr.w	r0, r0, lr
    4148:	f041 0120 	orr.w	r1, r1, #32
    414c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    4150:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4154:	e7b4      	b.n	40c0 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4156:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    415a:	4620      	mov	r0, r4
    415c:	f7ff fef0 	bl	3f40 <release_handler>
    if (!handler)
    4160:	2e00      	cmp	r6, #0
    4162:	d0ba      	beq.n	40da <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4164:	4d12      	ldr	r5, [pc, #72]	; (41b0 <nrfx_gpiote_input_configure+0x14c>)
    4166:	682b      	ldr	r3, [r5, #0]
    4168:	429e      	cmp	r6, r3
    416a:	d104      	bne.n	4176 <nrfx_gpiote_input_configure+0x112>
    416c:	686b      	ldr	r3, [r5, #4]
    416e:	429f      	cmp	r7, r3
    4170:	d101      	bne.n	4176 <nrfx_gpiote_input_configure+0x112>
    4172:	2200      	movs	r2, #0
    4174:	e00a      	b.n	418c <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4176:	4811      	ldr	r0, [pc, #68]	; (41bc <nrfx_gpiote_input_configure+0x158>)
    4178:	f10d 010f 	add.w	r1, sp, #15
    417c:	f7ff fce8 	bl	3b50 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4180:	4b0c      	ldr	r3, [pc, #48]	; (41b4 <nrfx_gpiote_input_configure+0x150>)
    4182:	4298      	cmp	r0, r3
    4184:	f47f af78 	bne.w	4078 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4188:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    418c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4190:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4194:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4196:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4198:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    419c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    41a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    41a4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    41a8:	e797      	b.n	40da <nrfx_gpiote_input_configure+0x76>
    41aa:	bf00      	nop
    41ac:	0bad0004 	.word	0x0bad0004
    41b0:	20000060 	.word	0x20000060
    41b4:	0bad0000 	.word	0x0bad0000
    41b8:	40006000 	.word	0x40006000
    41bc:	200000d4 	.word	0x200000d4

000041c0 <nrfx_gpiote_output_configure>:
{
    41c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41c2:	4604      	mov	r4, r0
    41c4:	b085      	sub	sp, #20
    41c6:	4615      	mov	r5, r2
    if (p_config)
    41c8:	b321      	cbz	r1, 4214 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    41ca:	f7ff fe91 	bl	3ef0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    41ce:	b920      	cbnz	r0, 41da <nrfx_gpiote_output_configure+0x1a>
    41d0:	4620      	mov	r0, r4
    41d2:	f7ff fe77 	bl	3ec4 <pin_in_use_by_te>
    41d6:	2800      	cmp	r0, #0
    41d8:	d15e      	bne.n	4298 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    41da:	4620      	mov	r0, r4
    41dc:	f7ff fe7c 	bl	3ed8 <pin_has_trigger>
    41e0:	b110      	cbz	r0, 41e8 <nrfx_gpiote_output_configure+0x28>
    41e2:	784b      	ldrb	r3, [r1, #1]
    41e4:	2b01      	cmp	r3, #1
    41e6:	d057      	beq.n	4298 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    41e8:	2301      	movs	r3, #1
    41ea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    41ee:	2300      	movs	r3, #0
    41f0:	e9cd 1300 	strd	r1, r3, [sp]
    41f4:	1c4a      	adds	r2, r1, #1
    41f6:	1c8b      	adds	r3, r1, #2
    41f8:	4620      	mov	r0, r4
    41fa:	f10d 010f 	add.w	r1, sp, #15
    41fe:	f003 fd7a 	bl	7cf6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4202:	4a26      	ldr	r2, [pc, #152]	; (429c <nrfx_gpiote_output_configure+0xdc>)
    4204:	f104 0108 	add.w	r1, r4, #8
    4208:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    420c:	f043 0303 	orr.w	r3, r3, #3
    4210:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    4214:	b915      	cbnz	r5, 421c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    4216:	4822      	ldr	r0, [pc, #136]	; (42a0 <nrfx_gpiote_output_configure+0xe0>)
}
    4218:	b005      	add	sp, #20
    421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    421c:	4620      	mov	r0, r4
    421e:	f7ff fe67 	bl	3ef0 <pin_is_output>
        if (pin_is_input(pin))
    4222:	b3c8      	cbz	r0, 4298 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4224:	4e1d      	ldr	r6, [pc, #116]	; (429c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    4226:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    422a:	f104 0708 	add.w	r7, r4, #8
    422e:	4661      	mov	r1, ip
    4230:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    4234:	0089      	lsls	r1, r1, #2
    4236:	f020 0020 	bic.w	r0, r0, #32
    423a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    423e:	04c0      	lsls	r0, r0, #19
    4240:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4244:	0cc0      	lsrs	r0, r0, #19
    4246:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    424a:	2300      	movs	r3, #0
    424c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4250:	786a      	ldrb	r2, [r5, #1]
    4252:	2a00      	cmp	r2, #0
    4254:	d0df      	beq.n	4216 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4256:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    425a:	78ad      	ldrb	r5, [r5, #2]
    425c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4260:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4264:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4268:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    426c:	0223      	lsls	r3, r4, #8
    426e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4272:	0412      	lsls	r2, r2, #16
    4274:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4278:	ea43 030e 	orr.w	r3, r3, lr
    427c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    427e:	052a      	lsls	r2, r5, #20
    4280:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4284:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4288:	4313      	orrs	r3, r2
    428a:	f040 0020 	orr.w	r0, r0, #32
    428e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4292:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4296:	e7be      	b.n	4216 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    4298:	4802      	ldr	r0, [pc, #8]	; (42a4 <nrfx_gpiote_output_configure+0xe4>)
    429a:	e7bd      	b.n	4218 <nrfx_gpiote_output_configure+0x58>
    429c:	20000060 	.word	0x20000060
    42a0:	0bad0000 	.word	0x0bad0000
    42a4:	0bad0004 	.word	0x0bad0004

000042a8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    42a8:	4b01      	ldr	r3, [pc, #4]	; (42b0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    42aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    42ae:	4770      	bx	lr
    42b0:	20000060 	.word	0x20000060

000042b4 <nrfx_gpiote_channel_get>:
{
    42b4:	b538      	push	{r3, r4, r5, lr}
    42b6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    42b8:	460d      	mov	r5, r1
    42ba:	b959      	cbnz	r1, 42d4 <nrfx_gpiote_channel_get+0x20>
    42bc:	490c      	ldr	r1, [pc, #48]	; (42f0 <nrfx_gpiote_channel_get+0x3c>)
    42be:	480d      	ldr	r0, [pc, #52]	; (42f4 <nrfx_gpiote_channel_get+0x40>)
    42c0:	4a0d      	ldr	r2, [pc, #52]	; (42f8 <nrfx_gpiote_channel_get+0x44>)
    42c2:	f240 2335 	movw	r3, #565	; 0x235
    42c6:	f003 f8e1 	bl	748c <assert_print>
    42ca:	480b      	ldr	r0, [pc, #44]	; (42f8 <nrfx_gpiote_channel_get+0x44>)
    42cc:	f240 2135 	movw	r1, #565	; 0x235
    42d0:	f003 f8d5 	bl	747e <assert_post_action>
    if (pin_in_use_by_te(pin))
    42d4:	4620      	mov	r0, r4
    42d6:	f7ff fdf5 	bl	3ec4 <pin_in_use_by_te>
    42da:	b138      	cbz	r0, 42ec <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    42dc:	4b07      	ldr	r3, [pc, #28]	; (42fc <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    42de:	4808      	ldr	r0, [pc, #32]	; (4300 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    42e0:	3408      	adds	r4, #8
    42e2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    42e6:	0b5b      	lsrs	r3, r3, #13
    42e8:	702b      	strb	r3, [r5, #0]
}
    42ea:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    42ec:	4805      	ldr	r0, [pc, #20]	; (4304 <nrfx_gpiote_channel_get+0x50>)
    42ee:	e7fc      	b.n	42ea <nrfx_gpiote_channel_get+0x36>
    42f0:	00008f16 	.word	0x00008f16
    42f4:	000085d7 	.word	0x000085d7
    42f8:	00008e9e 	.word	0x00008e9e
    42fc:	20000060 	.word	0x20000060
    4300:	0bad0000 	.word	0x0bad0000
    4304:	0bad0004 	.word	0x0bad0004

00004308 <nrfx_gpiote_init>:
{
    4308:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    430a:	4c0f      	ldr	r4, [pc, #60]	; (4348 <nrfx_gpiote_init+0x40>)
    430c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4310:	b9bd      	cbnz	r5, 4342 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4312:	2260      	movs	r2, #96	; 0x60
    4314:	4629      	mov	r1, r5
    4316:	f104 0010 	add.w	r0, r4, #16
    431a:	f003 f90b 	bl	7534 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    431e:	2006      	movs	r0, #6
    4320:	f7fd fb22 	bl	1968 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4324:	4b09      	ldr	r3, [pc, #36]	; (434c <nrfx_gpiote_init+0x44>)
    return err_code;
    4326:	480a      	ldr	r0, [pc, #40]	; (4350 <nrfx_gpiote_init+0x48>)
    4328:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    432c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4334:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4338:	2301      	movs	r3, #1
    433a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    433e:	6763      	str	r3, [r4, #116]	; 0x74
}
    4340:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4342:	4804      	ldr	r0, [pc, #16]	; (4354 <nrfx_gpiote_init+0x4c>)
    4344:	e7fc      	b.n	4340 <nrfx_gpiote_init+0x38>
    4346:	bf00      	nop
    4348:	20000060 	.word	0x20000060
    434c:	40006000 	.word	0x40006000
    4350:	0bad0000 	.word	0x0bad0000
    4354:	0bad0005 	.word	0x0bad0005

00004358 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4358:	4b03      	ldr	r3, [pc, #12]	; (4368 <nrfx_gpiote_is_init+0x10>)
    435a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    435e:	3800      	subs	r0, #0
    4360:	bf18      	it	ne
    4362:	2001      	movne	r0, #1
    4364:	4770      	bx	lr
    4366:	bf00      	nop
    4368:	20000060 	.word	0x20000060

0000436c <nrfx_gpiote_channel_free>:
{
    436c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    436e:	4801      	ldr	r0, [pc, #4]	; (4374 <nrfx_gpiote_channel_free+0x8>)
    4370:	f7ff bc14 	b.w	3b9c <nrfx_flag32_free>
    4374:	200000d0 	.word	0x200000d0

00004378 <nrfx_gpiote_channel_alloc>:
{
    4378:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    437a:	4801      	ldr	r0, [pc, #4]	; (4380 <nrfx_gpiote_channel_alloc+0x8>)
    437c:	f7ff bbe8 	b.w	3b50 <nrfx_flag32_alloc>
    4380:	200000d0 	.word	0x200000d0

00004384 <nrfx_gpiote_trigger_enable>:
{
    4384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4386:	4604      	mov	r4, r0
    4388:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    438a:	f7ff fda5 	bl	3ed8 <pin_has_trigger>
    438e:	b958      	cbnz	r0, 43a8 <nrfx_gpiote_trigger_enable+0x24>
    4390:	4930      	ldr	r1, [pc, #192]	; (4454 <nrfx_gpiote_trigger_enable+0xd0>)
    4392:	4831      	ldr	r0, [pc, #196]	; (4458 <nrfx_gpiote_trigger_enable+0xd4>)
    4394:	4a31      	ldr	r2, [pc, #196]	; (445c <nrfx_gpiote_trigger_enable+0xd8>)
    4396:	f240 33df 	movw	r3, #991	; 0x3df
    439a:	f003 f877 	bl	748c <assert_print>
    439e:	482f      	ldr	r0, [pc, #188]	; (445c <nrfx_gpiote_trigger_enable+0xd8>)
    43a0:	f240 31df 	movw	r1, #991	; 0x3df
    43a4:	f003 f86b 	bl	747e <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    43a8:	4620      	mov	r0, r4
    43aa:	f7ff fd8b 	bl	3ec4 <pin_in_use_by_te>
    43ae:	4e2c      	ldr	r6, [pc, #176]	; (4460 <nrfx_gpiote_trigger_enable+0xdc>)
    43b0:	f104 0708 	add.w	r7, r4, #8
    43b4:	b318      	cbz	r0, 43fe <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    43b6:	4620      	mov	r0, r4
    43b8:	f7ff fd9a 	bl	3ef0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    43bc:	4602      	mov	r2, r0
    43be:	b9f0      	cbnz	r0, 43fe <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    43c0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    43c4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    43c6:	4608      	mov	r0, r1
    43c8:	f003 fc91 	bl	7cee <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    43cc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    43d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43d4:	601a      	str	r2, [r3, #0]
    43d6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    43d8:	008b      	lsls	r3, r1, #2
    43da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    43de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    43e2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    43e6:	f042 0201 	orr.w	r2, r2, #1
    43ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    43ee:	b125      	cbz	r5, 43fa <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    43f0:	4a1c      	ldr	r2, [pc, #112]	; (4464 <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    43f2:	2301      	movs	r3, #1
    43f4:	408b      	lsls	r3, r1
    43f6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    43fa:	b003      	add	sp, #12
    43fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    43fe:	b95d      	cbnz	r5, 4418 <nrfx_gpiote_trigger_enable+0x94>
    4400:	4919      	ldr	r1, [pc, #100]	; (4468 <nrfx_gpiote_trigger_enable+0xe4>)
    4402:	4815      	ldr	r0, [pc, #84]	; (4458 <nrfx_gpiote_trigger_enable+0xd4>)
    4404:	4a15      	ldr	r2, [pc, #84]	; (445c <nrfx_gpiote_trigger_enable+0xd8>)
    4406:	f240 33ee 	movw	r3, #1006	; 0x3ee
    440a:	f003 f83f 	bl	748c <assert_print>
    440e:	4813      	ldr	r0, [pc, #76]	; (445c <nrfx_gpiote_trigger_enable+0xd8>)
    4410:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4414:	f003 f833 	bl	747e <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4418:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    441c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4420:	2b04      	cmp	r3, #4
    4422:	d012      	beq.n	444a <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4424:	2b05      	cmp	r3, #5
    4426:	d012      	beq.n	444e <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4428:	a801      	add	r0, sp, #4
    442a:	9401      	str	r4, [sp, #4]
    442c:	f7ff fde4 	bl	3ff8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4430:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4432:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4436:	40d9      	lsrs	r1, r3
    4438:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    443c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    443e:	4620      	mov	r0, r4
}
    4440:	b003      	add	sp, #12
    4442:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4446:	f003 bca1 	b.w	7d8c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    444a:	2103      	movs	r1, #3
    444c:	e7f7      	b.n	443e <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    444e:	2102      	movs	r1, #2
    4450:	e7f5      	b.n	443e <nrfx_gpiote_trigger_enable+0xba>
    4452:	bf00      	nop
    4454:	00008f20 	.word	0x00008f20
    4458:	000085d7 	.word	0x000085d7
    445c:	00008e9e 	.word	0x00008e9e
    4460:	20000060 	.word	0x20000060
    4464:	40006000 	.word	0x40006000
    4468:	00008f35 	.word	0x00008f35

0000446c <nrfx_gpiote_trigger_disable>:
{
    446c:	b508      	push	{r3, lr}
    446e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4470:	f7ff fd28 	bl	3ec4 <pin_in_use_by_te>
    4474:	b1c8      	cbz	r0, 44aa <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    4476:	4610      	mov	r0, r2
    4478:	f7ff fd3a 	bl	3ef0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    447c:	b9a8      	cbnz	r0, 44aa <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    447e:	3208      	adds	r2, #8
    4480:	4b0d      	ldr	r3, [pc, #52]	; (44b8 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    4482:	490e      	ldr	r1, [pc, #56]	; (44bc <nrfx_gpiote_trigger_disable+0x50>)
    4484:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4488:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    448a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    448c:	409a      	lsls	r2, r3
    448e:	009b      	lsls	r3, r3, #2
    4490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4494:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4498:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    449c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    44a0:	f022 0203 	bic.w	r2, r2, #3
    44a4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    44a8:	bd08      	pop	{r3, pc}
    44aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    44ae:	2100      	movs	r1, #0
    44b0:	4610      	mov	r0, r2
    44b2:	f003 bc6b 	b.w	7d8c <nrf_gpio_cfg_sense_set>
    44b6:	bf00      	nop
    44b8:	20000060 	.word	0x20000060
    44bc:	40006000 	.word	0x40006000

000044c0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    44c0:	4b0e      	ldr	r3, [pc, #56]	; (44fc <nrfx_gpiote_pin_uninit+0x3c>)
    44c2:	f100 0208 	add.w	r2, r0, #8
{
    44c6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    44c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    44cc:	07db      	lsls	r3, r3, #31
{
    44ce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    44d0:	d511      	bpl.n	44f6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    44d2:	f7ff ffcb 	bl	446c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    44d6:	4620      	mov	r0, r4
    44d8:	f7ff fd72 	bl	3fc0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    44dc:	a801      	add	r0, sp, #4
    44de:	9401      	str	r4, [sp, #4]
    44e0:	f7ff fd8a 	bl	3ff8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    44e4:	9b01      	ldr	r3, [sp, #4]
    44e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    44ea:	2202      	movs	r2, #2
    44ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    44f0:	4803      	ldr	r0, [pc, #12]	; (4500 <nrfx_gpiote_pin_uninit+0x40>)
}
    44f2:	b002      	add	sp, #8
    44f4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    44f6:	4803      	ldr	r0, [pc, #12]	; (4504 <nrfx_gpiote_pin_uninit+0x44>)
    44f8:	e7fb      	b.n	44f2 <nrfx_gpiote_pin_uninit+0x32>
    44fa:	bf00      	nop
    44fc:	20000060 	.word	0x20000060
    4500:	0bad0000 	.word	0x0bad0000
    4504:	0bad0004 	.word	0x0bad0004

00004508 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    450c:	4b65      	ldr	r3, [pc, #404]	; (46a4 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    450e:	4866      	ldr	r0, [pc, #408]	; (46a8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4510:	4966      	ldr	r1, [pc, #408]	; (46ac <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4512:	2600      	movs	r6, #0
{
    4514:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4516:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4518:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    451a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    451c:	b135      	cbz	r5, 452c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    451e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4522:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4524:	bf1e      	ittt	ne
    4526:	601c      	strne	r4, [r3, #0]
    4528:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    452a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    452c:	3304      	adds	r3, #4
    452e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4530:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4534:	d1f1      	bne.n	451a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4536:	f8df 8170 	ldr.w	r8, [pc, #368]	; 46a8 <nrfx_gpiote_irq_handler+0x1a0>
    453a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    453e:	2b00      	cmp	r3, #0
    4540:	f000 8093 	beq.w	466a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    4544:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4548:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    454c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    454e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4552:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4556:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4558:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    455c:	2700      	movs	r7, #0
            while (latch[i])
    455e:	f10d 0910 	add.w	r9, sp, #16
    4562:	017b      	lsls	r3, r7, #5
    4564:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4566:	f04f 0a01 	mov.w	sl, #1
    456a:	e04b      	b.n	4604 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    456c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    456e:	4a50      	ldr	r2, [pc, #320]	; (46b0 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4570:	fa94 f4a4 	rbit	r4, r4
    4574:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4578:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    457a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    457e:	08e0      	lsrs	r0, r4, #3
    4580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4584:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4586:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    458a:	fa0a fc02 	lsl.w	ip, sl, r2
    458e:	f819 2000 	ldrb.w	r2, [r9, r0]
    4592:	ea22 020c 	bic.w	r2, r2, ip
    4596:	0899      	lsrs	r1, r3, #2
    4598:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    459c:	a803      	add	r0, sp, #12
    459e:	f3c3 0582 	ubfx	r5, r3, #2, #3
    45a2:	9101      	str	r1, [sp, #4]
    45a4:	f7ff fd28 	bl	3ff8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    45a8:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    45aa:	9901      	ldr	r1, [sp, #4]
    45ac:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    45b0:	074b      	lsls	r3, r1, #29
    45b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    45b6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    45b8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    45bc:	d529      	bpl.n	4612 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    45be:	4659      	mov	r1, fp
    45c0:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    45c2:	b2d5      	uxtb	r5, r2
    45c4:	f7ff fc9e 	bl	3f04 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45c8:	a803      	add	r0, sp, #12
    45ca:	9403      	str	r4, [sp, #12]
    45cc:	f7ff fd14 	bl	3ff8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    45d0:	9b03      	ldr	r3, [sp, #12]
    45d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    45da:	f3c3 4301 	ubfx	r3, r3, #16, #2
    45de:	429d      	cmp	r5, r3
    45e0:	d107      	bne.n	45f2 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    45e2:	2100      	movs	r1, #0
    45e4:	4620      	mov	r0, r4
    45e6:	f003 fbd1 	bl	7d8c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    45ea:	4629      	mov	r1, r5
    45ec:	4620      	mov	r0, r4
    45ee:	f003 fbcd 	bl	7d8c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45f2:	a803      	add	r0, sp, #12
    45f4:	9403      	str	r4, [sp, #12]
    45f6:	f7ff fcff 	bl	3ff8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    45fa:	9b03      	ldr	r3, [sp, #12]
    45fc:	fa0a f303 	lsl.w	r3, sl, r3
    4600:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    4604:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4608:	2c00      	cmp	r4, #0
    460a:	d1af      	bne.n	456c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    460c:	b9cf      	cbnz	r7, 4642 <nrfx_gpiote_irq_handler+0x13a>
    460e:	2701      	movs	r7, #1
    4610:	e7a7      	b.n	4562 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4612:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4614:	bf0c      	ite	eq
    4616:	2103      	moveq	r1, #3
    4618:	2102      	movne	r1, #2
    461a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    461c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    461e:	f003 fbb5 	bl	7d8c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4622:	2d03      	cmp	r5, #3
    4624:	d004      	beq.n	4630 <nrfx_gpiote_irq_handler+0x128>
    4626:	9a01      	ldr	r2, [sp, #4]
    4628:	2a02      	cmp	r2, #2
    462a:	d106      	bne.n	463a <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    462c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    462e:	d1e0      	bne.n	45f2 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    4630:	4659      	mov	r1, fp
    4632:	4620      	mov	r0, r4
    4634:	f7ff fc66 	bl	3f04 <call_handler>
    4638:	e7db      	b.n	45f2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    463a:	2a03      	cmp	r2, #3
    463c:	d1d9      	bne.n	45f2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    463e:	2d02      	cmp	r5, #2
    4640:	e7f5      	b.n	462e <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4642:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    4646:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    464a:	491a      	ldr	r1, [pc, #104]	; (46b4 <nrfx_gpiote_irq_handler+0x1ac>)
    464c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4650:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4654:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4656:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    465a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    465e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4660:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4664:	4313      	orrs	r3, r2
    4666:	f47f af79 	bne.w	455c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    466a:	2401      	movs	r4, #1
    while (mask)
    466c:	b916      	cbnz	r6, 4674 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    466e:	b007      	add	sp, #28
    4670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4674:	fa96 f3a6 	rbit	r3, r6
    4678:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    467c:	fa04 f203 	lsl.w	r2, r4, r3
    4680:	009b      	lsls	r3, r3, #2
    4682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4686:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    468a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    468e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4692:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4696:	f3c0 2005 	ubfx	r0, r0, #8, #6
    469a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    469e:	f7ff fc31 	bl	3f04 <call_handler>
    46a2:	e7e3      	b.n	466c <nrfx_gpiote_irq_handler+0x164>
    46a4:	40006100 	.word	0x40006100
    46a8:	40006000 	.word	0x40006000
    46ac:	40006120 	.word	0x40006120
    46b0:	20000060 	.word	0x20000060
    46b4:	50000300 	.word	0x50000300

000046b8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    46b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    46ba:	4801      	ldr	r0, [pc, #4]	; (46c0 <nrfx_ppi_channel_alloc+0x8>)
    46bc:	f7ff ba48 	b.w	3b50 <nrfx_flag32_alloc>
    46c0:	200000dc 	.word	0x200000dc

000046c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    46c4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    46c6:	4c14      	ldr	r4, [pc, #80]	; (4718 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    46c8:	4a14      	ldr	r2, [pc, #80]	; (471c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    46ca:	4915      	ldr	r1, [pc, #84]	; (4720 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    46cc:	2303      	movs	r3, #3
    46ce:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    46d0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    46d2:	4b14      	ldr	r3, [pc, #80]	; (4724 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    46d4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    46d6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    46d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    46dc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    46de:	2300      	movs	r3, #0
    46e0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    46e2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    46e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    46e6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    46e8:	4a0f      	ldr	r2, [pc, #60]	; (4728 <_DoInit+0x64>)
    46ea:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    46ec:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    46ee:	2210      	movs	r2, #16
    46f0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    46f2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    46f4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    46f6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    46f8:	f002 feeb 	bl	74d2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    46fc:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4700:	490a      	ldr	r1, [pc, #40]	; (472c <_DoInit+0x68>)
    4702:	4620      	mov	r0, r4
    4704:	f002 fee5 	bl	74d2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4708:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    470c:	2320      	movs	r3, #32
    470e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4710:	f3bf 8f5f 	dmb	sy
}
    4714:	bd10      	pop	{r4, pc}
    4716:	bf00      	nop
    4718:	20000ab0 	.word	0x20000ab0
    471c:	00008f40 	.word	0x00008f40
    4720:	00008f49 	.word	0x00008f49
    4724:	20000e05 	.word	0x20000e05
    4728:	20000df5 	.word	0x20000df5
    472c:	00008f4d 	.word	0x00008f4d

00004730 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4730:	4b0e      	ldr	r3, [pc, #56]	; (476c <z_sys_init_run_level+0x3c>)
{
    4732:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4734:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4738:	3001      	adds	r0, #1
    473a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    473e:	42a6      	cmp	r6, r4
    4740:	d800      	bhi.n	4744 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4742:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4744:	e9d4 3500 	ldrd	r3, r5, [r4]
    4748:	4628      	mov	r0, r5
    474a:	4798      	blx	r3
		if (dev != NULL) {
    474c:	b165      	cbz	r5, 4768 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    474e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4750:	b130      	cbz	r0, 4760 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4752:	2800      	cmp	r0, #0
    4754:	bfb8      	it	lt
    4756:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4758:	28ff      	cmp	r0, #255	; 0xff
    475a:	bfa8      	it	ge
    475c:	20ff      	movge	r0, #255	; 0xff
    475e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4760:	785a      	ldrb	r2, [r3, #1]
    4762:	f042 0201 	orr.w	r2, r2, #1
    4766:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4768:	3408      	adds	r4, #8
    476a:	e7e8      	b.n	473e <z_sys_init_run_level+0xe>
    476c:	000082fc 	.word	0x000082fc

00004770 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4770:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4772:	4605      	mov	r5, r0
    4774:	b910      	cbnz	r0, 477c <z_impl_device_get_binding+0xc>
		return NULL;
    4776:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4778:	4620      	mov	r0, r4
    477a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    477c:	7803      	ldrb	r3, [r0, #0]
    477e:	2b00      	cmp	r3, #0
    4780:	d0f9      	beq.n	4776 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4782:	4c0e      	ldr	r4, [pc, #56]	; (47bc <z_impl_device_get_binding+0x4c>)
    4784:	4e0e      	ldr	r6, [pc, #56]	; (47c0 <z_impl_device_get_binding+0x50>)
    4786:	42b4      	cmp	r4, r6
    4788:	d108      	bne.n	479c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    478a:	4c0c      	ldr	r4, [pc, #48]	; (47bc <z_impl_device_get_binding+0x4c>)
    478c:	42b4      	cmp	r4, r6
    478e:	d0f2      	beq.n	4776 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4790:	4620      	mov	r0, r4
    4792:	f003 fb12 	bl	7dba <z_device_is_ready>
    4796:	b950      	cbnz	r0, 47ae <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4798:	3418      	adds	r4, #24
    479a:	e7f7      	b.n	478c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    479c:	4620      	mov	r0, r4
    479e:	f003 fb0c 	bl	7dba <z_device_is_ready>
    47a2:	b110      	cbz	r0, 47aa <z_impl_device_get_binding+0x3a>
    47a4:	6823      	ldr	r3, [r4, #0]
    47a6:	42ab      	cmp	r3, r5
    47a8:	d0e6      	beq.n	4778 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    47aa:	3418      	adds	r4, #24
    47ac:	e7eb      	b.n	4786 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    47ae:	6821      	ldr	r1, [r4, #0]
    47b0:	4628      	mov	r0, r5
    47b2:	f002 fea8 	bl	7506 <strcmp>
    47b6:	2800      	cmp	r0, #0
    47b8:	d1ee      	bne.n	4798 <z_impl_device_get_binding+0x28>
    47ba:	e7dd      	b.n	4778 <z_impl_device_get_binding+0x8>
    47bc:	00007f64 	.word	0x00007f64
    47c0:	00007fdc 	.word	0x00007fdc

000047c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    47c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47c6:	4604      	mov	r4, r0
    47c8:	460e      	mov	r6, r1
	__asm__ volatile(
    47ca:	f04f 0320 	mov.w	r3, #32
    47ce:	f3ef 8711 	mrs	r7, BASEPRI
    47d2:	f383 8812 	msr	BASEPRI_MAX, r3
    47d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    47da:	f001 fe59 	bl	6490 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    47de:	4631      	mov	r1, r6
    47e0:	4605      	mov	r5, r0
    47e2:	4620      	mov	r0, r4
    47e4:	f003 fa4c 	bl	7c80 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    47e8:	2c04      	cmp	r4, #4
    47ea:	d10c      	bne.n	4806 <z_fatal_error+0x42>
    47ec:	490a      	ldr	r1, [pc, #40]	; (4818 <z_fatal_error+0x54>)
    47ee:	4a0b      	ldr	r2, [pc, #44]	; (481c <z_fatal_error+0x58>)
    47f0:	480b      	ldr	r0, [pc, #44]	; (4820 <z_fatal_error+0x5c>)
    47f2:	238f      	movs	r3, #143	; 0x8f
    47f4:	f002 fe4a 	bl	748c <assert_print>
    47f8:	480a      	ldr	r0, [pc, #40]	; (4824 <z_fatal_error+0x60>)
    47fa:	f002 fe47 	bl	748c <assert_print>
    47fe:	4807      	ldr	r0, [pc, #28]	; (481c <z_fatal_error+0x58>)
    4800:	218f      	movs	r1, #143	; 0x8f
    4802:	f002 fe3c 	bl	747e <assert_post_action>
	__asm__ volatile(
    4806:	f387 8811 	msr	BASEPRI, r7
    480a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    480e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4814:	f7fd bbb4 	b.w	1f80 <z_impl_k_thread_abort>
    4818:	00008f76 	.word	0x00008f76
    481c:	00008f54 	.word	0x00008f54
    4820:	000085d7 	.word	0x000085d7
    4824:	00008f93 	.word	0x00008f93

00004828 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4828:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    482a:	4b0a      	ldr	r3, [pc, #40]	; (4854 <bg_thread_main+0x2c>)
    482c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    482e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4830:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4832:	f7ff ff7d 	bl	4730 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4836:	f002 fb0f 	bl	6e58 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    483a:	2003      	movs	r0, #3
    483c:	f7ff ff78 	bl	4730 <z_sys_init_run_level>

	z_init_static_threads();
    4840:	f000 fa2a 	bl	4c98 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4844:	f7fb fe28 	bl	498 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4848:	4a03      	ldr	r2, [pc, #12]	; (4858 <bg_thread_main+0x30>)
    484a:	7b13      	ldrb	r3, [r2, #12]
    484c:	f023 0301 	bic.w	r3, r3, #1
    4850:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4852:	bd08      	pop	{r3, pc}
    4854:	20001205 	.word	0x20001205
    4858:	20000418 	.word	0x20000418

0000485c <z_bss_zero>:
{
    485c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    485e:	4803      	ldr	r0, [pc, #12]	; (486c <z_bss_zero+0x10>)
    4860:	4a03      	ldr	r2, [pc, #12]	; (4870 <z_bss_zero+0x14>)
    4862:	2100      	movs	r1, #0
    4864:	1a12      	subs	r2, r2, r0
    4866:	f003 fab2 	bl	7dce <z_early_memset>
}
    486a:	bd08      	pop	{r3, pc}
    486c:	200001c8 	.word	0x200001c8
    4870:	20001208 	.word	0x20001208

00004874 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4874:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4876:	2300      	movs	r3, #0
{
    4878:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    487a:	2201      	movs	r2, #1
    487c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4880:	4e13      	ldr	r6, [pc, #76]	; (48d0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4882:	4d14      	ldr	r5, [pc, #80]	; (48d4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4884:	9301      	str	r3, [sp, #4]
    4886:	220f      	movs	r2, #15
    4888:	e9cd 3202 	strd	r3, r2, [sp, #8]
    488c:	4912      	ldr	r1, [pc, #72]	; (48d8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    488e:	2318      	movs	r3, #24
    4890:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4894:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4898:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    489a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    489e:	fb00 1104 	mla	r1, r0, r4, r1
    48a2:	4b0e      	ldr	r3, [pc, #56]	; (48dc <z_init_cpu+0x68>)
    48a4:	9500      	str	r5, [sp, #0]
    48a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    48aa:	4630      	mov	r0, r6
    48ac:	f000 f990 	bl	4bd0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    48b0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    48b2:	480b      	ldr	r0, [pc, #44]	; (48e0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    48b4:	752c      	strb	r4, [r5, #20]
    48b6:	f023 0304 	bic.w	r3, r3, #4
    48ba:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    48bc:	f44f 6302 	mov.w	r3, #2080	; 0x820
    48c0:	fb03 0404 	mla	r4, r3, r4, r0
    48c4:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    48c6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    48c8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    48ca:	b006      	add	sp, #24
    48cc:	bd70      	pop	{r4, r5, r6, pc}
    48ce:	bf00      	nop
    48d0:	20000398 	.word	0x20000398
    48d4:	20000b58 	.word	0x20000b58
    48d8:	20001640 	.word	0x20001640
    48dc:	00004df5 	.word	0x00004df5
    48e0:	200017a0 	.word	0x200017a0

000048e4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    48e4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    48e6:	4b2e      	ldr	r3, [pc, #184]	; (49a0 <z_cstart+0xbc>)
    48e8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    48ea:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    48ee:	4d2d      	ldr	r5, [pc, #180]	; (49a4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    48f0:	4e2d      	ldr	r6, [pc, #180]	; (49a8 <z_cstart+0xc4>)
    48f2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    48f4:	4f2d      	ldr	r7, [pc, #180]	; (49ac <z_cstart+0xc8>)
    48f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48fa:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48fc:	2400      	movs	r4, #0
    48fe:	23e0      	movs	r3, #224	; 0xe0
    4900:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4904:	77ec      	strb	r4, [r5, #31]
    4906:	762c      	strb	r4, [r5, #24]
    4908:	766c      	strb	r4, [r5, #25]
    490a:	76ac      	strb	r4, [r5, #26]
    490c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4910:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4912:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4916:	626b      	str	r3, [r5, #36]	; 0x24
    4918:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    491c:	f7fd faa4 	bl	1e68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4920:	f7fd f804 	bl	192c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4928:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    492a:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    492c:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    492e:	f7fd fc0b 	bl	2148 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4932:	f7fd fb3b 	bl	1fac <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4936:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    493a:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    493c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    4940:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    4944:	f002 fa82 	bl	6e4c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    4948:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    494a:	f003 fa35 	bl	7db8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    494e:	4620      	mov	r0, r4
    4950:	f7ff feee 	bl	4730 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4954:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4956:	4d16      	ldr	r5, [pc, #88]	; (49b0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4958:	f7ff feea 	bl	4730 <z_sys_init_run_level>
	z_sched_init();
    495c:	f001 fc0a 	bl	6174 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4960:	4b14      	ldr	r3, [pc, #80]	; (49b4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4962:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4964:	9305      	str	r3, [sp, #20]
    4966:	2301      	movs	r3, #1
    4968:	4913      	ldr	r1, [pc, #76]	; (49b8 <z_cstart+0xd4>)
    496a:	9400      	str	r4, [sp, #0]
    496c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4970:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4974:	463b      	mov	r3, r7
    4976:	e9cd 4401 	strd	r4, r4, [sp, #4]
    497a:	4628      	mov	r0, r5
    497c:	f000 f928 	bl	4bd0 <z_setup_new_thread>
    4980:	7b6a      	ldrb	r2, [r5, #13]
    4982:	4606      	mov	r6, r0
    4984:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4988:	4628      	mov	r0, r5
    498a:	736a      	strb	r2, [r5, #13]
    498c:	f000 fff8 	bl	5980 <z_ready_thread>
	z_init_cpu(0);
    4990:	4620      	mov	r0, r4
    4992:	f7ff ff6f 	bl	4874 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4996:	463a      	mov	r2, r7
    4998:	4631      	mov	r1, r6
    499a:	4628      	mov	r0, r5
    499c:	f7fd f8dc 	bl	1b58 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    49a0:	20001fc0 	.word	0x20001fc0
    49a4:	e000ed00 	.word	0xe000ed00
    49a8:	20000b58 	.word	0x20000b58
    49ac:	00004829 	.word	0x00004829
    49b0:	20000418 	.word	0x20000418
    49b4:	00008fc8 	.word	0x00008fc8
    49b8:	20001220 	.word	0x20001220

000049bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    49be:	4c16      	ldr	r4, [pc, #88]	; (4a18 <init_mem_slab_module+0x5c>)
    49c0:	4d16      	ldr	r5, [pc, #88]	; (4a1c <init_mem_slab_module+0x60>)
    49c2:	4e17      	ldr	r6, [pc, #92]	; (4a20 <init_mem_slab_module+0x64>)
    49c4:	42ac      	cmp	r4, r5
    49c6:	d90c      	bls.n	49e2 <init_mem_slab_module+0x26>
    49c8:	4916      	ldr	r1, [pc, #88]	; (4a24 <init_mem_slab_module+0x68>)
    49ca:	4817      	ldr	r0, [pc, #92]	; (4a28 <init_mem_slab_module+0x6c>)
    49cc:	233d      	movs	r3, #61	; 0x3d
    49ce:	4632      	mov	r2, r6
    49d0:	f002 fd5c 	bl	748c <assert_print>
    49d4:	4815      	ldr	r0, [pc, #84]	; (4a2c <init_mem_slab_module+0x70>)
    49d6:	f002 fd59 	bl	748c <assert_print>
    49da:	213d      	movs	r1, #61	; 0x3d
    49dc:	4630      	mov	r0, r6
    49de:	f002 fd4e 	bl	747e <assert_post_action>
    49e2:	42ac      	cmp	r4, r5
    49e4:	d301      	bcc.n	49ea <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    49e6:	2000      	movs	r0, #0
	return rc;
}
    49e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    49ea:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    49ee:	ea41 0302 	orr.w	r3, r1, r2
    49f2:	f013 0303 	ands.w	r3, r3, #3
    49f6:	d10b      	bne.n	4a10 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    49f8:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    49fa:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    49fc:	4283      	cmp	r3, r0
    49fe:	d101      	bne.n	4a04 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a00:	3420      	adds	r4, #32
    4a02:	e7df      	b.n	49c4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    4a04:	69a7      	ldr	r7, [r4, #24]
    4a06:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a08:	3301      	adds	r3, #1
		slab->free_list = p;
    4a0a:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4a0c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4a0e:	e7f5      	b.n	49fc <init_mem_slab_module+0x40>
	return rc;
    4a10:	f06f 0015 	mvn.w	r0, #21
    4a14:	e7e8      	b.n	49e8 <init_mem_slab_module+0x2c>
    4a16:	bf00      	nop
    4a18:	2000015c 	.word	0x2000015c
    4a1c:	2000015c 	.word	0x2000015c
    4a20:	00008fcd 	.word	0x00008fcd
    4a24:	00008ff2 	.word	0x00008ff2
    4a28:	000085d7 	.word	0x000085d7
    4a2c:	0000900f 	.word	0x0000900f

00004a30 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4a34:	4604      	mov	r4, r0
    4a36:	460e      	mov	r6, r1
    4a38:	4690      	mov	r8, r2
    4a3a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4a3c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4a40:	f04f 0320 	mov.w	r3, #32
    4a44:	f3ef 8911 	mrs	r9, BASEPRI
    4a48:	f383 8812 	msr	BASEPRI_MAX, r3
    4a4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a50:	4628      	mov	r0, r5
    4a52:	f000 f9a9 	bl	4da8 <z_spin_lock_valid>
    4a56:	b968      	cbnz	r0, 4a74 <k_mem_slab_alloc+0x44>
    4a58:	4a24      	ldr	r2, [pc, #144]	; (4aec <k_mem_slab_alloc+0xbc>)
    4a5a:	4925      	ldr	r1, [pc, #148]	; (4af0 <k_mem_slab_alloc+0xc0>)
    4a5c:	4825      	ldr	r0, [pc, #148]	; (4af4 <k_mem_slab_alloc+0xc4>)
    4a5e:	238e      	movs	r3, #142	; 0x8e
    4a60:	f002 fd14 	bl	748c <assert_print>
    4a64:	4824      	ldr	r0, [pc, #144]	; (4af8 <k_mem_slab_alloc+0xc8>)
    4a66:	4629      	mov	r1, r5
    4a68:	f002 fd10 	bl	748c <assert_print>
    4a6c:	481f      	ldr	r0, [pc, #124]	; (4aec <k_mem_slab_alloc+0xbc>)
    4a6e:	218e      	movs	r1, #142	; 0x8e
    4a70:	f002 fd05 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    4a74:	4628      	mov	r0, r5
    4a76:	f000 f9b5 	bl	4de4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4a7a:	69a3      	ldr	r3, [r4, #24]
    4a7c:	b1eb      	cbz	r3, 4aba <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    4a7e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4a84:	69e3      	ldr	r3, [r4, #28]
    4a86:	3301      	adds	r3, #1
    4a88:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4a8a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a8c:	4628      	mov	r0, r5
    4a8e:	f000 f999 	bl	4dc4 <z_spin_unlock_valid>
    4a92:	b968      	cbnz	r0, 4ab0 <k_mem_slab_alloc+0x80>
    4a94:	4a15      	ldr	r2, [pc, #84]	; (4aec <k_mem_slab_alloc+0xbc>)
    4a96:	4919      	ldr	r1, [pc, #100]	; (4afc <k_mem_slab_alloc+0xcc>)
    4a98:	4816      	ldr	r0, [pc, #88]	; (4af4 <k_mem_slab_alloc+0xc4>)
    4a9a:	23b9      	movs	r3, #185	; 0xb9
    4a9c:	f002 fcf6 	bl	748c <assert_print>
    4aa0:	4817      	ldr	r0, [pc, #92]	; (4b00 <k_mem_slab_alloc+0xd0>)
    4aa2:	4629      	mov	r1, r5
    4aa4:	f002 fcf2 	bl	748c <assert_print>
    4aa8:	4810      	ldr	r0, [pc, #64]	; (4aec <k_mem_slab_alloc+0xbc>)
    4aaa:	21b9      	movs	r1, #185	; 0xb9
    4aac:	f002 fce7 	bl	747e <assert_post_action>
	__asm__ volatile(
    4ab0:	f389 8811 	msr	BASEPRI, r9
    4ab4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4ab8:	e013      	b.n	4ae2 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4aba:	ea58 0207 	orrs.w	r2, r8, r7
    4abe:	d103      	bne.n	4ac8 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4ac0:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4ac2:	f06f 040b 	mvn.w	r4, #11
    4ac6:	e7e1      	b.n	4a8c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4ac8:	4622      	mov	r2, r4
    4aca:	e9cd 8700 	strd	r8, r7, [sp]
    4ace:	4649      	mov	r1, r9
    4ad0:	4628      	mov	r0, r5
    4ad2:	f001 f905 	bl	5ce0 <z_pend_curr>
		if (result == 0) {
    4ad6:	4604      	mov	r4, r0
    4ad8:	b918      	cbnz	r0, 4ae2 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4ada:	4b0a      	ldr	r3, [pc, #40]	; (4b04 <k_mem_slab_alloc+0xd4>)
    4adc:	689b      	ldr	r3, [r3, #8]
    4ade:	695b      	ldr	r3, [r3, #20]
    4ae0:	6033      	str	r3, [r6, #0]
}
    4ae2:	4620      	mov	r0, r4
    4ae4:	b003      	add	sp, #12
    4ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4aea:	bf00      	nop
    4aec:	00008697 	.word	0x00008697
    4af0:	000086f0 	.word	0x000086f0
    4af4:	000085d7 	.word	0x000085d7
    4af8:	00008705 	.word	0x00008705
    4afc:	000086c4 	.word	0x000086c4
    4b00:	000086db 	.word	0x000086db
    4b04:	20000b58 	.word	0x20000b58

00004b08 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b0c:	4604      	mov	r4, r0
    4b0e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4b10:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4b14:	f04f 0320 	mov.w	r3, #32
    4b18:	f3ef 8711 	mrs	r7, BASEPRI
    4b1c:	f383 8812 	msr	BASEPRI_MAX, r3
    4b20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b24:	4628      	mov	r0, r5
    4b26:	f000 f93f 	bl	4da8 <z_spin_lock_valid>
    4b2a:	b968      	cbnz	r0, 4b48 <k_mem_slab_free+0x40>
    4b2c:	4a22      	ldr	r2, [pc, #136]	; (4bb8 <k_mem_slab_free+0xb0>)
    4b2e:	4923      	ldr	r1, [pc, #140]	; (4bbc <k_mem_slab_free+0xb4>)
    4b30:	4823      	ldr	r0, [pc, #140]	; (4bc0 <k_mem_slab_free+0xb8>)
    4b32:	238e      	movs	r3, #142	; 0x8e
    4b34:	f002 fcaa 	bl	748c <assert_print>
    4b38:	4822      	ldr	r0, [pc, #136]	; (4bc4 <k_mem_slab_free+0xbc>)
    4b3a:	4629      	mov	r1, r5
    4b3c:	f002 fca6 	bl	748c <assert_print>
    4b40:	481d      	ldr	r0, [pc, #116]	; (4bb8 <k_mem_slab_free+0xb0>)
    4b42:	218e      	movs	r1, #142	; 0x8e
    4b44:	f002 fc9b 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    4b48:	4628      	mov	r0, r5
    4b4a:	f000 f94b 	bl	4de4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b4e:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4b52:	f1b8 0f00 	cmp.w	r8, #0
    4b56:	d10f      	bne.n	4b78 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4b58:	4620      	mov	r0, r4
    4b5a:	f001 fabb 	bl	60d4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4b5e:	b158      	cbz	r0, 4b78 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4b60:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4b62:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4b64:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4b68:	f000 ff0a 	bl	5980 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4b6c:	4639      	mov	r1, r7
    4b6e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4b74:	f000 bcb8 	b.w	54e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4b78:	6833      	ldr	r3, [r6, #0]
    4b7a:	69a2      	ldr	r2, [r4, #24]
    4b7c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4b7e:	6833      	ldr	r3, [r6, #0]
    4b80:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4b82:	69e3      	ldr	r3, [r4, #28]
    4b84:	3b01      	subs	r3, #1
    4b86:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b88:	4628      	mov	r0, r5
    4b8a:	f000 f91b 	bl	4dc4 <z_spin_unlock_valid>
    4b8e:	b968      	cbnz	r0, 4bac <k_mem_slab_free+0xa4>
    4b90:	4a09      	ldr	r2, [pc, #36]	; (4bb8 <k_mem_slab_free+0xb0>)
    4b92:	490d      	ldr	r1, [pc, #52]	; (4bc8 <k_mem_slab_free+0xc0>)
    4b94:	480a      	ldr	r0, [pc, #40]	; (4bc0 <k_mem_slab_free+0xb8>)
    4b96:	23b9      	movs	r3, #185	; 0xb9
    4b98:	f002 fc78 	bl	748c <assert_print>
    4b9c:	480b      	ldr	r0, [pc, #44]	; (4bcc <k_mem_slab_free+0xc4>)
    4b9e:	4629      	mov	r1, r5
    4ba0:	f002 fc74 	bl	748c <assert_print>
    4ba4:	4804      	ldr	r0, [pc, #16]	; (4bb8 <k_mem_slab_free+0xb0>)
    4ba6:	21b9      	movs	r1, #185	; 0xb9
    4ba8:	f002 fc69 	bl	747e <assert_post_action>
	__asm__ volatile(
    4bac:	f387 8811 	msr	BASEPRI, r7
    4bb0:	f3bf 8f6f 	isb	sy
}
    4bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bb8:	00008697 	.word	0x00008697
    4bbc:	000086f0 	.word	0x000086f0
    4bc0:	000085d7 	.word	0x000085d7
    4bc4:	00008705 	.word	0x00008705
    4bc8:	000086c4 	.word	0x000086c4
    4bcc:	000086db 	.word	0x000086db

00004bd0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bd4:	b085      	sub	sp, #20
    4bd6:	4604      	mov	r4, r0
    4bd8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4bdc:	f1b8 0f0f 	cmp.w	r8, #15
{
    4be0:	460f      	mov	r7, r1
    4be2:	4615      	mov	r5, r2
    4be4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    4be6:	d132      	bne.n	4c4e <z_setup_new_thread+0x7e>
    4be8:	4b25      	ldr	r3, [pc, #148]	; (4c80 <z_setup_new_thread+0xb0>)
    4bea:	4599      	cmp	r9, r3
    4bec:	d133      	bne.n	4c56 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4bee:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4bf2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4bf8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4bfa:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    4bfc:	2304      	movs	r3, #4
    4bfe:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c00:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4c04:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    4c08:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    4c0e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c12:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c14:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c1a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    4c1c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c20:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    4c22:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c24:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4c26:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    4c2a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    4c2c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    4c2e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c30:	4642      	mov	r2, r8
    4c32:	4639      	mov	r1, r7
    4c34:	4620      	mov	r0, r4
    4c36:	f7fc ff5d 	bl	1af4 <arch_new_thread>
	if (!_current) {
    4c3a:	4b12      	ldr	r3, [pc, #72]	; (4c84 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    4c3c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    4c3e:	689b      	ldr	r3, [r3, #8]
    4c40:	b103      	cbz	r3, 4c44 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    4c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4c44:	6723      	str	r3, [r4, #112]	; 0x70
}
    4c46:	4640      	mov	r0, r8
    4c48:	b005      	add	sp, #20
    4c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4c4e:	f108 0310 	add.w	r3, r8, #16
    4c52:	2b1e      	cmp	r3, #30
    4c54:	d9cb      	bls.n	4bee <z_setup_new_thread+0x1e>
    4c56:	4a0c      	ldr	r2, [pc, #48]	; (4c88 <z_setup_new_thread+0xb8>)
    4c58:	490c      	ldr	r1, [pc, #48]	; (4c8c <z_setup_new_thread+0xbc>)
    4c5a:	480d      	ldr	r0, [pc, #52]	; (4c90 <z_setup_new_thread+0xc0>)
    4c5c:	f240 13ff 	movw	r3, #511	; 0x1ff
    4c60:	f002 fc14 	bl	748c <assert_print>
    4c64:	4641      	mov	r1, r8
    4c66:	480b      	ldr	r0, [pc, #44]	; (4c94 <z_setup_new_thread+0xc4>)
    4c68:	f06f 030f 	mvn.w	r3, #15
    4c6c:	220e      	movs	r2, #14
    4c6e:	f002 fc0d 	bl	748c <assert_print>
    4c72:	4805      	ldr	r0, [pc, #20]	; (4c88 <z_setup_new_thread+0xb8>)
    4c74:	f240 11ff 	movw	r1, #511	; 0x1ff
    4c78:	f002 fc01 	bl	747e <assert_post_action>
    4c7c:	e7b7      	b.n	4bee <z_setup_new_thread+0x1e>
    4c7e:	bf00      	nop
    4c80:	00004df5 	.word	0x00004df5
    4c84:	20000b58 	.word	0x20000b58
    4c88:	0000902e 	.word	0x0000902e
    4c8c:	00009051 	.word	0x00009051
    4c90:	000085d7 	.word	0x000085d7
    4c94:	000090d1 	.word	0x000090d1

00004c98 <z_init_static_threads>:
{
    4c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c9c:	4c3b      	ldr	r4, [pc, #236]	; (4d8c <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4c9e:	4d3c      	ldr	r5, [pc, #240]	; (4d90 <z_init_static_threads+0xf8>)
    4ca0:	4f3c      	ldr	r7, [pc, #240]	; (4d94 <z_init_static_threads+0xfc>)
{
    4ca2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4ca4:	42ac      	cmp	r4, r5
    4ca6:	4626      	mov	r6, r4
    4ca8:	d90e      	bls.n	4cc8 <z_init_static_threads+0x30>
    4caa:	493b      	ldr	r1, [pc, #236]	; (4d98 <z_init_static_threads+0x100>)
    4cac:	483b      	ldr	r0, [pc, #236]	; (4d9c <z_init_static_threads+0x104>)
    4cae:	f240 23d5 	movw	r3, #725	; 0x2d5
    4cb2:	463a      	mov	r2, r7
    4cb4:	f002 fbea 	bl	748c <assert_print>
    4cb8:	4839      	ldr	r0, [pc, #228]	; (4da0 <z_init_static_threads+0x108>)
    4cba:	f002 fbe7 	bl	748c <assert_print>
    4cbe:	f240 21d5 	movw	r1, #725	; 0x2d5
    4cc2:	4638      	mov	r0, r7
    4cc4:	f002 fbdb 	bl	747e <assert_post_action>
    4cc8:	42ae      	cmp	r6, r5
    4cca:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4cce:	d31f      	bcc.n	4d10 <z_init_static_threads+0x78>
	k_sched_lock();
    4cd0:	f000 fc4e 	bl	5570 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4cd4:	4c2d      	ldr	r4, [pc, #180]	; (4d8c <z_init_static_threads+0xf4>)
    4cd6:	4e2f      	ldr	r6, [pc, #188]	; (4d94 <z_init_static_threads+0xfc>)
    4cd8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4d98 <z_init_static_threads+0x100>
    4cdc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4d9c <z_init_static_threads+0x104>
    4ce0:	42ac      	cmp	r4, r5
    4ce2:	d90e      	bls.n	4d02 <z_init_static_threads+0x6a>
    4ce4:	4641      	mov	r1, r8
    4ce6:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    4cea:	4632      	mov	r2, r6
    4cec:	4648      	mov	r0, r9
    4cee:	f002 fbcd 	bl	748c <assert_print>
    4cf2:	482b      	ldr	r0, [pc, #172]	; (4da0 <z_init_static_threads+0x108>)
    4cf4:	f002 fbca 	bl	748c <assert_print>
    4cf8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    4cfc:	4630      	mov	r0, r6
    4cfe:	f002 fbbe 	bl	747e <assert_post_action>
    4d02:	42ac      	cmp	r4, r5
    4d04:	d320      	bcc.n	4d48 <z_init_static_threads+0xb0>
}
    4d06:	b007      	add	sp, #28
    4d08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4d0c:	f001 b91a 	b.w	5f44 <k_sched_unlock>
		z_setup_new_thread(
    4d10:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4d14:	9305      	str	r3, [sp, #20]
    4d16:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4d1a:	9304      	str	r3, [sp, #16]
    4d1c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4d20:	9303      	str	r3, [sp, #12]
    4d22:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4d26:	9302      	str	r3, [sp, #8]
    4d28:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4d2c:	9301      	str	r3, [sp, #4]
    4d2e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4d32:	9300      	str	r3, [sp, #0]
    4d34:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4d38:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4d3c:	f7ff ff48 	bl	4bd0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4d40:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4d44:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4d46:	e7ad      	b.n	4ca4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4d4a:	1c5a      	adds	r2, r3, #1
    4d4c:	d00f      	beq.n	4d6e <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    4d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4d52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4d56:	f240 30e7 	movw	r0, #999	; 0x3e7
    4d5a:	2100      	movs	r1, #0
    4d5c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d60:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4d64:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d66:	d104      	bne.n	4d72 <z_init_static_threads+0xda>
	z_sched_start(thread);
    4d68:	4638      	mov	r0, r7
    4d6a:	f000 fe51 	bl	5a10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4d6e:	3430      	adds	r4, #48	; 0x30
    4d70:	e7b6      	b.n	4ce0 <z_init_static_threads+0x48>
    4d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4d76:	2300      	movs	r3, #0
    4d78:	f7fb f9c2 	bl	100 <__aeabi_uldivmod>
    4d7c:	4602      	mov	r2, r0
    4d7e:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4d80:	f107 0018 	add.w	r0, r7, #24
    4d84:	4907      	ldr	r1, [pc, #28]	; (4da4 <z_init_static_threads+0x10c>)
    4d86:	f001 fca1 	bl	66cc <z_add_timeout>
    4d8a:	e7f0      	b.n	4d6e <z_init_static_threads+0xd6>
    4d8c:	2000015c 	.word	0x2000015c
    4d90:	2000015c 	.word	0x2000015c
    4d94:	0000902e 	.word	0x0000902e
    4d98:	00009102 	.word	0x00009102
    4d9c:	000085d7 	.word	0x000085d7
    4da0:	0000900f 	.word	0x0000900f
    4da4:	00005ab9 	.word	0x00005ab9

00004da8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4da8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    4daa:	b138      	cbz	r0, 4dbc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    4dac:	4b04      	ldr	r3, [pc, #16]	; (4dc0 <z_spin_lock_valid+0x18>)
    4dae:	7d1b      	ldrb	r3, [r3, #20]
    4db0:	f000 0003 	and.w	r0, r0, #3
    4db4:	1ac0      	subs	r0, r0, r3
    4db6:	bf18      	it	ne
    4db8:	2001      	movne	r0, #1
    4dba:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4dbc:	2001      	movs	r0, #1
}
    4dbe:	4770      	bx	lr
    4dc0:	20000b58 	.word	0x20000b58

00004dc4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4dc4:	4906      	ldr	r1, [pc, #24]	; (4de0 <z_spin_unlock_valid+0x1c>)
{
    4dc6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4dc8:	688a      	ldr	r2, [r1, #8]
    4dca:	7d08      	ldrb	r0, [r1, #20]
    4dcc:	6819      	ldr	r1, [r3, #0]
    4dce:	4302      	orrs	r2, r0
    4dd0:	4291      	cmp	r1, r2
    4dd2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    4dd6:	bf04      	itt	eq
    4dd8:	6018      	streq	r0, [r3, #0]
	return true;
    4dda:	2001      	moveq	r0, #1
}
    4ddc:	4770      	bx	lr
    4dde:	bf00      	nop
    4de0:	20000b58 	.word	0x20000b58

00004de4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    4de4:	4a02      	ldr	r2, [pc, #8]	; (4df0 <z_spin_lock_set_owner+0xc>)
    4de6:	7d11      	ldrb	r1, [r2, #20]
    4de8:	6893      	ldr	r3, [r2, #8]
    4dea:	430b      	orrs	r3, r1
    4dec:	6003      	str	r3, [r0, #0]
}
    4dee:	4770      	bx	lr
    4df0:	20000b58 	.word	0x20000b58

00004df4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4df4:	4c13      	ldr	r4, [pc, #76]	; (4e44 <idle+0x50>)
{
    4df6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4df8:	68a3      	ldr	r3, [r4, #8]
    4dfa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	da09      	bge.n	4e16 <idle+0x22>
    4e02:	4911      	ldr	r1, [pc, #68]	; (4e48 <idle+0x54>)
    4e04:	4811      	ldr	r0, [pc, #68]	; (4e4c <idle+0x58>)
    4e06:	4a12      	ldr	r2, [pc, #72]	; (4e50 <idle+0x5c>)
    4e08:	2327      	movs	r3, #39	; 0x27
    4e0a:	f002 fb3f 	bl	748c <assert_print>
    4e0e:	4810      	ldr	r0, [pc, #64]	; (4e50 <idle+0x5c>)
    4e10:	2127      	movs	r1, #39	; 0x27
    4e12:	f002 fb34 	bl	747e <assert_post_action>
	return !z_sys_post_kernel;
    4e16:	4d0f      	ldr	r5, [pc, #60]	; (4e54 <idle+0x60>)
	__asm__ volatile(
    4e18:	f04f 0220 	mov.w	r2, #32
    4e1c:	f3ef 8311 	mrs	r3, BASEPRI
    4e20:	f382 8812 	msr	BASEPRI_MAX, r2
    4e24:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4e28:	f001 fd66 	bl	68f8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4e2c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4e2e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4e30:	b913      	cbnz	r3, 4e38 <idle+0x44>
	arch_cpu_idle();
    4e32:	f7fc fd81 	bl	1938 <arch_cpu_idle>
}
    4e36:	e7ef      	b.n	4e18 <idle+0x24>
    4e38:	f7fc fbd4 	bl	15e4 <pm_system_suspend>
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d1eb      	bne.n	4e18 <idle+0x24>
    4e40:	e7f7      	b.n	4e32 <idle+0x3e>
    4e42:	bf00      	nop
    4e44:	20000b58 	.word	0x20000b58
    4e48:	00009150 	.word	0x00009150
    4e4c:	000085d7 	.word	0x000085d7
    4e50:	0000912f 	.word	0x0000912f
    4e54:	20001205 	.word	0x20001205

00004e58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4e5c:	4604      	mov	r4, r0
    4e5e:	4617      	mov	r7, r2
    4e60:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e62:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4e66:	b163      	cbz	r3, 4e82 <z_impl_k_mutex_lock+0x2a>
    4e68:	496d      	ldr	r1, [pc, #436]	; (5020 <z_impl_k_mutex_lock+0x1c8>)
    4e6a:	4a6e      	ldr	r2, [pc, #440]	; (5024 <z_impl_k_mutex_lock+0x1cc>)
    4e6c:	486e      	ldr	r0, [pc, #440]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    4e6e:	2365      	movs	r3, #101	; 0x65
    4e70:	f002 fb0c 	bl	748c <assert_print>
    4e74:	486d      	ldr	r0, [pc, #436]	; (502c <z_impl_k_mutex_lock+0x1d4>)
    4e76:	f002 fb09 	bl	748c <assert_print>
    4e7a:	486a      	ldr	r0, [pc, #424]	; (5024 <z_impl_k_mutex_lock+0x1cc>)
    4e7c:	2165      	movs	r1, #101	; 0x65
    4e7e:	f002 fafe 	bl	747e <assert_post_action>
    4e82:	f04f 0320 	mov.w	r3, #32
    4e86:	f3ef 8811 	mrs	r8, BASEPRI
    4e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e92:	4867      	ldr	r0, [pc, #412]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4e94:	f7ff ff88 	bl	4da8 <z_spin_lock_valid>
    4e98:	b968      	cbnz	r0, 4eb6 <z_impl_k_mutex_lock+0x5e>
    4e9a:	4a66      	ldr	r2, [pc, #408]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4e9c:	4966      	ldr	r1, [pc, #408]	; (5038 <z_impl_k_mutex_lock+0x1e0>)
    4e9e:	4862      	ldr	r0, [pc, #392]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    4ea0:	238e      	movs	r3, #142	; 0x8e
    4ea2:	f002 faf3 	bl	748c <assert_print>
    4ea6:	4962      	ldr	r1, [pc, #392]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4ea8:	4864      	ldr	r0, [pc, #400]	; (503c <z_impl_k_mutex_lock+0x1e4>)
    4eaa:	f002 faef 	bl	748c <assert_print>
    4eae:	4861      	ldr	r0, [pc, #388]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4eb0:	218e      	movs	r1, #142	; 0x8e
    4eb2:	f002 fae4 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    4eb6:	485e      	ldr	r0, [pc, #376]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4eb8:	f7ff ff94 	bl	4de4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4ebc:	68e3      	ldr	r3, [r4, #12]
    4ebe:	4a60      	ldr	r2, [pc, #384]	; (5040 <z_impl_k_mutex_lock+0x1e8>)
    4ec0:	b1fb      	cbz	r3, 4f02 <z_impl_k_mutex_lock+0xaa>
    4ec2:	68a0      	ldr	r0, [r4, #8]
    4ec4:	6891      	ldr	r1, [r2, #8]
    4ec6:	4288      	cmp	r0, r1
    4ec8:	d03d      	beq.n	4f46 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4eca:	ea57 0306 	orrs.w	r3, r7, r6
    4ece:	d13c      	bne.n	4f4a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ed0:	4857      	ldr	r0, [pc, #348]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4ed2:	f7ff ff77 	bl	4dc4 <z_spin_unlock_valid>
    4ed6:	b968      	cbnz	r0, 4ef4 <z_impl_k_mutex_lock+0x9c>
    4ed8:	4a56      	ldr	r2, [pc, #344]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4eda:	495a      	ldr	r1, [pc, #360]	; (5044 <z_impl_k_mutex_lock+0x1ec>)
    4edc:	4852      	ldr	r0, [pc, #328]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    4ede:	23b9      	movs	r3, #185	; 0xb9
    4ee0:	f002 fad4 	bl	748c <assert_print>
    4ee4:	4952      	ldr	r1, [pc, #328]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4ee6:	4858      	ldr	r0, [pc, #352]	; (5048 <z_impl_k_mutex_lock+0x1f0>)
    4ee8:	f002 fad0 	bl	748c <assert_print>
    4eec:	4851      	ldr	r0, [pc, #324]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4eee:	21b9      	movs	r1, #185	; 0xb9
    4ef0:	f002 fac5 	bl	747e <assert_post_action>
	__asm__ volatile(
    4ef4:	f388 8811 	msr	BASEPRI, r8
    4ef8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4efc:	f06f 000f 	mvn.w	r0, #15
    4f00:	e01e      	b.n	4f40 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4f02:	6891      	ldr	r1, [r2, #8]
    4f04:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f08:	4849      	ldr	r0, [pc, #292]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4f0a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4f0c:	3301      	adds	r3, #1
    4f0e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4f10:	6893      	ldr	r3, [r2, #8]
    4f12:	60a3      	str	r3, [r4, #8]
    4f14:	f7ff ff56 	bl	4dc4 <z_spin_unlock_valid>
    4f18:	b968      	cbnz	r0, 4f36 <z_impl_k_mutex_lock+0xde>
    4f1a:	4a46      	ldr	r2, [pc, #280]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4f1c:	4949      	ldr	r1, [pc, #292]	; (5044 <z_impl_k_mutex_lock+0x1ec>)
    4f1e:	4842      	ldr	r0, [pc, #264]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    4f20:	23b9      	movs	r3, #185	; 0xb9
    4f22:	f002 fab3 	bl	748c <assert_print>
    4f26:	4942      	ldr	r1, [pc, #264]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4f28:	4847      	ldr	r0, [pc, #284]	; (5048 <z_impl_k_mutex_lock+0x1f0>)
    4f2a:	f002 faaf 	bl	748c <assert_print>
    4f2e:	4841      	ldr	r0, [pc, #260]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4f30:	21b9      	movs	r1, #185	; 0xb9
    4f32:	f002 faa4 	bl	747e <assert_post_action>
    4f36:	f388 8811 	msr	BASEPRI, r8
    4f3a:	f3bf 8f6f 	isb	sy
		return 0;
    4f3e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4f40:	b002      	add	sp, #8
    4f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4f46:	6921      	ldr	r1, [r4, #16]
    4f48:	e7de      	b.n	4f08 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4f4a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f4e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4f52:	4299      	cmp	r1, r3
    4f54:	bfa8      	it	ge
    4f56:	4619      	movge	r1, r3
    4f58:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4f5c:	4291      	cmp	r1, r2
    4f5e:	bfb8      	it	lt
    4f60:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4f62:	428b      	cmp	r3, r1
    4f64:	dd43      	ble.n	4fee <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    4f66:	f002 ff5f 	bl	7e28 <adjust_owner_prio.isra.0>
    4f6a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4f6c:	e9cd 7600 	strd	r7, r6, [sp]
    4f70:	482f      	ldr	r0, [pc, #188]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4f72:	4622      	mov	r2, r4
    4f74:	4641      	mov	r1, r8
    4f76:	f000 feb3 	bl	5ce0 <z_pend_curr>
	if (got_mutex == 0) {
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d0e0      	beq.n	4f40 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4f7e:	f04f 0320 	mov.w	r3, #32
    4f82:	f3ef 8611 	mrs	r6, BASEPRI
    4f86:	f383 8812 	msr	BASEPRI_MAX, r3
    4f8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f8e:	4828      	ldr	r0, [pc, #160]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4f90:	f7ff ff0a 	bl	4da8 <z_spin_lock_valid>
    4f94:	b968      	cbnz	r0, 4fb2 <z_impl_k_mutex_lock+0x15a>
    4f96:	4a27      	ldr	r2, [pc, #156]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4f98:	4927      	ldr	r1, [pc, #156]	; (5038 <z_impl_k_mutex_lock+0x1e0>)
    4f9a:	4823      	ldr	r0, [pc, #140]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    4f9c:	238e      	movs	r3, #142	; 0x8e
    4f9e:	f002 fa75 	bl	748c <assert_print>
    4fa2:	4923      	ldr	r1, [pc, #140]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4fa4:	4825      	ldr	r0, [pc, #148]	; (503c <z_impl_k_mutex_lock+0x1e4>)
    4fa6:	f002 fa71 	bl	748c <assert_print>
    4faa:	4822      	ldr	r0, [pc, #136]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4fac:	218e      	movs	r1, #142	; 0x8e
    4fae:	f002 fa66 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    4fb2:	481f      	ldr	r0, [pc, #124]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4fb4:	f7ff ff16 	bl	4de4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4fb8:	6823      	ldr	r3, [r4, #0]
    4fba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fbc:	429c      	cmp	r4, r3
    4fbe:	d00a      	beq.n	4fd6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4fc0:	b14b      	cbz	r3, 4fd6 <z_impl_k_mutex_lock+0x17e>
    4fc2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4fc6:	4299      	cmp	r1, r3
    4fc8:	bfa8      	it	ge
    4fca:	4619      	movge	r1, r3
    4fcc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4fd0:	4299      	cmp	r1, r3
    4fd2:	bfb8      	it	lt
    4fd4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4fd6:	68a0      	ldr	r0, [r4, #8]
    4fd8:	f002 ff26 	bl	7e28 <adjust_owner_prio.isra.0>
    4fdc:	b900      	cbnz	r0, 4fe0 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    4fde:	b145      	cbz	r5, 4ff2 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    4fe0:	4813      	ldr	r0, [pc, #76]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4fe2:	4631      	mov	r1, r6
    4fe4:	f000 fa80 	bl	54e8 <z_reschedule>
	return -EAGAIN;
    4fe8:	f06f 000a 	mvn.w	r0, #10
    4fec:	e7a8      	b.n	4f40 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    4fee:	2500      	movs	r5, #0
    4ff0:	e7bc      	b.n	4f6c <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ff2:	480f      	ldr	r0, [pc, #60]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    4ff4:	f7ff fee6 	bl	4dc4 <z_spin_unlock_valid>
    4ff8:	b968      	cbnz	r0, 5016 <z_impl_k_mutex_lock+0x1be>
    4ffa:	4a0e      	ldr	r2, [pc, #56]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    4ffc:	4911      	ldr	r1, [pc, #68]	; (5044 <z_impl_k_mutex_lock+0x1ec>)
    4ffe:	480a      	ldr	r0, [pc, #40]	; (5028 <z_impl_k_mutex_lock+0x1d0>)
    5000:	23b9      	movs	r3, #185	; 0xb9
    5002:	f002 fa43 	bl	748c <assert_print>
    5006:	490a      	ldr	r1, [pc, #40]	; (5030 <z_impl_k_mutex_lock+0x1d8>)
    5008:	480f      	ldr	r0, [pc, #60]	; (5048 <z_impl_k_mutex_lock+0x1f0>)
    500a:	f002 fa3f 	bl	748c <assert_print>
    500e:	4809      	ldr	r0, [pc, #36]	; (5034 <z_impl_k_mutex_lock+0x1dc>)
    5010:	21b9      	movs	r1, #185	; 0xb9
    5012:	f002 fa34 	bl	747e <assert_post_action>
	__asm__ volatile(
    5016:	f386 8811 	msr	BASEPRI, r6
    501a:	f3bf 8f6f 	isb	sy
    501e:	e7e3      	b.n	4fe8 <z_impl_k_mutex_lock+0x190>
    5020:	0000919a 	.word	0x0000919a
    5024:	00009178 	.word	0x00009178
    5028:	000085d7 	.word	0x000085d7
    502c:	000091ac 	.word	0x000091ac
    5030:	20000b80 	.word	0x20000b80
    5034:	00008697 	.word	0x00008697
    5038:	000086f0 	.word	0x000086f0
    503c:	00008705 	.word	0x00008705
    5040:	20000b58 	.word	0x20000b58
    5044:	000086c4 	.word	0x000086c4
    5048:	000086db 	.word	0x000086db

0000504c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    504c:	b538      	push	{r3, r4, r5, lr}
    504e:	4604      	mov	r4, r0
    5050:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5054:	b163      	cbz	r3, 5070 <z_impl_k_mutex_unlock+0x24>
    5056:	4950      	ldr	r1, [pc, #320]	; (5198 <z_impl_k_mutex_unlock+0x14c>)
    5058:	4a50      	ldr	r2, [pc, #320]	; (519c <z_impl_k_mutex_unlock+0x150>)
    505a:	4851      	ldr	r0, [pc, #324]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    505c:	23c7      	movs	r3, #199	; 0xc7
    505e:	f002 fa15 	bl	748c <assert_print>
    5062:	4850      	ldr	r0, [pc, #320]	; (51a4 <z_impl_k_mutex_unlock+0x158>)
    5064:	f002 fa12 	bl	748c <assert_print>
    5068:	484c      	ldr	r0, [pc, #304]	; (519c <z_impl_k_mutex_unlock+0x150>)
    506a:	21c7      	movs	r1, #199	; 0xc7
    506c:	f002 fa07 	bl	747e <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5070:	68a3      	ldr	r3, [r4, #8]
    5072:	2b00      	cmp	r3, #0
    5074:	f000 8089 	beq.w	518a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5078:	4d4b      	ldr	r5, [pc, #300]	; (51a8 <z_impl_k_mutex_unlock+0x15c>)
    507a:	68aa      	ldr	r2, [r5, #8]
    507c:	4293      	cmp	r3, r2
    507e:	f040 8087 	bne.w	5190 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5082:	68e3      	ldr	r3, [r4, #12]
    5084:	b94b      	cbnz	r3, 509a <z_impl_k_mutex_unlock+0x4e>
    5086:	4949      	ldr	r1, [pc, #292]	; (51ac <z_impl_k_mutex_unlock+0x160>)
    5088:	4845      	ldr	r0, [pc, #276]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    508a:	4a44      	ldr	r2, [pc, #272]	; (519c <z_impl_k_mutex_unlock+0x150>)
    508c:	23df      	movs	r3, #223	; 0xdf
    508e:	f002 f9fd 	bl	748c <assert_print>
    5092:	4842      	ldr	r0, [pc, #264]	; (519c <z_impl_k_mutex_unlock+0x150>)
    5094:	21df      	movs	r1, #223	; 0xdf
    5096:	f002 f9f2 	bl	747e <assert_post_action>
    509a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    509e:	b163      	cbz	r3, 50ba <z_impl_k_mutex_unlock+0x6e>
    50a0:	493d      	ldr	r1, [pc, #244]	; (5198 <z_impl_k_mutex_unlock+0x14c>)
    50a2:	4a43      	ldr	r2, [pc, #268]	; (51b0 <z_impl_k_mutex_unlock+0x164>)
    50a4:	483e      	ldr	r0, [pc, #248]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    50a6:	23fd      	movs	r3, #253	; 0xfd
    50a8:	f002 f9f0 	bl	748c <assert_print>
    50ac:	4841      	ldr	r0, [pc, #260]	; (51b4 <z_impl_k_mutex_unlock+0x168>)
    50ae:	f002 f9ed 	bl	748c <assert_print>
    50b2:	483f      	ldr	r0, [pc, #252]	; (51b0 <z_impl_k_mutex_unlock+0x164>)
    50b4:	21fd      	movs	r1, #253	; 0xfd
    50b6:	f002 f9e2 	bl	747e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    50ba:	68ab      	ldr	r3, [r5, #8]
    50bc:	7bdb      	ldrb	r3, [r3, #15]
    50be:	2b01      	cmp	r3, #1
    50c0:	d10c      	bne.n	50dc <z_impl_k_mutex_unlock+0x90>
    50c2:	493d      	ldr	r1, [pc, #244]	; (51b8 <z_impl_k_mutex_unlock+0x16c>)
    50c4:	4a3a      	ldr	r2, [pc, #232]	; (51b0 <z_impl_k_mutex_unlock+0x164>)
    50c6:	4836      	ldr	r0, [pc, #216]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    50c8:	23fe      	movs	r3, #254	; 0xfe
    50ca:	f002 f9df 	bl	748c <assert_print>
    50ce:	4839      	ldr	r0, [pc, #228]	; (51b4 <z_impl_k_mutex_unlock+0x168>)
    50d0:	f002 f9dc 	bl	748c <assert_print>
    50d4:	4836      	ldr	r0, [pc, #216]	; (51b0 <z_impl_k_mutex_unlock+0x164>)
    50d6:	21fe      	movs	r1, #254	; 0xfe
    50d8:	f002 f9d1 	bl	747e <assert_post_action>

	--_current->base.sched_locked;
    50dc:	68aa      	ldr	r2, [r5, #8]
    50de:	7bd3      	ldrb	r3, [r2, #15]
    50e0:	3b01      	subs	r3, #1
    50e2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    50e4:	68e3      	ldr	r3, [r4, #12]
    50e6:	2b01      	cmp	r3, #1
    50e8:	d905      	bls.n	50f6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    50ea:	3b01      	subs	r3, #1
    50ec:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    50ee:	f000 ff29 	bl	5f44 <k_sched_unlock>

	return 0;
    50f2:	2000      	movs	r0, #0
}
    50f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    50f6:	f04f 0320 	mov.w	r3, #32
    50fa:	f3ef 8511 	mrs	r5, BASEPRI
    50fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5102:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5106:	482d      	ldr	r0, [pc, #180]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    5108:	f7ff fe4e 	bl	4da8 <z_spin_lock_valid>
    510c:	b968      	cbnz	r0, 512a <z_impl_k_mutex_unlock+0xde>
    510e:	4a2c      	ldr	r2, [pc, #176]	; (51c0 <z_impl_k_mutex_unlock+0x174>)
    5110:	492c      	ldr	r1, [pc, #176]	; (51c4 <z_impl_k_mutex_unlock+0x178>)
    5112:	4823      	ldr	r0, [pc, #140]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    5114:	238e      	movs	r3, #142	; 0x8e
    5116:	f002 f9b9 	bl	748c <assert_print>
    511a:	4928      	ldr	r1, [pc, #160]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    511c:	482a      	ldr	r0, [pc, #168]	; (51c8 <z_impl_k_mutex_unlock+0x17c>)
    511e:	f002 f9b5 	bl	748c <assert_print>
    5122:	4827      	ldr	r0, [pc, #156]	; (51c0 <z_impl_k_mutex_unlock+0x174>)
    5124:	218e      	movs	r1, #142	; 0x8e
    5126:	f002 f9aa 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    512a:	4824      	ldr	r0, [pc, #144]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    512c:	f7ff fe5a 	bl	4de4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5130:	6921      	ldr	r1, [r4, #16]
    5132:	68a0      	ldr	r0, [r4, #8]
    5134:	f002 fe78 	bl	7e28 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5138:	4620      	mov	r0, r4
    513a:	f000 ffcb 	bl	60d4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    513e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5140:	b158      	cbz	r0, 515a <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    5142:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5146:	6122      	str	r2, [r4, #16]
    5148:	2200      	movs	r2, #0
    514a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    514c:	f000 fc18 	bl	5980 <z_ready_thread>
		z_reschedule(&lock, key);
    5150:	481a      	ldr	r0, [pc, #104]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    5152:	4629      	mov	r1, r5
    5154:	f000 f9c8 	bl	54e8 <z_reschedule>
    5158:	e7c9      	b.n	50ee <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    515a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    515c:	4817      	ldr	r0, [pc, #92]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    515e:	f7ff fe31 	bl	4dc4 <z_spin_unlock_valid>
    5162:	b968      	cbnz	r0, 5180 <z_impl_k_mutex_unlock+0x134>
    5164:	4a16      	ldr	r2, [pc, #88]	; (51c0 <z_impl_k_mutex_unlock+0x174>)
    5166:	4919      	ldr	r1, [pc, #100]	; (51cc <z_impl_k_mutex_unlock+0x180>)
    5168:	480d      	ldr	r0, [pc, #52]	; (51a0 <z_impl_k_mutex_unlock+0x154>)
    516a:	23b9      	movs	r3, #185	; 0xb9
    516c:	f002 f98e 	bl	748c <assert_print>
    5170:	4912      	ldr	r1, [pc, #72]	; (51bc <z_impl_k_mutex_unlock+0x170>)
    5172:	4817      	ldr	r0, [pc, #92]	; (51d0 <z_impl_k_mutex_unlock+0x184>)
    5174:	f002 f98a 	bl	748c <assert_print>
    5178:	4811      	ldr	r0, [pc, #68]	; (51c0 <z_impl_k_mutex_unlock+0x174>)
    517a:	21b9      	movs	r1, #185	; 0xb9
    517c:	f002 f97f 	bl	747e <assert_post_action>
	__asm__ volatile(
    5180:	f385 8811 	msr	BASEPRI, r5
    5184:	f3bf 8f6f 	isb	sy
    5188:	e7b1      	b.n	50ee <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    518a:	f06f 0015 	mvn.w	r0, #21
    518e:	e7b1      	b.n	50f4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5194:	e7ae      	b.n	50f4 <z_impl_k_mutex_unlock+0xa8>
    5196:	bf00      	nop
    5198:	0000919a 	.word	0x0000919a
    519c:	00009178 	.word	0x00009178
    51a0:	000085d7 	.word	0x000085d7
    51a4:	000091ac 	.word	0x000091ac
    51a8:	20000b58 	.word	0x20000b58
    51ac:	000091d1 	.word	0x000091d1
    51b0:	000091e8 	.word	0x000091e8
    51b4:	00009213 	.word	0x00009213
    51b8:	00009216 	.word	0x00009216
    51bc:	20000b80 	.word	0x20000b80
    51c0:	00008697 	.word	0x00008697
    51c4:	000086f0 	.word	0x000086f0
    51c8:	00008705 	.word	0x00008705
    51cc:	000086c4 	.word	0x000086c4
    51d0:	000086db 	.word	0x000086db

000051d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    51d4:	b538      	push	{r3, r4, r5, lr}
    51d6:	4604      	mov	r4, r0
	__asm__ volatile(
    51d8:	f04f 0320 	mov.w	r3, #32
    51dc:	f3ef 8511 	mrs	r5, BASEPRI
    51e0:	f383 8812 	msr	BASEPRI_MAX, r3
    51e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51e8:	4814      	ldr	r0, [pc, #80]	; (523c <z_impl_k_sem_give+0x68>)
    51ea:	f7ff fddd 	bl	4da8 <z_spin_lock_valid>
    51ee:	b968      	cbnz	r0, 520c <z_impl_k_sem_give+0x38>
    51f0:	4a13      	ldr	r2, [pc, #76]	; (5240 <z_impl_k_sem_give+0x6c>)
    51f2:	4914      	ldr	r1, [pc, #80]	; (5244 <z_impl_k_sem_give+0x70>)
    51f4:	4814      	ldr	r0, [pc, #80]	; (5248 <z_impl_k_sem_give+0x74>)
    51f6:	238e      	movs	r3, #142	; 0x8e
    51f8:	f002 f948 	bl	748c <assert_print>
    51fc:	490f      	ldr	r1, [pc, #60]	; (523c <z_impl_k_sem_give+0x68>)
    51fe:	4813      	ldr	r0, [pc, #76]	; (524c <z_impl_k_sem_give+0x78>)
    5200:	f002 f944 	bl	748c <assert_print>
    5204:	480e      	ldr	r0, [pc, #56]	; (5240 <z_impl_k_sem_give+0x6c>)
    5206:	218e      	movs	r1, #142	; 0x8e
    5208:	f002 f939 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    520c:	480b      	ldr	r0, [pc, #44]	; (523c <z_impl_k_sem_give+0x68>)
    520e:	f7ff fde9 	bl	4de4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5212:	4620      	mov	r0, r4
    5214:	f000 ff5e 	bl	60d4 <z_unpend_first_thread>

	if (thread != NULL) {
    5218:	b148      	cbz	r0, 522e <z_impl_k_sem_give+0x5a>
    521a:	2200      	movs	r2, #0
    521c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    521e:	f000 fbaf 	bl	5980 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5222:	4629      	mov	r1, r5
    5224:	4805      	ldr	r0, [pc, #20]	; (523c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    522a:	f000 b95d 	b.w	54e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    522e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5232:	429a      	cmp	r2, r3
    5234:	bf18      	it	ne
    5236:	3301      	addne	r3, #1
    5238:	60a3      	str	r3, [r4, #8]
}
    523a:	e7f2      	b.n	5222 <z_impl_k_sem_give+0x4e>
    523c:	20000b84 	.word	0x20000b84
    5240:	00008697 	.word	0x00008697
    5244:	000086f0 	.word	0x000086f0
    5248:	000085d7 	.word	0x000085d7
    524c:	00008705 	.word	0x00008705

00005250 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5252:	4604      	mov	r4, r0
    5254:	4616      	mov	r6, r2
    5256:	461d      	mov	r5, r3
    5258:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    525c:	b17b      	cbz	r3, 527e <z_impl_k_sem_take+0x2e>
    525e:	ea52 0305 	orrs.w	r3, r2, r5
    5262:	d00c      	beq.n	527e <z_impl_k_sem_take+0x2e>
    5264:	4935      	ldr	r1, [pc, #212]	; (533c <z_impl_k_sem_take+0xec>)
    5266:	4a36      	ldr	r2, [pc, #216]	; (5340 <z_impl_k_sem_take+0xf0>)
    5268:	4836      	ldr	r0, [pc, #216]	; (5344 <z_impl_k_sem_take+0xf4>)
    526a:	2379      	movs	r3, #121	; 0x79
    526c:	f002 f90e 	bl	748c <assert_print>
    5270:	4835      	ldr	r0, [pc, #212]	; (5348 <z_impl_k_sem_take+0xf8>)
    5272:	f002 f90b 	bl	748c <assert_print>
    5276:	4832      	ldr	r0, [pc, #200]	; (5340 <z_impl_k_sem_take+0xf0>)
    5278:	2179      	movs	r1, #121	; 0x79
    527a:	f002 f900 	bl	747e <assert_post_action>
    527e:	f04f 0320 	mov.w	r3, #32
    5282:	f3ef 8711 	mrs	r7, BASEPRI
    5286:	f383 8812 	msr	BASEPRI_MAX, r3
    528a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    528e:	482f      	ldr	r0, [pc, #188]	; (534c <z_impl_k_sem_take+0xfc>)
    5290:	f7ff fd8a 	bl	4da8 <z_spin_lock_valid>
    5294:	b968      	cbnz	r0, 52b2 <z_impl_k_sem_take+0x62>
    5296:	4a2e      	ldr	r2, [pc, #184]	; (5350 <z_impl_k_sem_take+0x100>)
    5298:	492e      	ldr	r1, [pc, #184]	; (5354 <z_impl_k_sem_take+0x104>)
    529a:	482a      	ldr	r0, [pc, #168]	; (5344 <z_impl_k_sem_take+0xf4>)
    529c:	238e      	movs	r3, #142	; 0x8e
    529e:	f002 f8f5 	bl	748c <assert_print>
    52a2:	492a      	ldr	r1, [pc, #168]	; (534c <z_impl_k_sem_take+0xfc>)
    52a4:	482c      	ldr	r0, [pc, #176]	; (5358 <z_impl_k_sem_take+0x108>)
    52a6:	f002 f8f1 	bl	748c <assert_print>
    52aa:	4829      	ldr	r0, [pc, #164]	; (5350 <z_impl_k_sem_take+0x100>)
    52ac:	218e      	movs	r1, #142	; 0x8e
    52ae:	f002 f8e6 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    52b2:	4826      	ldr	r0, [pc, #152]	; (534c <z_impl_k_sem_take+0xfc>)
    52b4:	f7ff fd96 	bl	4de4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    52b8:	68a3      	ldr	r3, [r4, #8]
    52ba:	b1d3      	cbz	r3, 52f2 <z_impl_k_sem_take+0xa2>
		sem->count--;
    52bc:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52be:	4823      	ldr	r0, [pc, #140]	; (534c <z_impl_k_sem_take+0xfc>)
    52c0:	60a3      	str	r3, [r4, #8]
    52c2:	f7ff fd7f 	bl	4dc4 <z_spin_unlock_valid>
    52c6:	b968      	cbnz	r0, 52e4 <z_impl_k_sem_take+0x94>
    52c8:	4a21      	ldr	r2, [pc, #132]	; (5350 <z_impl_k_sem_take+0x100>)
    52ca:	4924      	ldr	r1, [pc, #144]	; (535c <z_impl_k_sem_take+0x10c>)
    52cc:	481d      	ldr	r0, [pc, #116]	; (5344 <z_impl_k_sem_take+0xf4>)
    52ce:	23b9      	movs	r3, #185	; 0xb9
    52d0:	f002 f8dc 	bl	748c <assert_print>
    52d4:	491d      	ldr	r1, [pc, #116]	; (534c <z_impl_k_sem_take+0xfc>)
    52d6:	4822      	ldr	r0, [pc, #136]	; (5360 <z_impl_k_sem_take+0x110>)
    52d8:	f002 f8d8 	bl	748c <assert_print>
    52dc:	481c      	ldr	r0, [pc, #112]	; (5350 <z_impl_k_sem_take+0x100>)
    52de:	21b9      	movs	r1, #185	; 0xb9
    52e0:	f002 f8cd 	bl	747e <assert_post_action>
	__asm__ volatile(
    52e4:	f387 8811 	msr	BASEPRI, r7
    52e8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    52ec:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    52ee:	b003      	add	sp, #12
    52f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    52f2:	ea56 0305 	orrs.w	r3, r6, r5
    52f6:	d118      	bne.n	532a <z_impl_k_sem_take+0xda>
    52f8:	4814      	ldr	r0, [pc, #80]	; (534c <z_impl_k_sem_take+0xfc>)
    52fa:	f7ff fd63 	bl	4dc4 <z_spin_unlock_valid>
    52fe:	b968      	cbnz	r0, 531c <z_impl_k_sem_take+0xcc>
    5300:	4a13      	ldr	r2, [pc, #76]	; (5350 <z_impl_k_sem_take+0x100>)
    5302:	4916      	ldr	r1, [pc, #88]	; (535c <z_impl_k_sem_take+0x10c>)
    5304:	480f      	ldr	r0, [pc, #60]	; (5344 <z_impl_k_sem_take+0xf4>)
    5306:	23b9      	movs	r3, #185	; 0xb9
    5308:	f002 f8c0 	bl	748c <assert_print>
    530c:	490f      	ldr	r1, [pc, #60]	; (534c <z_impl_k_sem_take+0xfc>)
    530e:	4814      	ldr	r0, [pc, #80]	; (5360 <z_impl_k_sem_take+0x110>)
    5310:	f002 f8bc 	bl	748c <assert_print>
    5314:	480e      	ldr	r0, [pc, #56]	; (5350 <z_impl_k_sem_take+0x100>)
    5316:	21b9      	movs	r1, #185	; 0xb9
    5318:	f002 f8b1 	bl	747e <assert_post_action>
    531c:	f387 8811 	msr	BASEPRI, r7
    5320:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5324:	f06f 000f 	mvn.w	r0, #15
    5328:	e7e1      	b.n	52ee <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    532a:	e9cd 6500 	strd	r6, r5, [sp]
    532e:	4622      	mov	r2, r4
    5330:	4639      	mov	r1, r7
    5332:	4806      	ldr	r0, [pc, #24]	; (534c <z_impl_k_sem_take+0xfc>)
    5334:	f000 fcd4 	bl	5ce0 <z_pend_curr>
	return ret;
    5338:	e7d9      	b.n	52ee <z_impl_k_sem_take+0x9e>
    533a:	bf00      	nop
    533c:	00009267 	.word	0x00009267
    5340:	00009247 	.word	0x00009247
    5344:	000085d7 	.word	0x000085d7
    5348:	00009213 	.word	0x00009213
    534c:	20000b84 	.word	0x20000b84
    5350:	00008697 	.word	0x00008697
    5354:	000086f0 	.word	0x000086f0
    5358:	00008705 	.word	0x00008705
    535c:	000086c4 	.word	0x000086c4
    5360:	000086db 	.word	0x000086db

00005364 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5364:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5366:	4d07      	ldr	r5, [pc, #28]	; (5384 <z_reset_time_slice+0x20>)
    5368:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    536a:	b154      	cbz	r4, 5382 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    536c:	f7fe faa0 	bl	38b0 <sys_clock_elapsed>
    5370:	4b05      	ldr	r3, [pc, #20]	; (5388 <z_reset_time_slice+0x24>)
    5372:	4404      	add	r4, r0
    5374:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5376:	6828      	ldr	r0, [r5, #0]
    5378:	2100      	movs	r1, #0
	}
}
    537a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    537e:	f001 bb03 	b.w	6988 <z_set_timeout_expiry>
}
    5382:	bd38      	pop	{r3, r4, r5, pc}
    5384:	20000b94 	.word	0x20000b94
    5388:	20000b58 	.word	0x20000b58

0000538c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    538e:	4604      	mov	r4, r0
    5390:	460d      	mov	r5, r1
	__asm__ volatile(
    5392:	f04f 0320 	mov.w	r3, #32
    5396:	f3ef 8711 	mrs	r7, BASEPRI
    539a:	f383 8812 	msr	BASEPRI_MAX, r3
    539e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53a2:	4823      	ldr	r0, [pc, #140]	; (5430 <k_sched_time_slice_set+0xa4>)
    53a4:	f7ff fd00 	bl	4da8 <z_spin_lock_valid>
    53a8:	b968      	cbnz	r0, 53c6 <k_sched_time_slice_set+0x3a>
    53aa:	4a22      	ldr	r2, [pc, #136]	; (5434 <k_sched_time_slice_set+0xa8>)
    53ac:	4922      	ldr	r1, [pc, #136]	; (5438 <k_sched_time_slice_set+0xac>)
    53ae:	4823      	ldr	r0, [pc, #140]	; (543c <k_sched_time_slice_set+0xb0>)
    53b0:	238e      	movs	r3, #142	; 0x8e
    53b2:	f002 f86b 	bl	748c <assert_print>
    53b6:	491e      	ldr	r1, [pc, #120]	; (5430 <k_sched_time_slice_set+0xa4>)
    53b8:	4821      	ldr	r0, [pc, #132]	; (5440 <k_sched_time_slice_set+0xb4>)
    53ba:	f002 f867 	bl	748c <assert_print>
    53be:	481d      	ldr	r0, [pc, #116]	; (5434 <k_sched_time_slice_set+0xa8>)
    53c0:	218e      	movs	r1, #142	; 0x8e
    53c2:	f002 f85c 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    53c6:	481a      	ldr	r0, [pc, #104]	; (5430 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    53c8:	4e1e      	ldr	r6, [pc, #120]	; (5444 <k_sched_time_slice_set+0xb8>)
    53ca:	f7ff fd0b 	bl	4de4 <z_spin_lock_set_owner>
    53ce:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    53d0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    53d4:	f240 30e7 	movw	r0, #999	; 0x3e7
    53d8:	6131      	str	r1, [r6, #16]
    53da:	2300      	movs	r3, #0
    53dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    53e0:	fbe4 010c 	umlal	r0, r1, r4, ip
    53e4:	f7fa fe8c 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    53e8:	2c00      	cmp	r4, #0
    53ea:	4b17      	ldr	r3, [pc, #92]	; (5448 <k_sched_time_slice_set+0xbc>)
    53ec:	dc1c      	bgt.n	5428 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    53ee:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    53f0:	4b16      	ldr	r3, [pc, #88]	; (544c <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    53f2:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    53f4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    53f6:	f7ff ffb5 	bl	5364 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53fa:	480d      	ldr	r0, [pc, #52]	; (5430 <k_sched_time_slice_set+0xa4>)
    53fc:	f7ff fce2 	bl	4dc4 <z_spin_unlock_valid>
    5400:	b968      	cbnz	r0, 541e <k_sched_time_slice_set+0x92>
    5402:	4a0c      	ldr	r2, [pc, #48]	; (5434 <k_sched_time_slice_set+0xa8>)
    5404:	4912      	ldr	r1, [pc, #72]	; (5450 <k_sched_time_slice_set+0xc4>)
    5406:	480d      	ldr	r0, [pc, #52]	; (543c <k_sched_time_slice_set+0xb0>)
    5408:	23b9      	movs	r3, #185	; 0xb9
    540a:	f002 f83f 	bl	748c <assert_print>
    540e:	4908      	ldr	r1, [pc, #32]	; (5430 <k_sched_time_slice_set+0xa4>)
    5410:	4810      	ldr	r0, [pc, #64]	; (5454 <k_sched_time_slice_set+0xc8>)
    5412:	f002 f83b 	bl	748c <assert_print>
    5416:	4807      	ldr	r0, [pc, #28]	; (5434 <k_sched_time_slice_set+0xa8>)
    5418:	21b9      	movs	r1, #185	; 0xb9
    541a:	f002 f830 	bl	747e <assert_post_action>
	__asm__ volatile(
    541e:	f387 8811 	msr	BASEPRI, r7
    5422:	f3bf 8f6f 	isb	sy
	}
}
    5426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5428:	2802      	cmp	r0, #2
    542a:	bfb8      	it	lt
    542c:	2002      	movlt	r0, #2
    542e:	e7de      	b.n	53ee <k_sched_time_slice_set+0x62>
    5430:	20000b8c 	.word	0x20000b8c
    5434:	00008697 	.word	0x00008697
    5438:	000086f0 	.word	0x000086f0
    543c:	000085d7 	.word	0x000085d7
    5440:	00008705 	.word	0x00008705
    5444:	20000b58 	.word	0x20000b58
    5448:	20000b94 	.word	0x20000b94
    544c:	20000b90 	.word	0x20000b90
    5450:	000086c4 	.word	0x000086c4
    5454:	000086db 	.word	0x000086db

00005458 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5458:	b538      	push	{r3, r4, r5, lr}
    545a:	4604      	mov	r4, r0
	__asm__ volatile(
    545c:	f04f 0320 	mov.w	r3, #32
    5460:	f3ef 8511 	mrs	r5, BASEPRI
    5464:	f383 8812 	msr	BASEPRI_MAX, r3
    5468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    546c:	4817      	ldr	r0, [pc, #92]	; (54cc <z_unpend_thread_no_timeout+0x74>)
    546e:	f7ff fc9b 	bl	4da8 <z_spin_lock_valid>
    5472:	b968      	cbnz	r0, 5490 <z_unpend_thread_no_timeout+0x38>
    5474:	4a16      	ldr	r2, [pc, #88]	; (54d0 <z_unpend_thread_no_timeout+0x78>)
    5476:	4917      	ldr	r1, [pc, #92]	; (54d4 <z_unpend_thread_no_timeout+0x7c>)
    5478:	4817      	ldr	r0, [pc, #92]	; (54d8 <z_unpend_thread_no_timeout+0x80>)
    547a:	238e      	movs	r3, #142	; 0x8e
    547c:	f002 f806 	bl	748c <assert_print>
    5480:	4912      	ldr	r1, [pc, #72]	; (54cc <z_unpend_thread_no_timeout+0x74>)
    5482:	4816      	ldr	r0, [pc, #88]	; (54dc <z_unpend_thread_no_timeout+0x84>)
    5484:	f002 f802 	bl	748c <assert_print>
    5488:	4811      	ldr	r0, [pc, #68]	; (54d0 <z_unpend_thread_no_timeout+0x78>)
    548a:	218e      	movs	r1, #142	; 0x8e
    548c:	f001 fff7 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5490:	480e      	ldr	r0, [pc, #56]	; (54cc <z_unpend_thread_no_timeout+0x74>)
    5492:	f7ff fca7 	bl	4de4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    5496:	4620      	mov	r0, r4
    5498:	f000 f900 	bl	569c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    549c:	480b      	ldr	r0, [pc, #44]	; (54cc <z_unpend_thread_no_timeout+0x74>)
    549e:	f7ff fc91 	bl	4dc4 <z_spin_unlock_valid>
    54a2:	b968      	cbnz	r0, 54c0 <z_unpend_thread_no_timeout+0x68>
    54a4:	4a0a      	ldr	r2, [pc, #40]	; (54d0 <z_unpend_thread_no_timeout+0x78>)
    54a6:	490e      	ldr	r1, [pc, #56]	; (54e0 <z_unpend_thread_no_timeout+0x88>)
    54a8:	480b      	ldr	r0, [pc, #44]	; (54d8 <z_unpend_thread_no_timeout+0x80>)
    54aa:	23b9      	movs	r3, #185	; 0xb9
    54ac:	f001 ffee 	bl	748c <assert_print>
    54b0:	4906      	ldr	r1, [pc, #24]	; (54cc <z_unpend_thread_no_timeout+0x74>)
    54b2:	480c      	ldr	r0, [pc, #48]	; (54e4 <z_unpend_thread_no_timeout+0x8c>)
    54b4:	f001 ffea 	bl	748c <assert_print>
    54b8:	4805      	ldr	r0, [pc, #20]	; (54d0 <z_unpend_thread_no_timeout+0x78>)
    54ba:	21b9      	movs	r1, #185	; 0xb9
    54bc:	f001 ffdf 	bl	747e <assert_post_action>
	__asm__ volatile(
    54c0:	f385 8811 	msr	BASEPRI, r5
    54c4:	f3bf 8f6f 	isb	sy
	}
}
    54c8:	bd38      	pop	{r3, r4, r5, pc}
    54ca:	bf00      	nop
    54cc:	20000b8c 	.word	0x20000b8c
    54d0:	00008697 	.word	0x00008697
    54d4:	000086f0 	.word	0x000086f0
    54d8:	000085d7 	.word	0x000085d7
    54dc:	00008705 	.word	0x00008705
    54e0:	000086c4 	.word	0x000086c4
    54e4:	000086db 	.word	0x000086db

000054e8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    54e8:	b538      	push	{r3, r4, r5, lr}
    54ea:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    54ec:	460d      	mov	r5, r1
    54ee:	b9e9      	cbnz	r1, 552c <z_reschedule+0x44>
    54f0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    54f4:	b9d3      	cbnz	r3, 552c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    54f6:	4b19      	ldr	r3, [pc, #100]	; (555c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    54f8:	69da      	ldr	r2, [r3, #28]
    54fa:	689b      	ldr	r3, [r3, #8]
    54fc:	429a      	cmp	r2, r3
    54fe:	d015      	beq.n	552c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5500:	f7ff fc60 	bl	4dc4 <z_spin_unlock_valid>
    5504:	b968      	cbnz	r0, 5522 <z_reschedule+0x3a>
    5506:	4a16      	ldr	r2, [pc, #88]	; (5560 <z_reschedule+0x78>)
    5508:	4916      	ldr	r1, [pc, #88]	; (5564 <z_reschedule+0x7c>)
    550a:	4817      	ldr	r0, [pc, #92]	; (5568 <z_reschedule+0x80>)
    550c:	23d0      	movs	r3, #208	; 0xd0
    550e:	f001 ffbd 	bl	748c <assert_print>
    5512:	4816      	ldr	r0, [pc, #88]	; (556c <z_reschedule+0x84>)
    5514:	4621      	mov	r1, r4
    5516:	f001 ffb9 	bl	748c <assert_print>
    551a:	4811      	ldr	r0, [pc, #68]	; (5560 <z_reschedule+0x78>)
    551c:	21d0      	movs	r1, #208	; 0xd0
    551e:	f001 ffae 	bl	747e <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5526:	2000      	movs	r0, #0
    5528:	f7fc ba90 	b.w	1a4c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    552c:	4620      	mov	r0, r4
    552e:	f7ff fc49 	bl	4dc4 <z_spin_unlock_valid>
    5532:	b968      	cbnz	r0, 5550 <z_reschedule+0x68>
    5534:	4a0a      	ldr	r2, [pc, #40]	; (5560 <z_reschedule+0x78>)
    5536:	490b      	ldr	r1, [pc, #44]	; (5564 <z_reschedule+0x7c>)
    5538:	480b      	ldr	r0, [pc, #44]	; (5568 <z_reschedule+0x80>)
    553a:	23b9      	movs	r3, #185	; 0xb9
    553c:	f001 ffa6 	bl	748c <assert_print>
    5540:	480a      	ldr	r0, [pc, #40]	; (556c <z_reschedule+0x84>)
    5542:	4621      	mov	r1, r4
    5544:	f001 ffa2 	bl	748c <assert_print>
    5548:	4805      	ldr	r0, [pc, #20]	; (5560 <z_reschedule+0x78>)
    554a:	21b9      	movs	r1, #185	; 0xb9
    554c:	f001 ff97 	bl	747e <assert_post_action>
    5550:	f385 8811 	msr	BASEPRI, r5
    5554:	f3bf 8f6f 	isb	sy
    5558:	bd38      	pop	{r3, r4, r5, pc}
    555a:	bf00      	nop
    555c:	20000b58 	.word	0x20000b58
    5560:	00008697 	.word	0x00008697
    5564:	000086c4 	.word	0x000086c4
    5568:	000085d7 	.word	0x000085d7
    556c:	000086db 	.word	0x000086db

00005570 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5570:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5572:	f04f 0320 	mov.w	r3, #32
    5576:	f3ef 8511 	mrs	r5, BASEPRI
    557a:	f383 8812 	msr	BASEPRI_MAX, r3
    557e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5582:	4829      	ldr	r0, [pc, #164]	; (5628 <k_sched_lock+0xb8>)
    5584:	f7ff fc10 	bl	4da8 <z_spin_lock_valid>
    5588:	b968      	cbnz	r0, 55a6 <k_sched_lock+0x36>
    558a:	4a28      	ldr	r2, [pc, #160]	; (562c <k_sched_lock+0xbc>)
    558c:	4928      	ldr	r1, [pc, #160]	; (5630 <k_sched_lock+0xc0>)
    558e:	4829      	ldr	r0, [pc, #164]	; (5634 <k_sched_lock+0xc4>)
    5590:	238e      	movs	r3, #142	; 0x8e
    5592:	f001 ff7b 	bl	748c <assert_print>
    5596:	4924      	ldr	r1, [pc, #144]	; (5628 <k_sched_lock+0xb8>)
    5598:	4827      	ldr	r0, [pc, #156]	; (5638 <k_sched_lock+0xc8>)
    559a:	f001 ff77 	bl	748c <assert_print>
    559e:	4823      	ldr	r0, [pc, #140]	; (562c <k_sched_lock+0xbc>)
    55a0:	218e      	movs	r1, #142	; 0x8e
    55a2:	f001 ff6c 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    55a6:	4820      	ldr	r0, [pc, #128]	; (5628 <k_sched_lock+0xb8>)
    55a8:	f7ff fc1c 	bl	4de4 <z_spin_lock_set_owner>
    55ac:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    55b0:	b163      	cbz	r3, 55cc <k_sched_lock+0x5c>
    55b2:	4922      	ldr	r1, [pc, #136]	; (563c <k_sched_lock+0xcc>)
    55b4:	4a22      	ldr	r2, [pc, #136]	; (5640 <k_sched_lock+0xd0>)
    55b6:	481f      	ldr	r0, [pc, #124]	; (5634 <k_sched_lock+0xc4>)
    55b8:	23fd      	movs	r3, #253	; 0xfd
    55ba:	f001 ff67 	bl	748c <assert_print>
    55be:	4821      	ldr	r0, [pc, #132]	; (5644 <k_sched_lock+0xd4>)
    55c0:	f001 ff64 	bl	748c <assert_print>
    55c4:	481e      	ldr	r0, [pc, #120]	; (5640 <k_sched_lock+0xd0>)
    55c6:	21fd      	movs	r1, #253	; 0xfd
    55c8:	f001 ff59 	bl	747e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    55cc:	4c1e      	ldr	r4, [pc, #120]	; (5648 <k_sched_lock+0xd8>)
    55ce:	68a3      	ldr	r3, [r4, #8]
    55d0:	7bdb      	ldrb	r3, [r3, #15]
    55d2:	2b01      	cmp	r3, #1
    55d4:	d10c      	bne.n	55f0 <k_sched_lock+0x80>
    55d6:	491d      	ldr	r1, [pc, #116]	; (564c <k_sched_lock+0xdc>)
    55d8:	4a19      	ldr	r2, [pc, #100]	; (5640 <k_sched_lock+0xd0>)
    55da:	4816      	ldr	r0, [pc, #88]	; (5634 <k_sched_lock+0xc4>)
    55dc:	23fe      	movs	r3, #254	; 0xfe
    55de:	f001 ff55 	bl	748c <assert_print>
    55e2:	4818      	ldr	r0, [pc, #96]	; (5644 <k_sched_lock+0xd4>)
    55e4:	f001 ff52 	bl	748c <assert_print>
    55e8:	4815      	ldr	r0, [pc, #84]	; (5640 <k_sched_lock+0xd0>)
    55ea:	21fe      	movs	r1, #254	; 0xfe
    55ec:	f001 ff47 	bl	747e <assert_post_action>
	--_current->base.sched_locked;
    55f0:	68a2      	ldr	r2, [r4, #8]
    55f2:	7bd3      	ldrb	r3, [r2, #15]
    55f4:	3b01      	subs	r3, #1
    55f6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55f8:	480b      	ldr	r0, [pc, #44]	; (5628 <k_sched_lock+0xb8>)
    55fa:	f7ff fbe3 	bl	4dc4 <z_spin_unlock_valid>
    55fe:	b968      	cbnz	r0, 561c <k_sched_lock+0xac>
    5600:	4a0a      	ldr	r2, [pc, #40]	; (562c <k_sched_lock+0xbc>)
    5602:	4913      	ldr	r1, [pc, #76]	; (5650 <k_sched_lock+0xe0>)
    5604:	480b      	ldr	r0, [pc, #44]	; (5634 <k_sched_lock+0xc4>)
    5606:	23b9      	movs	r3, #185	; 0xb9
    5608:	f001 ff40 	bl	748c <assert_print>
    560c:	4906      	ldr	r1, [pc, #24]	; (5628 <k_sched_lock+0xb8>)
    560e:	4811      	ldr	r0, [pc, #68]	; (5654 <k_sched_lock+0xe4>)
    5610:	f001 ff3c 	bl	748c <assert_print>
    5614:	4805      	ldr	r0, [pc, #20]	; (562c <k_sched_lock+0xbc>)
    5616:	21b9      	movs	r1, #185	; 0xb9
    5618:	f001 ff31 	bl	747e <assert_post_action>
	__asm__ volatile(
    561c:	f385 8811 	msr	BASEPRI, r5
    5620:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5624:	bd38      	pop	{r3, r4, r5, pc}
    5626:	bf00      	nop
    5628:	20000b8c 	.word	0x20000b8c
    562c:	00008697 	.word	0x00008697
    5630:	000086f0 	.word	0x000086f0
    5634:	000085d7 	.word	0x000085d7
    5638:	00008705 	.word	0x00008705
    563c:	0000919a 	.word	0x0000919a
    5640:	000091e8 	.word	0x000091e8
    5644:	00009213 	.word	0x00009213
    5648:	20000b58 	.word	0x20000b58
    564c:	00009216 	.word	0x00009216
    5650:	000086c4 	.word	0x000086c4
    5654:	000086db 	.word	0x000086db

00005658 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5658:	4b0c      	ldr	r3, [pc, #48]	; (568c <z_priq_dumb_remove+0x34>)
    565a:	4299      	cmp	r1, r3
{
    565c:	b510      	push	{r4, lr}
    565e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5660:	d10b      	bne.n	567a <z_priq_dumb_remove+0x22>
    5662:	490b      	ldr	r1, [pc, #44]	; (5690 <z_priq_dumb_remove+0x38>)
    5664:	480b      	ldr	r0, [pc, #44]	; (5694 <z_priq_dumb_remove+0x3c>)
    5666:	4a0c      	ldr	r2, [pc, #48]	; (5698 <z_priq_dumb_remove+0x40>)
    5668:	f240 433d 	movw	r3, #1085	; 0x43d
    566c:	f001 ff0e 	bl	748c <assert_print>
    5670:	4809      	ldr	r0, [pc, #36]	; (5698 <z_priq_dumb_remove+0x40>)
    5672:	f240 413d 	movw	r1, #1085	; 0x43d
    5676:	f001 ff02 	bl	747e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    567a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    567e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5680:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5682:	2300      	movs	r3, #0
	node->prev = NULL;
    5684:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5688:	bd10      	pop	{r4, pc}
    568a:	bf00      	nop
    568c:	20000398 	.word	0x20000398
    5690:	000092d7 	.word	0x000092d7
    5694:	000085d7 	.word	0x000085d7
    5698:	000092b5 	.word	0x000092b5

0000569c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    569c:	6883      	ldr	r3, [r0, #8]
{
    569e:	b510      	push	{r4, lr}
    56a0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    56a2:	b95b      	cbnz	r3, 56bc <unpend_thread_no_timeout+0x20>
    56a4:	490b      	ldr	r1, [pc, #44]	; (56d4 <unpend_thread_no_timeout+0x38>)
    56a6:	480c      	ldr	r0, [pc, #48]	; (56d8 <unpend_thread_no_timeout+0x3c>)
    56a8:	4a0c      	ldr	r2, [pc, #48]	; (56dc <unpend_thread_no_timeout+0x40>)
    56aa:	f240 23b9 	movw	r3, #697	; 0x2b9
    56ae:	f001 feed 	bl	748c <assert_print>
    56b2:	480a      	ldr	r0, [pc, #40]	; (56dc <unpend_thread_no_timeout+0x40>)
    56b4:	f240 21b9 	movw	r1, #697	; 0x2b9
    56b8:	f001 fee1 	bl	747e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    56bc:	68a0      	ldr	r0, [r4, #8]
    56be:	4621      	mov	r1, r4
    56c0:	f7ff ffca 	bl	5658 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    56c4:	7b63      	ldrb	r3, [r4, #13]
    56c6:	f023 0302 	bic.w	r3, r3, #2
    56ca:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    56cc:	2300      	movs	r3, #0
    56ce:	60a3      	str	r3, [r4, #8]
}
    56d0:	bd10      	pop	{r4, pc}
    56d2:	bf00      	nop
    56d4:	000092f8 	.word	0x000092f8
    56d8:	000085d7 	.word	0x000085d7
    56dc:	000092b5 	.word	0x000092b5

000056e0 <update_cache>:
{
    56e0:	b538      	push	{r3, r4, r5, lr}
    56e2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    56e4:	4814      	ldr	r0, [pc, #80]	; (5738 <update_cache+0x58>)
    56e6:	4d15      	ldr	r5, [pc, #84]	; (573c <update_cache+0x5c>)
    56e8:	f002 fbc3 	bl	7e72 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    56ec:	4604      	mov	r4, r0
    56ee:	b900      	cbnz	r0, 56f2 <update_cache+0x12>
    56f0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    56f2:	b9ca      	cbnz	r2, 5728 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    56f4:	68ab      	ldr	r3, [r5, #8]
    56f6:	b963      	cbnz	r3, 5712 <update_cache+0x32>
    56f8:	4911      	ldr	r1, [pc, #68]	; (5740 <update_cache+0x60>)
    56fa:	4a12      	ldr	r2, [pc, #72]	; (5744 <update_cache+0x64>)
    56fc:	4812      	ldr	r0, [pc, #72]	; (5748 <update_cache+0x68>)
    56fe:	2389      	movs	r3, #137	; 0x89
    5700:	f001 fec4 	bl	748c <assert_print>
    5704:	4811      	ldr	r0, [pc, #68]	; (574c <update_cache+0x6c>)
    5706:	f001 fec1 	bl	748c <assert_print>
    570a:	480e      	ldr	r0, [pc, #56]	; (5744 <update_cache+0x64>)
    570c:	2189      	movs	r1, #137	; 0x89
    570e:	f001 feb6 	bl	747e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5712:	68ab      	ldr	r3, [r5, #8]
    5714:	7b5a      	ldrb	r2, [r3, #13]
    5716:	06d2      	lsls	r2, r2, #27
    5718:	d106      	bne.n	5728 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    571a:	69a2      	ldr	r2, [r4, #24]
    571c:	b922      	cbnz	r2, 5728 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    571e:	89da      	ldrh	r2, [r3, #14]
    5720:	2a7f      	cmp	r2, #127	; 0x7f
    5722:	d901      	bls.n	5728 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5724:	61eb      	str	r3, [r5, #28]
}
    5726:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5728:	68ab      	ldr	r3, [r5, #8]
    572a:	42a3      	cmp	r3, r4
    572c:	d002      	beq.n	5734 <update_cache+0x54>
			z_reset_time_slice(thread);
    572e:	4620      	mov	r0, r4
    5730:	f7ff fe18 	bl	5364 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5734:	61ec      	str	r4, [r5, #28]
}
    5736:	e7f6      	b.n	5726 <update_cache+0x46>
    5738:	20000b78 	.word	0x20000b78
    573c:	20000b58 	.word	0x20000b58
    5740:	0000930f 	.word	0x0000930f
    5744:	000092b5 	.word	0x000092b5
    5748:	000085d7 	.word	0x000085d7
    574c:	00009213 	.word	0x00009213

00005750 <move_thread_to_end_of_prio_q>:
{
    5750:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5752:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5756:	7b43      	ldrb	r3, [r0, #13]
    5758:	2a00      	cmp	r2, #0
{
    575a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    575c:	da06      	bge.n	576c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    575e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5762:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5764:	4601      	mov	r1, r0
    5766:	481e      	ldr	r0, [pc, #120]	; (57e0 <move_thread_to_end_of_prio_q+0x90>)
    5768:	f7ff ff76 	bl	5658 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    576c:	7b63      	ldrb	r3, [r4, #13]
    576e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5772:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5774:	4b1b      	ldr	r3, [pc, #108]	; (57e4 <move_thread_to_end_of_prio_q+0x94>)
    5776:	429c      	cmp	r4, r3
    5778:	d109      	bne.n	578e <move_thread_to_end_of_prio_q+0x3e>
    577a:	491b      	ldr	r1, [pc, #108]	; (57e8 <move_thread_to_end_of_prio_q+0x98>)
    577c:	481b      	ldr	r0, [pc, #108]	; (57ec <move_thread_to_end_of_prio_q+0x9c>)
    577e:	4a1c      	ldr	r2, [pc, #112]	; (57f0 <move_thread_to_end_of_prio_q+0xa0>)
    5780:	23ba      	movs	r3, #186	; 0xba
    5782:	f001 fe83 	bl	748c <assert_print>
    5786:	481a      	ldr	r0, [pc, #104]	; (57f0 <move_thread_to_end_of_prio_q+0xa0>)
    5788:	21ba      	movs	r1, #186	; 0xba
    578a:	f001 fe78 	bl	747e <assert_post_action>
	return list->head == list;
    578e:	4a19      	ldr	r2, [pc, #100]	; (57f4 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    5790:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5794:	f102 0520 	add.w	r5, r2, #32
    5798:	42ab      	cmp	r3, r5
    579a:	d01b      	beq.n	57d4 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    579c:	b1d3      	cbz	r3, 57d4 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    579e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    57a2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    57a6:	428e      	cmp	r6, r1
    57a8:	d00f      	beq.n	57ca <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    57aa:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    57ac:	2900      	cmp	r1, #0
    57ae:	dd0c      	ble.n	57ca <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    57b0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    57b2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    57b6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    57b8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    57ba:	6890      	ldr	r0, [r2, #8]
    57bc:	1b03      	subs	r3, r0, r4
    57be:	4258      	negs	r0, r3
}
    57c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    57c4:	4158      	adcs	r0, r3
    57c6:	f7ff bf8b 	b.w	56e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    57ca:	4283      	cmp	r3, r0
    57cc:	d002      	beq.n	57d4 <move_thread_to_end_of_prio_q+0x84>
    57ce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57d0:	2b00      	cmp	r3, #0
    57d2:	d1e6      	bne.n	57a2 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    57d4:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    57d8:	6004      	str	r4, [r0, #0]
	list->tail = node;
    57da:	6254      	str	r4, [r2, #36]	; 0x24
}
    57dc:	e7ed      	b.n	57ba <move_thread_to_end_of_prio_q+0x6a>
    57de:	bf00      	nop
    57e0:	20000b78 	.word	0x20000b78
    57e4:	20000398 	.word	0x20000398
    57e8:	000092d7 	.word	0x000092d7
    57ec:	000085d7 	.word	0x000085d7
    57f0:	000092b5 	.word	0x000092b5
    57f4:	20000b58 	.word	0x20000b58

000057f8 <z_time_slice>:
{
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	4605      	mov	r5, r0
	__asm__ volatile(
    57fc:	f04f 0320 	mov.w	r3, #32
    5800:	f3ef 8611 	mrs	r6, BASEPRI
    5804:	f383 8812 	msr	BASEPRI_MAX, r3
    5808:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    580c:	482a      	ldr	r0, [pc, #168]	; (58b8 <z_time_slice+0xc0>)
    580e:	f7ff facb 	bl	4da8 <z_spin_lock_valid>
    5812:	b968      	cbnz	r0, 5830 <z_time_slice+0x38>
    5814:	4a29      	ldr	r2, [pc, #164]	; (58bc <z_time_slice+0xc4>)
    5816:	492a      	ldr	r1, [pc, #168]	; (58c0 <z_time_slice+0xc8>)
    5818:	482a      	ldr	r0, [pc, #168]	; (58c4 <z_time_slice+0xcc>)
    581a:	238e      	movs	r3, #142	; 0x8e
    581c:	f001 fe36 	bl	748c <assert_print>
    5820:	4925      	ldr	r1, [pc, #148]	; (58b8 <z_time_slice+0xc0>)
    5822:	4829      	ldr	r0, [pc, #164]	; (58c8 <z_time_slice+0xd0>)
    5824:	f001 fe32 	bl	748c <assert_print>
    5828:	4824      	ldr	r0, [pc, #144]	; (58bc <z_time_slice+0xc4>)
    582a:	218e      	movs	r1, #142	; 0x8e
    582c:	f001 fe27 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5830:	4821      	ldr	r0, [pc, #132]	; (58b8 <z_time_slice+0xc0>)
    5832:	f7ff fad7 	bl	4de4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5836:	4b25      	ldr	r3, [pc, #148]	; (58cc <z_time_slice+0xd4>)
    5838:	4a25      	ldr	r2, [pc, #148]	; (58d0 <z_time_slice+0xd8>)
    583a:	689c      	ldr	r4, [r3, #8]
    583c:	6811      	ldr	r1, [r2, #0]
    583e:	428c      	cmp	r4, r1
    5840:	d119      	bne.n	5876 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    5842:	4620      	mov	r0, r4
    5844:	f7ff fd8e 	bl	5364 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5848:	481b      	ldr	r0, [pc, #108]	; (58b8 <z_time_slice+0xc0>)
    584a:	f7ff fabb 	bl	4dc4 <z_spin_unlock_valid>
    584e:	b968      	cbnz	r0, 586c <z_time_slice+0x74>
    5850:	4a1a      	ldr	r2, [pc, #104]	; (58bc <z_time_slice+0xc4>)
    5852:	4920      	ldr	r1, [pc, #128]	; (58d4 <z_time_slice+0xdc>)
    5854:	481b      	ldr	r0, [pc, #108]	; (58c4 <z_time_slice+0xcc>)
    5856:	23b9      	movs	r3, #185	; 0xb9
    5858:	f001 fe18 	bl	748c <assert_print>
    585c:	4916      	ldr	r1, [pc, #88]	; (58b8 <z_time_slice+0xc0>)
    585e:	481e      	ldr	r0, [pc, #120]	; (58d8 <z_time_slice+0xe0>)
    5860:	f001 fe14 	bl	748c <assert_print>
    5864:	4815      	ldr	r0, [pc, #84]	; (58bc <z_time_slice+0xc4>)
    5866:	21b9      	movs	r1, #185	; 0xb9
    5868:	f001 fe09 	bl	747e <assert_post_action>
	__asm__ volatile(
    586c:	f386 8811 	msr	BASEPRI, r6
    5870:	f3bf 8f6f 	isb	sy
}
    5874:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5876:	2100      	movs	r1, #0
    5878:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    587a:	4a18      	ldr	r2, [pc, #96]	; (58dc <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    587c:	6812      	ldr	r2, [r2, #0]
    587e:	b1c2      	cbz	r2, 58b2 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    5880:	89e2      	ldrh	r2, [r4, #14]
    5882:	2a7f      	cmp	r2, #127	; 0x7f
    5884:	d815      	bhi.n	58b2 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    5886:	7b62      	ldrb	r2, [r4, #13]
    5888:	06d2      	lsls	r2, r2, #27
    588a:	d112      	bne.n	58b2 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    588c:	4a14      	ldr	r2, [pc, #80]	; (58e0 <z_time_slice+0xe8>)
    588e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5892:	6812      	ldr	r2, [r2, #0]
    5894:	4291      	cmp	r1, r2
    5896:	db0c      	blt.n	58b2 <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    5898:	4a12      	ldr	r2, [pc, #72]	; (58e4 <z_time_slice+0xec>)
    589a:	4294      	cmp	r4, r2
    589c:	d009      	beq.n	58b2 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    589e:	691a      	ldr	r2, [r3, #16]
    58a0:	42aa      	cmp	r2, r5
    58a2:	dc03      	bgt.n	58ac <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    58a4:	4620      	mov	r0, r4
    58a6:	f7ff ff53 	bl	5750 <move_thread_to_end_of_prio_q>
    58aa:	e7ca      	b.n	5842 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    58ac:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    58ae:	611a      	str	r2, [r3, #16]
    58b0:	e7ca      	b.n	5848 <z_time_slice+0x50>
    58b2:	2200      	movs	r2, #0
    58b4:	e7fb      	b.n	58ae <z_time_slice+0xb6>
    58b6:	bf00      	nop
    58b8:	20000b8c 	.word	0x20000b8c
    58bc:	00008697 	.word	0x00008697
    58c0:	000086f0 	.word	0x000086f0
    58c4:	000085d7 	.word	0x000085d7
    58c8:	00008705 	.word	0x00008705
    58cc:	20000b58 	.word	0x20000b58
    58d0:	20000b88 	.word	0x20000b88
    58d4:	000086c4 	.word	0x000086c4
    58d8:	000086db 	.word	0x000086db
    58dc:	20000b94 	.word	0x20000b94
    58e0:	20000b90 	.word	0x20000b90
    58e4:	20000398 	.word	0x20000398

000058e8 <ready_thread>:
{
    58e8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    58ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
    58ee:	7b43      	ldrb	r3, [r0, #13]
    58f0:	2a00      	cmp	r2, #0
{
    58f2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    58f4:	db39      	blt.n	596a <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    58f6:	06da      	lsls	r2, r3, #27
    58f8:	d137      	bne.n	596a <ready_thread+0x82>
    58fa:	6982      	ldr	r2, [r0, #24]
    58fc:	2a00      	cmp	r2, #0
    58fe:	d134      	bne.n	596a <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    5900:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5904:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5906:	4b19      	ldr	r3, [pc, #100]	; (596c <ready_thread+0x84>)
    5908:	4298      	cmp	r0, r3
    590a:	d109      	bne.n	5920 <ready_thread+0x38>
    590c:	4918      	ldr	r1, [pc, #96]	; (5970 <ready_thread+0x88>)
    590e:	4819      	ldr	r0, [pc, #100]	; (5974 <ready_thread+0x8c>)
    5910:	4a19      	ldr	r2, [pc, #100]	; (5978 <ready_thread+0x90>)
    5912:	23ba      	movs	r3, #186	; 0xba
    5914:	f001 fdba 	bl	748c <assert_print>
    5918:	4817      	ldr	r0, [pc, #92]	; (5978 <ready_thread+0x90>)
    591a:	21ba      	movs	r1, #186	; 0xba
    591c:	f001 fdaf 	bl	747e <assert_post_action>
	return list->head == list;
    5920:	4a16      	ldr	r2, [pc, #88]	; (597c <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    5922:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5926:	f102 0520 	add.w	r5, r2, #32
    592a:	42ab      	cmp	r3, r5
    592c:	d018      	beq.n	5960 <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    592e:	b1bb      	cbz	r3, 5960 <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    5930:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5934:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5938:	428e      	cmp	r6, r1
    593a:	d00c      	beq.n	5956 <ready_thread+0x6e>
		return b2 - b1;
    593c:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    593e:	2900      	cmp	r1, #0
    5940:	dd09      	ble.n	5956 <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5942:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5944:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5948:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    594a:	605c      	str	r4, [r3, #4]
}
    594c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5950:	2000      	movs	r0, #0
    5952:	f7ff bec5 	b.w	56e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5956:	4298      	cmp	r0, r3
    5958:	d002      	beq.n	5960 <ready_thread+0x78>
    595a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    595c:	2b00      	cmp	r3, #0
    595e:	d1e9      	bne.n	5934 <ready_thread+0x4c>
	node->prev = tail;
    5960:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    5964:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5966:	6254      	str	r4, [r2, #36]	; 0x24
}
    5968:	e7f0      	b.n	594c <ready_thread+0x64>
}
    596a:	bd70      	pop	{r4, r5, r6, pc}
    596c:	20000398 	.word	0x20000398
    5970:	000092d7 	.word	0x000092d7
    5974:	000085d7 	.word	0x000085d7
    5978:	000092b5 	.word	0x000092b5
    597c:	20000b58 	.word	0x20000b58

00005980 <z_ready_thread>:
{
    5980:	b538      	push	{r3, r4, r5, lr}
    5982:	4604      	mov	r4, r0
	__asm__ volatile(
    5984:	f04f 0320 	mov.w	r3, #32
    5988:	f3ef 8511 	mrs	r5, BASEPRI
    598c:	f383 8812 	msr	BASEPRI_MAX, r3
    5990:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5994:	4817      	ldr	r0, [pc, #92]	; (59f4 <z_ready_thread+0x74>)
    5996:	f7ff fa07 	bl	4da8 <z_spin_lock_valid>
    599a:	b968      	cbnz	r0, 59b8 <z_ready_thread+0x38>
    599c:	4a16      	ldr	r2, [pc, #88]	; (59f8 <z_ready_thread+0x78>)
    599e:	4917      	ldr	r1, [pc, #92]	; (59fc <z_ready_thread+0x7c>)
    59a0:	4817      	ldr	r0, [pc, #92]	; (5a00 <z_ready_thread+0x80>)
    59a2:	238e      	movs	r3, #142	; 0x8e
    59a4:	f001 fd72 	bl	748c <assert_print>
    59a8:	4912      	ldr	r1, [pc, #72]	; (59f4 <z_ready_thread+0x74>)
    59aa:	4816      	ldr	r0, [pc, #88]	; (5a04 <z_ready_thread+0x84>)
    59ac:	f001 fd6e 	bl	748c <assert_print>
    59b0:	4811      	ldr	r0, [pc, #68]	; (59f8 <z_ready_thread+0x78>)
    59b2:	218e      	movs	r1, #142	; 0x8e
    59b4:	f001 fd63 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    59b8:	480e      	ldr	r0, [pc, #56]	; (59f4 <z_ready_thread+0x74>)
    59ba:	f7ff fa13 	bl	4de4 <z_spin_lock_set_owner>
			ready_thread(thread);
    59be:	4620      	mov	r0, r4
    59c0:	f7ff ff92 	bl	58e8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59c4:	480b      	ldr	r0, [pc, #44]	; (59f4 <z_ready_thread+0x74>)
    59c6:	f7ff f9fd 	bl	4dc4 <z_spin_unlock_valid>
    59ca:	b968      	cbnz	r0, 59e8 <z_ready_thread+0x68>
    59cc:	4a0a      	ldr	r2, [pc, #40]	; (59f8 <z_ready_thread+0x78>)
    59ce:	490e      	ldr	r1, [pc, #56]	; (5a08 <z_ready_thread+0x88>)
    59d0:	480b      	ldr	r0, [pc, #44]	; (5a00 <z_ready_thread+0x80>)
    59d2:	23b9      	movs	r3, #185	; 0xb9
    59d4:	f001 fd5a 	bl	748c <assert_print>
    59d8:	4906      	ldr	r1, [pc, #24]	; (59f4 <z_ready_thread+0x74>)
    59da:	480c      	ldr	r0, [pc, #48]	; (5a0c <z_ready_thread+0x8c>)
    59dc:	f001 fd56 	bl	748c <assert_print>
    59e0:	4805      	ldr	r0, [pc, #20]	; (59f8 <z_ready_thread+0x78>)
    59e2:	21b9      	movs	r1, #185	; 0xb9
    59e4:	f001 fd4b 	bl	747e <assert_post_action>
	__asm__ volatile(
    59e8:	f385 8811 	msr	BASEPRI, r5
    59ec:	f3bf 8f6f 	isb	sy
}
    59f0:	bd38      	pop	{r3, r4, r5, pc}
    59f2:	bf00      	nop
    59f4:	20000b8c 	.word	0x20000b8c
    59f8:	00008697 	.word	0x00008697
    59fc:	000086f0 	.word	0x000086f0
    5a00:	000085d7 	.word	0x000085d7
    5a04:	00008705 	.word	0x00008705
    5a08:	000086c4 	.word	0x000086c4
    5a0c:	000086db 	.word	0x000086db

00005a10 <z_sched_start>:
{
    5a10:	b538      	push	{r3, r4, r5, lr}
    5a12:	4604      	mov	r4, r0
	__asm__ volatile(
    5a14:	f04f 0320 	mov.w	r3, #32
    5a18:	f3ef 8511 	mrs	r5, BASEPRI
    5a1c:	f383 8812 	msr	BASEPRI_MAX, r3
    5a20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a24:	481d      	ldr	r0, [pc, #116]	; (5a9c <z_sched_start+0x8c>)
    5a26:	f7ff f9bf 	bl	4da8 <z_spin_lock_valid>
    5a2a:	b968      	cbnz	r0, 5a48 <z_sched_start+0x38>
    5a2c:	4a1c      	ldr	r2, [pc, #112]	; (5aa0 <z_sched_start+0x90>)
    5a2e:	491d      	ldr	r1, [pc, #116]	; (5aa4 <z_sched_start+0x94>)
    5a30:	481d      	ldr	r0, [pc, #116]	; (5aa8 <z_sched_start+0x98>)
    5a32:	238e      	movs	r3, #142	; 0x8e
    5a34:	f001 fd2a 	bl	748c <assert_print>
    5a38:	4918      	ldr	r1, [pc, #96]	; (5a9c <z_sched_start+0x8c>)
    5a3a:	481c      	ldr	r0, [pc, #112]	; (5aac <z_sched_start+0x9c>)
    5a3c:	f001 fd26 	bl	748c <assert_print>
    5a40:	4817      	ldr	r0, [pc, #92]	; (5aa0 <z_sched_start+0x90>)
    5a42:	218e      	movs	r1, #142	; 0x8e
    5a44:	f001 fd1b 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5a48:	4814      	ldr	r0, [pc, #80]	; (5a9c <z_sched_start+0x8c>)
    5a4a:	f7ff f9cb 	bl	4de4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5a4e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    5a50:	075a      	lsls	r2, r3, #29
    5a52:	d416      	bmi.n	5a82 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a54:	4811      	ldr	r0, [pc, #68]	; (5a9c <z_sched_start+0x8c>)
    5a56:	f7ff f9b5 	bl	4dc4 <z_spin_unlock_valid>
    5a5a:	b968      	cbnz	r0, 5a78 <z_sched_start+0x68>
    5a5c:	4a10      	ldr	r2, [pc, #64]	; (5aa0 <z_sched_start+0x90>)
    5a5e:	4914      	ldr	r1, [pc, #80]	; (5ab0 <z_sched_start+0xa0>)
    5a60:	4811      	ldr	r0, [pc, #68]	; (5aa8 <z_sched_start+0x98>)
    5a62:	23b9      	movs	r3, #185	; 0xb9
    5a64:	f001 fd12 	bl	748c <assert_print>
    5a68:	490c      	ldr	r1, [pc, #48]	; (5a9c <z_sched_start+0x8c>)
    5a6a:	4812      	ldr	r0, [pc, #72]	; (5ab4 <z_sched_start+0xa4>)
    5a6c:	f001 fd0e 	bl	748c <assert_print>
    5a70:	480b      	ldr	r0, [pc, #44]	; (5aa0 <z_sched_start+0x90>)
    5a72:	21b9      	movs	r1, #185	; 0xb9
    5a74:	f001 fd03 	bl	747e <assert_post_action>
	__asm__ volatile(
    5a78:	f385 8811 	msr	BASEPRI, r5
    5a7c:	f3bf 8f6f 	isb	sy
}
    5a80:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5a82:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5a86:	4620      	mov	r0, r4
    5a88:	7363      	strb	r3, [r4, #13]
    5a8a:	f7ff ff2d 	bl	58e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5a8e:	4629      	mov	r1, r5
    5a90:	4802      	ldr	r0, [pc, #8]	; (5a9c <z_sched_start+0x8c>)
}
    5a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5a96:	f7ff bd27 	b.w	54e8 <z_reschedule>
    5a9a:	bf00      	nop
    5a9c:	20000b8c 	.word	0x20000b8c
    5aa0:	00008697 	.word	0x00008697
    5aa4:	000086f0 	.word	0x000086f0
    5aa8:	000085d7 	.word	0x000085d7
    5aac:	00008705 	.word	0x00008705
    5ab0:	000086c4 	.word	0x000086c4
    5ab4:	000086db 	.word	0x000086db

00005ab8 <z_thread_timeout>:
{
    5ab8:	b570      	push	{r4, r5, r6, lr}
    5aba:	4604      	mov	r4, r0
	__asm__ volatile(
    5abc:	f04f 0320 	mov.w	r3, #32
    5ac0:	f3ef 8611 	mrs	r6, BASEPRI
    5ac4:	f383 8812 	msr	BASEPRI_MAX, r3
    5ac8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5acc:	4820      	ldr	r0, [pc, #128]	; (5b50 <z_thread_timeout+0x98>)
    5ace:	f7ff f96b 	bl	4da8 <z_spin_lock_valid>
    5ad2:	b968      	cbnz	r0, 5af0 <z_thread_timeout+0x38>
    5ad4:	4a1f      	ldr	r2, [pc, #124]	; (5b54 <z_thread_timeout+0x9c>)
    5ad6:	4920      	ldr	r1, [pc, #128]	; (5b58 <z_thread_timeout+0xa0>)
    5ad8:	4820      	ldr	r0, [pc, #128]	; (5b5c <z_thread_timeout+0xa4>)
    5ada:	238e      	movs	r3, #142	; 0x8e
    5adc:	f001 fcd6 	bl	748c <assert_print>
    5ae0:	491b      	ldr	r1, [pc, #108]	; (5b50 <z_thread_timeout+0x98>)
    5ae2:	481f      	ldr	r0, [pc, #124]	; (5b60 <z_thread_timeout+0xa8>)
    5ae4:	f001 fcd2 	bl	748c <assert_print>
    5ae8:	481a      	ldr	r0, [pc, #104]	; (5b54 <z_thread_timeout+0x9c>)
    5aea:	218e      	movs	r1, #142	; 0x8e
    5aec:	f001 fcc7 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5af0:	4817      	ldr	r0, [pc, #92]	; (5b50 <z_thread_timeout+0x98>)
    5af2:	f7ff f977 	bl	4de4 <z_spin_lock_set_owner>
		if (!killed) {
    5af6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5afa:	f013 0f28 	tst.w	r3, #40	; 0x28
    5afe:	d110      	bne.n	5b22 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5b00:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5b04:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5b08:	b113      	cbz	r3, 5b10 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5b0a:	4628      	mov	r0, r5
    5b0c:	f7ff fdc6 	bl	569c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5b10:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5b14:	f023 0314 	bic.w	r3, r3, #20
    5b18:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5b1c:	4628      	mov	r0, r5
    5b1e:	f7ff fee3 	bl	58e8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b22:	480b      	ldr	r0, [pc, #44]	; (5b50 <z_thread_timeout+0x98>)
    5b24:	f7ff f94e 	bl	4dc4 <z_spin_unlock_valid>
    5b28:	b968      	cbnz	r0, 5b46 <z_thread_timeout+0x8e>
    5b2a:	4a0a      	ldr	r2, [pc, #40]	; (5b54 <z_thread_timeout+0x9c>)
    5b2c:	490d      	ldr	r1, [pc, #52]	; (5b64 <z_thread_timeout+0xac>)
    5b2e:	480b      	ldr	r0, [pc, #44]	; (5b5c <z_thread_timeout+0xa4>)
    5b30:	23b9      	movs	r3, #185	; 0xb9
    5b32:	f001 fcab 	bl	748c <assert_print>
    5b36:	4906      	ldr	r1, [pc, #24]	; (5b50 <z_thread_timeout+0x98>)
    5b38:	480b      	ldr	r0, [pc, #44]	; (5b68 <z_thread_timeout+0xb0>)
    5b3a:	f001 fca7 	bl	748c <assert_print>
    5b3e:	4805      	ldr	r0, [pc, #20]	; (5b54 <z_thread_timeout+0x9c>)
    5b40:	21b9      	movs	r1, #185	; 0xb9
    5b42:	f001 fc9c 	bl	747e <assert_post_action>
	__asm__ volatile(
    5b46:	f386 8811 	msr	BASEPRI, r6
    5b4a:	f3bf 8f6f 	isb	sy
}
    5b4e:	bd70      	pop	{r4, r5, r6, pc}
    5b50:	20000b8c 	.word	0x20000b8c
    5b54:	00008697 	.word	0x00008697
    5b58:	000086f0 	.word	0x000086f0
    5b5c:	000085d7 	.word	0x000085d7
    5b60:	00008705 	.word	0x00008705
    5b64:	000086c4 	.word	0x000086c4
    5b68:	000086db 	.word	0x000086db

00005b6c <unready_thread>:
{
    5b6c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5b6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5b72:	7b43      	ldrb	r3, [r0, #13]
    5b74:	2a00      	cmp	r2, #0
{
    5b76:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5b78:	da06      	bge.n	5b88 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b7e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5b80:	4601      	mov	r1, r0
    5b82:	4806      	ldr	r0, [pc, #24]	; (5b9c <unready_thread+0x30>)
    5b84:	f7ff fd68 	bl	5658 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5b88:	4b05      	ldr	r3, [pc, #20]	; (5ba0 <unready_thread+0x34>)
    5b8a:	6898      	ldr	r0, [r3, #8]
    5b8c:	1b03      	subs	r3, r0, r4
    5b8e:	4258      	negs	r0, r3
}
    5b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5b94:	4158      	adcs	r0, r3
    5b96:	f7ff bda3 	b.w	56e0 <update_cache>
    5b9a:	bf00      	nop
    5b9c:	20000b78 	.word	0x20000b78
    5ba0:	20000b58 	.word	0x20000b58

00005ba4 <add_to_waitq_locked>:
{
    5ba4:	b538      	push	{r3, r4, r5, lr}
    5ba6:	4604      	mov	r4, r0
    5ba8:	460d      	mov	r5, r1
	unready_thread(thread);
    5baa:	f7ff ffdf 	bl	5b6c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5bae:	7b63      	ldrb	r3, [r4, #13]
    5bb0:	f043 0302 	orr.w	r3, r3, #2
    5bb4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5bb6:	b1fd      	cbz	r5, 5bf8 <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5bb8:	4b16      	ldr	r3, [pc, #88]	; (5c14 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    5bba:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5bbc:	429c      	cmp	r4, r3
    5bbe:	d109      	bne.n	5bd4 <add_to_waitq_locked+0x30>
    5bc0:	4915      	ldr	r1, [pc, #84]	; (5c18 <add_to_waitq_locked+0x74>)
    5bc2:	4816      	ldr	r0, [pc, #88]	; (5c1c <add_to_waitq_locked+0x78>)
    5bc4:	4a16      	ldr	r2, [pc, #88]	; (5c20 <add_to_waitq_locked+0x7c>)
    5bc6:	23ba      	movs	r3, #186	; 0xba
    5bc8:	f001 fc60 	bl	748c <assert_print>
    5bcc:	4814      	ldr	r0, [pc, #80]	; (5c20 <add_to_waitq_locked+0x7c>)
    5bce:	21ba      	movs	r1, #186	; 0xba
    5bd0:	f001 fc55 	bl	747e <assert_post_action>
	return list->head == list;
    5bd4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bd6:	429d      	cmp	r5, r3
    5bd8:	d015      	beq.n	5c06 <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5bda:	b1a3      	cbz	r3, 5c06 <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    5bdc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5be0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5be4:	4291      	cmp	r1, r2
    5be6:	d008      	beq.n	5bfa <add_to_waitq_locked+0x56>
		return b2 - b1;
    5be8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5bea:	2a00      	cmp	r2, #0
    5bec:	dd05      	ble.n	5bfa <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    5bee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5bf0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5bf4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5bf6:	605c      	str	r4, [r3, #4]
}
    5bf8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5bfa:	686a      	ldr	r2, [r5, #4]
    5bfc:	4293      	cmp	r3, r2
    5bfe:	d002      	beq.n	5c06 <add_to_waitq_locked+0x62>
    5c00:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c02:	2b00      	cmp	r3, #0
    5c04:	d1ec      	bne.n	5be0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    5c06:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5c08:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5c0c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5c0e:	606c      	str	r4, [r5, #4]
}
    5c10:	e7f2      	b.n	5bf8 <add_to_waitq_locked+0x54>
    5c12:	bf00      	nop
    5c14:	20000398 	.word	0x20000398
    5c18:	000092d7 	.word	0x000092d7
    5c1c:	000085d7 	.word	0x000085d7
    5c20:	000092b5 	.word	0x000092b5

00005c24 <pend>:
{
    5c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c28:	4604      	mov	r4, r0
    5c2a:	4688      	mov	r8, r1
    5c2c:	4616      	mov	r6, r2
    5c2e:	461d      	mov	r5, r3
	__asm__ volatile(
    5c30:	f04f 0320 	mov.w	r3, #32
    5c34:	f3ef 8711 	mrs	r7, BASEPRI
    5c38:	f383 8812 	msr	BASEPRI_MAX, r3
    5c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c40:	481f      	ldr	r0, [pc, #124]	; (5cc0 <pend+0x9c>)
    5c42:	f7ff f8b1 	bl	4da8 <z_spin_lock_valid>
    5c46:	b968      	cbnz	r0, 5c64 <pend+0x40>
    5c48:	4a1e      	ldr	r2, [pc, #120]	; (5cc4 <pend+0xa0>)
    5c4a:	491f      	ldr	r1, [pc, #124]	; (5cc8 <pend+0xa4>)
    5c4c:	481f      	ldr	r0, [pc, #124]	; (5ccc <pend+0xa8>)
    5c4e:	238e      	movs	r3, #142	; 0x8e
    5c50:	f001 fc1c 	bl	748c <assert_print>
    5c54:	491a      	ldr	r1, [pc, #104]	; (5cc0 <pend+0x9c>)
    5c56:	481e      	ldr	r0, [pc, #120]	; (5cd0 <pend+0xac>)
    5c58:	f001 fc18 	bl	748c <assert_print>
    5c5c:	4819      	ldr	r0, [pc, #100]	; (5cc4 <pend+0xa0>)
    5c5e:	218e      	movs	r1, #142	; 0x8e
    5c60:	f001 fc0d 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5c64:	4816      	ldr	r0, [pc, #88]	; (5cc0 <pend+0x9c>)
    5c66:	f7ff f8bd 	bl	4de4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5c6a:	4620      	mov	r0, r4
    5c6c:	4641      	mov	r1, r8
    5c6e:	f7ff ff99 	bl	5ba4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c72:	4813      	ldr	r0, [pc, #76]	; (5cc0 <pend+0x9c>)
    5c74:	f7ff f8a6 	bl	4dc4 <z_spin_unlock_valid>
    5c78:	b968      	cbnz	r0, 5c96 <pend+0x72>
    5c7a:	4a12      	ldr	r2, [pc, #72]	; (5cc4 <pend+0xa0>)
    5c7c:	4915      	ldr	r1, [pc, #84]	; (5cd4 <pend+0xb0>)
    5c7e:	4813      	ldr	r0, [pc, #76]	; (5ccc <pend+0xa8>)
    5c80:	23b9      	movs	r3, #185	; 0xb9
    5c82:	f001 fc03 	bl	748c <assert_print>
    5c86:	490e      	ldr	r1, [pc, #56]	; (5cc0 <pend+0x9c>)
    5c88:	4813      	ldr	r0, [pc, #76]	; (5cd8 <pend+0xb4>)
    5c8a:	f001 fbff 	bl	748c <assert_print>
    5c8e:	480d      	ldr	r0, [pc, #52]	; (5cc4 <pend+0xa0>)
    5c90:	21b9      	movs	r1, #185	; 0xb9
    5c92:	f001 fbf4 	bl	747e <assert_post_action>
	__asm__ volatile(
    5c96:	f387 8811 	msr	BASEPRI, r7
    5c9a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5c9e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    5ca2:	bf08      	it	eq
    5ca4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5ca8:	d008      	beq.n	5cbc <pend+0x98>
    5caa:	4632      	mov	r2, r6
    5cac:	462b      	mov	r3, r5
    5cae:	f104 0018 	add.w	r0, r4, #24
    5cb2:	490a      	ldr	r1, [pc, #40]	; (5cdc <pend+0xb8>)
}
    5cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cb8:	f000 bd08 	b.w	66cc <z_add_timeout>
    5cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cc0:	20000b8c 	.word	0x20000b8c
    5cc4:	00008697 	.word	0x00008697
    5cc8:	000086f0 	.word	0x000086f0
    5ccc:	000085d7 	.word	0x000085d7
    5cd0:	00008705 	.word	0x00008705
    5cd4:	000086c4 	.word	0x000086c4
    5cd8:	000086db 	.word	0x000086db
    5cdc:	00005ab9 	.word	0x00005ab9

00005ce0 <z_pend_curr>:
{
    5ce0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5ce2:	4b11      	ldr	r3, [pc, #68]	; (5d28 <z_pend_curr+0x48>)
{
    5ce4:	4604      	mov	r4, r0
	pending_current = _current;
    5ce6:	6898      	ldr	r0, [r3, #8]
    5ce8:	4b10      	ldr	r3, [pc, #64]	; (5d2c <z_pend_curr+0x4c>)
{
    5cea:	460d      	mov	r5, r1
	pending_current = _current;
    5cec:	6018      	str	r0, [r3, #0]
{
    5cee:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5cf4:	f7ff ff96 	bl	5c24 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cf8:	4620      	mov	r0, r4
    5cfa:	f7ff f863 	bl	4dc4 <z_spin_unlock_valid>
    5cfe:	b968      	cbnz	r0, 5d1c <z_pend_curr+0x3c>
    5d00:	4a0b      	ldr	r2, [pc, #44]	; (5d30 <z_pend_curr+0x50>)
    5d02:	490c      	ldr	r1, [pc, #48]	; (5d34 <z_pend_curr+0x54>)
    5d04:	480c      	ldr	r0, [pc, #48]	; (5d38 <z_pend_curr+0x58>)
    5d06:	23d0      	movs	r3, #208	; 0xd0
    5d08:	f001 fbc0 	bl	748c <assert_print>
    5d0c:	480b      	ldr	r0, [pc, #44]	; (5d3c <z_pend_curr+0x5c>)
    5d0e:	4621      	mov	r1, r4
    5d10:	f001 fbbc 	bl	748c <assert_print>
    5d14:	4806      	ldr	r0, [pc, #24]	; (5d30 <z_pend_curr+0x50>)
    5d16:	21d0      	movs	r1, #208	; 0xd0
    5d18:	f001 fbb1 	bl	747e <assert_post_action>
    5d1c:	4628      	mov	r0, r5
}
    5d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5d22:	f7fb be93 	b.w	1a4c <arch_swap>
    5d26:	bf00      	nop
    5d28:	20000b58 	.word	0x20000b58
    5d2c:	20000b88 	.word	0x20000b88
    5d30:	00008697 	.word	0x00008697
    5d34:	000086c4 	.word	0x000086c4
    5d38:	000085d7 	.word	0x000085d7
    5d3c:	000086db 	.word	0x000086db

00005d40 <z_set_prio>:
{
    5d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d42:	4604      	mov	r4, r0
    5d44:	460d      	mov	r5, r1
	__asm__ volatile(
    5d46:	f04f 0320 	mov.w	r3, #32
    5d4a:	f3ef 8611 	mrs	r6, BASEPRI
    5d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d56:	483a      	ldr	r0, [pc, #232]	; (5e40 <z_set_prio+0x100>)
    5d58:	f7ff f826 	bl	4da8 <z_spin_lock_valid>
    5d5c:	b968      	cbnz	r0, 5d7a <z_set_prio+0x3a>
    5d5e:	4a39      	ldr	r2, [pc, #228]	; (5e44 <z_set_prio+0x104>)
    5d60:	4939      	ldr	r1, [pc, #228]	; (5e48 <z_set_prio+0x108>)
    5d62:	483a      	ldr	r0, [pc, #232]	; (5e4c <z_set_prio+0x10c>)
    5d64:	238e      	movs	r3, #142	; 0x8e
    5d66:	f001 fb91 	bl	748c <assert_print>
    5d6a:	4935      	ldr	r1, [pc, #212]	; (5e40 <z_set_prio+0x100>)
    5d6c:	4838      	ldr	r0, [pc, #224]	; (5e50 <z_set_prio+0x110>)
    5d6e:	f001 fb8d 	bl	748c <assert_print>
    5d72:	4834      	ldr	r0, [pc, #208]	; (5e44 <z_set_prio+0x104>)
    5d74:	218e      	movs	r1, #142	; 0x8e
    5d76:	f001 fb82 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5d7a:	4831      	ldr	r0, [pc, #196]	; (5e40 <z_set_prio+0x100>)
    5d7c:	f7ff f832 	bl	4de4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    5d80:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5d82:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5d84:	b26d      	sxtb	r5, r5
    5d86:	d157      	bne.n	5e38 <z_set_prio+0xf8>
		if (need_sched) {
    5d88:	69a2      	ldr	r2, [r4, #24]
    5d8a:	2a00      	cmp	r2, #0
    5d8c:	d154      	bne.n	5e38 <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d92:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5d94:	482f      	ldr	r0, [pc, #188]	; (5e54 <z_set_prio+0x114>)
    5d96:	4621      	mov	r1, r4
    5d98:	f7ff fc5e 	bl	5658 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5d9c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5d9e:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5da4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5da6:	4b2c      	ldr	r3, [pc, #176]	; (5e58 <z_set_prio+0x118>)
    5da8:	429c      	cmp	r4, r3
    5daa:	d109      	bne.n	5dc0 <z_set_prio+0x80>
    5dac:	492b      	ldr	r1, [pc, #172]	; (5e5c <z_set_prio+0x11c>)
    5dae:	4827      	ldr	r0, [pc, #156]	; (5e4c <z_set_prio+0x10c>)
    5db0:	4a2b      	ldr	r2, [pc, #172]	; (5e60 <z_set_prio+0x120>)
    5db2:	23ba      	movs	r3, #186	; 0xba
    5db4:	f001 fb6a 	bl	748c <assert_print>
    5db8:	4829      	ldr	r0, [pc, #164]	; (5e60 <z_set_prio+0x120>)
    5dba:	21ba      	movs	r1, #186	; 0xba
    5dbc:	f001 fb5f 	bl	747e <assert_post_action>
	return list->head == list;
    5dc0:	4a28      	ldr	r2, [pc, #160]	; (5e64 <z_set_prio+0x124>)
	return (node == list->tail) ? NULL : node->next;
    5dc2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dc6:	f102 0520 	add.w	r5, r2, #32
    5dca:	42ab      	cmp	r3, r5
    5dcc:	d02f      	beq.n	5e2e <z_set_prio+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5dce:	b373      	cbz	r3, 5e2e <z_set_prio+0xee>
	int32_t b1 = thread_1->base.prio;
    5dd0:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5dd4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5dd8:	428f      	cmp	r7, r1
    5dda:	d023      	beq.n	5e24 <z_set_prio+0xe4>
		return b2 - b1;
    5ddc:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5dde:	2900      	cmp	r1, #0
    5de0:	dd20      	ble.n	5e24 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    5de2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5de4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5de8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5dea:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5dec:	2001      	movs	r0, #1
    5dee:	f7ff fc77 	bl	56e0 <update_cache>
    5df2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5df4:	4812      	ldr	r0, [pc, #72]	; (5e40 <z_set_prio+0x100>)
    5df6:	f7fe ffe5 	bl	4dc4 <z_spin_unlock_valid>
    5dfa:	b968      	cbnz	r0, 5e18 <z_set_prio+0xd8>
    5dfc:	4a11      	ldr	r2, [pc, #68]	; (5e44 <z_set_prio+0x104>)
    5dfe:	491a      	ldr	r1, [pc, #104]	; (5e68 <z_set_prio+0x128>)
    5e00:	4812      	ldr	r0, [pc, #72]	; (5e4c <z_set_prio+0x10c>)
    5e02:	23b9      	movs	r3, #185	; 0xb9
    5e04:	f001 fb42 	bl	748c <assert_print>
    5e08:	490d      	ldr	r1, [pc, #52]	; (5e40 <z_set_prio+0x100>)
    5e0a:	4818      	ldr	r0, [pc, #96]	; (5e6c <z_set_prio+0x12c>)
    5e0c:	f001 fb3e 	bl	748c <assert_print>
    5e10:	480c      	ldr	r0, [pc, #48]	; (5e44 <z_set_prio+0x104>)
    5e12:	21b9      	movs	r1, #185	; 0xb9
    5e14:	f001 fb33 	bl	747e <assert_post_action>
	__asm__ volatile(
    5e18:	f386 8811 	msr	BASEPRI, r6
    5e1c:	f3bf 8f6f 	isb	sy
}
    5e20:	4620      	mov	r0, r4
    5e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5e24:	4283      	cmp	r3, r0
    5e26:	d002      	beq.n	5e2e <z_set_prio+0xee>
    5e28:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d1d2      	bne.n	5dd4 <z_set_prio+0x94>
	node->prev = tail;
    5e2e:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    5e32:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5e34:	6254      	str	r4, [r2, #36]	; 0x24
}
    5e36:	e7d9      	b.n	5dec <z_set_prio+0xac>
			thread->base.prio = prio;
    5e38:	73a5      	strb	r5, [r4, #14]
    5e3a:	2400      	movs	r4, #0
    5e3c:	e7da      	b.n	5df4 <z_set_prio+0xb4>
    5e3e:	bf00      	nop
    5e40:	20000b8c 	.word	0x20000b8c
    5e44:	00008697 	.word	0x00008697
    5e48:	000086f0 	.word	0x000086f0
    5e4c:	000085d7 	.word	0x000085d7
    5e50:	00008705 	.word	0x00008705
    5e54:	20000b78 	.word	0x20000b78
    5e58:	20000398 	.word	0x20000398
    5e5c:	000092d7 	.word	0x000092d7
    5e60:	000092b5 	.word	0x000092b5
    5e64:	20000b58 	.word	0x20000b58
    5e68:	000086c4 	.word	0x000086c4
    5e6c:	000086db 	.word	0x000086db

00005e70 <z_impl_k_thread_suspend>:
{
    5e70:	b570      	push	{r4, r5, r6, lr}
    5e72:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5e74:	3018      	adds	r0, #24
    5e76:	f000 fcf1 	bl	685c <z_abort_timeout>
	__asm__ volatile(
    5e7a:	f04f 0320 	mov.w	r3, #32
    5e7e:	f3ef 8611 	mrs	r6, BASEPRI
    5e82:	f383 8812 	msr	BASEPRI_MAX, r3
    5e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e8a:	4825      	ldr	r0, [pc, #148]	; (5f20 <z_impl_k_thread_suspend+0xb0>)
    5e8c:	f7fe ff8c 	bl	4da8 <z_spin_lock_valid>
    5e90:	b968      	cbnz	r0, 5eae <z_impl_k_thread_suspend+0x3e>
    5e92:	4a24      	ldr	r2, [pc, #144]	; (5f24 <z_impl_k_thread_suspend+0xb4>)
    5e94:	4924      	ldr	r1, [pc, #144]	; (5f28 <z_impl_k_thread_suspend+0xb8>)
    5e96:	4825      	ldr	r0, [pc, #148]	; (5f2c <z_impl_k_thread_suspend+0xbc>)
    5e98:	238e      	movs	r3, #142	; 0x8e
    5e9a:	f001 faf7 	bl	748c <assert_print>
    5e9e:	4920      	ldr	r1, [pc, #128]	; (5f20 <z_impl_k_thread_suspend+0xb0>)
    5ea0:	4823      	ldr	r0, [pc, #140]	; (5f30 <z_impl_k_thread_suspend+0xc0>)
    5ea2:	f001 faf3 	bl	748c <assert_print>
    5ea6:	481f      	ldr	r0, [pc, #124]	; (5f24 <z_impl_k_thread_suspend+0xb4>)
    5ea8:	218e      	movs	r1, #142	; 0x8e
    5eaa:	f001 fae8 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    5eae:	481c      	ldr	r0, [pc, #112]	; (5f20 <z_impl_k_thread_suspend+0xb0>)
    5eb0:	f7fe ff98 	bl	4de4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5eb4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5eb8:	7b63      	ldrb	r3, [r4, #13]
    5eba:	2a00      	cmp	r2, #0
    5ebc:	da06      	bge.n	5ecc <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5ec2:	481c      	ldr	r0, [pc, #112]	; (5f34 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ec4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ec6:	4621      	mov	r1, r4
    5ec8:	f7ff fbc6 	bl	5658 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5ecc:	4d1a      	ldr	r5, [pc, #104]	; (5f38 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5ece:	7b63      	ldrb	r3, [r4, #13]
    5ed0:	68a8      	ldr	r0, [r5, #8]
    5ed2:	f043 0310 	orr.w	r3, r3, #16
    5ed6:	7363      	strb	r3, [r4, #13]
    5ed8:	1b03      	subs	r3, r0, r4
    5eda:	4258      	negs	r0, r3
    5edc:	4158      	adcs	r0, r3
    5ede:	f7ff fbff 	bl	56e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ee2:	480f      	ldr	r0, [pc, #60]	; (5f20 <z_impl_k_thread_suspend+0xb0>)
    5ee4:	f7fe ff6e 	bl	4dc4 <z_spin_unlock_valid>
    5ee8:	b968      	cbnz	r0, 5f06 <z_impl_k_thread_suspend+0x96>
    5eea:	4a0e      	ldr	r2, [pc, #56]	; (5f24 <z_impl_k_thread_suspend+0xb4>)
    5eec:	4913      	ldr	r1, [pc, #76]	; (5f3c <z_impl_k_thread_suspend+0xcc>)
    5eee:	480f      	ldr	r0, [pc, #60]	; (5f2c <z_impl_k_thread_suspend+0xbc>)
    5ef0:	23b9      	movs	r3, #185	; 0xb9
    5ef2:	f001 facb 	bl	748c <assert_print>
    5ef6:	490a      	ldr	r1, [pc, #40]	; (5f20 <z_impl_k_thread_suspend+0xb0>)
    5ef8:	4811      	ldr	r0, [pc, #68]	; (5f40 <z_impl_k_thread_suspend+0xd0>)
    5efa:	f001 fac7 	bl	748c <assert_print>
    5efe:	4809      	ldr	r0, [pc, #36]	; (5f24 <z_impl_k_thread_suspend+0xb4>)
    5f00:	21b9      	movs	r1, #185	; 0xb9
    5f02:	f001 fabc 	bl	747e <assert_post_action>
	__asm__ volatile(
    5f06:	f386 8811 	msr	BASEPRI, r6
    5f0a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5f0e:	68ab      	ldr	r3, [r5, #8]
    5f10:	42a3      	cmp	r3, r4
    5f12:	d103      	bne.n	5f1c <z_impl_k_thread_suspend+0xac>
}
    5f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5f18:	f001 bfa1 	b.w	7e5e <z_reschedule_unlocked>
}
    5f1c:	bd70      	pop	{r4, r5, r6, pc}
    5f1e:	bf00      	nop
    5f20:	20000b8c 	.word	0x20000b8c
    5f24:	00008697 	.word	0x00008697
    5f28:	000086f0 	.word	0x000086f0
    5f2c:	000085d7 	.word	0x000085d7
    5f30:	00008705 	.word	0x00008705
    5f34:	20000b78 	.word	0x20000b78
    5f38:	20000b58 	.word	0x20000b58
    5f3c:	000086c4 	.word	0x000086c4
    5f40:	000086db 	.word	0x000086db

00005f44 <k_sched_unlock>:
{
    5f44:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5f46:	f04f 0320 	mov.w	r3, #32
    5f4a:	f3ef 8511 	mrs	r5, BASEPRI
    5f4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f56:	482d      	ldr	r0, [pc, #180]	; (600c <k_sched_unlock+0xc8>)
    5f58:	f7fe ff26 	bl	4da8 <z_spin_lock_valid>
    5f5c:	b968      	cbnz	r0, 5f7a <k_sched_unlock+0x36>
    5f5e:	4a2c      	ldr	r2, [pc, #176]	; (6010 <k_sched_unlock+0xcc>)
    5f60:	492c      	ldr	r1, [pc, #176]	; (6014 <k_sched_unlock+0xd0>)
    5f62:	482d      	ldr	r0, [pc, #180]	; (6018 <k_sched_unlock+0xd4>)
    5f64:	238e      	movs	r3, #142	; 0x8e
    5f66:	f001 fa91 	bl	748c <assert_print>
    5f6a:	4928      	ldr	r1, [pc, #160]	; (600c <k_sched_unlock+0xc8>)
    5f6c:	482b      	ldr	r0, [pc, #172]	; (601c <k_sched_unlock+0xd8>)
    5f6e:	f001 fa8d 	bl	748c <assert_print>
    5f72:	4827      	ldr	r0, [pc, #156]	; (6010 <k_sched_unlock+0xcc>)
    5f74:	218e      	movs	r1, #142	; 0x8e
    5f76:	f001 fa82 	bl	747e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    5f7a:	4c29      	ldr	r4, [pc, #164]	; (6020 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5f7c:	4823      	ldr	r0, [pc, #140]	; (600c <k_sched_unlock+0xc8>)
    5f7e:	f7fe ff31 	bl	4de4 <z_spin_lock_set_owner>
    5f82:	68a3      	ldr	r3, [r4, #8]
    5f84:	7bdb      	ldrb	r3, [r3, #15]
    5f86:	b973      	cbnz	r3, 5fa6 <k_sched_unlock+0x62>
    5f88:	4926      	ldr	r1, [pc, #152]	; (6024 <k_sched_unlock+0xe0>)
    5f8a:	4a27      	ldr	r2, [pc, #156]	; (6028 <k_sched_unlock+0xe4>)
    5f8c:	4822      	ldr	r0, [pc, #136]	; (6018 <k_sched_unlock+0xd4>)
    5f8e:	f240 33bb 	movw	r3, #955	; 0x3bb
    5f92:	f001 fa7b 	bl	748c <assert_print>
    5f96:	4825      	ldr	r0, [pc, #148]	; (602c <k_sched_unlock+0xe8>)
    5f98:	f001 fa78 	bl	748c <assert_print>
    5f9c:	4822      	ldr	r0, [pc, #136]	; (6028 <k_sched_unlock+0xe4>)
    5f9e:	f240 31bb 	movw	r1, #955	; 0x3bb
    5fa2:	f001 fa6c 	bl	747e <assert_post_action>
    5fa6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5faa:	b173      	cbz	r3, 5fca <k_sched_unlock+0x86>
    5fac:	4920      	ldr	r1, [pc, #128]	; (6030 <k_sched_unlock+0xec>)
    5fae:	4a1e      	ldr	r2, [pc, #120]	; (6028 <k_sched_unlock+0xe4>)
    5fb0:	4819      	ldr	r0, [pc, #100]	; (6018 <k_sched_unlock+0xd4>)
    5fb2:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    5fb6:	f001 fa69 	bl	748c <assert_print>
    5fba:	481c      	ldr	r0, [pc, #112]	; (602c <k_sched_unlock+0xe8>)
    5fbc:	f001 fa66 	bl	748c <assert_print>
    5fc0:	4819      	ldr	r0, [pc, #100]	; (6028 <k_sched_unlock+0xe4>)
    5fc2:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    5fc6:	f001 fa5a 	bl	747e <assert_post_action>
		++_current->base.sched_locked;
    5fca:	68a2      	ldr	r2, [r4, #8]
    5fcc:	7bd3      	ldrb	r3, [r2, #15]
    5fce:	3301      	adds	r3, #1
		update_cache(0);
    5fd0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5fd2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5fd4:	f7ff fb84 	bl	56e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fd8:	480c      	ldr	r0, [pc, #48]	; (600c <k_sched_unlock+0xc8>)
    5fda:	f7fe fef3 	bl	4dc4 <z_spin_unlock_valid>
    5fde:	b968      	cbnz	r0, 5ffc <k_sched_unlock+0xb8>
    5fe0:	4a0b      	ldr	r2, [pc, #44]	; (6010 <k_sched_unlock+0xcc>)
    5fe2:	4914      	ldr	r1, [pc, #80]	; (6034 <k_sched_unlock+0xf0>)
    5fe4:	480c      	ldr	r0, [pc, #48]	; (6018 <k_sched_unlock+0xd4>)
    5fe6:	23b9      	movs	r3, #185	; 0xb9
    5fe8:	f001 fa50 	bl	748c <assert_print>
    5fec:	4907      	ldr	r1, [pc, #28]	; (600c <k_sched_unlock+0xc8>)
    5fee:	4812      	ldr	r0, [pc, #72]	; (6038 <k_sched_unlock+0xf4>)
    5ff0:	f001 fa4c 	bl	748c <assert_print>
    5ff4:	4806      	ldr	r0, [pc, #24]	; (6010 <k_sched_unlock+0xcc>)
    5ff6:	21b9      	movs	r1, #185	; 0xb9
    5ff8:	f001 fa41 	bl	747e <assert_post_action>
	__asm__ volatile(
    5ffc:	f385 8811 	msr	BASEPRI, r5
    6000:	f3bf 8f6f 	isb	sy
}
    6004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    6008:	f001 bf29 	b.w	7e5e <z_reschedule_unlocked>
    600c:	20000b8c 	.word	0x20000b8c
    6010:	00008697 	.word	0x00008697
    6014:	000086f0 	.word	0x000086f0
    6018:	000085d7 	.word	0x000085d7
    601c:	00008705 	.word	0x00008705
    6020:	20000b58 	.word	0x20000b58
    6024:	00009336 	.word	0x00009336
    6028:	000092b5 	.word	0x000092b5
    602c:	00009213 	.word	0x00009213
    6030:	0000919a 	.word	0x0000919a
    6034:	000086c4 	.word	0x000086c4
    6038:	000086db 	.word	0x000086db

0000603c <z_unpend1_no_timeout>:
{
    603c:	b538      	push	{r3, r4, r5, lr}
    603e:	4604      	mov	r4, r0
	__asm__ volatile(
    6040:	f04f 0320 	mov.w	r3, #32
    6044:	f3ef 8511 	mrs	r5, BASEPRI
    6048:	f383 8812 	msr	BASEPRI_MAX, r3
    604c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6050:	4819      	ldr	r0, [pc, #100]	; (60b8 <z_unpend1_no_timeout+0x7c>)
    6052:	f7fe fea9 	bl	4da8 <z_spin_lock_valid>
    6056:	b968      	cbnz	r0, 6074 <z_unpend1_no_timeout+0x38>
    6058:	4a18      	ldr	r2, [pc, #96]	; (60bc <z_unpend1_no_timeout+0x80>)
    605a:	4919      	ldr	r1, [pc, #100]	; (60c0 <z_unpend1_no_timeout+0x84>)
    605c:	4819      	ldr	r0, [pc, #100]	; (60c4 <z_unpend1_no_timeout+0x88>)
    605e:	238e      	movs	r3, #142	; 0x8e
    6060:	f001 fa14 	bl	748c <assert_print>
    6064:	4914      	ldr	r1, [pc, #80]	; (60b8 <z_unpend1_no_timeout+0x7c>)
    6066:	4818      	ldr	r0, [pc, #96]	; (60c8 <z_unpend1_no_timeout+0x8c>)
    6068:	f001 fa10 	bl	748c <assert_print>
    606c:	4813      	ldr	r0, [pc, #76]	; (60bc <z_unpend1_no_timeout+0x80>)
    606e:	218e      	movs	r1, #142	; 0x8e
    6070:	f001 fa05 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6074:	4810      	ldr	r0, [pc, #64]	; (60b8 <z_unpend1_no_timeout+0x7c>)
    6076:	f7fe feb5 	bl	4de4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    607a:	4620      	mov	r0, r4
    607c:	f001 fef9 	bl	7e72 <z_priq_dumb_best>
		if (thread != NULL) {
    6080:	4604      	mov	r4, r0
    6082:	b108      	cbz	r0, 6088 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    6084:	f7ff fb0a 	bl	569c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6088:	480b      	ldr	r0, [pc, #44]	; (60b8 <z_unpend1_no_timeout+0x7c>)
    608a:	f7fe fe9b 	bl	4dc4 <z_spin_unlock_valid>
    608e:	b968      	cbnz	r0, 60ac <z_unpend1_no_timeout+0x70>
    6090:	4a0a      	ldr	r2, [pc, #40]	; (60bc <z_unpend1_no_timeout+0x80>)
    6092:	490e      	ldr	r1, [pc, #56]	; (60cc <z_unpend1_no_timeout+0x90>)
    6094:	480b      	ldr	r0, [pc, #44]	; (60c4 <z_unpend1_no_timeout+0x88>)
    6096:	23b9      	movs	r3, #185	; 0xb9
    6098:	f001 f9f8 	bl	748c <assert_print>
    609c:	4906      	ldr	r1, [pc, #24]	; (60b8 <z_unpend1_no_timeout+0x7c>)
    609e:	480c      	ldr	r0, [pc, #48]	; (60d0 <z_unpend1_no_timeout+0x94>)
    60a0:	f001 f9f4 	bl	748c <assert_print>
    60a4:	4805      	ldr	r0, [pc, #20]	; (60bc <z_unpend1_no_timeout+0x80>)
    60a6:	21b9      	movs	r1, #185	; 0xb9
    60a8:	f001 f9e9 	bl	747e <assert_post_action>
	__asm__ volatile(
    60ac:	f385 8811 	msr	BASEPRI, r5
    60b0:	f3bf 8f6f 	isb	sy
}
    60b4:	4620      	mov	r0, r4
    60b6:	bd38      	pop	{r3, r4, r5, pc}
    60b8:	20000b8c 	.word	0x20000b8c
    60bc:	00008697 	.word	0x00008697
    60c0:	000086f0 	.word	0x000086f0
    60c4:	000085d7 	.word	0x000085d7
    60c8:	00008705 	.word	0x00008705
    60cc:	000086c4 	.word	0x000086c4
    60d0:	000086db 	.word	0x000086db

000060d4 <z_unpend_first_thread>:
{
    60d4:	b538      	push	{r3, r4, r5, lr}
    60d6:	4604      	mov	r4, r0
	__asm__ volatile(
    60d8:	f04f 0320 	mov.w	r3, #32
    60dc:	f3ef 8511 	mrs	r5, BASEPRI
    60e0:	f383 8812 	msr	BASEPRI_MAX, r3
    60e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60e8:	481b      	ldr	r0, [pc, #108]	; (6158 <z_unpend_first_thread+0x84>)
    60ea:	f7fe fe5d 	bl	4da8 <z_spin_lock_valid>
    60ee:	b968      	cbnz	r0, 610c <z_unpend_first_thread+0x38>
    60f0:	4a1a      	ldr	r2, [pc, #104]	; (615c <z_unpend_first_thread+0x88>)
    60f2:	491b      	ldr	r1, [pc, #108]	; (6160 <z_unpend_first_thread+0x8c>)
    60f4:	481b      	ldr	r0, [pc, #108]	; (6164 <z_unpend_first_thread+0x90>)
    60f6:	238e      	movs	r3, #142	; 0x8e
    60f8:	f001 f9c8 	bl	748c <assert_print>
    60fc:	4916      	ldr	r1, [pc, #88]	; (6158 <z_unpend_first_thread+0x84>)
    60fe:	481a      	ldr	r0, [pc, #104]	; (6168 <z_unpend_first_thread+0x94>)
    6100:	f001 f9c4 	bl	748c <assert_print>
    6104:	4815      	ldr	r0, [pc, #84]	; (615c <z_unpend_first_thread+0x88>)
    6106:	218e      	movs	r1, #142	; 0x8e
    6108:	f001 f9b9 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    610c:	4812      	ldr	r0, [pc, #72]	; (6158 <z_unpend_first_thread+0x84>)
    610e:	f7fe fe69 	bl	4de4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    6112:	4620      	mov	r0, r4
    6114:	f001 fead 	bl	7e72 <z_priq_dumb_best>
		if (thread != NULL) {
    6118:	4604      	mov	r4, r0
    611a:	b128      	cbz	r0, 6128 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    611c:	f7ff fabe 	bl	569c <unpend_thread_no_timeout>
    6120:	f104 0018 	add.w	r0, r4, #24
    6124:	f000 fb9a 	bl	685c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6128:	480b      	ldr	r0, [pc, #44]	; (6158 <z_unpend_first_thread+0x84>)
    612a:	f7fe fe4b 	bl	4dc4 <z_spin_unlock_valid>
    612e:	b968      	cbnz	r0, 614c <z_unpend_first_thread+0x78>
    6130:	4a0a      	ldr	r2, [pc, #40]	; (615c <z_unpend_first_thread+0x88>)
    6132:	490e      	ldr	r1, [pc, #56]	; (616c <z_unpend_first_thread+0x98>)
    6134:	480b      	ldr	r0, [pc, #44]	; (6164 <z_unpend_first_thread+0x90>)
    6136:	23b9      	movs	r3, #185	; 0xb9
    6138:	f001 f9a8 	bl	748c <assert_print>
    613c:	4906      	ldr	r1, [pc, #24]	; (6158 <z_unpend_first_thread+0x84>)
    613e:	480c      	ldr	r0, [pc, #48]	; (6170 <z_unpend_first_thread+0x9c>)
    6140:	f001 f9a4 	bl	748c <assert_print>
    6144:	4805      	ldr	r0, [pc, #20]	; (615c <z_unpend_first_thread+0x88>)
    6146:	21b9      	movs	r1, #185	; 0xb9
    6148:	f001 f999 	bl	747e <assert_post_action>
	__asm__ volatile(
    614c:	f385 8811 	msr	BASEPRI, r5
    6150:	f3bf 8f6f 	isb	sy
}
    6154:	4620      	mov	r0, r4
    6156:	bd38      	pop	{r3, r4, r5, pc}
    6158:	20000b8c 	.word	0x20000b8c
    615c:	00008697 	.word	0x00008697
    6160:	000086f0 	.word	0x000086f0
    6164:	000085d7 	.word	0x000085d7
    6168:	00008705 	.word	0x00008705
    616c:	000086c4 	.word	0x000086c4
    6170:	000086db 	.word	0x000086db

00006174 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6174:	4b04      	ldr	r3, [pc, #16]	; (6188 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6176:	2100      	movs	r1, #0
    6178:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    617c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6180:	4608      	mov	r0, r1
    6182:	f7ff b903 	b.w	538c <k_sched_time_slice_set>
    6186:	bf00      	nop
    6188:	20000b58 	.word	0x20000b58

0000618c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    618e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6192:	b173      	cbz	r3, 61b2 <z_impl_k_yield+0x26>
    6194:	493f      	ldr	r1, [pc, #252]	; (6294 <z_impl_k_yield+0x108>)
    6196:	4a40      	ldr	r2, [pc, #256]	; (6298 <z_impl_k_yield+0x10c>)
    6198:	4840      	ldr	r0, [pc, #256]	; (629c <z_impl_k_yield+0x110>)
    619a:	f240 5332 	movw	r3, #1330	; 0x532
    619e:	f001 f975 	bl	748c <assert_print>
    61a2:	483f      	ldr	r0, [pc, #252]	; (62a0 <z_impl_k_yield+0x114>)
    61a4:	f001 f972 	bl	748c <assert_print>
    61a8:	483b      	ldr	r0, [pc, #236]	; (6298 <z_impl_k_yield+0x10c>)
    61aa:	f240 5132 	movw	r1, #1330	; 0x532
    61ae:	f001 f966 	bl	747e <assert_post_action>
	__asm__ volatile(
    61b2:	f04f 0320 	mov.w	r3, #32
    61b6:	f3ef 8611 	mrs	r6, BASEPRI
    61ba:	f383 8812 	msr	BASEPRI_MAX, r3
    61be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61c2:	4838      	ldr	r0, [pc, #224]	; (62a4 <z_impl_k_yield+0x118>)
    61c4:	f7fe fdf0 	bl	4da8 <z_spin_lock_valid>
    61c8:	b968      	cbnz	r0, 61e6 <z_impl_k_yield+0x5a>
    61ca:	4a37      	ldr	r2, [pc, #220]	; (62a8 <z_impl_k_yield+0x11c>)
    61cc:	4937      	ldr	r1, [pc, #220]	; (62ac <z_impl_k_yield+0x120>)
    61ce:	4833      	ldr	r0, [pc, #204]	; (629c <z_impl_k_yield+0x110>)
    61d0:	238e      	movs	r3, #142	; 0x8e
    61d2:	f001 f95b 	bl	748c <assert_print>
    61d6:	4933      	ldr	r1, [pc, #204]	; (62a4 <z_impl_k_yield+0x118>)
    61d8:	4835      	ldr	r0, [pc, #212]	; (62b0 <z_impl_k_yield+0x124>)
    61da:	f001 f957 	bl	748c <assert_print>
    61de:	4832      	ldr	r0, [pc, #200]	; (62a8 <z_impl_k_yield+0x11c>)
    61e0:	218e      	movs	r1, #142	; 0x8e
    61e2:	f001 f94c 	bl	747e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    61e6:	4d33      	ldr	r5, [pc, #204]	; (62b4 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    61e8:	482e      	ldr	r0, [pc, #184]	; (62a4 <z_impl_k_yield+0x118>)
    61ea:	f7fe fdfb 	bl	4de4 <z_spin_lock_set_owner>
    61ee:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    61f0:	7b4b      	ldrb	r3, [r1, #13]
    61f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    61f6:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    61f8:	f105 0020 	add.w	r0, r5, #32
    61fc:	f7ff fa2c 	bl	5658 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6200:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6202:	7b63      	ldrb	r3, [r4, #13]
    6204:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6208:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    620a:	4b2b      	ldr	r3, [pc, #172]	; (62b8 <z_impl_k_yield+0x12c>)
    620c:	429c      	cmp	r4, r3
    620e:	d109      	bne.n	6224 <z_impl_k_yield+0x98>
    6210:	492a      	ldr	r1, [pc, #168]	; (62bc <z_impl_k_yield+0x130>)
    6212:	4822      	ldr	r0, [pc, #136]	; (629c <z_impl_k_yield+0x110>)
    6214:	4a20      	ldr	r2, [pc, #128]	; (6298 <z_impl_k_yield+0x10c>)
    6216:	23ba      	movs	r3, #186	; 0xba
    6218:	f001 f938 	bl	748c <assert_print>
    621c:	481e      	ldr	r0, [pc, #120]	; (6298 <z_impl_k_yield+0x10c>)
    621e:	21ba      	movs	r1, #186	; 0xba
    6220:	f001 f92d 	bl	747e <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    6224:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6228:	4825      	ldr	r0, [pc, #148]	; (62c0 <z_impl_k_yield+0x134>)
    622a:	4283      	cmp	r3, r0
    622c:	d02d      	beq.n	628a <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    622e:	b363      	cbz	r3, 628a <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    6230:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6234:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6238:	4297      	cmp	r7, r2
    623a:	d021      	beq.n	6280 <z_impl_k_yield+0xf4>
		return b2 - b1;
    623c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    623e:	2a00      	cmp	r2, #0
    6240:	dd1e      	ble.n	6280 <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    6242:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6244:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6248:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    624a:	605c      	str	r4, [r3, #4]
	update_cache(1);
    624c:	2001      	movs	r0, #1
    624e:	f7ff fa47 	bl	56e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6252:	4814      	ldr	r0, [pc, #80]	; (62a4 <z_impl_k_yield+0x118>)
    6254:	f7fe fdb6 	bl	4dc4 <z_spin_unlock_valid>
    6258:	b968      	cbnz	r0, 6276 <z_impl_k_yield+0xea>
    625a:	4a13      	ldr	r2, [pc, #76]	; (62a8 <z_impl_k_yield+0x11c>)
    625c:	4919      	ldr	r1, [pc, #100]	; (62c4 <z_impl_k_yield+0x138>)
    625e:	480f      	ldr	r0, [pc, #60]	; (629c <z_impl_k_yield+0x110>)
    6260:	23d0      	movs	r3, #208	; 0xd0
    6262:	f001 f913 	bl	748c <assert_print>
    6266:	490f      	ldr	r1, [pc, #60]	; (62a4 <z_impl_k_yield+0x118>)
    6268:	4817      	ldr	r0, [pc, #92]	; (62c8 <z_impl_k_yield+0x13c>)
    626a:	f001 f90f 	bl	748c <assert_print>
    626e:	480e      	ldr	r0, [pc, #56]	; (62a8 <z_impl_k_yield+0x11c>)
    6270:	21d0      	movs	r1, #208	; 0xd0
    6272:	f001 f904 	bl	747e <assert_post_action>
    6276:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    6278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    627c:	f7fb bbe6 	b.w	1a4c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6280:	428b      	cmp	r3, r1
    6282:	d002      	beq.n	628a <z_impl_k_yield+0xfe>
    6284:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6286:	2b00      	cmp	r3, #0
    6288:	d1d4      	bne.n	6234 <z_impl_k_yield+0xa8>
	node->prev = tail;
    628a:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    628e:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6290:	626c      	str	r4, [r5, #36]	; 0x24
}
    6292:	e7db      	b.n	624c <z_impl_k_yield+0xc0>
    6294:	0000919a 	.word	0x0000919a
    6298:	000092b5 	.word	0x000092b5
    629c:	000085d7 	.word	0x000085d7
    62a0:	00009213 	.word	0x00009213
    62a4:	20000b8c 	.word	0x20000b8c
    62a8:	00008697 	.word	0x00008697
    62ac:	000086f0 	.word	0x000086f0
    62b0:	00008705 	.word	0x00008705
    62b4:	20000b58 	.word	0x20000b58
    62b8:	20000398 	.word	0x20000398
    62bc:	000092d7 	.word	0x000092d7
    62c0:	20000b78 	.word	0x20000b78
    62c4:	000086c4 	.word	0x000086c4
    62c8:	000086db 	.word	0x000086db

000062cc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    62cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62d0:	4605      	mov	r5, r0
    62d2:	460e      	mov	r6, r1
    62d4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    62d8:	b173      	cbz	r3, 62f8 <z_tick_sleep+0x2c>
    62da:	4943      	ldr	r1, [pc, #268]	; (63e8 <z_tick_sleep+0x11c>)
    62dc:	4a43      	ldr	r2, [pc, #268]	; (63ec <z_tick_sleep+0x120>)
    62de:	4844      	ldr	r0, [pc, #272]	; (63f0 <z_tick_sleep+0x124>)
    62e0:	f240 534e 	movw	r3, #1358	; 0x54e
    62e4:	f001 f8d2 	bl	748c <assert_print>
    62e8:	4842      	ldr	r0, [pc, #264]	; (63f4 <z_tick_sleep+0x128>)
    62ea:	f001 f8cf 	bl	748c <assert_print>
    62ee:	483f      	ldr	r0, [pc, #252]	; (63ec <z_tick_sleep+0x120>)
    62f0:	f240 514e 	movw	r1, #1358	; 0x54e
    62f4:	f001 f8c3 	bl	747e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    62f8:	ea55 0306 	orrs.w	r3, r5, r6
    62fc:	d103      	bne.n	6306 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    62fe:	f7ff ff45 	bl	618c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    6302:	2000      	movs	r0, #0
    6304:	e06d      	b.n	63e2 <z_tick_sleep+0x116>
	if (Z_TICK_ABS(ticks) <= 0) {
    6306:	f06f 0401 	mvn.w	r4, #1
    630a:	1b64      	subs	r4, r4, r5
    630c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6310:	eb63 0306 	sbc.w	r3, r3, r6
    6314:	2c01      	cmp	r4, #1
    6316:	f173 0300 	sbcs.w	r3, r3, #0
    631a:	da02      	bge.n	6322 <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    631c:	f001 fdaf 	bl	7e7e <sys_clock_tick_get_32>
    6320:	1944      	adds	r4, r0, r5
    6322:	f04f 0320 	mov.w	r3, #32
    6326:	f3ef 8811 	mrs	r8, BASEPRI
    632a:	f383 8812 	msr	BASEPRI_MAX, r3
    632e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6332:	4831      	ldr	r0, [pc, #196]	; (63f8 <z_tick_sleep+0x12c>)
    6334:	f7fe fd38 	bl	4da8 <z_spin_lock_valid>
    6338:	b968      	cbnz	r0, 6356 <z_tick_sleep+0x8a>
    633a:	4a30      	ldr	r2, [pc, #192]	; (63fc <z_tick_sleep+0x130>)
    633c:	4930      	ldr	r1, [pc, #192]	; (6400 <z_tick_sleep+0x134>)
    633e:	482c      	ldr	r0, [pc, #176]	; (63f0 <z_tick_sleep+0x124>)
    6340:	238e      	movs	r3, #142	; 0x8e
    6342:	f001 f8a3 	bl	748c <assert_print>
    6346:	492c      	ldr	r1, [pc, #176]	; (63f8 <z_tick_sleep+0x12c>)
    6348:	482e      	ldr	r0, [pc, #184]	; (6404 <z_tick_sleep+0x138>)
    634a:	f001 f89f 	bl	748c <assert_print>
    634e:	482b      	ldr	r0, [pc, #172]	; (63fc <z_tick_sleep+0x130>)
    6350:	218e      	movs	r1, #142	; 0x8e
    6352:	f001 f894 	bl	747e <assert_post_action>
	pending_current = _current;
    6356:	4f2c      	ldr	r7, [pc, #176]	; (6408 <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
    6358:	4827      	ldr	r0, [pc, #156]	; (63f8 <z_tick_sleep+0x12c>)
    635a:	f7fe fd43 	bl	4de4 <z_spin_lock_set_owner>
    635e:	4b2b      	ldr	r3, [pc, #172]	; (640c <z_tick_sleep+0x140>)
    6360:	68b8      	ldr	r0, [r7, #8]
    6362:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6364:	f7ff fc02 	bl	5b6c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6368:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    636a:	4929      	ldr	r1, [pc, #164]	; (6410 <z_tick_sleep+0x144>)
    636c:	462a      	mov	r2, r5
    636e:	4633      	mov	r3, r6
    6370:	3018      	adds	r0, #24
    6372:	f000 f9ab 	bl	66cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6376:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6378:	481f      	ldr	r0, [pc, #124]	; (63f8 <z_tick_sleep+0x12c>)
    637a:	7b53      	ldrb	r3, [r2, #13]
    637c:	f043 0310 	orr.w	r3, r3, #16
    6380:	7353      	strb	r3, [r2, #13]
    6382:	f7fe fd1f 	bl	4dc4 <z_spin_unlock_valid>
    6386:	b968      	cbnz	r0, 63a4 <z_tick_sleep+0xd8>
    6388:	4a1c      	ldr	r2, [pc, #112]	; (63fc <z_tick_sleep+0x130>)
    638a:	4922      	ldr	r1, [pc, #136]	; (6414 <z_tick_sleep+0x148>)
    638c:	4818      	ldr	r0, [pc, #96]	; (63f0 <z_tick_sleep+0x124>)
    638e:	23d0      	movs	r3, #208	; 0xd0
    6390:	f001 f87c 	bl	748c <assert_print>
    6394:	4918      	ldr	r1, [pc, #96]	; (63f8 <z_tick_sleep+0x12c>)
    6396:	4820      	ldr	r0, [pc, #128]	; (6418 <z_tick_sleep+0x14c>)
    6398:	f001 f878 	bl	748c <assert_print>
    639c:	4817      	ldr	r0, [pc, #92]	; (63fc <z_tick_sleep+0x130>)
    639e:	21d0      	movs	r1, #208	; 0xd0
    63a0:	f001 f86d 	bl	747e <assert_post_action>
    63a4:	4640      	mov	r0, r8
    63a6:	f7fb fb51 	bl	1a4c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    63aa:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    63ac:	7b5b      	ldrb	r3, [r3, #13]
    63ae:	06db      	lsls	r3, r3, #27
    63b0:	d50e      	bpl.n	63d0 <z_tick_sleep+0x104>
    63b2:	491a      	ldr	r1, [pc, #104]	; (641c <z_tick_sleep+0x150>)
    63b4:	4a0d      	ldr	r2, [pc, #52]	; (63ec <z_tick_sleep+0x120>)
    63b6:	480e      	ldr	r0, [pc, #56]	; (63f0 <z_tick_sleep+0x124>)
    63b8:	f240 536f 	movw	r3, #1391	; 0x56f
    63bc:	f001 f866 	bl	748c <assert_print>
    63c0:	480c      	ldr	r0, [pc, #48]	; (63f4 <z_tick_sleep+0x128>)
    63c2:	f001 f863 	bl	748c <assert_print>
    63c6:	4809      	ldr	r0, [pc, #36]	; (63ec <z_tick_sleep+0x120>)
    63c8:	f240 516f 	movw	r1, #1391	; 0x56f
    63cc:	f001 f857 	bl	747e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    63d0:	f001 fd55 	bl	7e7e <sys_clock_tick_get_32>
    63d4:	1a20      	subs	r0, r4, r0
    63d6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    63da:	2801      	cmp	r0, #1
    63dc:	f173 0300 	sbcs.w	r3, r3, #0
    63e0:	db8f      	blt.n	6302 <z_tick_sleep+0x36>
}
    63e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63e6:	bf00      	nop
    63e8:	0000919a 	.word	0x0000919a
    63ec:	000092b5 	.word	0x000092b5
    63f0:	000085d7 	.word	0x000085d7
    63f4:	00009213 	.word	0x00009213
    63f8:	20000b8c 	.word	0x20000b8c
    63fc:	00008697 	.word	0x00008697
    6400:	000086f0 	.word	0x000086f0
    6404:	00008705 	.word	0x00008705
    6408:	20000b58 	.word	0x20000b58
    640c:	20000b88 	.word	0x20000b88
    6410:	00005ab9 	.word	0x00005ab9
    6414:	000086c4 	.word	0x000086c4
    6418:	000086db 	.word	0x000086db
    641c:	00009367 	.word	0x00009367

00006420 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6420:	b538      	push	{r3, r4, r5, lr}
    6422:	4605      	mov	r5, r0
    6424:	460c      	mov	r4, r1
    6426:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    642a:	b173      	cbz	r3, 644a <z_impl_k_sleep+0x2a>
    642c:	4913      	ldr	r1, [pc, #76]	; (647c <z_impl_k_sleep+0x5c>)
    642e:	4a14      	ldr	r2, [pc, #80]	; (6480 <z_impl_k_sleep+0x60>)
    6430:	4814      	ldr	r0, [pc, #80]	; (6484 <z_impl_k_sleep+0x64>)
    6432:	f240 537e 	movw	r3, #1406	; 0x57e
    6436:	f001 f829 	bl	748c <assert_print>
    643a:	4813      	ldr	r0, [pc, #76]	; (6488 <z_impl_k_sleep+0x68>)
    643c:	f001 f826 	bl	748c <assert_print>
    6440:	480f      	ldr	r0, [pc, #60]	; (6480 <z_impl_k_sleep+0x60>)
    6442:	f240 517e 	movw	r1, #1406	; 0x57e
    6446:	f001 f81a 	bl	747e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    644a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    644e:	bf08      	it	eq
    6450:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    6454:	d106      	bne.n	6464 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    6456:	4b0d      	ldr	r3, [pc, #52]	; (648c <z_impl_k_sleep+0x6c>)
    6458:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    645a:	f7ff fd09 	bl	5e70 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6462:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6464:	4628      	mov	r0, r5
    6466:	4621      	mov	r1, r4
    6468:	f7ff ff30 	bl	62cc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    646c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6470:	fb80 0303 	smull	r0, r3, r0, r3
    6474:	0bc0      	lsrs	r0, r0, #15
    6476:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    647a:	e7f2      	b.n	6462 <z_impl_k_sleep+0x42>
    647c:	0000919a 	.word	0x0000919a
    6480:	000092b5 	.word	0x000092b5
    6484:	000085d7 	.word	0x000085d7
    6488:	00009213 	.word	0x00009213
    648c:	20000b58 	.word	0x20000b58

00006490 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6490:	4b01      	ldr	r3, [pc, #4]	; (6498 <z_impl_z_current_get+0x8>)
    6492:	6898      	ldr	r0, [r3, #8]
    6494:	4770      	bx	lr
    6496:	bf00      	nop
    6498:	20000b58 	.word	0x20000b58

0000649c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64a0:	4604      	mov	r4, r0
    64a2:	f04f 0320 	mov.w	r3, #32
    64a6:	f3ef 8611 	mrs	r6, BASEPRI
    64aa:	f383 8812 	msr	BASEPRI_MAX, r3
    64ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64b2:	4848      	ldr	r0, [pc, #288]	; (65d4 <z_thread_abort+0x138>)
    64b4:	f7fe fc78 	bl	4da8 <z_spin_lock_valid>
    64b8:	b968      	cbnz	r0, 64d6 <z_thread_abort+0x3a>
    64ba:	4a47      	ldr	r2, [pc, #284]	; (65d8 <z_thread_abort+0x13c>)
    64bc:	4947      	ldr	r1, [pc, #284]	; (65dc <z_thread_abort+0x140>)
    64be:	4848      	ldr	r0, [pc, #288]	; (65e0 <z_thread_abort+0x144>)
    64c0:	238e      	movs	r3, #142	; 0x8e
    64c2:	f000 ffe3 	bl	748c <assert_print>
    64c6:	4943      	ldr	r1, [pc, #268]	; (65d4 <z_thread_abort+0x138>)
    64c8:	4846      	ldr	r0, [pc, #280]	; (65e4 <z_thread_abort+0x148>)
    64ca:	f000 ffdf 	bl	748c <assert_print>
    64ce:	4842      	ldr	r0, [pc, #264]	; (65d8 <z_thread_abort+0x13c>)
    64d0:	218e      	movs	r1, #142	; 0x8e
    64d2:	f000 ffd4 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    64d6:	483f      	ldr	r0, [pc, #252]	; (65d4 <z_thread_abort+0x138>)
    64d8:	f7fe fc84 	bl	4de4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    64dc:	7b63      	ldrb	r3, [r4, #13]
    64de:	071a      	lsls	r2, r3, #28
    64e0:	d517      	bpl.n	6512 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64e2:	483c      	ldr	r0, [pc, #240]	; (65d4 <z_thread_abort+0x138>)
    64e4:	f7fe fc6e 	bl	4dc4 <z_spin_unlock_valid>
    64e8:	b968      	cbnz	r0, 6506 <z_thread_abort+0x6a>
    64ea:	4a3b      	ldr	r2, [pc, #236]	; (65d8 <z_thread_abort+0x13c>)
    64ec:	493e      	ldr	r1, [pc, #248]	; (65e8 <z_thread_abort+0x14c>)
    64ee:	483c      	ldr	r0, [pc, #240]	; (65e0 <z_thread_abort+0x144>)
    64f0:	23b9      	movs	r3, #185	; 0xb9
    64f2:	f000 ffcb 	bl	748c <assert_print>
    64f6:	4937      	ldr	r1, [pc, #220]	; (65d4 <z_thread_abort+0x138>)
    64f8:	483c      	ldr	r0, [pc, #240]	; (65ec <z_thread_abort+0x150>)
    64fa:	f000 ffc7 	bl	748c <assert_print>
    64fe:	4836      	ldr	r0, [pc, #216]	; (65d8 <z_thread_abort+0x13c>)
    6500:	21b9      	movs	r1, #185	; 0xb9
    6502:	f000 ffbc 	bl	747e <assert_post_action>
	__asm__ volatile(
    6506:	f386 8811 	msr	BASEPRI, r6
    650a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6512:	f023 0220 	bic.w	r2, r3, #32
    6516:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    651a:	09d2      	lsrs	r2, r2, #7
    651c:	d142      	bne.n	65a4 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    651e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6520:	68a3      	ldr	r3, [r4, #8]
    6522:	b113      	cbz	r3, 652a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6524:	4620      	mov	r0, r4
    6526:	f7ff f8b9 	bl	569c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    652a:	f104 0018 	add.w	r0, r4, #24
    652e:	f000 f995 	bl	685c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6532:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6536:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    653a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    653c:	42bd      	cmp	r5, r7
    653e:	d001      	beq.n	6544 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6540:	2d00      	cmp	r5, #0
    6542:	d139      	bne.n	65b8 <z_thread_abort+0x11c>
		update_cache(1);
    6544:	2001      	movs	r0, #1
    6546:	f7ff f8cb 	bl	56e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    654a:	4b29      	ldr	r3, [pc, #164]	; (65f0 <z_thread_abort+0x154>)
    654c:	689b      	ldr	r3, [r3, #8]
    654e:	42a3      	cmp	r3, r4
    6550:	d1c7      	bne.n	64e2 <z_thread_abort+0x46>
    6552:	f3ef 8305 	mrs	r3, IPSR
    6556:	2b00      	cmp	r3, #0
    6558:	d1c3      	bne.n	64e2 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    655a:	481e      	ldr	r0, [pc, #120]	; (65d4 <z_thread_abort+0x138>)
    655c:	f7fe fc32 	bl	4dc4 <z_spin_unlock_valid>
    6560:	b968      	cbnz	r0, 657e <z_thread_abort+0xe2>
    6562:	4a1d      	ldr	r2, [pc, #116]	; (65d8 <z_thread_abort+0x13c>)
    6564:	4920      	ldr	r1, [pc, #128]	; (65e8 <z_thread_abort+0x14c>)
    6566:	481e      	ldr	r0, [pc, #120]	; (65e0 <z_thread_abort+0x144>)
    6568:	23d0      	movs	r3, #208	; 0xd0
    656a:	f000 ff8f 	bl	748c <assert_print>
    656e:	4919      	ldr	r1, [pc, #100]	; (65d4 <z_thread_abort+0x138>)
    6570:	481e      	ldr	r0, [pc, #120]	; (65ec <z_thread_abort+0x150>)
    6572:	f000 ff8b 	bl	748c <assert_print>
    6576:	4818      	ldr	r0, [pc, #96]	; (65d8 <z_thread_abort+0x13c>)
    6578:	21d0      	movs	r1, #208	; 0xd0
    657a:	f000 ff80 	bl	747e <assert_post_action>
    657e:	4630      	mov	r0, r6
    6580:	f7fb fa64 	bl	1a4c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6584:	4a1b      	ldr	r2, [pc, #108]	; (65f4 <z_thread_abort+0x158>)
    6586:	491c      	ldr	r1, [pc, #112]	; (65f8 <z_thread_abort+0x15c>)
    6588:	4815      	ldr	r0, [pc, #84]	; (65e0 <z_thread_abort+0x144>)
    658a:	f240 63ac 	movw	r3, #1708	; 0x6ac
    658e:	f000 ff7d 	bl	748c <assert_print>
    6592:	481a      	ldr	r0, [pc, #104]	; (65fc <z_thread_abort+0x160>)
    6594:	f000 ff7a 	bl	748c <assert_print>
    6598:	4816      	ldr	r0, [pc, #88]	; (65f4 <z_thread_abort+0x158>)
    659a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    659e:	f000 ff6e 	bl	747e <assert_post_action>
    65a2:	e79e      	b.n	64e2 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65a4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    65a8:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    65ac:	4814      	ldr	r0, [pc, #80]	; (6600 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65ae:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    65b0:	4621      	mov	r1, r4
    65b2:	f7ff f851 	bl	5658 <z_priq_dumb_remove>
}
    65b6:	e7b3      	b.n	6520 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    65b8:	4628      	mov	r0, r5
    65ba:	f7ff f86f 	bl	569c <unpend_thread_no_timeout>
    65be:	f105 0018 	add.w	r0, r5, #24
    65c2:	f000 f94b 	bl	685c <z_abort_timeout>
    65c6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    65ca:	4628      	mov	r0, r5
    65cc:	f7ff f98c 	bl	58e8 <ready_thread>
    65d0:	e7b3      	b.n	653a <z_thread_abort+0x9e>
    65d2:	bf00      	nop
    65d4:	20000b8c 	.word	0x20000b8c
    65d8:	00008697 	.word	0x00008697
    65dc:	000086f0 	.word	0x000086f0
    65e0:	000085d7 	.word	0x000085d7
    65e4:	00008705 	.word	0x00008705
    65e8:	000086c4 	.word	0x000086c4
    65ec:	000086db 	.word	0x000086db
    65f0:	20000b58 	.word	0x20000b58
    65f4:	000092b5 	.word	0x000092b5
    65f8:	0000867f 	.word	0x0000867f
    65fc:	000093a7 	.word	0x000093a7
    6600:	20000b78 	.word	0x20000b78

00006604 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6604:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6606:	4806      	ldr	r0, [pc, #24]	; (6620 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6608:	4a06      	ldr	r2, [pc, #24]	; (6624 <z_data_copy+0x20>)
    660a:	4907      	ldr	r1, [pc, #28]	; (6628 <z_data_copy+0x24>)
    660c:	1a12      	subs	r2, r2, r0
    660e:	f001 fbe0 	bl	7dd2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6616:	4a05      	ldr	r2, [pc, #20]	; (662c <z_data_copy+0x28>)
    6618:	4905      	ldr	r1, [pc, #20]	; (6630 <z_data_copy+0x2c>)
    661a:	4806      	ldr	r0, [pc, #24]	; (6634 <z_data_copy+0x30>)
    661c:	f001 bbd9 	b.w	7dd2 <z_early_memcpy>
    6620:	20000000 	.word	0x20000000
    6624:	200001c4 	.word	0x200001c4
    6628:	0000947c 	.word	0x0000947c
    662c:	00000000 	.word	0x00000000
    6630:	0000947c 	.word	0x0000947c
    6634:	20000000 	.word	0x20000000

00006638 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6638:	4b03      	ldr	r3, [pc, #12]	; (6648 <elapsed+0x10>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	b90b      	cbnz	r3, 6642 <elapsed+0xa>
    663e:	f7fd b937 	b.w	38b0 <sys_clock_elapsed>
}
    6642:	2000      	movs	r0, #0
    6644:	4770      	bx	lr
    6646:	bf00      	nop
    6648:	20000b98 	.word	0x20000b98

0000664c <next_timeout>:
	return list->head == list;
    664c:	4b10      	ldr	r3, [pc, #64]	; (6690 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    664e:	b510      	push	{r4, lr}
    6650:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6652:	429c      	cmp	r4, r3
    6654:	bf08      	it	eq
    6656:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6658:	f7ff ffee 	bl	6638 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    665c:	b1a4      	cbz	r4, 6688 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    665e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6662:	1a1b      	subs	r3, r3, r0
    6664:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    666c:	f170 0200 	sbcs.w	r2, r0, #0
    6670:	da0a      	bge.n	6688 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    6672:	2800      	cmp	r0, #0
    6674:	bfac      	ite	ge
    6676:	4618      	movge	r0, r3
    6678:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    667a:	4b06      	ldr	r3, [pc, #24]	; (6694 <next_timeout+0x48>)
    667c:	691b      	ldr	r3, [r3, #16]
    667e:	b113      	cbz	r3, 6686 <next_timeout+0x3a>
    6680:	4298      	cmp	r0, r3
    6682:	bfa8      	it	ge
    6684:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6686:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6688:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    668c:	e7f5      	b.n	667a <next_timeout+0x2e>
    668e:	bf00      	nop
    6690:	200000e0 	.word	0x200000e0
    6694:	20000b58 	.word	0x20000b58

00006698 <remove_timeout>:
{
    6698:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    669a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    669c:	b168      	cbz	r0, 66ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    669e:	4a0a      	ldr	r2, [pc, #40]	; (66c8 <remove_timeout+0x30>)
    66a0:	6852      	ldr	r2, [r2, #4]
    66a2:	4290      	cmp	r0, r2
    66a4:	d009      	beq.n	66ba <remove_timeout+0x22>
	if (next(t) != NULL) {
    66a6:	b143      	cbz	r3, 66ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    66a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    66ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    66b0:	1912      	adds	r2, r2, r4
    66b2:	eb41 0105 	adc.w	r1, r1, r5
    66b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    66ba:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    66bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    66be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    66c0:	2300      	movs	r3, #0
	node->prev = NULL;
    66c2:	e9c0 3300 	strd	r3, r3, [r0]
}
    66c6:	bd30      	pop	{r4, r5, pc}
    66c8:	200000e0 	.word	0x200000e0

000066cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    66cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    66d0:	bf08      	it	eq
    66d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    66d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66da:	4604      	mov	r4, r0
    66dc:	460e      	mov	r6, r1
    66de:	4698      	mov	r8, r3
    66e0:	4615      	mov	r5, r2
    66e2:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    66e4:	f000 809e 	beq.w	6824 <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    66e8:	6803      	ldr	r3, [r0, #0]
    66ea:	b163      	cbz	r3, 6706 <z_add_timeout+0x3a>
    66ec:	494e      	ldr	r1, [pc, #312]	; (6828 <z_add_timeout+0x15c>)
    66ee:	4a4f      	ldr	r2, [pc, #316]	; (682c <z_add_timeout+0x160>)
    66f0:	484f      	ldr	r0, [pc, #316]	; (6830 <z_add_timeout+0x164>)
    66f2:	2363      	movs	r3, #99	; 0x63
    66f4:	f000 feca 	bl	748c <assert_print>
    66f8:	484e      	ldr	r0, [pc, #312]	; (6834 <z_add_timeout+0x168>)
    66fa:	f000 fec7 	bl	748c <assert_print>
    66fe:	484b      	ldr	r0, [pc, #300]	; (682c <z_add_timeout+0x160>)
    6700:	2163      	movs	r1, #99	; 0x63
    6702:	f000 febc 	bl	747e <assert_post_action>
	to->fn = fn;
    6706:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    6708:	f04f 0320 	mov.w	r3, #32
    670c:	f3ef 8611 	mrs	r6, BASEPRI
    6710:	f383 8812 	msr	BASEPRI_MAX, r3
    6714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6718:	4847      	ldr	r0, [pc, #284]	; (6838 <z_add_timeout+0x16c>)
    671a:	f7fe fb45 	bl	4da8 <z_spin_lock_valid>
    671e:	b968      	cbnz	r0, 673c <z_add_timeout+0x70>
    6720:	4a46      	ldr	r2, [pc, #280]	; (683c <z_add_timeout+0x170>)
    6722:	4947      	ldr	r1, [pc, #284]	; (6840 <z_add_timeout+0x174>)
    6724:	4842      	ldr	r0, [pc, #264]	; (6830 <z_add_timeout+0x164>)
    6726:	238e      	movs	r3, #142	; 0x8e
    6728:	f000 feb0 	bl	748c <assert_print>
    672c:	4942      	ldr	r1, [pc, #264]	; (6838 <z_add_timeout+0x16c>)
    672e:	4845      	ldr	r0, [pc, #276]	; (6844 <z_add_timeout+0x178>)
    6730:	f000 feac 	bl	748c <assert_print>
    6734:	4841      	ldr	r0, [pc, #260]	; (683c <z_add_timeout+0x170>)
    6736:	218e      	movs	r1, #142	; 0x8e
    6738:	f000 fea1 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    673c:	483e      	ldr	r0, [pc, #248]	; (6838 <z_add_timeout+0x16c>)
    673e:	f7fe fb51 	bl	4de4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6742:	f06f 0201 	mvn.w	r2, #1
    6746:	1b53      	subs	r3, r2, r5
    6748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    674c:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6750:	2b00      	cmp	r3, #0
    6752:	db1b      	blt.n	678c <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6754:	4b3c      	ldr	r3, [pc, #240]	; (6848 <z_add_timeout+0x17c>)
    6756:	e9d3 1300 	ldrd	r1, r3, [r3]
    675a:	1a52      	subs	r2, r2, r1
    675c:	eb60 0303 	sbc.w	r3, r0, r3
    6760:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    6762:	eb63 0707 	sbc.w	r7, r3, r7
    6766:	2d01      	cmp	r5, #1
    6768:	f177 0300 	sbcs.w	r3, r7, #0
    676c:	bfbc      	itt	lt
    676e:	2501      	movlt	r5, #1
    6770:	2700      	movlt	r7, #0
    6772:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    6776:	4a35      	ldr	r2, [pc, #212]	; (684c <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    6778:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    677c:	4293      	cmp	r3, r2
    677e:	d118      	bne.n	67b2 <z_add_timeout+0xe6>
	node->prev = tail;
    6780:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    6784:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6788:	6054      	str	r4, [r2, #4]
}
    678a:	e026      	b.n	67da <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    678c:	f7ff ff54 	bl	6638 <elapsed>
    6790:	3501      	adds	r5, #1
    6792:	f148 0800 	adc.w	r8, r8, #0
    6796:	182d      	adds	r5, r5, r0
    6798:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    679c:	e9c4 5004 	strd	r5, r0, [r4, #16]
    67a0:	e7e9      	b.n	6776 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    67a2:	1a09      	subs	r1, r1, r0
    67a4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    67a8:	459c      	cmp	ip, r3
    67aa:	e9c4 1504 	strd	r1, r5, [r4, #16]
    67ae:	d0e7      	beq.n	6780 <z_add_timeout+0xb4>
    67b0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    67b2:	2b00      	cmp	r3, #0
    67b4:	d0e4      	beq.n	6780 <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
    67b6:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    67ba:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    67be:	4281      	cmp	r1, r0
    67c0:	eb75 0e07 	sbcs.w	lr, r5, r7
    67c4:	daed      	bge.n	67a2 <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
    67c6:	1a41      	subs	r1, r0, r1
    67c8:	eb67 0505 	sbc.w	r5, r7, r5
    67cc:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    67d0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    67d2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    67d6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    67d8:	605c      	str	r4, [r3, #4]
	return list->head == list;
    67da:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    67dc:	4293      	cmp	r3, r2
    67de:	d00b      	beq.n	67f8 <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    67e0:	429c      	cmp	r4, r3
    67e2:	d109      	bne.n	67f8 <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    67e4:	f7ff ff32 	bl	664c <next_timeout>

			if (next_time == 0 ||
    67e8:	b118      	cbz	r0, 67f2 <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
    67ea:	4b19      	ldr	r3, [pc, #100]	; (6850 <z_add_timeout+0x184>)
			if (next_time == 0 ||
    67ec:	691b      	ldr	r3, [r3, #16]
    67ee:	4283      	cmp	r3, r0
    67f0:	d002      	beq.n	67f8 <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
    67f2:	2100      	movs	r1, #0
    67f4:	f7fd f82a 	bl	384c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67f8:	480f      	ldr	r0, [pc, #60]	; (6838 <z_add_timeout+0x16c>)
    67fa:	f7fe fae3 	bl	4dc4 <z_spin_unlock_valid>
    67fe:	b968      	cbnz	r0, 681c <z_add_timeout+0x150>
    6800:	4a0e      	ldr	r2, [pc, #56]	; (683c <z_add_timeout+0x170>)
    6802:	4914      	ldr	r1, [pc, #80]	; (6854 <z_add_timeout+0x188>)
    6804:	480a      	ldr	r0, [pc, #40]	; (6830 <z_add_timeout+0x164>)
    6806:	23b9      	movs	r3, #185	; 0xb9
    6808:	f000 fe40 	bl	748c <assert_print>
    680c:	490a      	ldr	r1, [pc, #40]	; (6838 <z_add_timeout+0x16c>)
    680e:	4812      	ldr	r0, [pc, #72]	; (6858 <z_add_timeout+0x18c>)
    6810:	f000 fe3c 	bl	748c <assert_print>
    6814:	4809      	ldr	r0, [pc, #36]	; (683c <z_add_timeout+0x170>)
    6816:	21b9      	movs	r1, #185	; 0xb9
    6818:	f000 fe31 	bl	747e <assert_post_action>
	__asm__ volatile(
    681c:	f386 8811 	msr	BASEPRI, r6
    6820:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6828:	000093ed 	.word	0x000093ed
    682c:	000093c9 	.word	0x000093c9
    6830:	000085d7 	.word	0x000085d7
    6834:	00009213 	.word	0x00009213
    6838:	20000b9c 	.word	0x20000b9c
    683c:	00008697 	.word	0x00008697
    6840:	000086f0 	.word	0x000086f0
    6844:	00008705 	.word	0x00008705
    6848:	20000498 	.word	0x20000498
    684c:	200000e0 	.word	0x200000e0
    6850:	20000b58 	.word	0x20000b58
    6854:	000086c4 	.word	0x000086c4
    6858:	000086db 	.word	0x000086db

0000685c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    685c:	b538      	push	{r3, r4, r5, lr}
    685e:	4604      	mov	r4, r0
	__asm__ volatile(
    6860:	f04f 0320 	mov.w	r3, #32
    6864:	f3ef 8511 	mrs	r5, BASEPRI
    6868:	f383 8812 	msr	BASEPRI_MAX, r3
    686c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6870:	481a      	ldr	r0, [pc, #104]	; (68dc <z_abort_timeout+0x80>)
    6872:	f7fe fa99 	bl	4da8 <z_spin_lock_valid>
    6876:	b968      	cbnz	r0, 6894 <z_abort_timeout+0x38>
    6878:	4a19      	ldr	r2, [pc, #100]	; (68e0 <z_abort_timeout+0x84>)
    687a:	491a      	ldr	r1, [pc, #104]	; (68e4 <z_abort_timeout+0x88>)
    687c:	481a      	ldr	r0, [pc, #104]	; (68e8 <z_abort_timeout+0x8c>)
    687e:	238e      	movs	r3, #142	; 0x8e
    6880:	f000 fe04 	bl	748c <assert_print>
    6884:	4915      	ldr	r1, [pc, #84]	; (68dc <z_abort_timeout+0x80>)
    6886:	4819      	ldr	r0, [pc, #100]	; (68ec <z_abort_timeout+0x90>)
    6888:	f000 fe00 	bl	748c <assert_print>
    688c:	4814      	ldr	r0, [pc, #80]	; (68e0 <z_abort_timeout+0x84>)
    688e:	218e      	movs	r1, #142	; 0x8e
    6890:	f000 fdf5 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6894:	4811      	ldr	r0, [pc, #68]	; (68dc <z_abort_timeout+0x80>)
    6896:	f7fe faa5 	bl	4de4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    689a:	6823      	ldr	r3, [r4, #0]
    689c:	b1db      	cbz	r3, 68d6 <z_abort_timeout+0x7a>
			remove_timeout(to);
    689e:	4620      	mov	r0, r4
    68a0:	f7ff fefa 	bl	6698 <remove_timeout>
			ret = 0;
    68a4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68a6:	480d      	ldr	r0, [pc, #52]	; (68dc <z_abort_timeout+0x80>)
    68a8:	f7fe fa8c 	bl	4dc4 <z_spin_unlock_valid>
    68ac:	b968      	cbnz	r0, 68ca <z_abort_timeout+0x6e>
    68ae:	4a0c      	ldr	r2, [pc, #48]	; (68e0 <z_abort_timeout+0x84>)
    68b0:	490f      	ldr	r1, [pc, #60]	; (68f0 <z_abort_timeout+0x94>)
    68b2:	480d      	ldr	r0, [pc, #52]	; (68e8 <z_abort_timeout+0x8c>)
    68b4:	23b9      	movs	r3, #185	; 0xb9
    68b6:	f000 fde9 	bl	748c <assert_print>
    68ba:	4908      	ldr	r1, [pc, #32]	; (68dc <z_abort_timeout+0x80>)
    68bc:	480d      	ldr	r0, [pc, #52]	; (68f4 <z_abort_timeout+0x98>)
    68be:	f000 fde5 	bl	748c <assert_print>
    68c2:	4807      	ldr	r0, [pc, #28]	; (68e0 <z_abort_timeout+0x84>)
    68c4:	21b9      	movs	r1, #185	; 0xb9
    68c6:	f000 fdda 	bl	747e <assert_post_action>
	__asm__ volatile(
    68ca:	f385 8811 	msr	BASEPRI, r5
    68ce:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    68d2:	4620      	mov	r0, r4
    68d4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    68d6:	f06f 0415 	mvn.w	r4, #21
    68da:	e7e4      	b.n	68a6 <z_abort_timeout+0x4a>
    68dc:	20000b9c 	.word	0x20000b9c
    68e0:	00008697 	.word	0x00008697
    68e4:	000086f0 	.word	0x000086f0
    68e8:	000085d7 	.word	0x000085d7
    68ec:	00008705 	.word	0x00008705
    68f0:	000086c4 	.word	0x000086c4
    68f4:	000086db 	.word	0x000086db

000068f8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    68f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    68fa:	f04f 0320 	mov.w	r3, #32
    68fe:	f3ef 8511 	mrs	r5, BASEPRI
    6902:	f383 8812 	msr	BASEPRI_MAX, r3
    6906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    690a:	4818      	ldr	r0, [pc, #96]	; (696c <z_get_next_timeout_expiry+0x74>)
    690c:	f7fe fa4c 	bl	4da8 <z_spin_lock_valid>
    6910:	b968      	cbnz	r0, 692e <z_get_next_timeout_expiry+0x36>
    6912:	4a17      	ldr	r2, [pc, #92]	; (6970 <z_get_next_timeout_expiry+0x78>)
    6914:	4917      	ldr	r1, [pc, #92]	; (6974 <z_get_next_timeout_expiry+0x7c>)
    6916:	4818      	ldr	r0, [pc, #96]	; (6978 <z_get_next_timeout_expiry+0x80>)
    6918:	238e      	movs	r3, #142	; 0x8e
    691a:	f000 fdb7 	bl	748c <assert_print>
    691e:	4913      	ldr	r1, [pc, #76]	; (696c <z_get_next_timeout_expiry+0x74>)
    6920:	4816      	ldr	r0, [pc, #88]	; (697c <z_get_next_timeout_expiry+0x84>)
    6922:	f000 fdb3 	bl	748c <assert_print>
    6926:	4812      	ldr	r0, [pc, #72]	; (6970 <z_get_next_timeout_expiry+0x78>)
    6928:	218e      	movs	r1, #142	; 0x8e
    692a:	f000 fda8 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    692e:	480f      	ldr	r0, [pc, #60]	; (696c <z_get_next_timeout_expiry+0x74>)
    6930:	f7fe fa58 	bl	4de4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6934:	f7ff fe8a 	bl	664c <next_timeout>
    6938:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    693a:	480c      	ldr	r0, [pc, #48]	; (696c <z_get_next_timeout_expiry+0x74>)
    693c:	f7fe fa42 	bl	4dc4 <z_spin_unlock_valid>
    6940:	b968      	cbnz	r0, 695e <z_get_next_timeout_expiry+0x66>
    6942:	4a0b      	ldr	r2, [pc, #44]	; (6970 <z_get_next_timeout_expiry+0x78>)
    6944:	490e      	ldr	r1, [pc, #56]	; (6980 <z_get_next_timeout_expiry+0x88>)
    6946:	480c      	ldr	r0, [pc, #48]	; (6978 <z_get_next_timeout_expiry+0x80>)
    6948:	23b9      	movs	r3, #185	; 0xb9
    694a:	f000 fd9f 	bl	748c <assert_print>
    694e:	4907      	ldr	r1, [pc, #28]	; (696c <z_get_next_timeout_expiry+0x74>)
    6950:	480c      	ldr	r0, [pc, #48]	; (6984 <z_get_next_timeout_expiry+0x8c>)
    6952:	f000 fd9b 	bl	748c <assert_print>
    6956:	4806      	ldr	r0, [pc, #24]	; (6970 <z_get_next_timeout_expiry+0x78>)
    6958:	21b9      	movs	r1, #185	; 0xb9
    695a:	f000 fd90 	bl	747e <assert_post_action>
	__asm__ volatile(
    695e:	f385 8811 	msr	BASEPRI, r5
    6962:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6966:	4620      	mov	r0, r4
    6968:	bd38      	pop	{r3, r4, r5, pc}
    696a:	bf00      	nop
    696c:	20000b9c 	.word	0x20000b9c
    6970:	00008697 	.word	0x00008697
    6974:	000086f0 	.word	0x000086f0
    6978:	000085d7 	.word	0x000085d7
    697c:	00008705 	.word	0x00008705
    6980:	000086c4 	.word	0x000086c4
    6984:	000086db 	.word	0x000086db

00006988 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6988:	b570      	push	{r4, r5, r6, lr}
    698a:	4604      	mov	r4, r0
    698c:	460d      	mov	r5, r1
	__asm__ volatile(
    698e:	f04f 0320 	mov.w	r3, #32
    6992:	f3ef 8611 	mrs	r6, BASEPRI
    6996:	f383 8812 	msr	BASEPRI_MAX, r3
    699a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    699e:	481b      	ldr	r0, [pc, #108]	; (6a0c <z_set_timeout_expiry+0x84>)
    69a0:	f7fe fa02 	bl	4da8 <z_spin_lock_valid>
    69a4:	b968      	cbnz	r0, 69c2 <z_set_timeout_expiry+0x3a>
    69a6:	4a1a      	ldr	r2, [pc, #104]	; (6a10 <z_set_timeout_expiry+0x88>)
    69a8:	491a      	ldr	r1, [pc, #104]	; (6a14 <z_set_timeout_expiry+0x8c>)
    69aa:	481b      	ldr	r0, [pc, #108]	; (6a18 <z_set_timeout_expiry+0x90>)
    69ac:	238e      	movs	r3, #142	; 0x8e
    69ae:	f000 fd6d 	bl	748c <assert_print>
    69b2:	4916      	ldr	r1, [pc, #88]	; (6a0c <z_set_timeout_expiry+0x84>)
    69b4:	4819      	ldr	r0, [pc, #100]	; (6a1c <z_set_timeout_expiry+0x94>)
    69b6:	f000 fd69 	bl	748c <assert_print>
    69ba:	4815      	ldr	r0, [pc, #84]	; (6a10 <z_set_timeout_expiry+0x88>)
    69bc:	218e      	movs	r1, #142	; 0x8e
    69be:	f000 fd5e 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    69c2:	4812      	ldr	r0, [pc, #72]	; (6a0c <z_set_timeout_expiry+0x84>)
    69c4:	f7fe fa0e 	bl	4de4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    69c8:	f7ff fe40 	bl	664c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    69cc:	2801      	cmp	r0, #1
    69ce:	dd05      	ble.n	69dc <z_set_timeout_expiry+0x54>
    69d0:	42a0      	cmp	r0, r4
    69d2:	db03      	blt.n	69dc <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    69d4:	4629      	mov	r1, r5
    69d6:	4620      	mov	r0, r4
    69d8:	f7fc ff38 	bl	384c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69dc:	480b      	ldr	r0, [pc, #44]	; (6a0c <z_set_timeout_expiry+0x84>)
    69de:	f7fe f9f1 	bl	4dc4 <z_spin_unlock_valid>
    69e2:	b968      	cbnz	r0, 6a00 <z_set_timeout_expiry+0x78>
    69e4:	4a0a      	ldr	r2, [pc, #40]	; (6a10 <z_set_timeout_expiry+0x88>)
    69e6:	490e      	ldr	r1, [pc, #56]	; (6a20 <z_set_timeout_expiry+0x98>)
    69e8:	480b      	ldr	r0, [pc, #44]	; (6a18 <z_set_timeout_expiry+0x90>)
    69ea:	23b9      	movs	r3, #185	; 0xb9
    69ec:	f000 fd4e 	bl	748c <assert_print>
    69f0:	4906      	ldr	r1, [pc, #24]	; (6a0c <z_set_timeout_expiry+0x84>)
    69f2:	480c      	ldr	r0, [pc, #48]	; (6a24 <z_set_timeout_expiry+0x9c>)
    69f4:	f000 fd4a 	bl	748c <assert_print>
    69f8:	4805      	ldr	r0, [pc, #20]	; (6a10 <z_set_timeout_expiry+0x88>)
    69fa:	21b9      	movs	r1, #185	; 0xb9
    69fc:	f000 fd3f 	bl	747e <assert_post_action>
	__asm__ volatile(
    6a00:	f386 8811 	msr	BASEPRI, r6
    6a04:	f3bf 8f6f 	isb	sy
		}
	}
}
    6a08:	bd70      	pop	{r4, r5, r6, pc}
    6a0a:	bf00      	nop
    6a0c:	20000b9c 	.word	0x20000b9c
    6a10:	00008697 	.word	0x00008697
    6a14:	000086f0 	.word	0x000086f0
    6a18:	000085d7 	.word	0x000085d7
    6a1c:	00008705 	.word	0x00008705
    6a20:	000086c4 	.word	0x000086c4
    6a24:	000086db 	.word	0x000086db

00006a28 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a2c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6a2e:	f7fe fee3 	bl	57f8 <z_time_slice>
	__asm__ volatile(
    6a32:	f04f 0320 	mov.w	r3, #32
    6a36:	f3ef 8511 	mrs	r5, BASEPRI
    6a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a42:	484c      	ldr	r0, [pc, #304]	; (6b74 <sys_clock_announce+0x14c>)
    6a44:	f7fe f9b0 	bl	4da8 <z_spin_lock_valid>
    6a48:	b968      	cbnz	r0, 6a66 <sys_clock_announce+0x3e>
    6a4a:	4a4b      	ldr	r2, [pc, #300]	; (6b78 <sys_clock_announce+0x150>)
    6a4c:	494b      	ldr	r1, [pc, #300]	; (6b7c <sys_clock_announce+0x154>)
    6a4e:	484c      	ldr	r0, [pc, #304]	; (6b80 <sys_clock_announce+0x158>)
    6a50:	238e      	movs	r3, #142	; 0x8e
    6a52:	f000 fd1b 	bl	748c <assert_print>
    6a56:	4947      	ldr	r1, [pc, #284]	; (6b74 <sys_clock_announce+0x14c>)
    6a58:	484a      	ldr	r0, [pc, #296]	; (6b84 <sys_clock_announce+0x15c>)
    6a5a:	f000 fd17 	bl	748c <assert_print>
    6a5e:	4846      	ldr	r0, [pc, #280]	; (6b78 <sys_clock_announce+0x150>)
    6a60:	218e      	movs	r1, #142	; 0x8e
    6a62:	f000 fd0c 	bl	747e <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6a66:	4f48      	ldr	r7, [pc, #288]	; (6b88 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    6a68:	4842      	ldr	r0, [pc, #264]	; (6b74 <sys_clock_announce+0x14c>)
	return list->head == list;
    6a6a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6b8c <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6a6e:	4e48      	ldr	r6, [pc, #288]	; (6b90 <sys_clock_announce+0x168>)
    6a70:	f7fe f9b8 	bl	4de4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    6a74:	603c      	str	r4, [r7, #0]
    6a76:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6a7a:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a7c:	4544      	cmp	r4, r8
		curr_tick += dt;
    6a7e:	e9d6 1e00 	ldrd	r1, lr, [r6]
    6a82:	ea4f 70e2 	mov.w	r0, r2, asr #31
    6a86:	d00b      	beq.n	6aa0 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6a88:	b154      	cbz	r4, 6aa0 <sys_clock_announce+0x78>
    6a8a:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    6a8e:	429a      	cmp	r2, r3
    6a90:	eb70 090c 	sbcs.w	r9, r0, ip
    6a94:	da28      	bge.n	6ae8 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6a96:	1a9b      	subs	r3, r3, r2
    6a98:	eb6c 0c00 	sbc.w	ip, ip, r0
    6a9c:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    6aa0:	1852      	adds	r2, r2, r1
    6aa2:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    6aa6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6aa8:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    6aac:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6aae:	f7ff fdcd 	bl	664c <next_timeout>
    6ab2:	4621      	mov	r1, r4
    6ab4:	f7fc feca 	bl	384c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ab8:	482e      	ldr	r0, [pc, #184]	; (6b74 <sys_clock_announce+0x14c>)
    6aba:	f7fe f983 	bl	4dc4 <z_spin_unlock_valid>
    6abe:	b968      	cbnz	r0, 6adc <sys_clock_announce+0xb4>
    6ac0:	4a2d      	ldr	r2, [pc, #180]	; (6b78 <sys_clock_announce+0x150>)
    6ac2:	4934      	ldr	r1, [pc, #208]	; (6b94 <sys_clock_announce+0x16c>)
    6ac4:	482e      	ldr	r0, [pc, #184]	; (6b80 <sys_clock_announce+0x158>)
    6ac6:	23b9      	movs	r3, #185	; 0xb9
    6ac8:	f000 fce0 	bl	748c <assert_print>
    6acc:	4929      	ldr	r1, [pc, #164]	; (6b74 <sys_clock_announce+0x14c>)
    6ace:	4832      	ldr	r0, [pc, #200]	; (6b98 <sys_clock_announce+0x170>)
    6ad0:	f000 fcdc 	bl	748c <assert_print>
    6ad4:	4828      	ldr	r0, [pc, #160]	; (6b78 <sys_clock_announce+0x150>)
    6ad6:	21b9      	movs	r1, #185	; 0xb9
    6ad8:	f000 fcd1 	bl	747e <assert_post_action>
	__asm__ volatile(
    6adc:	f385 8811 	msr	BASEPRI, r5
    6ae0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6ae8:	1859      	adds	r1, r3, r1
    6aea:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    6aee:	1ad3      	subs	r3, r2, r3
    6af0:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    6af2:	2200      	movs	r2, #0
    6af4:	2300      	movs	r3, #0
		curr_tick += dt;
    6af6:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    6afa:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6afe:	4620      	mov	r0, r4
    6b00:	f7ff fdca 	bl	6698 <remove_timeout>
    6b04:	481b      	ldr	r0, [pc, #108]	; (6b74 <sys_clock_announce+0x14c>)
    6b06:	f7fe f95d 	bl	4dc4 <z_spin_unlock_valid>
    6b0a:	b968      	cbnz	r0, 6b28 <sys_clock_announce+0x100>
    6b0c:	4a1a      	ldr	r2, [pc, #104]	; (6b78 <sys_clock_announce+0x150>)
    6b0e:	4921      	ldr	r1, [pc, #132]	; (6b94 <sys_clock_announce+0x16c>)
    6b10:	481b      	ldr	r0, [pc, #108]	; (6b80 <sys_clock_announce+0x158>)
    6b12:	23b9      	movs	r3, #185	; 0xb9
    6b14:	f000 fcba 	bl	748c <assert_print>
    6b18:	4916      	ldr	r1, [pc, #88]	; (6b74 <sys_clock_announce+0x14c>)
    6b1a:	481f      	ldr	r0, [pc, #124]	; (6b98 <sys_clock_announce+0x170>)
    6b1c:	f000 fcb6 	bl	748c <assert_print>
    6b20:	4815      	ldr	r0, [pc, #84]	; (6b78 <sys_clock_announce+0x150>)
    6b22:	21b9      	movs	r1, #185	; 0xb9
    6b24:	f000 fcab 	bl	747e <assert_post_action>
    6b28:	f385 8811 	msr	BASEPRI, r5
    6b2c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6b30:	68a3      	ldr	r3, [r4, #8]
    6b32:	4620      	mov	r0, r4
    6b34:	4798      	blx	r3
	__asm__ volatile(
    6b36:	f04f 0320 	mov.w	r3, #32
    6b3a:	f3ef 8511 	mrs	r5, BASEPRI
    6b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b46:	480b      	ldr	r0, [pc, #44]	; (6b74 <sys_clock_announce+0x14c>)
    6b48:	f7fe f92e 	bl	4da8 <z_spin_lock_valid>
    6b4c:	b968      	cbnz	r0, 6b6a <sys_clock_announce+0x142>
    6b4e:	4a0a      	ldr	r2, [pc, #40]	; (6b78 <sys_clock_announce+0x150>)
    6b50:	490a      	ldr	r1, [pc, #40]	; (6b7c <sys_clock_announce+0x154>)
    6b52:	480b      	ldr	r0, [pc, #44]	; (6b80 <sys_clock_announce+0x158>)
    6b54:	238e      	movs	r3, #142	; 0x8e
    6b56:	f000 fc99 	bl	748c <assert_print>
    6b5a:	4906      	ldr	r1, [pc, #24]	; (6b74 <sys_clock_announce+0x14c>)
    6b5c:	4809      	ldr	r0, [pc, #36]	; (6b84 <sys_clock_announce+0x15c>)
    6b5e:	f000 fc95 	bl	748c <assert_print>
    6b62:	4805      	ldr	r0, [pc, #20]	; (6b78 <sys_clock_announce+0x150>)
    6b64:	218e      	movs	r1, #142	; 0x8e
    6b66:	f000 fc8a 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6b6a:	4802      	ldr	r0, [pc, #8]	; (6b74 <sys_clock_announce+0x14c>)
    6b6c:	f7fe f93a 	bl	4de4 <z_spin_lock_set_owner>
	return k;
    6b70:	e781      	b.n	6a76 <sys_clock_announce+0x4e>
    6b72:	bf00      	nop
    6b74:	20000b9c 	.word	0x20000b9c
    6b78:	00008697 	.word	0x00008697
    6b7c:	000086f0 	.word	0x000086f0
    6b80:	000085d7 	.word	0x000085d7
    6b84:	00008705 	.word	0x00008705
    6b88:	20000b98 	.word	0x20000b98
    6b8c:	200000e0 	.word	0x200000e0
    6b90:	20000498 	.word	0x20000498
    6b94:	000086c4 	.word	0x000086c4
    6b98:	000086db 	.word	0x000086db

00006b9c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6b9c:	b570      	push	{r4, r5, r6, lr}
    6b9e:	f04f 0320 	mov.w	r3, #32
    6ba2:	f3ef 8611 	mrs	r6, BASEPRI
    6ba6:	f383 8812 	msr	BASEPRI_MAX, r3
    6baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bae:	481b      	ldr	r0, [pc, #108]	; (6c1c <sys_clock_tick_get+0x80>)
    6bb0:	f7fe f8fa 	bl	4da8 <z_spin_lock_valid>
    6bb4:	b968      	cbnz	r0, 6bd2 <sys_clock_tick_get+0x36>
    6bb6:	4a1a      	ldr	r2, [pc, #104]	; (6c20 <sys_clock_tick_get+0x84>)
    6bb8:	491a      	ldr	r1, [pc, #104]	; (6c24 <sys_clock_tick_get+0x88>)
    6bba:	481b      	ldr	r0, [pc, #108]	; (6c28 <sys_clock_tick_get+0x8c>)
    6bbc:	238e      	movs	r3, #142	; 0x8e
    6bbe:	f000 fc65 	bl	748c <assert_print>
    6bc2:	4916      	ldr	r1, [pc, #88]	; (6c1c <sys_clock_tick_get+0x80>)
    6bc4:	4819      	ldr	r0, [pc, #100]	; (6c2c <sys_clock_tick_get+0x90>)
    6bc6:	f000 fc61 	bl	748c <assert_print>
    6bca:	4815      	ldr	r0, [pc, #84]	; (6c20 <sys_clock_tick_get+0x84>)
    6bcc:	218e      	movs	r1, #142	; 0x8e
    6bce:	f000 fc56 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6bd2:	4812      	ldr	r0, [pc, #72]	; (6c1c <sys_clock_tick_get+0x80>)
    6bd4:	f7fe f906 	bl	4de4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6bd8:	f7fc fe6a 	bl	38b0 <sys_clock_elapsed>
    6bdc:	4b14      	ldr	r3, [pc, #80]	; (6c30 <sys_clock_tick_get+0x94>)
    6bde:	e9d3 4500 	ldrd	r4, r5, [r3]
    6be2:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6be4:	480d      	ldr	r0, [pc, #52]	; (6c1c <sys_clock_tick_get+0x80>)
    6be6:	f145 0500 	adc.w	r5, r5, #0
    6bea:	f7fe f8eb 	bl	4dc4 <z_spin_unlock_valid>
    6bee:	b968      	cbnz	r0, 6c0c <sys_clock_tick_get+0x70>
    6bf0:	4a0b      	ldr	r2, [pc, #44]	; (6c20 <sys_clock_tick_get+0x84>)
    6bf2:	4910      	ldr	r1, [pc, #64]	; (6c34 <sys_clock_tick_get+0x98>)
    6bf4:	480c      	ldr	r0, [pc, #48]	; (6c28 <sys_clock_tick_get+0x8c>)
    6bf6:	23b9      	movs	r3, #185	; 0xb9
    6bf8:	f000 fc48 	bl	748c <assert_print>
    6bfc:	4907      	ldr	r1, [pc, #28]	; (6c1c <sys_clock_tick_get+0x80>)
    6bfe:	480e      	ldr	r0, [pc, #56]	; (6c38 <sys_clock_tick_get+0x9c>)
    6c00:	f000 fc44 	bl	748c <assert_print>
    6c04:	4806      	ldr	r0, [pc, #24]	; (6c20 <sys_clock_tick_get+0x84>)
    6c06:	21b9      	movs	r1, #185	; 0xb9
    6c08:	f000 fc39 	bl	747e <assert_post_action>
	__asm__ volatile(
    6c0c:	f386 8811 	msr	BASEPRI, r6
    6c10:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6c14:	4620      	mov	r0, r4
    6c16:	4629      	mov	r1, r5
    6c18:	bd70      	pop	{r4, r5, r6, pc}
    6c1a:	bf00      	nop
    6c1c:	20000b9c 	.word	0x20000b9c
    6c20:	00008697 	.word	0x00008697
    6c24:	000086f0 	.word	0x000086f0
    6c28:	000085d7 	.word	0x000085d7
    6c2c:	00008705 	.word	0x00008705
    6c30:	20000498 	.word	0x20000498
    6c34:	000086c4 	.word	0x000086c4
    6c38:	000086db 	.word	0x000086db

00006c3c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6c3c:	b570      	push	{r4, r5, r6, lr}
    6c3e:	4604      	mov	r4, r0
	__asm__ volatile(
    6c40:	f04f 0320 	mov.w	r3, #32
    6c44:	f3ef 8511 	mrs	r5, BASEPRI
    6c48:	f383 8812 	msr	BASEPRI_MAX, r3
    6c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c50:	484d      	ldr	r0, [pc, #308]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6c52:	f7fe f8a9 	bl	4da8 <z_spin_lock_valid>
    6c56:	b968      	cbnz	r0, 6c74 <z_timer_expiration_handler+0x38>
    6c58:	4a4c      	ldr	r2, [pc, #304]	; (6d8c <z_timer_expiration_handler+0x150>)
    6c5a:	494d      	ldr	r1, [pc, #308]	; (6d90 <z_timer_expiration_handler+0x154>)
    6c5c:	484d      	ldr	r0, [pc, #308]	; (6d94 <z_timer_expiration_handler+0x158>)
    6c5e:	238e      	movs	r3, #142	; 0x8e
    6c60:	f000 fc14 	bl	748c <assert_print>
    6c64:	4948      	ldr	r1, [pc, #288]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6c66:	484c      	ldr	r0, [pc, #304]	; (6d98 <z_timer_expiration_handler+0x15c>)
    6c68:	f000 fc10 	bl	748c <assert_print>
    6c6c:	4847      	ldr	r0, [pc, #284]	; (6d8c <z_timer_expiration_handler+0x150>)
    6c6e:	218e      	movs	r1, #142	; 0x8e
    6c70:	f000 fc05 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6c74:	4844      	ldr	r0, [pc, #272]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6c76:	f7fe f8b5 	bl	4de4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6c7a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    6c7e:	3301      	adds	r3, #1
    6c80:	f142 0200 	adc.w	r2, r2, #0
    6c84:	2b02      	cmp	r3, #2
    6c86:	f172 0300 	sbcs.w	r3, r2, #0
    6c8a:	d305      	bcc.n	6c98 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6c8c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    6c90:	4942      	ldr	r1, [pc, #264]	; (6d9c <z_timer_expiration_handler+0x160>)
    6c92:	4620      	mov	r0, r4
    6c94:	f7ff fd1a 	bl	66cc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6c9a:	3301      	adds	r3, #1
    6c9c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6c9e:	6a23      	ldr	r3, [r4, #32]
    6ca0:	2b00      	cmp	r3, #0
    6ca2:	d035      	beq.n	6d10 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ca4:	4838      	ldr	r0, [pc, #224]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6ca6:	f7fe f88d 	bl	4dc4 <z_spin_unlock_valid>
    6caa:	b968      	cbnz	r0, 6cc8 <z_timer_expiration_handler+0x8c>
    6cac:	4a37      	ldr	r2, [pc, #220]	; (6d8c <z_timer_expiration_handler+0x150>)
    6cae:	493c      	ldr	r1, [pc, #240]	; (6da0 <z_timer_expiration_handler+0x164>)
    6cb0:	4838      	ldr	r0, [pc, #224]	; (6d94 <z_timer_expiration_handler+0x158>)
    6cb2:	23b9      	movs	r3, #185	; 0xb9
    6cb4:	f000 fbea 	bl	748c <assert_print>
    6cb8:	4933      	ldr	r1, [pc, #204]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6cba:	483a      	ldr	r0, [pc, #232]	; (6da4 <z_timer_expiration_handler+0x168>)
    6cbc:	f000 fbe6 	bl	748c <assert_print>
    6cc0:	4832      	ldr	r0, [pc, #200]	; (6d8c <z_timer_expiration_handler+0x150>)
    6cc2:	21b9      	movs	r1, #185	; 0xb9
    6cc4:	f000 fbdb 	bl	747e <assert_post_action>
	__asm__ volatile(
    6cc8:	f385 8811 	msr	BASEPRI, r5
    6ccc:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6cd0:	6a23      	ldr	r3, [r4, #32]
    6cd2:	4620      	mov	r0, r4
    6cd4:	4798      	blx	r3
	__asm__ volatile(
    6cd6:	f04f 0320 	mov.w	r3, #32
    6cda:	f3ef 8511 	mrs	r5, BASEPRI
    6cde:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ce6:	4828      	ldr	r0, [pc, #160]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6ce8:	f7fe f85e 	bl	4da8 <z_spin_lock_valid>
    6cec:	b968      	cbnz	r0, 6d0a <z_timer_expiration_handler+0xce>
    6cee:	4a27      	ldr	r2, [pc, #156]	; (6d8c <z_timer_expiration_handler+0x150>)
    6cf0:	4927      	ldr	r1, [pc, #156]	; (6d90 <z_timer_expiration_handler+0x154>)
    6cf2:	4828      	ldr	r0, [pc, #160]	; (6d94 <z_timer_expiration_handler+0x158>)
    6cf4:	238e      	movs	r3, #142	; 0x8e
    6cf6:	f000 fbc9 	bl	748c <assert_print>
    6cfa:	4923      	ldr	r1, [pc, #140]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6cfc:	4826      	ldr	r0, [pc, #152]	; (6d98 <z_timer_expiration_handler+0x15c>)
    6cfe:	f000 fbc5 	bl	748c <assert_print>
    6d02:	4822      	ldr	r0, [pc, #136]	; (6d8c <z_timer_expiration_handler+0x150>)
    6d04:	218e      	movs	r1, #142	; 0x8e
    6d06:	f000 fbba 	bl	747e <assert_post_action>
	z_spin_lock_set_owner(l);
    6d0a:	481f      	ldr	r0, [pc, #124]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6d0c:	f7fe f86a 	bl	4de4 <z_spin_lock_set_owner>
	return list->head == list;
    6d10:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d14:	42a6      	cmp	r6, r4
    6d16:	d000      	beq.n	6d1a <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6d18:	b9b6      	cbnz	r6, 6d48 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d1a:	481b      	ldr	r0, [pc, #108]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6d1c:	f7fe f852 	bl	4dc4 <z_spin_unlock_valid>
    6d20:	b968      	cbnz	r0, 6d3e <z_timer_expiration_handler+0x102>
    6d22:	4a1a      	ldr	r2, [pc, #104]	; (6d8c <z_timer_expiration_handler+0x150>)
    6d24:	491e      	ldr	r1, [pc, #120]	; (6da0 <z_timer_expiration_handler+0x164>)
    6d26:	481b      	ldr	r0, [pc, #108]	; (6d94 <z_timer_expiration_handler+0x158>)
    6d28:	23b9      	movs	r3, #185	; 0xb9
    6d2a:	f000 fbaf 	bl	748c <assert_print>
    6d2e:	4916      	ldr	r1, [pc, #88]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6d30:	481c      	ldr	r0, [pc, #112]	; (6da4 <z_timer_expiration_handler+0x168>)
    6d32:	f000 fbab 	bl	748c <assert_print>
    6d36:	4815      	ldr	r0, [pc, #84]	; (6d8c <z_timer_expiration_handler+0x150>)
    6d38:	21b9      	movs	r1, #185	; 0xb9
    6d3a:	f000 fba0 	bl	747e <assert_post_action>
	__asm__ volatile(
    6d3e:	f385 8811 	msr	BASEPRI, r5
    6d42:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    6d46:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    6d48:	4630      	mov	r0, r6
    6d4a:	f7fe fb85 	bl	5458 <z_unpend_thread_no_timeout>
    6d4e:	2300      	movs	r3, #0
    6d50:	480d      	ldr	r0, [pc, #52]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6d52:	67b3      	str	r3, [r6, #120]	; 0x78
    6d54:	f7fe f836 	bl	4dc4 <z_spin_unlock_valid>
    6d58:	b968      	cbnz	r0, 6d76 <z_timer_expiration_handler+0x13a>
    6d5a:	4a0c      	ldr	r2, [pc, #48]	; (6d8c <z_timer_expiration_handler+0x150>)
    6d5c:	4910      	ldr	r1, [pc, #64]	; (6da0 <z_timer_expiration_handler+0x164>)
    6d5e:	480d      	ldr	r0, [pc, #52]	; (6d94 <z_timer_expiration_handler+0x158>)
    6d60:	23b9      	movs	r3, #185	; 0xb9
    6d62:	f000 fb93 	bl	748c <assert_print>
    6d66:	4908      	ldr	r1, [pc, #32]	; (6d88 <z_timer_expiration_handler+0x14c>)
    6d68:	480e      	ldr	r0, [pc, #56]	; (6da4 <z_timer_expiration_handler+0x168>)
    6d6a:	f000 fb8f 	bl	748c <assert_print>
    6d6e:	4807      	ldr	r0, [pc, #28]	; (6d8c <z_timer_expiration_handler+0x150>)
    6d70:	21b9      	movs	r1, #185	; 0xb9
    6d72:	f000 fb84 	bl	747e <assert_post_action>
    6d76:	f385 8811 	msr	BASEPRI, r5
    6d7a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    6d7e:	4630      	mov	r0, r6
}
    6d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6d84:	f7fe bdfc 	b.w	5980 <z_ready_thread>
    6d88:	20000ba0 	.word	0x20000ba0
    6d8c:	00008697 	.word	0x00008697
    6d90:	000086f0 	.word	0x000086f0
    6d94:	000085d7 	.word	0x000085d7
    6d98:	00008705 	.word	0x00008705
    6d9c:	00006c3d 	.word	0x00006c3d
    6da0:	000086c4 	.word	0x000086c4
    6da4:	000086db 	.word	0x000086db

00006da8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dac:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6db2:	bf08      	it	eq
    6db4:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    6db8:	4606      	mov	r6, r0
    6dba:	461c      	mov	r4, r3
    6dbc:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    6dc0:	4689      	mov	r9, r1
    6dc2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6dc4:	d03e      	beq.n	6e44 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6dc6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6dca:	bf08      	it	eq
    6dcc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6dd0:	4615      	mov	r5, r2
    6dd2:	4607      	mov	r7, r0
    6dd4:	d014      	beq.n	6e00 <z_impl_k_timer_start+0x58>
    6dd6:	ea50 0302 	orrs.w	r3, r0, r2
    6dda:	d011      	beq.n	6e00 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    6ddc:	f06f 0301 	mvn.w	r3, #1
    6de0:	1a9b      	subs	r3, r3, r2
    6de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6de6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6dea:	2b00      	cmp	r3, #0
    6dec:	da08      	bge.n	6e00 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    6dee:	2a02      	cmp	r2, #2
    6df0:	f170 0300 	sbcs.w	r3, r0, #0
    6df4:	bfbc      	itt	lt
    6df6:	2502      	movlt	r5, #2
    6df8:	2700      	movlt	r7, #0
    6dfa:	3d01      	subs	r5, #1
    6dfc:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6e00:	f06f 0301 	mvn.w	r3, #1
    6e04:	1a5b      	subs	r3, r3, r1
    6e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e0a:	eb63 0304 	sbc.w	r3, r3, r4
    6e0e:	2b00      	cmp	r3, #0
    6e10:	da09      	bge.n	6e26 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6e12:	2901      	cmp	r1, #1
    6e14:	f174 0300 	sbcs.w	r3, r4, #0
    6e18:	bfbc      	itt	lt
    6e1a:	2101      	movlt	r1, #1
    6e1c:	2400      	movlt	r4, #0
    6e1e:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    6e22:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    6e26:	4630      	mov	r0, r6
    6e28:	f7ff fd18 	bl	685c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6e2c:	2300      	movs	r3, #0
    6e2e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    6e30:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6e34:	464a      	mov	r2, r9
    6e36:	4643      	mov	r3, r8
    6e38:	4630      	mov	r0, r6
    6e3a:	4903      	ldr	r1, [pc, #12]	; (6e48 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    6e3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6e40:	f7ff bc44 	b.w	66cc <z_add_timeout>
}
    6e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e48:	00006c3d 	.word	0x00006c3d

00006e4c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    6e4c:	4b01      	ldr	r3, [pc, #4]	; (6e54 <k_thread_system_pool_assign+0x8>)
    6e4e:	6703      	str	r3, [r0, #112]	; 0x70
}
    6e50:	4770      	bx	lr
    6e52:	bf00      	nop
    6e54:	2000015c 	.word	0x2000015c

00006e58 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6e58:	4a02      	ldr	r2, [pc, #8]	; (6e64 <boot_banner+0xc>)
    6e5a:	4903      	ldr	r1, [pc, #12]	; (6e68 <boot_banner+0x10>)
    6e5c:	4803      	ldr	r0, [pc, #12]	; (6e6c <boot_banner+0x14>)
    6e5e:	f000 ba1b 	b.w	7298 <printk>
    6e62:	bf00      	nop
    6e64:	00009215 	.word	0x00009215
    6e68:	0000940d 	.word	0x0000940d
    6e6c:	0000941a 	.word	0x0000941a

00006e70 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6e70:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6e72:	4c0e      	ldr	r4, [pc, #56]	; (6eac <statics_init+0x3c>)
    6e74:	4d0e      	ldr	r5, [pc, #56]	; (6eb0 <statics_init+0x40>)
    6e76:	4e0f      	ldr	r6, [pc, #60]	; (6eb4 <statics_init+0x44>)
    6e78:	42ac      	cmp	r4, r5
    6e7a:	d90c      	bls.n	6e96 <statics_init+0x26>
    6e7c:	490e      	ldr	r1, [pc, #56]	; (6eb8 <statics_init+0x48>)
    6e7e:	480f      	ldr	r0, [pc, #60]	; (6ebc <statics_init+0x4c>)
    6e80:	2318      	movs	r3, #24
    6e82:	4632      	mov	r2, r6
    6e84:	f000 fb02 	bl	748c <assert_print>
    6e88:	480d      	ldr	r0, [pc, #52]	; (6ec0 <statics_init+0x50>)
    6e8a:	f000 faff 	bl	748c <assert_print>
    6e8e:	2118      	movs	r1, #24
    6e90:	4630      	mov	r0, r6
    6e92:	f000 faf4 	bl	747e <assert_post_action>
    6e96:	42ac      	cmp	r4, r5
    6e98:	d301      	bcc.n	6e9e <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    6e9a:	2000      	movs	r0, #0
    6e9c:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    6e9e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    6ea2:	4620      	mov	r0, r4
    6ea4:	f001 f81c 	bl	7ee0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6ea8:	3418      	adds	r4, #24
    6eaa:	e7e5      	b.n	6e78 <statics_init+0x8>
    6eac:	2000015c 	.word	0x2000015c
    6eb0:	20000174 	.word	0x20000174
    6eb4:	00009441 	.word	0x00009441
    6eb8:	00009463 	.word	0x00009463
    6ebc:	000085d7 	.word	0x000085d7
    6ec0:	0000900f 	.word	0x0000900f

00006ec4 <nrf_cc3xx_platform_init_no_rng>:
    6ec4:	b510      	push	{r4, lr}
    6ec6:	4c0a      	ldr	r4, [pc, #40]	; (6ef0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6ec8:	6823      	ldr	r3, [r4, #0]
    6eca:	b11b      	cbz	r3, 6ed4 <nrf_cc3xx_platform_init_no_rng+0x10>
    6ecc:	2301      	movs	r3, #1
    6ece:	6023      	str	r3, [r4, #0]
    6ed0:	2000      	movs	r0, #0
    6ed2:	bd10      	pop	{r4, pc}
    6ed4:	f000 f8ce 	bl	7074 <CC_LibInitNoRng>
    6ed8:	2800      	cmp	r0, #0
    6eda:	d0f7      	beq.n	6ecc <nrf_cc3xx_platform_init_no_rng+0x8>
    6edc:	3801      	subs	r0, #1
    6ede:	2806      	cmp	r0, #6
    6ee0:	d803      	bhi.n	6eea <nrf_cc3xx_platform_init_no_rng+0x26>
    6ee2:	4b04      	ldr	r3, [pc, #16]	; (6ef4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6ee4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6ee8:	bd10      	pop	{r4, pc}
    6eea:	4803      	ldr	r0, [pc, #12]	; (6ef8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6eec:	bd10      	pop	{r4, pc}
    6eee:	bf00      	nop
    6ef0:	20000ba4 	.word	0x20000ba4
    6ef4:	00008314 	.word	0x00008314
    6ef8:	ffff8ffe 	.word	0xffff8ffe

00006efc <nrf_cc3xx_platform_abort>:
    6efc:	f3bf 8f4f 	dsb	sy
    6f00:	4905      	ldr	r1, [pc, #20]	; (6f18 <nrf_cc3xx_platform_abort+0x1c>)
    6f02:	4b06      	ldr	r3, [pc, #24]	; (6f1c <nrf_cc3xx_platform_abort+0x20>)
    6f04:	68ca      	ldr	r2, [r1, #12]
    6f06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6f0a:	4313      	orrs	r3, r2
    6f0c:	60cb      	str	r3, [r1, #12]
    6f0e:	f3bf 8f4f 	dsb	sy
    6f12:	bf00      	nop
    6f14:	e7fd      	b.n	6f12 <nrf_cc3xx_platform_abort+0x16>
    6f16:	bf00      	nop
    6f18:	e000ed00 	.word	0xe000ed00
    6f1c:	05fa0004 	.word	0x05fa0004

00006f20 <CC_PalAbort>:
    6f20:	b410      	push	{r4}
    6f22:	4b09      	ldr	r3, [pc, #36]	; (6f48 <CC_PalAbort+0x28>)
    6f24:	4909      	ldr	r1, [pc, #36]	; (6f4c <CC_PalAbort+0x2c>)
    6f26:	4c0a      	ldr	r4, [pc, #40]	; (6f50 <CC_PalAbort+0x30>)
    6f28:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6f2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6f30:	6849      	ldr	r1, [r1, #4]
    6f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6f36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6f3a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6f3e:	2300      	movs	r3, #0
    6f40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    6f44:	bc10      	pop	{r4}
    6f46:	4708      	bx	r1
    6f48:	5002b000 	.word	0x5002b000
    6f4c:	200000e8 	.word	0x200000e8
    6f50:	5002a000 	.word	0x5002a000

00006f54 <nrf_cc3xx_platform_set_abort>:
    6f54:	e9d0 1200 	ldrd	r1, r2, [r0]
    6f58:	4b01      	ldr	r3, [pc, #4]	; (6f60 <nrf_cc3xx_platform_set_abort+0xc>)
    6f5a:	e9c3 1200 	strd	r1, r2, [r3]
    6f5e:	4770      	bx	lr
    6f60:	200000e8 	.word	0x200000e8

00006f64 <mutex_free>:
    6f64:	b510      	push	{r4, lr}
    6f66:	4604      	mov	r4, r0
    6f68:	b130      	cbz	r0, 6f78 <mutex_free+0x14>
    6f6a:	6863      	ldr	r3, [r4, #4]
    6f6c:	06db      	lsls	r3, r3, #27
    6f6e:	d502      	bpl.n	6f76 <mutex_free+0x12>
    6f70:	2300      	movs	r3, #0
    6f72:	6023      	str	r3, [r4, #0]
    6f74:	6063      	str	r3, [r4, #4]
    6f76:	bd10      	pop	{r4, pc}
    6f78:	4b02      	ldr	r3, [pc, #8]	; (6f84 <mutex_free+0x20>)
    6f7a:	4803      	ldr	r0, [pc, #12]	; (6f88 <mutex_free+0x24>)
    6f7c:	685b      	ldr	r3, [r3, #4]
    6f7e:	4798      	blx	r3
    6f80:	e7f3      	b.n	6f6a <mutex_free+0x6>
    6f82:	bf00      	nop
    6f84:	200000e8 	.word	0x200000e8
    6f88:	00008330 	.word	0x00008330

00006f8c <mutex_lock>:
    6f8c:	b1b0      	cbz	r0, 6fbc <mutex_lock+0x30>
    6f8e:	6843      	ldr	r3, [r0, #4]
    6f90:	b193      	cbz	r3, 6fb8 <mutex_lock+0x2c>
    6f92:	06db      	lsls	r3, r3, #27
    6f94:	d50e      	bpl.n	6fb4 <mutex_lock+0x28>
    6f96:	2301      	movs	r3, #1
    6f98:	e850 2f00 	ldrex	r2, [r0]
    6f9c:	4619      	mov	r1, r3
    6f9e:	e840 1c00 	strex	ip, r1, [r0]
    6fa2:	f09c 0f00 	teq	ip, #0
    6fa6:	d1f7      	bne.n	6f98 <mutex_lock+0xc>
    6fa8:	2a01      	cmp	r2, #1
    6faa:	d0f5      	beq.n	6f98 <mutex_lock+0xc>
    6fac:	f3bf 8f5f 	dmb	sy
    6fb0:	2000      	movs	r0, #0
    6fb2:	4770      	bx	lr
    6fb4:	4803      	ldr	r0, [pc, #12]	; (6fc4 <mutex_lock+0x38>)
    6fb6:	4770      	bx	lr
    6fb8:	4803      	ldr	r0, [pc, #12]	; (6fc8 <mutex_lock+0x3c>)
    6fba:	4770      	bx	lr
    6fbc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6fc0:	4770      	bx	lr
    6fc2:	bf00      	nop
    6fc4:	ffff8fe9 	.word	0xffff8fe9
    6fc8:	ffff8fea 	.word	0xffff8fea

00006fcc <mutex_unlock>:
    6fcc:	b168      	cbz	r0, 6fea <mutex_unlock+0x1e>
    6fce:	6843      	ldr	r3, [r0, #4]
    6fd0:	b13b      	cbz	r3, 6fe2 <mutex_unlock+0x16>
    6fd2:	06db      	lsls	r3, r3, #27
    6fd4:	d507      	bpl.n	6fe6 <mutex_unlock+0x1a>
    6fd6:	f3bf 8f5f 	dmb	sy
    6fda:	2300      	movs	r3, #0
    6fdc:	6003      	str	r3, [r0, #0]
    6fde:	4618      	mov	r0, r3
    6fe0:	4770      	bx	lr
    6fe2:	4803      	ldr	r0, [pc, #12]	; (6ff0 <mutex_unlock+0x24>)
    6fe4:	4770      	bx	lr
    6fe6:	4803      	ldr	r0, [pc, #12]	; (6ff4 <mutex_unlock+0x28>)
    6fe8:	4770      	bx	lr
    6fea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6fee:	4770      	bx	lr
    6ff0:	ffff8fea 	.word	0xffff8fea
    6ff4:	ffff8fe9 	.word	0xffff8fe9

00006ff8 <mutex_init>:
    6ff8:	b510      	push	{r4, lr}
    6ffa:	4604      	mov	r4, r0
    6ffc:	b120      	cbz	r0, 7008 <mutex_init+0x10>
    6ffe:	2200      	movs	r2, #0
    7000:	2311      	movs	r3, #17
    7002:	6022      	str	r2, [r4, #0]
    7004:	6063      	str	r3, [r4, #4]
    7006:	bd10      	pop	{r4, pc}
    7008:	4801      	ldr	r0, [pc, #4]	; (7010 <mutex_init+0x18>)
    700a:	f7ff ff89 	bl	6f20 <CC_PalAbort>
    700e:	e7f6      	b.n	6ffe <mutex_init+0x6>
    7010:	00008358 	.word	0x00008358

00007014 <nrf_cc3xx_platform_set_mutexes>:
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	e9d0 2300 	ldrd	r2, r3, [r0]
    701a:	4c13      	ldr	r4, [pc, #76]	; (7068 <nrf_cc3xx_platform_set_mutexes+0x54>)
    701c:	4d13      	ldr	r5, [pc, #76]	; (706c <nrf_cc3xx_platform_set_mutexes+0x58>)
    701e:	6063      	str	r3, [r4, #4]
    7020:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    7024:	e9c4 3002 	strd	r3, r0, [r4, #8]
    7028:	6022      	str	r2, [r4, #0]
    702a:	4b11      	ldr	r3, [pc, #68]	; (7070 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    702c:	6808      	ldr	r0, [r1, #0]
    702e:	6018      	str	r0, [r3, #0]
    7030:	6848      	ldr	r0, [r1, #4]
    7032:	6058      	str	r0, [r3, #4]
    7034:	6888      	ldr	r0, [r1, #8]
    7036:	6098      	str	r0, [r3, #8]
    7038:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    703c:	60d8      	str	r0, [r3, #12]
    703e:	6119      	str	r1, [r3, #16]
    7040:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    7044:	06db      	lsls	r3, r3, #27
    7046:	d50d      	bpl.n	7064 <nrf_cc3xx_platform_set_mutexes+0x50>
    7048:	2300      	movs	r3, #0
    704a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    704e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    7052:	f505 708a 	add.w	r0, r5, #276	; 0x114
    7056:	4790      	blx	r2
    7058:	6823      	ldr	r3, [r4, #0]
    705a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    705e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7062:	4718      	bx	r3
    7064:	bd70      	pop	{r4, r5, r6, pc}
    7066:	bf00      	nop
    7068:	200000f8 	.word	0x200000f8
    706c:	20000bbc 	.word	0x20000bbc
    7070:	20000108 	.word	0x20000108

00007074 <CC_LibInitNoRng>:
    7074:	b538      	push	{r3, r4, r5, lr}
    7076:	f000 f82f 	bl	70d8 <CC_HalInit>
    707a:	b120      	cbz	r0, 7086 <CC_LibInitNoRng+0x12>
    707c:	2403      	movs	r4, #3
    707e:	f000 f863 	bl	7148 <CC_PalTerminate>
    7082:	4620      	mov	r0, r4
    7084:	bd38      	pop	{r3, r4, r5, pc}
    7086:	f000 f831 	bl	70ec <CC_PalInit>
    708a:	b998      	cbnz	r0, 70b4 <CC_LibInitNoRng+0x40>
    708c:	f000 f8ac 	bl	71e8 <CC_PalPowerSaveModeSelect>
    7090:	b998      	cbnz	r0, 70ba <CC_LibInitNoRng+0x46>
    7092:	4d0f      	ldr	r5, [pc, #60]	; (70d0 <CC_LibInitNoRng+0x5c>)
    7094:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    7098:	0e1b      	lsrs	r3, r3, #24
    709a:	2bf0      	cmp	r3, #240	; 0xf0
    709c:	d108      	bne.n	70b0 <CC_LibInitNoRng+0x3c>
    709e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    70a2:	4b0c      	ldr	r3, [pc, #48]	; (70d4 <CC_LibInitNoRng+0x60>)
    70a4:	429a      	cmp	r2, r3
    70a6:	d00a      	beq.n	70be <CC_LibInitNoRng+0x4a>
    70a8:	2407      	movs	r4, #7
    70aa:	f000 f817 	bl	70dc <CC_HalTerminate>
    70ae:	e7e6      	b.n	707e <CC_LibInitNoRng+0xa>
    70b0:	2406      	movs	r4, #6
    70b2:	e7fa      	b.n	70aa <CC_LibInitNoRng+0x36>
    70b4:	2404      	movs	r4, #4
    70b6:	4620      	mov	r0, r4
    70b8:	bd38      	pop	{r3, r4, r5, pc}
    70ba:	2400      	movs	r4, #0
    70bc:	e7f5      	b.n	70aa <CC_LibInitNoRng+0x36>
    70be:	2001      	movs	r0, #1
    70c0:	f000 f892 	bl	71e8 <CC_PalPowerSaveModeSelect>
    70c4:	4604      	mov	r4, r0
    70c6:	2800      	cmp	r0, #0
    70c8:	d1f7      	bne.n	70ba <CC_LibInitNoRng+0x46>
    70ca:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    70ce:	e7d8      	b.n	7082 <CC_LibInitNoRng+0xe>
    70d0:	5002b000 	.word	0x5002b000
    70d4:	20e00000 	.word	0x20e00000

000070d8 <CC_HalInit>:
    70d8:	2000      	movs	r0, #0
    70da:	4770      	bx	lr

000070dc <CC_HalTerminate>:
    70dc:	2000      	movs	r0, #0
    70de:	4770      	bx	lr

000070e0 <CC_HalMaskInterrupt>:
    70e0:	4b01      	ldr	r3, [pc, #4]	; (70e8 <CC_HalMaskInterrupt+0x8>)
    70e2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    70e6:	4770      	bx	lr
    70e8:	5002b000 	.word	0x5002b000

000070ec <CC_PalInit>:
    70ec:	b510      	push	{r4, lr}
    70ee:	4811      	ldr	r0, [pc, #68]	; (7134 <CC_PalInit+0x48>)
    70f0:	f000 f848 	bl	7184 <CC_PalMutexCreate>
    70f4:	b100      	cbz	r0, 70f8 <CC_PalInit+0xc>
    70f6:	bd10      	pop	{r4, pc}
    70f8:	480f      	ldr	r0, [pc, #60]	; (7138 <CC_PalInit+0x4c>)
    70fa:	f000 f843 	bl	7184 <CC_PalMutexCreate>
    70fe:	2800      	cmp	r0, #0
    7100:	d1f9      	bne.n	70f6 <CC_PalInit+0xa>
    7102:	4c0e      	ldr	r4, [pc, #56]	; (713c <CC_PalInit+0x50>)
    7104:	4620      	mov	r0, r4
    7106:	f000 f83d 	bl	7184 <CC_PalMutexCreate>
    710a:	2800      	cmp	r0, #0
    710c:	d1f3      	bne.n	70f6 <CC_PalInit+0xa>
    710e:	4b0c      	ldr	r3, [pc, #48]	; (7140 <CC_PalInit+0x54>)
    7110:	480c      	ldr	r0, [pc, #48]	; (7144 <CC_PalInit+0x58>)
    7112:	601c      	str	r4, [r3, #0]
    7114:	f000 f836 	bl	7184 <CC_PalMutexCreate>
    7118:	4601      	mov	r1, r0
    711a:	2800      	cmp	r0, #0
    711c:	d1eb      	bne.n	70f6 <CC_PalInit+0xa>
    711e:	f000 f82d 	bl	717c <CC_PalDmaInit>
    7122:	4604      	mov	r4, r0
    7124:	b108      	cbz	r0, 712a <CC_PalInit+0x3e>
    7126:	4620      	mov	r0, r4
    7128:	bd10      	pop	{r4, pc}
    712a:	f000 f83f 	bl	71ac <CC_PalPowerSaveModeInit>
    712e:	4620      	mov	r0, r4
    7130:	e7fa      	b.n	7128 <CC_PalInit+0x3c>
    7132:	bf00      	nop
    7134:	20000140 	.word	0x20000140
    7138:	20000134 	.word	0x20000134
    713c:	2000013c 	.word	0x2000013c
    7140:	20000144 	.word	0x20000144
    7144:	20000138 	.word	0x20000138

00007148 <CC_PalTerminate>:
    7148:	b508      	push	{r3, lr}
    714a:	4808      	ldr	r0, [pc, #32]	; (716c <CC_PalTerminate+0x24>)
    714c:	f000 f824 	bl	7198 <CC_PalMutexDestroy>
    7150:	4807      	ldr	r0, [pc, #28]	; (7170 <CC_PalTerminate+0x28>)
    7152:	f000 f821 	bl	7198 <CC_PalMutexDestroy>
    7156:	4807      	ldr	r0, [pc, #28]	; (7174 <CC_PalTerminate+0x2c>)
    7158:	f000 f81e 	bl	7198 <CC_PalMutexDestroy>
    715c:	4806      	ldr	r0, [pc, #24]	; (7178 <CC_PalTerminate+0x30>)
    715e:	f000 f81b 	bl	7198 <CC_PalMutexDestroy>
    7162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7166:	f000 b80b 	b.w	7180 <CC_PalDmaTerminate>
    716a:	bf00      	nop
    716c:	20000140 	.word	0x20000140
    7170:	20000134 	.word	0x20000134
    7174:	2000013c 	.word	0x2000013c
    7178:	20000138 	.word	0x20000138

0000717c <CC_PalDmaInit>:
    717c:	2000      	movs	r0, #0
    717e:	4770      	bx	lr

00007180 <CC_PalDmaTerminate>:
    7180:	4770      	bx	lr
    7182:	bf00      	nop

00007184 <CC_PalMutexCreate>:
    7184:	b508      	push	{r3, lr}
    7186:	4b03      	ldr	r3, [pc, #12]	; (7194 <CC_PalMutexCreate+0x10>)
    7188:	6802      	ldr	r2, [r0, #0]
    718a:	681b      	ldr	r3, [r3, #0]
    718c:	6810      	ldr	r0, [r2, #0]
    718e:	4798      	blx	r3
    7190:	2000      	movs	r0, #0
    7192:	bd08      	pop	{r3, pc}
    7194:	200000f8 	.word	0x200000f8

00007198 <CC_PalMutexDestroy>:
    7198:	b508      	push	{r3, lr}
    719a:	4b03      	ldr	r3, [pc, #12]	; (71a8 <CC_PalMutexDestroy+0x10>)
    719c:	6802      	ldr	r2, [r0, #0]
    719e:	685b      	ldr	r3, [r3, #4]
    71a0:	6810      	ldr	r0, [r2, #0]
    71a2:	4798      	blx	r3
    71a4:	2000      	movs	r0, #0
    71a6:	bd08      	pop	{r3, pc}
    71a8:	200000f8 	.word	0x200000f8

000071ac <CC_PalPowerSaveModeInit>:
    71ac:	b570      	push	{r4, r5, r6, lr}
    71ae:	4c09      	ldr	r4, [pc, #36]	; (71d4 <CC_PalPowerSaveModeInit+0x28>)
    71b0:	4d09      	ldr	r5, [pc, #36]	; (71d8 <CC_PalPowerSaveModeInit+0x2c>)
    71b2:	6920      	ldr	r0, [r4, #16]
    71b4:	68ab      	ldr	r3, [r5, #8]
    71b6:	4798      	blx	r3
    71b8:	b118      	cbz	r0, 71c2 <CC_PalPowerSaveModeInit+0x16>
    71ba:	4b08      	ldr	r3, [pc, #32]	; (71dc <CC_PalPowerSaveModeInit+0x30>)
    71bc:	4808      	ldr	r0, [pc, #32]	; (71e0 <CC_PalPowerSaveModeInit+0x34>)
    71be:	685b      	ldr	r3, [r3, #4]
    71c0:	4798      	blx	r3
    71c2:	4a08      	ldr	r2, [pc, #32]	; (71e4 <CC_PalPowerSaveModeInit+0x38>)
    71c4:	68eb      	ldr	r3, [r5, #12]
    71c6:	6920      	ldr	r0, [r4, #16]
    71c8:	2100      	movs	r1, #0
    71ca:	6011      	str	r1, [r2, #0]
    71cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71d0:	4718      	bx	r3
    71d2:	bf00      	nop
    71d4:	20000108 	.word	0x20000108
    71d8:	200000f8 	.word	0x200000f8
    71dc:	200000e8 	.word	0x200000e8
    71e0:	0000837c 	.word	0x0000837c
    71e4:	20000bb8 	.word	0x20000bb8

000071e8 <CC_PalPowerSaveModeSelect>:
    71e8:	b570      	push	{r4, r5, r6, lr}
    71ea:	4d1b      	ldr	r5, [pc, #108]	; (7258 <CC_PalPowerSaveModeSelect+0x70>)
    71ec:	4e1b      	ldr	r6, [pc, #108]	; (725c <CC_PalPowerSaveModeSelect+0x74>)
    71ee:	4604      	mov	r4, r0
    71f0:	68b2      	ldr	r2, [r6, #8]
    71f2:	6928      	ldr	r0, [r5, #16]
    71f4:	4790      	blx	r2
    71f6:	b9f8      	cbnz	r0, 7238 <CC_PalPowerSaveModeSelect+0x50>
    71f8:	b15c      	cbz	r4, 7212 <CC_PalPowerSaveModeSelect+0x2a>
    71fa:	4c19      	ldr	r4, [pc, #100]	; (7260 <CC_PalPowerSaveModeSelect+0x78>)
    71fc:	6823      	ldr	r3, [r4, #0]
    71fe:	b1b3      	cbz	r3, 722e <CC_PalPowerSaveModeSelect+0x46>
    7200:	2b01      	cmp	r3, #1
    7202:	d01b      	beq.n	723c <CC_PalPowerSaveModeSelect+0x54>
    7204:	3b01      	subs	r3, #1
    7206:	6023      	str	r3, [r4, #0]
    7208:	6928      	ldr	r0, [r5, #16]
    720a:	68f3      	ldr	r3, [r6, #12]
    720c:	4798      	blx	r3
    720e:	2000      	movs	r0, #0
    7210:	bd70      	pop	{r4, r5, r6, pc}
    7212:	4c13      	ldr	r4, [pc, #76]	; (7260 <CC_PalPowerSaveModeSelect+0x78>)
    7214:	6821      	ldr	r1, [r4, #0]
    7216:	b941      	cbnz	r1, 722a <CC_PalPowerSaveModeSelect+0x42>
    7218:	4b12      	ldr	r3, [pc, #72]	; (7264 <CC_PalPowerSaveModeSelect+0x7c>)
    721a:	2201      	movs	r2, #1
    721c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7220:	4a11      	ldr	r2, [pc, #68]	; (7268 <CC_PalPowerSaveModeSelect+0x80>)
    7222:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7226:	2b00      	cmp	r3, #0
    7228:	d1fb      	bne.n	7222 <CC_PalPowerSaveModeSelect+0x3a>
    722a:	3101      	adds	r1, #1
    722c:	6021      	str	r1, [r4, #0]
    722e:	68f3      	ldr	r3, [r6, #12]
    7230:	6928      	ldr	r0, [r5, #16]
    7232:	4798      	blx	r3
    7234:	2000      	movs	r0, #0
    7236:	bd70      	pop	{r4, r5, r6, pc}
    7238:	480c      	ldr	r0, [pc, #48]	; (726c <CC_PalPowerSaveModeSelect+0x84>)
    723a:	bd70      	pop	{r4, r5, r6, pc}
    723c:	4a0a      	ldr	r2, [pc, #40]	; (7268 <CC_PalPowerSaveModeSelect+0x80>)
    723e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7242:	2b00      	cmp	r3, #0
    7244:	d1fb      	bne.n	723e <CC_PalPowerSaveModeSelect+0x56>
    7246:	4a07      	ldr	r2, [pc, #28]	; (7264 <CC_PalPowerSaveModeSelect+0x7c>)
    7248:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    724c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7250:	f7ff ff46 	bl	70e0 <CC_HalMaskInterrupt>
    7254:	6823      	ldr	r3, [r4, #0]
    7256:	e7d5      	b.n	7204 <CC_PalPowerSaveModeSelect+0x1c>
    7258:	20000108 	.word	0x20000108
    725c:	200000f8 	.word	0x200000f8
    7260:	20000bb8 	.word	0x20000bb8
    7264:	5002a000 	.word	0x5002a000
    7268:	5002b000 	.word	0x5002b000
    726c:	ffff8fe9 	.word	0xffff8fe9

00007270 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7270:	4770      	bx	lr

00007272 <sys_notify_validate>:
	if (notify == NULL) {
    7272:	4603      	mov	r3, r0
    7274:	b158      	cbz	r0, 728e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7276:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7278:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    727c:	2a01      	cmp	r2, #1
    727e:	d003      	beq.n	7288 <sys_notify_validate+0x16>
    7280:	2a03      	cmp	r2, #3
    7282:	d104      	bne.n	728e <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    7284:	6802      	ldr	r2, [r0, #0]
    7286:	b112      	cbz	r2, 728e <sys_notify_validate+0x1c>
		notify->result = 0;
    7288:	2000      	movs	r0, #0
    728a:	6098      	str	r0, [r3, #8]
    728c:	4770      	bx	lr
		return -EINVAL;
    728e:	f06f 0015 	mvn.w	r0, #21
}
    7292:	4770      	bx	lr

00007294 <arch_printk_char_out>:
}
    7294:	2000      	movs	r0, #0
    7296:	4770      	bx	lr

00007298 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7298:	b40f      	push	{r0, r1, r2, r3}
    729a:	b507      	push	{r0, r1, r2, lr}
    729c:	a904      	add	r1, sp, #16
    729e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    72a2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    72a4:	f7f9 f9b2 	bl	60c <vprintk>

	va_end(ap);
}
    72a8:	b003      	add	sp, #12
    72aa:	f85d eb04 	ldr.w	lr, [sp], #4
    72ae:	b004      	add	sp, #16
    72b0:	4770      	bx	lr

000072b2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    72b2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    72b4:	f013 0307 	ands.w	r3, r3, #7
    72b8:	d105      	bne.n	72c6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    72ba:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    72bc:	2b00      	cmp	r3, #0
    72be:	bf0c      	ite	eq
    72c0:	2000      	moveq	r0, #0
    72c2:	2003      	movne	r0, #3
    72c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    72c6:	2b02      	cmp	r3, #2
    72c8:	d105      	bne.n	72d6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    72ca:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    72cc:	2b00      	cmp	r3, #0
    72ce:	bf14      	ite	ne
    72d0:	2000      	movne	r0, #0
    72d2:	2004      	moveq	r0, #4
    72d4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    72d6:	2b01      	cmp	r3, #1
    72d8:	d105      	bne.n	72e6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    72da:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    72dc:	2b00      	cmp	r3, #0
    72de:	bf0c      	ite	eq
    72e0:	2000      	moveq	r0, #0
    72e2:	2005      	movne	r0, #5
    72e4:	4770      	bx	lr
	int evt = EVT_NOP;
    72e6:	2000      	movs	r0, #0
}
    72e8:	4770      	bx	lr

000072ea <notify_one>:
{
    72ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72ee:	460d      	mov	r5, r1
    72f0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    72f2:	4619      	mov	r1, r3
    72f4:	1d28      	adds	r0, r5, #4
{
    72f6:	4690      	mov	r8, r2
    72f8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    72fa:	f7f9 f959 	bl	5b0 <sys_notify_finalize>
	if (cb) {
    72fe:	4604      	mov	r4, r0
    7300:	b138      	cbz	r0, 7312 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7302:	4633      	mov	r3, r6
    7304:	4642      	mov	r2, r8
    7306:	4629      	mov	r1, r5
    7308:	4638      	mov	r0, r7
    730a:	46a4      	mov	ip, r4
}
    730c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7310:	4760      	bx	ip
}
    7312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007316 <validate_args>:
{
    7316:	b510      	push	{r4, lr}
    7318:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    731a:	b140      	cbz	r0, 732e <validate_args+0x18>
    731c:	b139      	cbz	r1, 732e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    731e:	1d08      	adds	r0, r1, #4
    7320:	f7ff ffa7 	bl	7272 <sys_notify_validate>
	if ((rv == 0)
    7324:	b928      	cbnz	r0, 7332 <validate_args+0x1c>
	    && ((cli->notify.flags
    7326:	68a3      	ldr	r3, [r4, #8]
    7328:	f033 0303 	bics.w	r3, r3, #3
    732c:	d001      	beq.n	7332 <validate_args+0x1c>
		rv = -EINVAL;
    732e:	f06f 0015 	mvn.w	r0, #21
}
    7332:	bd10      	pop	{r4, pc}

00007334 <onoff_manager_init>:
{
    7334:	b538      	push	{r3, r4, r5, lr}
    7336:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7338:	4605      	mov	r5, r0
    733a:	b158      	cbz	r0, 7354 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    733c:	b151      	cbz	r1, 7354 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    733e:	680b      	ldr	r3, [r1, #0]
    7340:	b143      	cbz	r3, 7354 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7342:	684b      	ldr	r3, [r1, #4]
    7344:	b133      	cbz	r3, 7354 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7346:	2220      	movs	r2, #32
    7348:	2100      	movs	r1, #0
    734a:	f000 f8f3 	bl	7534 <memset>
    734e:	612c      	str	r4, [r5, #16]
	return 0;
    7350:	2000      	movs	r0, #0
}
    7352:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7354:	f06f 0015 	mvn.w	r0, #21
    7358:	e7fb      	b.n	7352 <onoff_manager_init+0x1e>

0000735a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    735a:	4604      	mov	r4, r0
    735c:	b508      	push	{r3, lr}
    735e:	4608      	mov	r0, r1
    7360:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7362:	461a      	mov	r2, r3
    7364:	47a0      	blx	r4
	return z_impl_z_current_get();
    7366:	f7ff f893 	bl	6490 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    736a:	f7fa fe09 	bl	1f80 <z_impl_k_thread_abort>

0000736e <chunk_size>:
		return ((uint16_t *)cmem)[f];
    736e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    7372:	8840      	ldrh	r0, [r0, #2]
}
    7374:	0840      	lsrs	r0, r0, #1
    7376:	4770      	bx	lr

00007378 <free_list_add>:
{
    7378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    737a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    737c:	f7ff fff7 	bl	736e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    7380:	fab0 f080 	clz	r0, r0
    7384:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    7388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    738c:	00ca      	lsls	r2, r1, #3
    738e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    7392:	1d17      	adds	r7, r2, #4
{
    7394:	460c      	mov	r4, r1
    7396:	3206      	adds	r2, #6
    7398:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    739a:	b956      	cbnz	r6, 73b2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    739c:	2101      	movs	r1, #1
    739e:	fa01 f000 	lsl.w	r0, r1, r0
    73a2:	68d9      	ldr	r1, [r3, #12]
    73a4:	4301      	orrs	r1, r0
    73a6:	60d9      	str	r1, [r3, #12]
		b->next = c;
    73a8:	f8cc 4010 	str.w	r4, [ip, #16]
    73ac:	53dd      	strh	r5, [r3, r7]
    73ae:	529d      	strh	r5, [r3, r2]
}
    73b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    73b2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    73b4:	3104      	adds	r1, #4
    73b6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    73b8:	53d8      	strh	r0, [r3, r7]
    73ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    73be:	529e      	strh	r6, [r3, r2]
    73c0:	80c5      	strh	r5, [r0, #6]
    73c2:	525d      	strh	r5, [r3, r1]
    73c4:	e7f4      	b.n	73b0 <free_list_add+0x38>

000073c6 <encode_uint>:
{
    73c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73ca:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    73cc:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    73ce:	2b6f      	cmp	r3, #111	; 0x6f
{
    73d0:	4680      	mov	r8, r0
    73d2:	460f      	mov	r7, r1
    73d4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    73d6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    73da:	d029      	beq.n	7430 <encode_uint+0x6a>
    73dc:	d824      	bhi.n	7428 <encode_uint+0x62>
		return 16;
    73de:	2b58      	cmp	r3, #88	; 0x58
    73e0:	bf14      	ite	ne
    73e2:	260a      	movne	r6, #10
    73e4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    73e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    73ea:	4632      	mov	r2, r6
    73ec:	2300      	movs	r3, #0
    73ee:	4640      	mov	r0, r8
    73f0:	4639      	mov	r1, r7
    73f2:	f7f8 fe85 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73f6:	2a09      	cmp	r2, #9
    73f8:	b2d4      	uxtb	r4, r2
    73fa:	d81e      	bhi.n	743a <encode_uint+0x74>
    73fc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    73fe:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7400:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7402:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7406:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    740a:	d301      	bcc.n	7410 <encode_uint+0x4a>
    740c:	45d1      	cmp	r9, sl
    740e:	d811      	bhi.n	7434 <encode_uint+0x6e>
	if (conv->flag_hash) {
    7410:	782b      	ldrb	r3, [r5, #0]
    7412:	069b      	lsls	r3, r3, #26
    7414:	d505      	bpl.n	7422 <encode_uint+0x5c>
		if (radix == 8) {
    7416:	2e08      	cmp	r6, #8
    7418:	d115      	bne.n	7446 <encode_uint+0x80>
			conv->altform_0 = true;
    741a:	78ab      	ldrb	r3, [r5, #2]
    741c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7420:	70ab      	strb	r3, [r5, #2]
}
    7422:	4648      	mov	r0, r9
    7424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7428:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    742c:	2b70      	cmp	r3, #112	; 0x70
    742e:	e7d7      	b.n	73e0 <encode_uint+0x1a>
	switch (specifier) {
    7430:	2608      	movs	r6, #8
    7432:	e7d8      	b.n	73e6 <encode_uint+0x20>
		value /= radix;
    7434:	4680      	mov	r8, r0
    7436:	460f      	mov	r7, r1
    7438:	e7d7      	b.n	73ea <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    743a:	f1bb 0f19 	cmp.w	fp, #25
    743e:	bf94      	ite	ls
    7440:	3437      	addls	r4, #55	; 0x37
    7442:	3457      	addhi	r4, #87	; 0x57
    7444:	e7db      	b.n	73fe <encode_uint+0x38>
		} else if (radix == 16) {
    7446:	2e10      	cmp	r6, #16
    7448:	d1eb      	bne.n	7422 <encode_uint+0x5c>
			conv->altform_0c = true;
    744a:	78ab      	ldrb	r3, [r5, #2]
    744c:	f043 0310 	orr.w	r3, r3, #16
    7450:	e7e6      	b.n	7420 <encode_uint+0x5a>

00007452 <outs>:
{
    7452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7456:	4607      	mov	r7, r0
    7458:	4688      	mov	r8, r1
    745a:	4615      	mov	r5, r2
    745c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    745e:	4614      	mov	r4, r2
    7460:	42b4      	cmp	r4, r6
    7462:	eba4 0005 	sub.w	r0, r4, r5
    7466:	d302      	bcc.n	746e <outs+0x1c>
    7468:	b93e      	cbnz	r6, 747a <outs+0x28>
    746a:	7823      	ldrb	r3, [r4, #0]
    746c:	b12b      	cbz	r3, 747a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    746e:	f814 0b01 	ldrb.w	r0, [r4], #1
    7472:	4641      	mov	r1, r8
    7474:	47b8      	blx	r7
		if (rc < 0) {
    7476:	2800      	cmp	r0, #0
    7478:	daf2      	bge.n	7460 <outs+0xe>
}
    747a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000747e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    747e:	4040      	eors	r0, r0
    7480:	f380 8811 	msr	BASEPRI, r0
    7484:	f04f 0004 	mov.w	r0, #4
    7488:	df02      	svc	2
}
    748a:	4770      	bx	lr

0000748c <assert_print>:

void assert_print(const char *fmt, ...)
{
    748c:	b40f      	push	{r0, r1, r2, r3}
    748e:	b507      	push	{r0, r1, r2, lr}
    7490:	a904      	add	r1, sp, #16
    7492:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7496:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7498:	f7f9 f8b8 	bl	60c <vprintk>

	va_end(ap);
}
    749c:	b003      	add	sp, #12
    749e:	f85d eb04 	ldr.w	lr, [sp], #4
    74a2:	b004      	add	sp, #16
    74a4:	4770      	bx	lr

000074a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    74a6:	4770      	bx	lr

000074a8 <abort_function>:
{
    74a8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    74aa:	2000      	movs	r0, #0
    74ac:	f7f9 ffcc 	bl	1448 <sys_reboot>

000074b0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    74b0:	f7fd b988 	b.w	47c4 <z_fatal_error>

000074b4 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    74b4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    74b6:	6800      	ldr	r0, [r0, #0]
    74b8:	f7fd b984 	b.w	47c4 <z_fatal_error>

000074bc <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    74bc:	2100      	movs	r1, #0
    74be:	2001      	movs	r0, #1
    74c0:	f7ff bff6 	b.w	74b0 <z_arm_fatal_error>

000074c4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    74c4:	b508      	push	{r3, lr}
	handler();
    74c6:	f7fa faa1 	bl	1a0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    74ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    74ce:	f7fa bb79 	b.w	1bc4 <z_arm_exc_exit>

000074d2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    74d2:	3901      	subs	r1, #1
    74d4:	4603      	mov	r3, r0
    74d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    74da:	b90a      	cbnz	r2, 74e0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    74dc:	701a      	strb	r2, [r3, #0]

	return dest;
}
    74de:	4770      	bx	lr
		*d = *s;
    74e0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    74e4:	e7f7      	b.n	74d6 <strcpy+0x4>

000074e6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    74e6:	4603      	mov	r3, r0
	size_t n = 0;
    74e8:	2000      	movs	r0, #0

	while (*s != '\0') {
    74ea:	5c1a      	ldrb	r2, [r3, r0]
    74ec:	b902      	cbnz	r2, 74f0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    74ee:	4770      	bx	lr
		n++;
    74f0:	3001      	adds	r0, #1
    74f2:	e7fa      	b.n	74ea <strlen+0x4>

000074f4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    74f4:	4603      	mov	r3, r0
	size_t n = 0;
    74f6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    74f8:	5c1a      	ldrb	r2, [r3, r0]
    74fa:	b10a      	cbz	r2, 7500 <strnlen+0xc>
    74fc:	4288      	cmp	r0, r1
    74fe:	d100      	bne.n	7502 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7500:	4770      	bx	lr
		n++;
    7502:	3001      	adds	r0, #1
    7504:	e7f8      	b.n	74f8 <strnlen+0x4>

00007506 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7506:	1e43      	subs	r3, r0, #1
    7508:	3901      	subs	r1, #1
    750a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    750e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7512:	4282      	cmp	r2, r0
    7514:	d101      	bne.n	751a <strcmp+0x14>
    7516:	2a00      	cmp	r2, #0
    7518:	d1f7      	bne.n	750a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    751a:	1a10      	subs	r0, r2, r0
    751c:	4770      	bx	lr

0000751e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    751e:	b510      	push	{r4, lr}
    7520:	1e43      	subs	r3, r0, #1
    7522:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7524:	4291      	cmp	r1, r2
    7526:	d100      	bne.n	752a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7528:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    752a:	f811 4b01 	ldrb.w	r4, [r1], #1
    752e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7532:	e7f7      	b.n	7524 <memcpy+0x6>

00007534 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7534:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7536:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    7538:	4603      	mov	r3, r0
	while (n > 0) {
    753a:	4293      	cmp	r3, r2
    753c:	d100      	bne.n	7540 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    753e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7540:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7544:	e7f9      	b.n	753a <memset+0x6>

00007546 <_stdout_hook_default>:
}
    7546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    754a:	4770      	bx	lr

0000754c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    754c:	684b      	ldr	r3, [r1, #4]
    754e:	2b01      	cmp	r3, #1
    7550:	dd07      	ble.n	7562 <sprintf_out+0x16>
		*(p->ptr) = c;
    7552:	680b      	ldr	r3, [r1, #0]
    7554:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    7556:	680b      	ldr	r3, [r1, #0]
    7558:	3301      	adds	r3, #1
    755a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    755c:	684b      	ldr	r3, [r1, #4]
    755e:	3b01      	subs	r3, #1
    7560:	604b      	str	r3, [r1, #4]
}
    7562:	2000      	movs	r0, #0
    7564:	4770      	bx	lr

00007566 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7566:	2806      	cmp	r0, #6
    7568:	d108      	bne.n	757c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    756a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    756e:	2201      	movs	r2, #1
    7570:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7574:	f3bf 8f4f 	dsb	sy
        __WFE();
    7578:	bf20      	wfe
    while (true)
    757a:	e7fd      	b.n	7578 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    757c:	4770      	bx	lr

0000757e <pm_state_exit_post_ops>:
    757e:	2300      	movs	r3, #0
    7580:	f383 8811 	msr	BASEPRI, r3
    7584:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7588:	4770      	bx	lr

0000758a <set_on_state>:
	__asm__ volatile(
    758a:	f04f 0320 	mov.w	r3, #32
    758e:	f3ef 8211 	mrs	r2, BASEPRI
    7592:	f383 8812 	msr	BASEPRI_MAX, r3
    7596:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    759a:	6803      	ldr	r3, [r0, #0]
    759c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    75a0:	f043 0302 	orr.w	r3, r3, #2
    75a4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    75a6:	f382 8811 	msr	BASEPRI, r2
    75aa:	f3bf 8f6f 	isb	sy
}
    75ae:	4770      	bx	lr

000075b0 <async_start>:
{
    75b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75b2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    75b4:	6904      	ldr	r4, [r0, #16]
{
    75b6:	4605      	mov	r5, r0
    75b8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    75ba:	f04f 0020 	mov.w	r0, #32
    75be:	f3ef 8c11 	mrs	ip, BASEPRI
    75c2:	f380 8812 	msr	BASEPRI_MAX, r0
    75c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    75ca:	260c      	movs	r6, #12
    75cc:	fb06 4601 	mla	r6, r6, r1, r4
    75d0:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    75d2:	f000 0e07 	and.w	lr, r0, #7
    75d6:	f1be 0f01 	cmp.w	lr, #1
    75da:	d111      	bne.n	7600 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    75dc:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    75de:	2600      	movs	r6, #0
	__asm__ volatile(
    75e0:	f38c 8811 	msr	BASEPRI, ip
    75e4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    75e8:	b946      	cbnz	r6, 75fc <async_start+0x4c>
	subdata->cb = cb;
    75ea:	200c      	movs	r0, #12
    75ec:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    75f0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    75f4:	686b      	ldr	r3, [r5, #4]
    75f6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    75fa:	4798      	blx	r3
}
    75fc:	4630      	mov	r0, r6
    75fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7600:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7604:	4287      	cmp	r7, r0
    7606:	bf14      	ite	ne
    7608:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    760c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7610:	e7e6      	b.n	75e0 <async_start+0x30>

00007612 <api_start>:
{
    7612:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7614:	2480      	movs	r4, #128	; 0x80
    7616:	9400      	str	r4, [sp, #0]
    7618:	f7ff ffca 	bl	75b0 <async_start>
}
    761c:	b002      	add	sp, #8
    761e:	bd10      	pop	{r4, pc}

00007620 <onoff_started_callback>:
	return &data->mgr[type];
    7620:	6900      	ldr	r0, [r0, #16]
    7622:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7624:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7628:	2100      	movs	r1, #0
    762a:	4710      	bx	r2

0000762c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    762c:	2000      	movs	r0, #0
    762e:	f7fc bb93 	b.w	3d58 <nrfx_clock_start>

00007632 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7632:	2000      	movs	r0, #0
    7634:	f7fc bbf4 	b.w	3e20 <nrfx_clock_stop>

00007638 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7638:	2280      	movs	r2, #128	; 0x80
    763a:	f7fa be99 	b.w	2370 <stop>

0000763e <blocking_start_callback>:
{
    763e:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    7640:	f7fd bdc8 	b.w	51d4 <z_impl_k_sem_give>

00007644 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7644:	6843      	ldr	r3, [r0, #4]
    7646:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7648:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    764c:	600b      	str	r3, [r1, #0]
}
    764e:	2000      	movs	r0, #0
    7650:	4770      	bx	lr

00007652 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7652:	6843      	ldr	r3, [r0, #4]
    7654:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7656:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    765a:	4042      	eors	r2, r0
    765c:	400a      	ands	r2, r1
    765e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7660:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7664:	2000      	movs	r0, #0
    7666:	4770      	bx	lr

00007668 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7668:	6843      	ldr	r3, [r0, #4]
    766a:	685b      	ldr	r3, [r3, #4]
}
    766c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    766e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7672:	4770      	bx	lr

00007674 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7674:	6843      	ldr	r3, [r0, #4]
    7676:	685b      	ldr	r3, [r3, #4]
}
    7678:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    767a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    767e:	4770      	bx	lr

00007680 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7680:	6843      	ldr	r3, [r0, #4]
    7682:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7684:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7688:	404b      	eors	r3, r1
    p_reg->OUT = value;
    768a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    768e:	2000      	movs	r0, #0
    7690:	4770      	bx	lr

00007692 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    7692:	6902      	ldr	r2, [r0, #16]
{
    7694:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7696:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    769a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    769e:	2000      	movs	r0, #0
    76a0:	4770      	bx	lr

000076a2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    76a2:	6843      	ldr	r3, [r0, #4]
    76a4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    76a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    76aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    76ae:	4770      	bx	lr

000076b0 <tx_start>:
{
    76b0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    76b2:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    76b4:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    76b6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    76ba:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76be:	2200      	movs	r2, #0
    76c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    76c4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    76c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    76cc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    76d0:	6862      	ldr	r2, [r4, #4]
    76d2:	06d2      	lsls	r2, r2, #27
    76d4:	d50f      	bpl.n	76f6 <tx_start+0x46>
	if (data->async) {
    76d6:	6902      	ldr	r2, [r0, #16]
    76d8:	68d2      	ldr	r2, [r2, #12]
    76da:	b12a      	cbz	r2, 76e8 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    76dc:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    76e0:	f041 0101 	orr.w	r1, r1, #1
    76e4:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    76e8:	2208      	movs	r2, #8
    76ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    76ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    76f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76f6:	2201      	movs	r2, #1
    76f8:	609a      	str	r2, [r3, #8]
}
    76fa:	bd10      	pop	{r4, pc}

000076fc <user_callback>:
	if (data->async->user_callback) {
    76fc:	6903      	ldr	r3, [r0, #16]
    76fe:	68da      	ldr	r2, [r3, #12]
    7700:	6813      	ldr	r3, [r2, #0]
    7702:	b10b      	cbz	r3, 7708 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    7704:	6852      	ldr	r2, [r2, #4]
    7706:	4718      	bx	r3
}
    7708:	4770      	bx	lr

0000770a <notify_uart_rx_rdy>:
{
    770a:	b570      	push	{r4, r5, r6, lr}
    770c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    770e:	6906      	ldr	r6, [r0, #16]
{
    7710:	4604      	mov	r4, r0
    7712:	460d      	mov	r5, r1
	struct uart_event evt = {
    7714:	2214      	movs	r2, #20
    7716:	2100      	movs	r1, #0
    7718:	a801      	add	r0, sp, #4
    771a:	f7ff ff0b 	bl	7534 <memset>
    771e:	2302      	movs	r3, #2
    7720:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    7724:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    7726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    7728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    772a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    772c:	a901      	add	r1, sp, #4
    772e:	4620      	mov	r0, r4
	struct uart_event evt = {
    7730:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    7734:	f7ff ffe2 	bl	76fc <user_callback>
}
    7738:	b006      	add	sp, #24
    773a:	bd70      	pop	{r4, r5, r6, pc}

0000773c <rx_buf_release>:
{
    773c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    773e:	680e      	ldr	r6, [r1, #0]
{
    7740:	b086      	sub	sp, #24
    7742:	4605      	mov	r5, r0
    7744:	460c      	mov	r4, r1
	if (*buf) {
    7746:	b17e      	cbz	r6, 7768 <rx_buf_release+0x2c>
		struct uart_event evt = {
    7748:	2214      	movs	r2, #20
    774a:	2100      	movs	r1, #0
    774c:	a801      	add	r0, sp, #4
    774e:	f7ff fef1 	bl	7534 <memset>
    7752:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    7754:	eb0d 0103 	add.w	r1, sp, r3
    7758:	4628      	mov	r0, r5
		struct uart_event evt = {
    775a:	f88d 3004 	strb.w	r3, [sp, #4]
    775e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    7760:	f7ff ffcc 	bl	76fc <user_callback>
		*buf = NULL;
    7764:	2300      	movs	r3, #0
    7766:	6023      	str	r3, [r4, #0]
}
    7768:	b006      	add	sp, #24
    776a:	bd70      	pop	{r4, r5, r6, pc}

0000776c <notify_rx_disable>:
{
    776c:	b510      	push	{r4, lr}
    776e:	b086      	sub	sp, #24
    7770:	4604      	mov	r4, r0
	struct uart_event evt = {
    7772:	2214      	movs	r2, #20
    7774:	2100      	movs	r1, #0
    7776:	a801      	add	r0, sp, #4
    7778:	f7ff fedc 	bl	7534 <memset>
    777c:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    777e:	a901      	add	r1, sp, #4
    7780:	4620      	mov	r0, r4
	struct uart_event evt = {
    7782:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    7786:	f7ff ffb9 	bl	76fc <user_callback>
}
    778a:	b006      	add	sp, #24
    778c:	bd10      	pop	{r4, pc}

0000778e <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    778e:	6843      	ldr	r3, [r0, #4]
{
    7790:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    7792:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    7794:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    7796:	f04f 0020 	mov.w	r0, #32
    779a:	f3ef 8511 	mrs	r5, BASEPRI
    779e:	f380 8812 	msr	BASEPRI_MAX, r0
    77a2:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    77a6:	68e4      	ldr	r4, [r4, #12]
    77a8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    77aa:	b190      	cbz	r0, 77d2 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    77ac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    77ae:	b998      	cbnz	r0, 77d8 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    77b0:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    77b4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    77b8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    77bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    77c0:	f042 0220 	orr.w	r2, r2, #32
    77c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    77c8:	f385 8811 	msr	BASEPRI, r5
    77cc:	f3bf 8f6f 	isb	sy
}
    77d0:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    77d2:	f06f 000c 	mvn.w	r0, #12
    77d6:	e7f7      	b.n	77c8 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    77d8:	f06f 000f 	mvn.w	r0, #15
    77dc:	e7f4      	b.n	77c8 <uarte_nrfx_rx_buf_rsp+0x3a>

000077de <uarte_nrfx_callback_set>:
	if (!data->async) {
    77de:	6903      	ldr	r3, [r0, #16]
    77e0:	68db      	ldr	r3, [r3, #12]
    77e2:	b11b      	cbz	r3, 77ec <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    77e4:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    77e8:	2000      	movs	r0, #0
    77ea:	4770      	bx	lr
		return -ENOTSUP;
    77ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    77f0:	4770      	bx	lr

000077f2 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    77f2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    77f4:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    77f6:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    77f8:	681b      	ldr	r3, [r3, #0]
{
    77fa:	b510      	push	{r4, lr}
	if (data->async) {
    77fc:	b958      	cbnz	r0, 7816 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77fe:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7802:	b15c      	cbz	r4, 781c <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    7804:	7d52      	ldrb	r2, [r2, #21]
    7806:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7808:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    780c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7810:	2201      	movs	r2, #1
    7812:	601a      	str	r2, [r3, #0]
}
    7814:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    7816:	f06f 0085 	mvn.w	r0, #133	; 0x85
    781a:	e7fb      	b.n	7814 <uarte_nrfx_poll_in+0x22>
		return -1;
    781c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7820:	e7f8      	b.n	7814 <uarte_nrfx_poll_in+0x22>

00007822 <uarte_nrfx_rx_disable>:
{
    7822:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    7824:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    7826:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    7828:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    782a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    782c:	6e03      	ldr	r3, [r0, #96]	; 0x60
    782e:	b1b3      	cbz	r3, 785e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    7830:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7832:	b153      	cbz	r3, 784a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    7834:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    7838:	f023 0320 	bic.w	r3, r3, #32
    783c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7840:	2300      	movs	r3, #0
    7842:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    7846:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    784a:	3088      	adds	r0, #136	; 0x88
    784c:	f000 fb2b 	bl	7ea6 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    7850:	68eb      	ldr	r3, [r5, #12]
    7852:	2000      	movs	r0, #0
    7854:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7858:	2301      	movs	r3, #1
    785a:	6063      	str	r3, [r4, #4]
}
    785c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    785e:	f06f 000d 	mvn.w	r0, #13
    7862:	e7fb      	b.n	785c <uarte_nrfx_rx_disable+0x3a>

00007864 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    7864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    7866:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    7868:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
    786a:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    786e:	460c      	mov	r4, r1
    7870:	bb31      	cbnz	r1, 78c0 <rx_flush.isra.0+0x5c>
    7872:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
    7874:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7876:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    787a:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    787c:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7880:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7882:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    7886:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    788a:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    788c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7890:	2900      	cmp	r1, #0
    7892:	d0fb      	beq.n	788c <rx_flush.isra.0+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7894:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    7898:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    789c:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
    78a0:	b914      	cbnz	r4, 78a8 <rx_flush.isra.0+0x44>
			return rx_amount;
    78a2:	b2c0      	uxtb	r0, r0
}
    78a4:	b003      	add	sp, #12
    78a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    78a8:	4286      	cmp	r6, r0
    78aa:	d1fa      	bne.n	78a2 <rx_flush.isra.0+0x3e>
    78ac:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
    78ae:	42a2      	cmp	r2, r4
    78b0:	d101      	bne.n	78b6 <rx_flush.isra.0+0x52>
	return 0;
    78b2:	2000      	movs	r0, #0
    78b4:	e7f6      	b.n	78a4 <rx_flush.isra.0+0x40>
		if (buf[i] != dirty) {
    78b6:	f814 3b01 	ldrb.w	r3, [r4], #1
    78ba:	2b00      	cmp	r3, #0
    78bc:	d0f7      	beq.n	78ae <rx_flush.isra.0+0x4a>
    78be:	e7f0      	b.n	78a2 <rx_flush.isra.0+0x3e>
		memset(buf, dirty, len);
    78c0:	2100      	movs	r1, #0
    78c2:	4620      	mov	r0, r4
    78c4:	f7ff fe36 	bl	7534 <memset>
		flush_len = len;
    78c8:	4623      	mov	r3, r4
    78ca:	e7d4      	b.n	7876 <rx_flush.isra.0+0x12>

000078cc <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    78cc:	68c2      	ldr	r2, [r0, #12]
    78ce:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    78d0:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    78d2:	b508      	push	{r3, lr}
    78d4:	4603      	mov	r3, r0
	if (!remaining) {
    78d6:	d00b      	beq.n	78f0 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    78d8:	2a08      	cmp	r2, #8
    78da:	bf28      	it	cs
    78dc:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    78de:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    78e0:	3018      	adds	r0, #24
    78e2:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    78e4:	689b      	ldr	r3, [r3, #8]
    78e6:	4419      	add	r1, r3
    78e8:	f7ff fe19 	bl	751e <memcpy>
	return true;
    78ec:	2001      	movs	r0, #1
}
    78ee:	bd08      	pop	{r3, pc}
		return false;
    78f0:	4610      	mov	r0, r2
    78f2:	e7fc      	b.n	78ee <setup_tx_cache.isra.0+0x22>

000078f4 <async_uart_release>:
{
    78f4:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    78f6:	6903      	ldr	r3, [r0, #16]
{
    78f8:	4604      	mov	r4, r0
	__asm__ volatile(
    78fa:	f04f 0220 	mov.w	r2, #32
    78fe:	f3ef 8611 	mrs	r6, BASEPRI
    7902:	f382 8812 	msr	BASEPRI_MAX, r2
    7906:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    790a:	68dd      	ldr	r5, [r3, #12]
    790c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    7910:	ea23 0301 	bic.w	r3, r3, r1
    7914:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    7918:	b973      	cbnz	r3, 7938 <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    791a:	2902      	cmp	r1, #2
    791c:	d107      	bne.n	792e <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    791e:	6840      	ldr	r0, [r0, #4]
    7920:	2205      	movs	r2, #5
    7922:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    7926:	f7ff ff9d 	bl	7864 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    792a:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    792e:	6863      	ldr	r3, [r4, #4]
    7930:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7932:	2200      	movs	r2, #0
    7934:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    7938:	f386 8811 	msr	BASEPRI, r6
    793c:	f3bf 8f6f 	isb	sy
}
    7940:	bd70      	pop	{r4, r5, r6, pc}

00007942 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7942:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7944:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7946:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    794a:	b940      	cbnz	r0, 795e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    794c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    794e:	079b      	lsls	r3, r3, #30
    7950:	d406      	bmi.n	7960 <is_tx_ready.isra.0+0x1e>
    7952:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7956:	3800      	subs	r0, #0
    7958:	bf18      	it	ne
    795a:	2001      	movne	r0, #1
    795c:	4770      	bx	lr
    795e:	2001      	movs	r0, #1
}
    7960:	4770      	bx	lr

00007962 <start_tx_locked>:
{
    7962:	b510      	push	{r4, lr}
    7964:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    7966:	6840      	ldr	r0, [r0, #4]
    7968:	f7ff ffeb 	bl	7942 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    796c:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    796e:	b918      	cbnz	r0, 7978 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    7970:	2201      	movs	r2, #1
    7972:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    7976:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    7978:	2200      	movs	r2, #0
    797a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    797e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7982:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    7986:	4620      	mov	r0, r4
    7988:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    798c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    7990:	f7ff be8e 	b.w	76b0 <tx_start>

00007994 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7994:	b510      	push	{r4, lr}
    7996:	2200      	movs	r2, #0
    7998:	4604      	mov	r4, r0
    799a:	2101      	movs	r1, #1
    799c:	2028      	movs	r0, #40	; 0x28
    799e:	f7fa f801 	bl	19a4 <z_arm_irq_priority_set>
    79a2:	2028      	movs	r0, #40	; 0x28
    79a4:	f7f9 ffe0 	bl	1968 <arch_irq_enable>
    79a8:	4620      	mov	r0, r4
    79aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79ae:	f7fb b9dd 	b.w	2d6c <uarte_instance_init.constprop.0>

000079b2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    79b2:	b510      	push	{r4, lr}
    79b4:	2200      	movs	r2, #0
    79b6:	4604      	mov	r4, r0
    79b8:	2101      	movs	r1, #1
    79ba:	2002      	movs	r0, #2
    79bc:	f7f9 fff2 	bl	19a4 <z_arm_irq_priority_set>
    79c0:	2002      	movs	r0, #2
    79c2:	f7f9 ffd1 	bl	1968 <arch_irq_enable>
    79c6:	4620      	mov	r0, r4
    79c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79cc:	f7fb b9ce 	b.w	2d6c <uarte_instance_init.constprop.0>

000079d0 <rx_timeout>:
{
    79d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    79d2:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    79d4:	68f3      	ldr	r3, [r6, #12]
    79d6:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    79da:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    79de:	bb42      	cbnz	r2, 7a32 <rx_timeout+0x62>
	const struct device *dev = data->dev;
    79e0:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    79e2:	686a      	ldr	r2, [r5, #4]
    79e4:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    79e6:	2110      	movs	r1, #16
    79e8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    79ec:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    79f0:	6f59      	ldr	r1, [r3, #116]	; 0x74
    79f2:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    79f4:	bf1e      	ittt	ne
    79f6:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    79f8:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    79fa:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    79fe:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!HW_RX_COUNTING_ENABLED(data) &&
    7a02:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    7a04:	bf48      	it	mi
    7a06:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    7a0a:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    7a0e:	bf48      	it	mi
    7a10:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    7a12:	18a0      	adds	r0, r4, r2
    7a14:	4288      	cmp	r0, r1
    7a16:	d90d      	bls.n	7a34 <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    7a18:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    7a1a:	2c00      	cmp	r4, #0
    7a1c:	dd04      	ble.n	7a28 <rx_timeout+0x58>
		clipped = true;
    7a1e:	2701      	movs	r7, #1
    7a20:	e00e      	b.n	7a40 <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    7a22:	1a52      	subs	r2, r2, r1
    7a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    7a28:	686b      	ldr	r3, [r5, #4]
    7a2a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7a2c:	2210      	movs	r2, #16
    7a2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    7a34:	2c00      	cmp	r4, #0
    7a36:	d0f7      	beq.n	7a28 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    7a38:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    7a3c:	428a      	cmp	r2, r1
    7a3e:	daf0      	bge.n	7a22 <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    7a40:	4628      	mov	r0, r5
    7a42:	4621      	mov	r1, r4
    7a44:	f7ff fe61 	bl	770a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    7a48:	68f0      	ldr	r0, [r6, #12]
    7a4a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7a4c:	4423      	add	r3, r4
    7a4e:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    7a50:	6f83      	ldr	r3, [r0, #120]	; 0x78
    7a52:	4423      	add	r3, r4
    7a54:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    7a56:	2f00      	cmp	r7, #0
    7a58:	d0e6      	beq.n	7a28 <rx_timeout+0x58>
    7a5a:	3088      	adds	r0, #136	; 0x88
    7a5c:	f000 fa23 	bl	7ea6 <z_impl_k_timer_stop>
}
    7a60:	e7e2      	b.n	7a28 <rx_timeout+0x58>

00007a62 <uarte_nrfx_tx_abort>:
{
    7a62:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    7a64:	6843      	ldr	r3, [r0, #4]
    7a66:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    7a68:	6903      	ldr	r3, [r0, #16]
    7a6a:	68d8      	ldr	r0, [r3, #12]
    7a6c:	6883      	ldr	r3, [r0, #8]
    7a6e:	b14b      	cbz	r3, 7a84 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    7a70:	2400      	movs	r4, #0
    7a72:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    7a76:	3028      	adds	r0, #40	; 0x28
    7a78:	f000 fa15 	bl	7ea6 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a7c:	2301      	movs	r3, #1
    7a7e:	60eb      	str	r3, [r5, #12]
	return 0;
    7a80:	4620      	mov	r0, r4
}
    7a82:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    7a84:	f06f 000d 	mvn.w	r0, #13
    7a88:	e7fb      	b.n	7a82 <uarte_nrfx_tx_abort+0x20>

00007a8a <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    7a8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7a8c:	6818      	ldr	r0, [r3, #0]
    7a8e:	f7ff bfe8 	b.w	7a62 <uarte_nrfx_tx_abort>

00007a92 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7a92:	4770      	bx	lr

00007a94 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7a94:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7a96:	6843      	ldr	r3, [r0, #4]
    7a98:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7a9a:	7a03      	ldrb	r3, [r0, #8]
    7a9c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7aa0:	3b01      	subs	r3, #1
    7aa2:	00db      	lsls	r3, r3, #3
    7aa4:	6845      	ldr	r5, [r0, #4]
    7aa6:	6814      	ldr	r4, [r2, #0]
    7aa8:	441d      	add	r5, r3
    7aaa:	42ac      	cmp	r4, r5
    7aac:	d902      	bls.n	7ab4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    7aae:	f06f 0001 	mvn.w	r0, #1
}
    7ab2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7ab4:	7965      	ldrb	r5, [r4, #5]
    7ab6:	428d      	cmp	r5, r1
    7ab8:	d002      	beq.n	7ac0 <pinctrl_lookup_state+0x2c>
		(*state)++;
    7aba:	3408      	adds	r4, #8
    7abc:	6014      	str	r4, [r2, #0]
    7abe:	e7f1      	b.n	7aa4 <pinctrl_lookup_state+0x10>
			return 0;
    7ac0:	2000      	movs	r0, #0
    7ac2:	e7f6      	b.n	7ab2 <pinctrl_lookup_state+0x1e>

00007ac4 <nrf_gpio_pin_clear>:
{
    7ac4:	b507      	push	{r0, r1, r2, lr}
    7ac6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7ac8:	a801      	add	r0, sp, #4
    7aca:	f7fb fefb 	bl	38c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7ace:	9a01      	ldr	r2, [sp, #4]
    7ad0:	2301      	movs	r3, #1
    7ad2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7ad4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7ad8:	b003      	add	sp, #12
    7ada:	f85d fb04 	ldr.w	pc, [sp], #4

00007ade <nrf_gpio_pin_set>:
{
    7ade:	b507      	push	{r0, r1, r2, lr}
    7ae0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7ae2:	a801      	add	r0, sp, #4
    7ae4:	f7fb feee 	bl	38c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7ae8:	9a01      	ldr	r2, [sp, #4]
    7aea:	2301      	movs	r3, #1
    7aec:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7aee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7af2:	b003      	add	sp, #12
    7af4:	f85d fb04 	ldr.w	pc, [sp], #4

00007af8 <nrf_gpio_pin_write>:
    if (value == 0)
    7af8:	b909      	cbnz	r1, 7afe <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    7afa:	f7ff bfe3 	b.w	7ac4 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7afe:	f7ff bfee 	b.w	7ade <nrf_gpio_pin_set>

00007b02 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    7b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    7b04:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7b08:	2b00      	cmp	r3, #0
{
    7b0a:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7b0c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b10:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7b12:	bf0b      	itete	eq
    7b14:	4615      	moveq	r5, r2
    7b16:	2501      	movne	r5, #1
    7b18:	460e      	moveq	r6, r1
    7b1a:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7b1c:	9301      	str	r3, [sp, #4]
    7b1e:	f7fb fed1 	bl	38c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7b22:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7b24:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7b28:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7b2c:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    7b30:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
    7b32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7b36:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7b3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    7b3e:	b002      	add	sp, #8
    7b40:	bd70      	pop	{r4, r5, r6, pc}

00007b42 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7b42:	b570      	push	{r4, r5, r6, lr}
    7b44:	4615      	mov	r5, r2
    7b46:	4604      	mov	r4, r0
    7b48:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7b4c:	42a6      	cmp	r6, r4
    7b4e:	d101      	bne.n	7b54 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7b50:	2000      	movs	r0, #0
}
    7b52:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    7b54:	6823      	ldr	r3, [r4, #0]
    7b56:	0c1a      	lsrs	r2, r3, #16
    7b58:	2a22      	cmp	r2, #34	; 0x22
    7b5a:	f200 808e 	bhi.w	7c7a <pinctrl_configure_pins+0x138>
    7b5e:	e8df f002 	tbb	[pc, r2]
    7b62:	1d12      	.short	0x1d12
    7b64:	39294324 	.word	0x39294324
    7b68:	8c8c8c43 	.word	0x8c8c8c43
    7b6c:	8c4d488c 	.word	0x8c4d488c
    7b70:	8c8c8c8c 	.word	0x8c8c8c8c
    7b74:	8c8c8c8c 	.word	0x8c8c8c8c
    7b78:	68635e52 	.word	0x68635e52
    7b7c:	6d8c8c8c 	.word	0x6d8c8c8c
    7b80:	827d7873 	.word	0x827d7873
    7b84:	87          	.byte	0x87
    7b85:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7b8a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7b8e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    7b90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7b94:	f7ff ffa3 	bl	7ade <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7b98:	2201      	movs	r2, #1
    7b9a:	e015      	b.n	7bc8 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7ba0:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7ba4:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7ba6:	2100      	movs	r1, #0
    7ba8:	e00f      	b.n	7bca <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    7baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bae:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    7bb2:	e7ec      	b.n	7b8e <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bb8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7bbc:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    7bbe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7bc2:	f7ff ff7f 	bl	7ac4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7bc6:	2200      	movs	r2, #0
    7bc8:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7bca:	6820      	ldr	r0, [r4, #0]
    7bcc:	f7ff ff99 	bl	7b02 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7bd0:	3404      	adds	r4, #4
    7bd2:	e7bb      	b.n	7b4c <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bd8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7bdc:	6820      	ldr	r0, [r4, #0]
    7bde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7be2:	f7ff ff6f 	bl	7ac4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7be6:	e7d7      	b.n	7b98 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bec:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7bf0:	e7d8      	b.n	7ba4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    7bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bf6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7bfa:	e7d3      	b.n	7ba4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c00:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    7c04:	e7ce      	b.n	7ba4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c0a:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7c0e:	6820      	ldr	r0, [r4, #0]
    7c10:	f3c0 3140 	ubfx	r1, r0, #13, #1
    7c14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7c18:	f7ff ff6e 	bl	7af8 <nrf_gpio_pin_write>
    7c1c:	e7bc      	b.n	7b98 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c22:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7c26:	e7f2      	b.n	7c0e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    7c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c2c:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7c30:	e7ed      	b.n	7c0e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c36:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    7c3a:	e7e8      	b.n	7c0e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    7c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c40:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c44:	2201      	movs	r2, #1
    7c46:	e7ae      	b.n	7ba6 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    7c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c4c:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c50:	e7f8      	b.n	7c44 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c56:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c5a:	e7f3      	b.n	7c44 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    7c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c60:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c64:	e7ee      	b.n	7c44 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c6a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c6e:	e7e9      	b.n	7c44 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    7c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c74:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    7c78:	e7e4      	b.n	7c44 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    7c7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7c7e:	e768      	b.n	7b52 <pinctrl_configure_pins+0x10>

00007c80 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7c80:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7c82:	2000      	movs	r0, #0
    7c84:	f7fa fb18 	bl	22b8 <sys_arch_reboot>

00007c88 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7c88:	f7ff b91c 	b.w	6ec4 <nrf_cc3xx_platform_init_no_rng>

00007c8c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7c8c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7c8e:	f7f9 fd83 	bl	1798 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7c92:	f7f9 fe35 	bl	1900 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7c9a:	f7ff b913 	b.w	6ec4 <nrf_cc3xx_platform_init_no_rng>

00007c9e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7c9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7ca2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    7ca6:	f1a0 0308 	sub.w	r3, r0, #8
    7caa:	4258      	negs	r0, r3
    7cac:	4158      	adcs	r0, r3
    7cae:	4770      	bx	lr

00007cb0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7cb0:	4700      	bx	r0

00007cb2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7cb2:	f000 b8e8 	b.w	7e86 <z_impl_k_busy_wait>

00007cb6 <nrf_gpio_pin_present_check>:
    switch (port)
    7cb6:	0943      	lsrs	r3, r0, #5
    7cb8:	d00b      	beq.n	7cd2 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    7cba:	2b01      	cmp	r3, #1
    7cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7cc0:	bf18      	it	ne
    7cc2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7cc4:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7cc8:	fa23 f000 	lsr.w	r0, r3, r0
}
    7ccc:	f000 0001 	and.w	r0, r0, #1
    7cd0:	4770      	bx	lr
    switch (port)
    7cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cd6:	e7f5      	b.n	7cc4 <nrf_gpio_pin_present_check+0xe>

00007cd8 <pin_is_task_output>:
{
    7cd8:	b508      	push	{r3, lr}
    7cda:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7cdc:	f7fc f908 	bl	3ef0 <pin_is_output>
    7ce0:	b110      	cbz	r0, 7ce8 <pin_is_task_output+0x10>
    7ce2:	4610      	mov	r0, r2
    7ce4:	f7fc f8ee 	bl	3ec4 <pin_in_use_by_te>
}
    7ce8:	f000 0001 	and.w	r0, r0, #1
    7cec:	bd08      	pop	{r3, pc}

00007cee <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7cee:	0080      	lsls	r0, r0, #2
}
    7cf0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7cf4:	4770      	bx	lr

00007cf6 <nrf_gpio_reconfigure>:
{
    7cf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7cfa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7cfc:	a801      	add	r0, sp, #4
{
    7cfe:	460e      	mov	r6, r1
    7d00:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7d04:	4690      	mov	r8, r2
    7d06:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7d08:	f7fc f976 	bl	3ff8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d0c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7d0e:	f1b8 0f00 	cmp.w	r8, #0
    7d12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7d16:	bf14      	ite	ne
    7d18:	2302      	movne	r3, #2
    7d1a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7d1c:	2e00      	cmp	r6, #0
    7d1e:	bf18      	it	ne
    7d20:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7d24:	2d00      	cmp	r5, #0
    7d26:	bf14      	ite	ne
    7d28:	210c      	movne	r1, #12
    7d2a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7d2c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7d2e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7d32:	bf14      	ite	ne
    7d34:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    7d38:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7d3a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7d3c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d40:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7d44:	bf14      	ite	ne
    7d46:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    7d4a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7d4c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    7d4e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d52:	b106      	cbz	r6, 7d56 <nrf_gpio_reconfigure+0x60>
    7d54:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7d56:	f1b8 0f00 	cmp.w	r8, #0
    7d5a:	d003      	beq.n	7d64 <nrf_gpio_reconfigure+0x6e>
    7d5c:	f898 8000 	ldrb.w	r8, [r8]
    7d60:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7d64:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7d66:	b10d      	cbz	r5, 7d6c <nrf_gpio_reconfigure+0x76>
    7d68:	782d      	ldrb	r5, [r5, #0]
    7d6a:	00ad      	lsls	r5, r5, #2
    7d6c:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7d70:	b10c      	cbz	r4, 7d76 <nrf_gpio_reconfigure+0x80>
    7d72:	7822      	ldrb	r2, [r4, #0]
    7d74:	0214      	lsls	r4, r2, #8
    7d76:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7d78:	b10f      	cbz	r7, 7d7e <nrf_gpio_reconfigure+0x88>
    7d7a:	783f      	ldrb	r7, [r7, #0]
    7d7c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d7e:	432c      	orrs	r4, r5
    7d80:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7d82:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7d86:	b002      	add	sp, #8
    7d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007d8c <nrf_gpio_cfg_sense_set>:
{
    7d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7d8e:	f10d 030f 	add.w	r3, sp, #15
    7d92:	9301      	str	r3, [sp, #4]
    7d94:	2300      	movs	r3, #0
{
    7d96:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7d9a:	9300      	str	r3, [sp, #0]
    7d9c:	461a      	mov	r2, r3
    7d9e:	4619      	mov	r1, r3
    7da0:	f7ff ffa9 	bl	7cf6 <nrf_gpio_reconfigure>
}
    7da4:	b005      	add	sp, #20
    7da6:	f85d fb04 	ldr.w	pc, [sp], #4

00007daa <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7daa:	f7fc bc8b 	b.w	46c4 <_DoInit>

00007dae <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7dae:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7db0:	f7ff fffb 	bl	7daa <SEGGER_RTT_Init>

	return 0;
}
    7db4:	2000      	movs	r0, #0
    7db6:	bd08      	pop	{r3, pc}

00007db8 <z_device_state_init>:
}
    7db8:	4770      	bx	lr

00007dba <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7dba:	b138      	cbz	r0, 7dcc <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7dbc:	68c3      	ldr	r3, [r0, #12]
    7dbe:	8818      	ldrh	r0, [r3, #0]
    7dc0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7dc4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7dc8:	4258      	negs	r0, r3
    7dca:	4158      	adcs	r0, r3
}
    7dcc:	4770      	bx	lr

00007dce <z_early_memset>:
	(void) memset(dst, c, n);
    7dce:	f7ff bbb1 	b.w	7534 <memset>

00007dd2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7dd2:	f7ff bba4 	b.w	751e <memcpy>

00007dd6 <k_mem_slab_init>:
{
    7dd6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7dd8:	2400      	movs	r4, #0
    7dda:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7ddc:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7dde:	ea41 0402 	orr.w	r4, r1, r2
    7de2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7de6:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7dea:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7dec:	d10c      	bne.n	7e08 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7dee:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7df0:	42a3      	cmp	r3, r4
    7df2:	d103      	bne.n	7dfc <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7df4:	e9c0 0000 	strd	r0, r0, [r0]
}
    7df8:	2000      	movs	r0, #0
}
    7dfa:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7dfc:	6985      	ldr	r5, [r0, #24]
    7dfe:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7e00:	3401      	adds	r4, #1
		slab->free_list = p;
    7e02:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7e04:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7e06:	e7f3      	b.n	7df0 <k_mem_slab_init+0x1a>
		return -EINVAL;
    7e08:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7e0c:	e7f5      	b.n	7dfa <k_mem_slab_init+0x24>

00007e0e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7e0e:	f3ef 8005 	mrs	r0, IPSR
}
    7e12:	3800      	subs	r0, #0
    7e14:	bf18      	it	ne
    7e16:	2001      	movne	r0, #1
    7e18:	4770      	bx	lr

00007e1a <z_pm_save_idle_exit>:
{
    7e1a:	b508      	push	{r3, lr}
	pm_system_resume();
    7e1c:	f7f9 fba4 	bl	1568 <pm_system_resume>
}
    7e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7e24:	f7ff be35 	b.w	7a92 <sys_clock_idle_exit>

00007e28 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7e28:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7e2c:	428b      	cmp	r3, r1
    7e2e:	d001      	beq.n	7e34 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7e30:	f7fd bf86 	b.w	5d40 <z_set_prio>
}
    7e34:	2000      	movs	r0, #0
    7e36:	4770      	bx	lr

00007e38 <z_impl_k_mutex_init>:
{
    7e38:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7e3a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7e3c:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7e40:	e9c3 3300 	strd	r3, r3, [r3]
}
    7e44:	4770      	bx	lr

00007e46 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7e46:	4603      	mov	r3, r0
    7e48:	b920      	cbnz	r0, 7e54 <z_reschedule_irqlock+0xe>
    7e4a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7e4e:	b90a      	cbnz	r2, 7e54 <z_reschedule_irqlock+0xe>
    7e50:	f7f9 bdfc 	b.w	1a4c <arch_swap>
    7e54:	f383 8811 	msr	BASEPRI, r3
    7e58:	f3bf 8f6f 	isb	sy
}
    7e5c:	4770      	bx	lr

00007e5e <z_reschedule_unlocked>:
	__asm__ volatile(
    7e5e:	f04f 0320 	mov.w	r3, #32
    7e62:	f3ef 8011 	mrs	r0, BASEPRI
    7e66:	f383 8812 	msr	BASEPRI_MAX, r3
    7e6a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7e6e:	f7ff bfea 	b.w	7e46 <z_reschedule_irqlock>

00007e72 <z_priq_dumb_best>:
{
    7e72:	4603      	mov	r3, r0
	return list->head == list;
    7e74:	6800      	ldr	r0, [r0, #0]
}
    7e76:	4283      	cmp	r3, r0
    7e78:	bf08      	it	eq
    7e7a:	2000      	moveq	r0, #0
    7e7c:	4770      	bx	lr

00007e7e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7e7e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7e80:	f7fe fe8c 	bl	6b9c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7e84:	bd08      	pop	{r3, pc}

00007e86 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7e86:	b108      	cbz	r0, 7e8c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7e88:	f7fa ba2c 	b.w	22e4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7e8c:	4770      	bx	lr

00007e8e <k_timer_init>:
	timer->status = 0U;
    7e8e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7e90:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7e94:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7e98:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7e9c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7ea0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7ea2:	6343      	str	r3, [r0, #52]	; 0x34
}
    7ea4:	4770      	bx	lr

00007ea6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7ea6:	b510      	push	{r4, lr}
    7ea8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    7eaa:	f7fe fcd7 	bl	685c <z_abort_timeout>

	if (inactive) {
    7eae:	b9b0      	cbnz	r0, 7ede <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7eb2:	b10b      	cbz	r3, 7eb8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7eb4:	4620      	mov	r0, r4
    7eb6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7eb8:	f104 0018 	add.w	r0, r4, #24
    7ebc:	f7fe f8be 	bl	603c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7ec0:	b168      	cbz	r0, 7ede <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7ec2:	f7fd fd5d 	bl	5980 <z_ready_thread>
    7ec6:	f04f 0320 	mov.w	r3, #32
    7eca:	f3ef 8011 	mrs	r0, BASEPRI
    7ece:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7eda:	f7ff bfb4 	b.w	7e46 <z_reschedule_irqlock>
    7ede:	bd10      	pop	{r4, pc}

00007ee0 <k_heap_init>:
{
    7ee0:	b410      	push	{r4}
    7ee2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    7ee6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    7eea:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    7eec:	f7f8 be54 	b.w	b98 <sys_heap_init>

00007ef0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7ef0:	f7fb bd44 	b.w	397c <SystemInit>
