
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 21 00 20 f5 1e 00 00 7d 6c 00 00 c9 1e 00 00     .!. ....}l......
  10:	c9 1e 00 00 c9 1e 00 00 c9 1e 00 00 00 00 00 00     ................
	...
  2c:	25 1b 00 00 c9 1e 00 00 00 00 00 00 d1 1a 00 00     %...............
  3c:	c9 1e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  50:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  60:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  70:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  80:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  90:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  a0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  b0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  c0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  d0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  e0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................
  f0:	d5 1b 00 00 d5 1b 00 00 d5 1b 00 00 d5 1b 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x22>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <thread_A_code>:

} 

/* Thread code implementation */
void thread_A_code(void *argA , void *argB, void *argC)
{
     3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int64_t fin_time=0, release_time=0;

    /* Other variables */
    long int nact = 0;
    
    printk("Thread A init (periodic)\n");
     3e0:	481f      	ldr	r0, [pc, #124]	; (460 <CONFIG_FLASH_SIZE+0x60>)

    /* Thread loop */
    while(1) {
        
        /* Do the workload */          
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     3e2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 464 <CONFIG_FLASH_SIZE+0x64>
        
        ab++;
     3e6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 468 <CONFIG_FLASH_SIZE+0x68>
        printk("Thread A set ab value to: %d \n",ab);  
     3ea:	f8df a080 	ldr.w	sl, [pc, #128]	; 46c <CONFIG_FLASH_SIZE+0x6c>
    printk("Thread A init (periodic)\n");
     3ee:	f006 fb2f 	bl	6a50 <printk>
    release_time = k_uptime_get() + thread_A_period;
     3f2:	f006 fb0c 	bl	6a0e <k_uptime_get>
     3f6:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
     3fa:	f141 0600 	adc.w	r6, r1, #0
    long int nact = 0;
     3fe:	2700      	movs	r7, #0
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     400:	f006 fb05 	bl	6a0e <k_uptime_get>
     404:	3701      	adds	r7, #1
     406:	4602      	mov	r2, r0
     408:	460b      	mov	r3, r1
     40a:	4648      	mov	r0, r9
     40c:	4639      	mov	r1, r7
     40e:	f006 fb1f 	bl	6a50 <printk>
        ab++;
     412:	f8d8 1000 	ldr.w	r1, [r8]
        printk("Thread A set ab value to: %d \n",ab);  
     416:	4650      	mov	r0, sl
        ab++;
     418:	3101      	adds	r1, #1
     41a:	f8c8 1000 	str.w	r1, [r8]
        printk("Thread A set ab value to: %d \n",ab);  
     41e:	f006 fb17 	bl	6a50 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     422:	4813      	ldr	r0, [pc, #76]	; (470 <CONFIG_FLASH_SIZE+0x70>)
     424:	f004 fc40 	bl	4ca8 <z_impl_k_sem_give>
        
        k_sem_give(&sem_ab);

       
        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
     428:	f006 faf1 	bl	6a0e <k_uptime_get>
        if( fin_time < release_time) {
     42c:	42a0      	cmp	r0, r4
     42e:	eb71 0306 	sbcs.w	r3, r1, r6
     432:	dae5      	bge.n	400 <CONFIG_FLASH_SIZE>
            k_msleep(release_time - fin_time);
     434:	1a25      	subs	r5, r4, r0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     436:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     43a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
     43e:	f240 30e7 	movw	r0, #999	; 0x3e7
     442:	2100      	movs	r1, #0
     444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     448:	2300      	movs	r3, #0
     44a:	fbc5 010c 	smlal	r0, r1, r5, ip
     44e:	f7ff fe57 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     452:	f005 fcbb 	bl	5dcc <z_impl_k_sleep>
            release_time += thread_A_period;
     456:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     45a:	f146 0600 	adc.w	r6, r6, #0
     45e:	e7cf      	b.n	400 <CONFIG_FLASH_SIZE>
     460:	000077dc 	.word	0x000077dc
     464:	000077f6 	.word	0x000077f6
     468:	20000000 	.word	0x20000000
     46c:	0000782d 	.word	0x0000782d
     470:	20000470 	.word	0x20000470

00000474 <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     476:	4813      	ldr	r0, [pc, #76]	; (4c4 <thread_B_code+0x50>)
	return z_impl_k_sem_take(sem, timeout);
     478:	4f13      	ldr	r7, [pc, #76]	; (4c8 <thread_B_code+0x54>)
    while(1) {
        k_sem_take(&sem_ab,  K_FOREVER);
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     47a:	4e14      	ldr	r6, [pc, #80]	; (4cc <thread_B_code+0x58>)
        printk("Task B read ab value: %d\n",ab);
     47c:	4d14      	ldr	r5, [pc, #80]	; (4d0 <thread_B_code+0x5c>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     47e:	f006 fae7 	bl	6a50 <printk>
    long int nact = 0;
     482:	2400      	movs	r4, #0
     484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     48c:	4638      	mov	r0, r7
     48e:	f004 fc49 	bl	4d24 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     492:	f006 fabc 	bl	6a0e <k_uptime_get>
     496:	3401      	adds	r4, #1
     498:	4602      	mov	r2, r0
     49a:	460b      	mov	r3, r1
     49c:	4630      	mov	r0, r6
     49e:	4621      	mov	r1, r4
     4a0:	f006 fad6 	bl	6a50 <printk>
        printk("Task B read ab value: %d\n",ab);
     4a4:	6829      	ldr	r1, [r5, #0]
     4a6:	480b      	ldr	r0, [pc, #44]	; (4d4 <thread_B_code+0x60>)
     4a8:	f006 fad2 	bl	6a50 <printk>
        bc++;
     4ac:	4b0a      	ldr	r3, [pc, #40]	; (4d8 <thread_B_code+0x64>)
        printk("Thread B set bc value to: %d \n",bc);  
     4ae:	480b      	ldr	r0, [pc, #44]	; (4dc <thread_B_code+0x68>)
        bc++;
     4b0:	6819      	ldr	r1, [r3, #0]
     4b2:	3101      	adds	r1, #1
     4b4:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d \n",bc);  
     4b6:	f006 facb 	bl	6a50 <printk>
	z_impl_k_sem_give(sem);
     4ba:	4809      	ldr	r0, [pc, #36]	; (4e0 <thread_B_code+0x6c>)
     4bc:	f004 fbf4 	bl	4ca8 <z_impl_k_sem_give>
    while(1) {
     4c0:	e7e0      	b.n	484 <thread_B_code+0x10>
     4c2:	bf00      	nop
     4c4:	0000784c 	.word	0x0000784c
     4c8:	20000470 	.word	0x20000470
     4cc:	00007886 	.word	0x00007886
     4d0:	20000000 	.word	0x20000000
     4d4:	000078bb 	.word	0x000078bb
     4d8:	20000004 	.word	0x20000004
     4dc:	000078d5 	.word	0x000078d5
     4e0:	20000480 	.word	0x20000480

000004e4 <thread_C_code>:
        
  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     4e6:	480e      	ldr	r0, [pc, #56]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
	return z_impl_k_sem_take(sem, timeout);
     4e8:	4f0e      	ldr	r7, [pc, #56]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     4ea:	4e0f      	ldr	r6, [pc, #60]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
        printk("Task C read bc value: %d\n",bc);
     4ec:	4d0f      	ldr	r5, [pc, #60]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     4ee:	f006 faaf 	bl	6a50 <printk>
    long int nact = 0;
     4f2:	2400      	movs	r4, #0
     4f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     4fc:	4638      	mov	r0, r7
     4fe:	f004 fc11 	bl	4d24 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     502:	f006 fa84 	bl	6a0e <k_uptime_get>
     506:	3401      	adds	r4, #1
     508:	4602      	mov	r2, r0
     50a:	460b      	mov	r3, r1
     50c:	4630      	mov	r0, r6
     50e:	4621      	mov	r1, r4
     510:	f006 fa9e 	bl	6a50 <printk>
        printk("Task C read bc value: %d\n",bc);
     514:	6829      	ldr	r1, [r5, #0]
     516:	4806      	ldr	r0, [pc, #24]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     518:	f006 fa9a 	bl	6a50 <printk>
    while(1) {
     51c:	e7ea      	b.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     51e:	bf00      	nop
     520:	000078f4 	.word	0x000078f4
     524:	20000480 	.word	0x20000480
     528:	0000792e 	.word	0x0000792e
     52c:	20000004 	.word	0x20000004
     530:	00007964 	.word	0x00007964

00000534 <main>:
void main(void) {
     534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     538:	4823      	ldr	r0, [pc, #140]	; (5c8 <main+0x94>)
void main(void) {
     53a:	b088      	sub	sp, #32
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     53c:	f001 fea0 	bl	2280 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     540:	2201      	movs	r2, #1
     542:	2100      	movs	r1, #0
     544:	4821      	ldr	r0, [pc, #132]	; (5cc <main+0x98>)
     546:	f006 fecc 	bl	72e2 <z_impl_k_sem_init>
     54a:	2201      	movs	r2, #1
     54c:	2100      	movs	r1, #0
     54e:	4820      	ldr	r0, [pc, #128]	; (5d0 <main+0x9c>)
     550:	f006 fec7 	bl	72e2 <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     554:	2600      	movs	r6, #0
     556:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     558:	2400      	movs	r4, #0
     55a:	2501      	movs	r5, #1
     55c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     560:	e9cd 5403 	strd	r5, r4, [sp, #12]
     564:	e9cd 4401 	strd	r4, r4, [sp, #4]
     568:	4b1a      	ldr	r3, [pc, #104]	; (5d4 <main+0xa0>)
     56a:	491b      	ldr	r1, [pc, #108]	; (5d8 <main+0xa4>)
     56c:	9400      	str	r4, [sp, #0]
     56e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     572:	481a      	ldr	r0, [pc, #104]	; (5dc <main+0xa8>)
     574:	f004 f8aa 	bl	46cc <z_impl_k_thread_create>
     578:	4b19      	ldr	r3, [pc, #100]	; (5e0 <main+0xac>)
     57a:	6018      	str	r0, [r3, #0]
     57c:	4b19      	ldr	r3, [pc, #100]	; (5e4 <main+0xb0>)
     57e:	491a      	ldr	r1, [pc, #104]	; (5e8 <main+0xb4>)
     580:	9400      	str	r4, [sp, #0]
     582:	e9cd 6706 	strd	r6, r7, [sp, #24]
     586:	e9cd 5403 	strd	r5, r4, [sp, #12]
     58a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     58e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     592:	4816      	ldr	r0, [pc, #88]	; (5ec <main+0xb8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     594:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5f0 <main+0xbc>
     598:	f004 f898 	bl	46cc <z_impl_k_thread_create>
     59c:	f8c8 0000 	str.w	r0, [r8]
     5a0:	4b14      	ldr	r3, [pc, #80]	; (5f4 <main+0xc0>)
     5a2:	4915      	ldr	r1, [pc, #84]	; (5f8 <main+0xc4>)
     5a4:	9400      	str	r4, [sp, #0]
     5a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
     5aa:	e9cd 5403 	strd	r5, r4, [sp, #12]
     5ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
     5b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5b6:	4811      	ldr	r0, [pc, #68]	; (5fc <main+0xc8>)
     5b8:	f004 f888 	bl	46cc <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     5bc:	f8c8 0000 	str.w	r0, [r8]
} 
     5c0:	b008      	add	sp, #32
     5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5c6:	bf00      	nop
     5c8:	0000797e 	.word	0x0000797e
     5cc:	20000470 	.word	0x20000470
     5d0:	20000480 	.word	0x20000480
     5d4:	000003dd 	.word	0x000003dd
     5d8:	20001180 	.word	0x20001180
     5dc:	200001c8 	.word	0x200001c8
     5e0:	20000490 	.word	0x20000490
     5e4:	00000475 	.word	0x00000475
     5e8:	200015a0 	.word	0x200015a0
     5ec:	20000248 	.word	0x20000248
     5f0:	20000494 	.word	0x20000494
     5f4:	000004e5 	.word	0x000004e5
     5f8:	200019c0 	.word	0x200019c0
     5fc:	200002c8 	.word	0x200002c8

00000600 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     600:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     602:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     604:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     606:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     60a:	2c03      	cmp	r4, #3
{
     60c:	4605      	mov	r5, r0
	switch (method) {
     60e:	d002      	beq.n	616 <sys_notify_finalize+0x16>
     610:	b12c      	cbz	r4, 61e <sys_notify_finalize+0x1e>
     612:	2000      	movs	r0, #0
     614:	e000      	b.n	618 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     616:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     618:	2300      	movs	r3, #0
     61a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     61c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     61e:	4a05      	ldr	r2, [pc, #20]	; (634 <sys_notify_finalize+0x34>)
     620:	4905      	ldr	r1, [pc, #20]	; (638 <sys_notify_finalize+0x38>)
     622:	4806      	ldr	r0, [pc, #24]	; (63c <sys_notify_finalize+0x3c>)
     624:	2345      	movs	r3, #69	; 0x45
     626:	f006 fb0d 	bl	6c44 <assert_print>
     62a:	4802      	ldr	r0, [pc, #8]	; (634 <sys_notify_finalize+0x34>)
     62c:	2145      	movs	r1, #69	; 0x45
     62e:	f006 fb02 	bl	6c36 <assert_post_action>
     632:	e7ee      	b.n	612 <sys_notify_finalize+0x12>
     634:	000079b1 	.word	0x000079b1
     638:	00007a7c 	.word	0x00007a7c
     63c:	000079d4 	.word	0x000079d4

00000640 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     640:	680b      	ldr	r3, [r1, #0]
     642:	3301      	adds	r3, #1
     644:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     646:	4b01      	ldr	r3, [pc, #4]	; (64c <char_out+0xc>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	4718      	bx	r3
     64c:	20000008 	.word	0x20000008

00000650 <__printk_hook_install>:
	_char_out = fn;
     650:	4b01      	ldr	r3, [pc, #4]	; (658 <__printk_hook_install+0x8>)
     652:	6018      	str	r0, [r3, #0]
}
     654:	4770      	bx	lr
     656:	bf00      	nop
     658:	20000008 	.word	0x20000008

0000065c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     65c:	b507      	push	{r0, r1, r2, lr}
     65e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     660:	2100      	movs	r1, #0
{
     662:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     664:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     666:	4803      	ldr	r0, [pc, #12]	; (674 <vprintk+0x18>)
     668:	a901      	add	r1, sp, #4
     66a:	f000 fb53 	bl	d14 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     66e:	b003      	add	sp, #12
     670:	f85d fb04 	ldr.w	pc, [sp], #4
     674:	00000641 	.word	0x00000641

00000678 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     67c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     680:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     682:	f019 0f08 	tst.w	r9, #8
{
     686:	4604      	mov	r4, r0
	if (processing) {
     688:	d022      	beq.n	6d0 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
     68a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     68c:	bf0c      	ite	eq
     68e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     692:	f049 0920 	orrne.w	r9, r9, #32
     696:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     69a:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     69c:	4620      	mov	r0, r4
     69e:	f004 f8fb 	bl	4898 <z_spin_unlock_valid>
     6a2:	b968      	cbnz	r0, 6c0 <process_event+0x48>
     6a4:	4a9b      	ldr	r2, [pc, #620]	; (914 <CONFIG_ISR_STACK_SIZE+0x114>)
     6a6:	499c      	ldr	r1, [pc, #624]	; (918 <CONFIG_ISR_STACK_SIZE+0x118>)
     6a8:	489c      	ldr	r0, [pc, #624]	; (91c <CONFIG_ISR_STACK_SIZE+0x11c>)
     6aa:	23b9      	movs	r3, #185	; 0xb9
     6ac:	f006 faca 	bl	6c44 <assert_print>
     6b0:	489b      	ldr	r0, [pc, #620]	; (920 <CONFIG_ISR_STACK_SIZE+0x120>)
     6b2:	4621      	mov	r1, r4
     6b4:	f006 fac6 	bl	6c44 <assert_print>
     6b8:	4896      	ldr	r0, [pc, #600]	; (914 <CONFIG_ISR_STACK_SIZE+0x114>)
     6ba:	21b9      	movs	r1, #185	; 0xb9
     6bc:	f006 fabb 	bl	6c36 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     6c0:	9b00      	ldr	r3, [sp, #0]
     6c2:	f383 8811 	msr	BASEPRI, r3
     6c6:	f3bf 8f6f 	isb	sy
}
     6ca:	b003      	add	sp, #12
     6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     6d0:	4f94      	ldr	r7, [pc, #592]	; (924 <CONFIG_ISR_STACK_SIZE+0x124>)
     6d2:	f8df 8248 	ldr.w	r8, [pc, #584]	; 91c <CONFIG_ISR_STACK_SIZE+0x11c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6d6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     6da:	2902      	cmp	r1, #2
     6dc:	d106      	bne.n	6ec <process_event+0x74>
			evt = process_recheck(mgr);
     6de:	4620      	mov	r0, r4
     6e0:	f006 f9c3 	bl	6a6a <process_recheck>
		if (evt == EVT_NOP) {
     6e4:	2800      	cmp	r0, #0
     6e6:	d0d8      	beq.n	69a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     6e8:	2801      	cmp	r0, #1
     6ea:	d164      	bne.n	7b6 <process_event+0x13e>
			res = mgr->last_res;
     6ec:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6f0:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     6f2:	f1bb 0f00 	cmp.w	fp, #0
     6f6:	da19      	bge.n	72c <process_event+0xb4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     6f8:	2600      	movs	r6, #0
		*clients = mgr->clients;
     6fa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6fc:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     700:	e9c4 6600 	strd	r6, r6, [r4]
     704:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     708:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     70a:	8ba3      	ldrh	r3, [r4, #28]
     70c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     710:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     712:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
     714:	d003      	beq.n	71e <process_event+0xa6>
		if (do_monitors
     716:	68a2      	ldr	r2, [r4, #8]
     718:	2a00      	cmp	r2, #0
     71a:	f040 8113 	bne.w	944 <CONFIG_ISR_STACK_SIZE+0x144>
		    || !sys_slist_is_empty(&clients)
     71e:	b915      	cbnz	r5, 726 <process_event+0xae>
		    || (transit != NULL)) {
     720:	2e00      	cmp	r6, #0
     722:	f000 8159 	beq.w	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
     726:	f04f 0a00 	mov.w	sl, #0
     72a:	e10d      	b.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     72c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     730:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     732:	2901      	cmp	r1, #1
     734:	d820      	bhi.n	778 <process_event+0x100>
	list->head = NULL;
     736:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     738:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     73c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     73e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     740:	b29b      	uxth	r3, r3
	list->tail = NULL;
     742:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     746:	d10a      	bne.n	75e <process_event+0xe6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     748:	b13d      	cbz	r5, 75a <process_event+0xe2>
     74a:	8be2      	ldrh	r2, [r4, #30]
     74c:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     74e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     750:	3201      	adds	r2, #1
     752:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     754:	2900      	cmp	r1, #0
     756:	d1fa      	bne.n	74e <process_event+0xd6>
     758:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     75a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     75e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     760:	4620      	mov	r0, r4
     762:	f006 f982 	bl	6a6a <process_recheck>
     766:	4606      	mov	r6, r0
     768:	2800      	cmp	r0, #0
     76a:	d0ce      	beq.n	70a <process_event+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     76c:	8ba3      	ldrh	r3, [r4, #28]
     76e:	f043 0320 	orr.w	r3, r3, #32
     772:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     774:	2600      	movs	r6, #0
     776:	e7c8      	b.n	70a <process_event+0x92>
	} else if (state == ONOFF_STATE_TO_OFF) {
     778:	2a04      	cmp	r2, #4
     77a:	d10d      	bne.n	798 <process_event+0x120>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     77c:	f023 0307 	bic.w	r3, r3, #7
     780:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     782:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     784:	4620      	mov	r0, r4
     786:	f006 f970 	bl	6a6a <process_recheck>
     78a:	4605      	mov	r5, r0
     78c:	b188      	cbz	r0, 7b2 <process_event+0x13a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     78e:	f042 0220 	orr.w	r2, r2, #32
     792:	83a2      	strh	r2, [r4, #28]
     794:	2500      	movs	r5, #0
     796:	e7ed      	b.n	774 <process_event+0xfc>
		__ASSERT_NO_MSG(false);
     798:	4963      	ldr	r1, [pc, #396]	; (928 <CONFIG_ISR_STACK_SIZE+0x128>)
     79a:	f240 131b 	movw	r3, #283	; 0x11b
     79e:	463a      	mov	r2, r7
     7a0:	4640      	mov	r0, r8
     7a2:	f006 fa4f 	bl	6c44 <assert_print>
     7a6:	f240 111b 	movw	r1, #283	; 0x11b
     7aa:	4638      	mov	r0, r7
     7ac:	f006 fa43 	bl	6c36 <assert_post_action>
     7b0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     7b2:	462e      	mov	r6, r5
     7b4:	e7a9      	b.n	70a <process_event+0x92>
		} else if (evt == EVT_START) {
     7b6:	2803      	cmp	r0, #3
     7b8:	d134      	bne.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     7ba:	f1b9 0f00 	cmp.w	r9, #0
     7be:	d00b      	beq.n	7d8 <process_event+0x160>
     7c0:	495a      	ldr	r1, [pc, #360]	; (92c <CONFIG_ISR_STACK_SIZE+0x12c>)
     7c2:	4640      	mov	r0, r8
     7c4:	f44f 73ab 	mov.w	r3, #342	; 0x156
     7c8:	463a      	mov	r2, r7
     7ca:	f006 fa3b 	bl	6c44 <assert_print>
     7ce:	f44f 71ab 	mov.w	r1, #342	; 0x156
     7d2:	4638      	mov	r0, r7
     7d4:	f006 fa2f 	bl	6c36 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7d8:	6823      	ldr	r3, [r4, #0]
     7da:	b95b      	cbnz	r3, 7f4 <process_event+0x17c>
     7dc:	4954      	ldr	r1, [pc, #336]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     7de:	4640      	mov	r0, r8
     7e0:	f240 1357 	movw	r3, #343	; 0x157
     7e4:	463a      	mov	r2, r7
     7e6:	f006 fa2d 	bl	6c44 <assert_print>
     7ea:	f240 1157 	movw	r1, #343	; 0x157
     7ee:	4638      	mov	r0, r7
     7f0:	f006 fa21 	bl	6c36 <assert_post_action>
			transit = mgr->transitions->start;
     7f4:	6923      	ldr	r3, [r4, #16]
     7f6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     7f8:	b95e      	cbnz	r6, 812 <CONFIG_ISR_STACK_SIZE+0x12>
     7fa:	494e      	ldr	r1, [pc, #312]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     7fc:	4640      	mov	r0, r8
     7fe:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     802:	463a      	mov	r2, r7
     804:	f006 fa1e 	bl	6c44 <assert_print>
     808:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     80c:	4638      	mov	r0, r7
     80e:	f006 fa12 	bl	6c36 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     812:	8ba3      	ldrh	r3, [r4, #28]
     814:	f023 0307 	bic.w	r3, r3, #7
     818:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     81c:	83a3      	strh	r3, [r4, #28]
}
     81e:	2500      	movs	r5, #0
		res = 0;
     820:	46ab      	mov	fp, r5
}
     822:	e772      	b.n	70a <process_event+0x92>
		} else if (evt == EVT_STOP) {
     824:	2804      	cmp	r0, #4
     826:	d131      	bne.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     828:	f1b9 0f02 	cmp.w	r9, #2
     82c:	d00b      	beq.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
     82e:	4942      	ldr	r1, [pc, #264]	; (938 <CONFIG_ISR_STACK_SIZE+0x138>)
     830:	4640      	mov	r0, r8
     832:	f240 135d 	movw	r3, #349	; 0x15d
     836:	463a      	mov	r2, r7
     838:	f006 fa04 	bl	6c44 <assert_print>
     83c:	f240 115d 	movw	r1, #349	; 0x15d
     840:	4638      	mov	r0, r7
     842:	f006 f9f8 	bl	6c36 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     846:	8be3      	ldrh	r3, [r4, #30]
     848:	b15b      	cbz	r3, 862 <CONFIG_ISR_STACK_SIZE+0x62>
     84a:	493c      	ldr	r1, [pc, #240]	; (93c <CONFIG_ISR_STACK_SIZE+0x13c>)
     84c:	4640      	mov	r0, r8
     84e:	f44f 73af 	mov.w	r3, #350	; 0x15e
     852:	463a      	mov	r2, r7
     854:	f006 f9f6 	bl	6c44 <assert_print>
     858:	f44f 71af 	mov.w	r1, #350	; 0x15e
     85c:	4638      	mov	r0, r7
     85e:	f006 f9ea 	bl	6c36 <assert_post_action>
			transit = mgr->transitions->stop;
     862:	6923      	ldr	r3, [r4, #16]
     864:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     866:	b95e      	cbnz	r6, 880 <CONFIG_ISR_STACK_SIZE+0x80>
     868:	4932      	ldr	r1, [pc, #200]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     86a:	4640      	mov	r0, r8
     86c:	f240 1361 	movw	r3, #353	; 0x161
     870:	463a      	mov	r2, r7
     872:	f006 f9e7 	bl	6c44 <assert_print>
     876:	f240 1161 	movw	r1, #353	; 0x161
     87a:	4638      	mov	r0, r7
     87c:	f006 f9db 	bl	6c36 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     880:	8ba3      	ldrh	r3, [r4, #28]
     882:	f023 0307 	bic.w	r3, r3, #7
     886:	f043 0304 	orr.w	r3, r3, #4
     88a:	e7c7      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		} else if (evt == EVT_RESET) {
     88c:	2805      	cmp	r0, #5
     88e:	d131      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     890:	f1b9 0f01 	cmp.w	r9, #1
     894:	d00b      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
     896:	492a      	ldr	r1, [pc, #168]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     898:	4640      	mov	r0, r8
     89a:	f44f 73b2 	mov.w	r3, #356	; 0x164
     89e:	463a      	mov	r2, r7
     8a0:	f006 f9d0 	bl	6c44 <assert_print>
     8a4:	f44f 71b2 	mov.w	r1, #356	; 0x164
     8a8:	4638      	mov	r0, r7
     8aa:	f006 f9c4 	bl	6c36 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     8ae:	6823      	ldr	r3, [r4, #0]
     8b0:	b95b      	cbnz	r3, 8ca <CONFIG_ISR_STACK_SIZE+0xca>
     8b2:	491f      	ldr	r1, [pc, #124]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     8b4:	4640      	mov	r0, r8
     8b6:	f240 1365 	movw	r3, #357	; 0x165
     8ba:	463a      	mov	r2, r7
     8bc:	f006 f9c2 	bl	6c44 <assert_print>
     8c0:	f240 1165 	movw	r1, #357	; 0x165
     8c4:	4638      	mov	r0, r7
     8c6:	f006 f9b6 	bl	6c36 <assert_post_action>
			transit = mgr->transitions->reset;
     8ca:	6923      	ldr	r3, [r4, #16]
     8cc:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     8ce:	b95e      	cbnz	r6, 8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     8d0:	4918      	ldr	r1, [pc, #96]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     8d2:	4640      	mov	r0, r8
     8d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
     8d8:	463a      	mov	r2, r7
     8da:	f006 f9b3 	bl	6c44 <assert_print>
     8de:	f44f 71b4 	mov.w	r1, #360	; 0x168
     8e2:	4638      	mov	r0, r7
     8e4:	f006 f9a7 	bl	6c36 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8e8:	8ba3      	ldrh	r3, [r4, #28]
     8ea:	f023 0307 	bic.w	r3, r3, #7
     8ee:	f043 0305 	orr.w	r3, r3, #5
     8f2:	e793      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
			__ASSERT_NO_MSG(false);
     8f4:	490c      	ldr	r1, [pc, #48]	; (928 <CONFIG_ISR_STACK_SIZE+0x128>)
     8f6:	f240 136b 	movw	r3, #363	; 0x16b
     8fa:	463a      	mov	r2, r7
     8fc:	4640      	mov	r0, r8
     8fe:	f006 f9a1 	bl	6c44 <assert_print>
     902:	2500      	movs	r5, #0
     904:	f240 116b 	movw	r1, #363	; 0x16b
     908:	4638      	mov	r0, r7
     90a:	f006 f994 	bl	6c36 <assert_post_action>
		onoff_transition_fn transit = NULL;
     90e:	462e      	mov	r6, r5
     910:	e786      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     912:	bf00      	nop
     914:	00007a94 	.word	0x00007a94
     918:	00007ac1 	.word	0x00007ac1
     91c:	000079d4 	.word	0x000079d4
     920:	00007ad8 	.word	0x00007ad8
     924:	000079f1 	.word	0x000079f1
     928:	00007a7c 	.word	0x00007a7c
     92c:	00007a13 	.word	0x00007a13
     930:	00007a1f 	.word	0x00007a1f
     934:	00007a42 	.word	0x00007a42
     938:	00007a59 	.word	0x00007a59
     93c:	00007a6f 	.word	0x00007a6f
     940:	00007a7e 	.word	0x00007a7e
				   && !sys_slist_is_empty(&mgr->monitors);
     944:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     948:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     94c:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
     950:	83a3      	strh	r3, [r4, #28]
     952:	4648      	mov	r0, r9
     954:	f003 ffa0 	bl	4898 <z_spin_unlock_valid>
     958:	b968      	cbnz	r0, 976 <CONFIG_ISR_STACK_SIZE+0x176>
     95a:	4a38      	ldr	r2, [pc, #224]	; (a3c <CONFIG_ISR_STACK_SIZE+0x23c>)
     95c:	4938      	ldr	r1, [pc, #224]	; (a40 <CONFIG_ISR_STACK_SIZE+0x240>)
     95e:	23b9      	movs	r3, #185	; 0xb9
     960:	4640      	mov	r0, r8
     962:	f006 f96f 	bl	6c44 <assert_print>
     966:	4837      	ldr	r0, [pc, #220]	; (a44 <CONFIG_ISR_STACK_SIZE+0x244>)
     968:	4649      	mov	r1, r9
     96a:	f006 f96b 	bl	6c44 <assert_print>
     96e:	4833      	ldr	r0, [pc, #204]	; (a3c <CONFIG_ISR_STACK_SIZE+0x23c>)
     970:	21b9      	movs	r1, #185	; 0xb9
     972:	f006 f960 	bl	6c36 <assert_post_action>
     976:	9b00      	ldr	r3, [sp, #0]
     978:	f383 8811 	msr	BASEPRI, r3
     97c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     980:	f1ba 0f00 	cmp.w	sl, #0
     984:	d137      	bne.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
	while (!sys_slist_is_empty(list)) {
     986:	2d00      	cmp	r5, #0
     988:	d147      	bne.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
			if (transit != NULL) {
     98a:	b116      	cbz	r6, 992 <CONFIG_ISR_STACK_SIZE+0x192>
				transit(mgr, transition_complete);
     98c:	492e      	ldr	r1, [pc, #184]	; (a48 <CONFIG_ISR_STACK_SIZE+0x248>)
     98e:	4620      	mov	r0, r4
     990:	47b0      	blx	r6
	__asm__ volatile(
     992:	f04f 0320 	mov.w	r3, #32
     996:	f3ef 8b11 	mrs	fp, BASEPRI
     99a:	f383 8812 	msr	BASEPRI_MAX, r3
     99e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9a2:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
     9a4:	f8cd b000 	str.w	fp, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9a8:	f003 ff68 	bl	487c <z_spin_lock_valid>
     9ac:	b968      	cbnz	r0, 9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
     9ae:	4a23      	ldr	r2, [pc, #140]	; (a3c <CONFIG_ISR_STACK_SIZE+0x23c>)
     9b0:	4926      	ldr	r1, [pc, #152]	; (a4c <CONFIG_ISR_STACK_SIZE+0x24c>)
     9b2:	238e      	movs	r3, #142	; 0x8e
     9b4:	4640      	mov	r0, r8
     9b6:	f006 f945 	bl	6c44 <assert_print>
     9ba:	4825      	ldr	r0, [pc, #148]	; (a50 <CONFIG_ISR_STACK_SIZE+0x250>)
     9bc:	4649      	mov	r1, r9
     9be:	f006 f941 	bl	6c44 <assert_print>
     9c2:	481e      	ldr	r0, [pc, #120]	; (a3c <CONFIG_ISR_STACK_SIZE+0x23c>)
     9c4:	218e      	movs	r1, #142	; 0x8e
     9c6:	f006 f936 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
     9ca:	4648      	mov	r0, r9
     9cc:	f003 ff74 	bl	48b8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     9d0:	8ba3      	ldrh	r3, [r4, #28]
     9d2:	f023 0308 	bic.w	r3, r3, #8
     9d6:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     9d8:	8ba3      	ldrh	r3, [r4, #28]
     9da:	06da      	lsls	r2, r3, #27
     9dc:	d525      	bpl.n	a2a <CONFIG_ISR_STACK_SIZE+0x22a>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     9de:	f023 0310 	bic.w	r3, r3, #16
     9e2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     9e4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     9e6:	f8b4 901c 	ldrh.w	r9, [r4, #28]
     9ea:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     9ee:	2900      	cmp	r1, #0
     9f0:	f47f ae73 	bne.w	6da <process_event+0x62>
out:
     9f4:	e651      	b.n	69a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     9f6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9f8:	2900      	cmp	r1, #0
     9fa:	d0c4      	beq.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
	return node->next;
     9fc:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
     a00:	684b      	ldr	r3, [r1, #4]
     a02:	9a01      	ldr	r2, [sp, #4]
     a04:	469c      	mov	ip, r3
     a06:	4620      	mov	r0, r4
     a08:	465b      	mov	r3, fp
     a0a:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a0c:	f1ba 0f00 	cmp.w	sl, #0
     a10:	d0b9      	beq.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
     a12:	4651      	mov	r1, sl
     a14:	f8da a000 	ldr.w	sl, [sl]
     a18:	e7f2      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
     a1a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     a1c:	9a01      	ldr	r2, [sp, #4]
     a1e:	682d      	ldr	r5, [r5, #0]
     a20:	465b      	mov	r3, fp
     a22:	4620      	mov	r0, r4
     a24:	f006 f83d 	bl	6aa2 <notify_one>
     a28:	e7ad      	b.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a2a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a2e:	bf1e      	ittt	ne
     a30:	f023 0320 	bicne.w	r3, r3, #32
     a34:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     a36:	2102      	movne	r1, #2
     a38:	e7d5      	b.n	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     a3a:	bf00      	nop
     a3c:	00007a94 	.word	0x00007a94
     a40:	00007ac1 	.word	0x00007ac1
     a44:	00007ad8 	.word	0x00007ad8
     a48:	00000a55 	.word	0x00000a55
     a4c:	00007aed 	.word	0x00007aed
     a50:	00007b02 	.word	0x00007b02

00000a54 <transition_complete>:
{
     a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a56:	4604      	mov	r4, r0
     a58:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a5a:	f100 0614 	add.w	r6, r0, #20
     a5e:	f04f 0320 	mov.w	r3, #32
     a62:	f3ef 8711 	mrs	r7, BASEPRI
     a66:	f383 8812 	msr	BASEPRI_MAX, r3
     a6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a6e:	4630      	mov	r0, r6
     a70:	f003 ff04 	bl	487c <z_spin_lock_valid>
     a74:	b968      	cbnz	r0, a92 <transition_complete+0x3e>
     a76:	4a0c      	ldr	r2, [pc, #48]	; (aa8 <transition_complete+0x54>)
     a78:	490c      	ldr	r1, [pc, #48]	; (aac <transition_complete+0x58>)
     a7a:	480d      	ldr	r0, [pc, #52]	; (ab0 <transition_complete+0x5c>)
     a7c:	238e      	movs	r3, #142	; 0x8e
     a7e:	f006 f8e1 	bl	6c44 <assert_print>
     a82:	480c      	ldr	r0, [pc, #48]	; (ab4 <transition_complete+0x60>)
     a84:	4631      	mov	r1, r6
     a86:	f006 f8dd 	bl	6c44 <assert_print>
     a8a:	4807      	ldr	r0, [pc, #28]	; (aa8 <transition_complete+0x54>)
     a8c:	218e      	movs	r1, #142	; 0x8e
     a8e:	f006 f8d2 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
     a92:	4630      	mov	r0, r6
     a94:	f003 ff10 	bl	48b8 <z_spin_lock_set_owner>
	mgr->last_res = res;
     a98:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     a9a:	463a      	mov	r2, r7
     a9c:	4620      	mov	r0, r4
     a9e:	2101      	movs	r1, #1
}
     aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     aa4:	f7ff bde8 	b.w	678 <process_event>
     aa8:	00007a94 	.word	0x00007a94
     aac:	00007aed 	.word	0x00007aed
     ab0:	000079d4 	.word	0x000079d4
     ab4:	00007b02 	.word	0x00007b02

00000ab8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     abc:	4604      	mov	r4, r0
     abe:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     ac0:	f006 f805 	bl	6ace <validate_args>

	if (rv < 0) {
     ac4:	1e05      	subs	r5, r0, #0
     ac6:	db5e      	blt.n	b86 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     ac8:	f104 0914 	add.w	r9, r4, #20
     acc:	f04f 0320 	mov.w	r3, #32
     ad0:	f3ef 8a11 	mrs	sl, BASEPRI
     ad4:	f383 8812 	msr	BASEPRI_MAX, r3
     ad8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     adc:	4648      	mov	r0, r9
     ade:	f003 fecd 	bl	487c <z_spin_lock_valid>
     ae2:	b968      	cbnz	r0, b00 <onoff_request+0x48>
     ae4:	4a38      	ldr	r2, [pc, #224]	; (bc8 <onoff_request+0x110>)
     ae6:	4939      	ldr	r1, [pc, #228]	; (bcc <onoff_request+0x114>)
     ae8:	4839      	ldr	r0, [pc, #228]	; (bd0 <onoff_request+0x118>)
     aea:	238e      	movs	r3, #142	; 0x8e
     aec:	f006 f8aa 	bl	6c44 <assert_print>
     af0:	4838      	ldr	r0, [pc, #224]	; (bd4 <onoff_request+0x11c>)
     af2:	4649      	mov	r1, r9
     af4:	f006 f8a6 	bl	6c44 <assert_print>
     af8:	4833      	ldr	r0, [pc, #204]	; (bc8 <onoff_request+0x110>)
     afa:	218e      	movs	r1, #142	; 0x8e
     afc:	f006 f89b 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
     b00:	4648      	mov	r0, r9
     b02:	f003 fed9 	bl	48b8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     b06:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b08:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     b0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b0e:	428b      	cmp	r3, r1
     b10:	f002 0607 	and.w	r6, r2, #7
     b14:	d050      	beq.n	bb8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     b16:	2e02      	cmp	r6, #2
     b18:	d124      	bne.n	b64 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     b1a:	3301      	adds	r3, #1
     b1c:	83e3      	strh	r3, [r4, #30]
	rv = state;
     b1e:	4635      	mov	r5, r6
		notify = true;
     b20:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     b24:	4648      	mov	r0, r9
     b26:	f003 feb7 	bl	4898 <z_spin_unlock_valid>
     b2a:	b968      	cbnz	r0, b48 <onoff_request+0x90>
     b2c:	4a26      	ldr	r2, [pc, #152]	; (bc8 <onoff_request+0x110>)
     b2e:	492a      	ldr	r1, [pc, #168]	; (bd8 <onoff_request+0x120>)
     b30:	4827      	ldr	r0, [pc, #156]	; (bd0 <onoff_request+0x118>)
     b32:	23b9      	movs	r3, #185	; 0xb9
     b34:	f006 f886 	bl	6c44 <assert_print>
     b38:	4828      	ldr	r0, [pc, #160]	; (bdc <onoff_request+0x124>)
     b3a:	4649      	mov	r1, r9
     b3c:	f006 f882 	bl	6c44 <assert_print>
     b40:	4821      	ldr	r0, [pc, #132]	; (bc8 <onoff_request+0x110>)
     b42:	21b9      	movs	r1, #185	; 0xb9
     b44:	f006 f877 	bl	6c36 <assert_post_action>
	__asm__ volatile(
     b48:	f38a 8811 	msr	BASEPRI, sl
     b4c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     b50:	f1b8 0f00 	cmp.w	r8, #0
     b54:	d017      	beq.n	b86 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
     b56:	2300      	movs	r3, #0
     b58:	4632      	mov	r2, r6
     b5a:	4639      	mov	r1, r7
     b5c:	4620      	mov	r0, r4
     b5e:	f005 ffa0 	bl	6aa2 <notify_one>
     b62:	e010      	b.n	b86 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
     b64:	0793      	lsls	r3, r2, #30
     b66:	d001      	beq.n	b6c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
     b68:	2e06      	cmp	r6, #6
     b6a:	d10f      	bne.n	b8c <onoff_request+0xd4>
	parent->next = child;
     b6c:	2300      	movs	r3, #0
     b6e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     b70:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     b72:	b9f3      	cbnz	r3, bb2 <onoff_request+0xfa>
	list->head = node;
     b74:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     b78:	4635      	mov	r5, r6
     b7a:	b9fe      	cbnz	r6, bbc <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
     b7c:	4652      	mov	r2, sl
     b7e:	2102      	movs	r1, #2
     b80:	4620      	mov	r0, r4
     b82:	f7ff fd79 	bl	678 <process_event>
		}
	}

	return rv;
}
     b86:	4628      	mov	r0, r5
     b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     b8c:	2e05      	cmp	r6, #5
     b8e:	d018      	beq.n	bc2 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b90:	2e01      	cmp	r6, #1
     b92:	d00b      	beq.n	bac <onoff_request+0xf4>
     b94:	4912      	ldr	r1, [pc, #72]	; (be0 <onoff_request+0x128>)
     b96:	480e      	ldr	r0, [pc, #56]	; (bd0 <onoff_request+0x118>)
     b98:	4a12      	ldr	r2, [pc, #72]	; (be4 <onoff_request+0x12c>)
     b9a:	f240 13c9 	movw	r3, #457	; 0x1c9
     b9e:	f006 f851 	bl	6c44 <assert_print>
     ba2:	4810      	ldr	r0, [pc, #64]	; (be4 <onoff_request+0x12c>)
     ba4:	f240 11c9 	movw	r1, #457	; 0x1c9
     ba8:	f006 f845 	bl	6c36 <assert_post_action>
		rv = -EIO;
     bac:	f06f 0504 	mvn.w	r5, #4
     bb0:	e004      	b.n	bbc <onoff_request+0x104>
	parent->next = child;
     bb2:	601f      	str	r7, [r3, #0]
	list->tail = node;
     bb4:	6067      	str	r7, [r4, #4]
}
     bb6:	e7df      	b.n	b78 <onoff_request+0xc0>
		rv = -EAGAIN;
     bb8:	f06f 050a 	mvn.w	r5, #10
     bbc:	f04f 0800 	mov.w	r8, #0
     bc0:	e7b0      	b.n	b24 <onoff_request+0x6c>
		rv = -ENOTSUP;
     bc2:	f06f 0585 	mvn.w	r5, #133	; 0x85
     bc6:	e7f9      	b.n	bbc <onoff_request+0x104>
     bc8:	00007a94 	.word	0x00007a94
     bcc:	00007aed 	.word	0x00007aed
     bd0:	000079d4 	.word	0x000079d4
     bd4:	00007b02 	.word	0x00007b02
     bd8:	00007ac1 	.word	0x00007ac1
     bdc:	00007ad8 	.word	0x00007ad8
     be0:	00007a7e 	.word	0x00007a7e
     be4:	000079f1 	.word	0x000079f1

00000be8 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     be8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
     bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bf0:	4604      	mov	r4, r0
     bf2:	460e      	mov	r6, r1
     bf4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     bf6:	d36a      	bcc.n	cce <sys_heap_init+0xe6>
     bf8:	493e      	ldr	r1, [pc, #248]	; (cf4 <sys_heap_init+0x10c>)
     bfa:	4a3f      	ldr	r2, [pc, #252]	; (cf8 <sys_heap_init+0x110>)
     bfc:	483f      	ldr	r0, [pc, #252]	; (cfc <sys_heap_init+0x114>)
     bfe:	f240 13e3 	movw	r3, #483	; 0x1e3
     c02:	f006 f81f 	bl	6c44 <assert_print>
     c06:	483e      	ldr	r0, [pc, #248]	; (d00 <sys_heap_init+0x118>)
     c08:	f006 f81c 	bl	6c44 <assert_print>
     c0c:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     c10:	4839      	ldr	r0, [pc, #228]	; (cf8 <sys_heap_init+0x110>)
     c12:	f006 f810 	bl	6c36 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
     c16:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     c18:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     c1a:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     c1c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     c20:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     c24:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     c26:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     c28:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     c2c:	d80e      	bhi.n	c4c <sys_heap_init+0x64>
     c2e:	4935      	ldr	r1, [pc, #212]	; (d04 <sys_heap_init+0x11c>)
     c30:	4a31      	ldr	r2, [pc, #196]	; (cf8 <sys_heap_init+0x110>)
     c32:	4832      	ldr	r0, [pc, #200]	; (cfc <sys_heap_init+0x114>)
     c34:	f240 13f3 	movw	r3, #499	; 0x1f3
     c38:	f006 f804 	bl	6c44 <assert_print>
     c3c:	4832      	ldr	r0, [pc, #200]	; (d08 <sys_heap_init+0x120>)
     c3e:	f006 f801 	bl	6c44 <assert_print>
     c42:	482d      	ldr	r0, [pc, #180]	; (cf8 <sys_heap_init+0x110>)
     c44:	f240 11f3 	movw	r1, #499	; 0x1f3
     c48:	f005 fff5 	bl	6c36 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
     c4c:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
     c4e:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     c52:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     c56:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
     c5a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     c5c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
     c5e:	2300      	movs	r3, #0
     c60:	08e4      	lsrs	r4, r4, #3
     c62:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     c64:	1c63      	adds	r3, r4, #1
     c66:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
     c68:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     c6a:	d90e      	bls.n	c8a <sys_heap_init+0xa2>
     c6c:	4927      	ldr	r1, [pc, #156]	; (d0c <sys_heap_init+0x124>)
     c6e:	4a22      	ldr	r2, [pc, #136]	; (cf8 <sys_heap_init+0x110>)
     c70:	4822      	ldr	r0, [pc, #136]	; (cfc <sys_heap_init+0x114>)
     c72:	f44f 7301 	mov.w	r3, #516	; 0x204
     c76:	f005 ffe5 	bl	6c44 <assert_print>
     c7a:	4823      	ldr	r0, [pc, #140]	; (d08 <sys_heap_init+0x120>)
     c7c:	f005 ffe2 	bl	6c44 <assert_print>
     c80:	481d      	ldr	r0, [pc, #116]	; (cf8 <sys_heap_init+0x110>)
     c82:	f44f 7101 	mov.w	r1, #516	; 0x204
     c86:	f005 ffd6 	bl	6c36 <assert_post_action>
     c8a:	f105 0310 	add.w	r3, r5, #16
     c8e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     c92:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
     c94:	4598      	cmp	r8, r3
     c96:	d129      	bne.n	cec <sys_heap_init+0x104>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     c98:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     c9a:	f043 0301 	orr.w	r3, r3, #1
     c9e:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
     ca0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     ca4:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     ca6:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
     ca8:	802a      	strh	r2, [r5, #0]
     caa:	8048      	strh	r0, [r1, #2]
     cac:	19a9      	adds	r1, r5, r6
     cae:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
     cb2:	804a      	strh	r2, [r1, #2]
     cb4:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
     cb6:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
     cba:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     cbc:	885a      	ldrh	r2, [r3, #2]
     cbe:	f042 0201 	orr.w	r2, r2, #1
     cc2:	4628      	mov	r0, r5
     cc4:	805a      	strh	r2, [r3, #2]
}
     cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
     cca:	f005 bf31 	b.w	6b30 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     cce:	2a04      	cmp	r2, #4
     cd0:	d8a1      	bhi.n	c16 <sys_heap_init+0x2e>
     cd2:	490f      	ldr	r1, [pc, #60]	; (d10 <sys_heap_init+0x128>)
     cd4:	4a08      	ldr	r2, [pc, #32]	; (cf8 <sys_heap_init+0x110>)
     cd6:	4809      	ldr	r0, [pc, #36]	; (cfc <sys_heap_init+0x114>)
     cd8:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
     cdc:	f005 ffb2 	bl	6c44 <assert_print>
     ce0:	4809      	ldr	r0, [pc, #36]	; (d08 <sys_heap_init+0x120>)
     ce2:	f005 ffaf 	bl	6c44 <assert_print>
     ce6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
     cea:	e791      	b.n	c10 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
     cec:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
     cf0:	e7d0      	b.n	c94 <sys_heap_init+0xac>
     cf2:	bf00      	nop
     cf4:	00007be6 	.word	0x00007be6
     cf8:	00007b1a 	.word	0x00007b1a
     cfc:	000079d4 	.word	0x000079d4
     d00:	00007bfc 	.word	0x00007bfc
     d04:	00007c4d 	.word	0x00007c4d
     d08:	00007c34 	.word	0x00007c34
     d0c:	00007c76 	.word	0x00007c76
     d10:	00007c13 	.word	0x00007c13

00000d14 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d18:	b091      	sub	sp, #68	; 0x44
     d1a:	468b      	mov	fp, r1
     d1c:	9002      	str	r0, [sp, #8]
     d1e:	4692      	mov	sl, r2
     d20:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     d22:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     d24:	f89a 0000 	ldrb.w	r0, [sl]
     d28:	b908      	cbnz	r0, d2e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     d2a:	4628      	mov	r0, r5
     d2c:	e35f      	b.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
		if (*fp != '%') {
     d2e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     d30:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     d34:	d007      	beq.n	d46 <cbvprintf+0x32>
			OUTC('%');
     d36:	9b02      	ldr	r3, [sp, #8]
     d38:	4659      	mov	r1, fp
     d3a:	4798      	blx	r3
     d3c:	2800      	cmp	r0, #0
     d3e:	f2c0 8356 	blt.w	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
     d42:	3501      	adds	r5, #1
			break;
     d44:	e212      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
		} state = {
     d46:	2218      	movs	r2, #24
     d48:	2100      	movs	r1, #0
     d4a:	a80a      	add	r0, sp, #40	; 0x28
     d4c:	f005 ffc2 	bl	6cd4 <memset>
	if (*sp == '%') {
     d50:	f89a 3001 	ldrb.w	r3, [sl, #1]
     d54:	2b25      	cmp	r3, #37	; 0x25
     d56:	d078      	beq.n	e4a <cbvprintf+0x136>
     d58:	2200      	movs	r2, #0
     d5a:	4610      	mov	r0, r2
     d5c:	4696      	mov	lr, r2
     d5e:	4694      	mov	ip, r2
     d60:	4616      	mov	r6, r2
     d62:	4639      	mov	r1, r7
		switch (*sp) {
     d64:	f817 3b01 	ldrb.w	r3, [r7], #1
     d68:	2b2b      	cmp	r3, #43	; 0x2b
     d6a:	f000 809d 	beq.w	ea8 <cbvprintf+0x194>
     d6e:	f200 8094 	bhi.w	e9a <cbvprintf+0x186>
     d72:	2b20      	cmp	r3, #32
     d74:	f000 809b 	beq.w	eae <cbvprintf+0x19a>
     d78:	2b23      	cmp	r3, #35	; 0x23
     d7a:	f000 809b 	beq.w	eb4 <cbvprintf+0x1a0>
     d7e:	b12e      	cbz	r6, d8c <cbvprintf+0x78>
     d80:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d84:	f046 0604 	orr.w	r6, r6, #4
     d88:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d8c:	f1bc 0f00 	cmp.w	ip, #0
     d90:	d005      	beq.n	d9e <cbvprintf+0x8a>
     d92:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d96:	f046 0608 	orr.w	r6, r6, #8
     d9a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d9e:	f1be 0f00 	cmp.w	lr, #0
     da2:	d005      	beq.n	db0 <cbvprintf+0x9c>
     da4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     da8:	f046 0610 	orr.w	r6, r6, #16
     dac:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     db0:	b128      	cbz	r0, dbe <cbvprintf+0xaa>
     db2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     db6:	f040 0020 	orr.w	r0, r0, #32
     dba:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     dbe:	b12a      	cbz	r2, dcc <cbvprintf+0xb8>
     dc0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     dc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     dcc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     dd0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     dd4:	2844      	cmp	r0, #68	; 0x44
     dd6:	d103      	bne.n	de0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     dd8:	f36f 1286 	bfc	r2, #6, #1
     ddc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     de0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     de4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     dea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     dee:	d17b      	bne.n	ee8 <cbvprintf+0x1d4>
		conv->width_star = true;
     df0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     df4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     df8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     dfa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     dfe:	781a      	ldrb	r2, [r3, #0]
     e00:	2a2e      	cmp	r2, #46	; 0x2e
     e02:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e06:	bf0c      	ite	eq
     e08:	2101      	moveq	r1, #1
     e0a:	2100      	movne	r1, #0
     e0c:	f361 0241 	bfi	r2, r1, #1, #1
     e10:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     e14:	d174      	bne.n	f00 <cbvprintf+0x1ec>
	if (*sp == '*') {
     e16:	785a      	ldrb	r2, [r3, #1]
     e18:	2a2a      	cmp	r2, #42	; 0x2a
     e1a:	d06a      	beq.n	ef2 <cbvprintf+0x1de>
	++sp;
     e1c:	3301      	adds	r3, #1
	size_t val = 0;
     e1e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     e20:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     e22:	4618      	mov	r0, r3
     e24:	f810 2b01 	ldrb.w	r2, [r0], #1
     e28:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e2c:	2f09      	cmp	r7, #9
     e2e:	f240 808e 	bls.w	f4e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     e32:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     e36:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     e38:	f3c2 0040 	ubfx	r0, r2, #1, #1
     e3c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     e40:	f361 0241 	bfi	r2, r1, #1, #1
     e44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e48:	e05a      	b.n	f00 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     e4a:	f10a 0702 	add.w	r7, sl, #2
     e4e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     e52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e56:	07d9      	lsls	r1, r3, #31
     e58:	f140 8149 	bpl.w	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
			width = va_arg(ap, int);
     e5c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     e60:	f1b9 0f00 	cmp.w	r9, #0
     e64:	da07      	bge.n	e76 <cbvprintf+0x162>
				conv->flag_dash = true;
     e66:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e6a:	f042 0204 	orr.w	r2, r2, #4
     e6e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     e72:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     e76:	075a      	lsls	r2, r3, #29
     e78:	f140 8142 	bpl.w	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
			int arg = va_arg(ap, int);
     e7c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     e80:	f1b8 0f00 	cmp.w	r8, #0
     e84:	f280 8141 	bge.w	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
				conv->prec_present = false;
     e88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e8c:	f36f 0341 	bfc	r3, #1, #1
     e90:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     e94:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     e98:	e137      	b.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
		switch (*sp) {
     e9a:	2b2d      	cmp	r3, #45	; 0x2d
     e9c:	d00c      	beq.n	eb8 <cbvprintf+0x1a4>
     e9e:	2b30      	cmp	r3, #48	; 0x30
     ea0:	f47f af6d 	bne.w	d7e <cbvprintf+0x6a>
			conv->flag_zero = true;
     ea4:	2201      	movs	r2, #1
	} while (loop);
     ea6:	e75c      	b.n	d62 <cbvprintf+0x4e>
			conv->flag_plus = true;
     ea8:	f04f 0c01 	mov.w	ip, #1
     eac:	e759      	b.n	d62 <cbvprintf+0x4e>
			conv->flag_space = true;
     eae:	f04f 0e01 	mov.w	lr, #1
     eb2:	e756      	b.n	d62 <cbvprintf+0x4e>
			conv->flag_hash = true;
     eb4:	2001      	movs	r0, #1
     eb6:	e754      	b.n	d62 <cbvprintf+0x4e>
		switch (*sp) {
     eb8:	2601      	movs	r6, #1
     eba:	e752      	b.n	d62 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     ebc:	fb0c 0202 	mla	r2, ip, r2, r0
     ec0:	3a30      	subs	r2, #48	; 0x30
     ec2:	4633      	mov	r3, r6
     ec4:	461e      	mov	r6, r3
     ec6:	f816 0b01 	ldrb.w	r0, [r6], #1
     eca:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ece:	2f09      	cmp	r7, #9
     ed0:	d9f4      	bls.n	ebc <cbvprintf+0x1a8>
	if (sp != wp) {
     ed2:	4299      	cmp	r1, r3
     ed4:	d093      	beq.n	dfe <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     ed6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     eda:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     edc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ede:	f362 0141 	bfi	r1, r2, #1, #1
     ee2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     ee6:	e78a      	b.n	dfe <cbvprintf+0xea>
     ee8:	460b      	mov	r3, r1
	size_t val = 0;
     eea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     eec:	f04f 0c0a 	mov.w	ip, #10
     ef0:	e7e8      	b.n	ec4 <cbvprintf+0x1b0>
		conv->prec_star = true;
     ef2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ef6:	f042 0204 	orr.w	r2, r2, #4
     efa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     efe:	3302      	adds	r3, #2
	switch (*sp) {
     f00:	461f      	mov	r7, r3
     f02:	f817 2b01 	ldrb.w	r2, [r7], #1
     f06:	2a6c      	cmp	r2, #108	; 0x6c
     f08:	d041      	beq.n	f8e <cbvprintf+0x27a>
     f0a:	d825      	bhi.n	f58 <cbvprintf+0x244>
     f0c:	2a68      	cmp	r2, #104	; 0x68
     f0e:	d02b      	beq.n	f68 <cbvprintf+0x254>
     f10:	2a6a      	cmp	r2, #106	; 0x6a
     f12:	d046      	beq.n	fa2 <cbvprintf+0x28e>
     f14:	2a4c      	cmp	r2, #76	; 0x4c
     f16:	d04c      	beq.n	fb2 <cbvprintf+0x29e>
     f18:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     f1a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     f1e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     f22:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     f26:	2a78      	cmp	r2, #120	; 0x78
     f28:	f200 80d9 	bhi.w	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
     f2c:	2a57      	cmp	r2, #87	; 0x57
     f2e:	d84d      	bhi.n	fcc <cbvprintf+0x2b8>
     f30:	2a41      	cmp	r2, #65	; 0x41
     f32:	d003      	beq.n	f3c <cbvprintf+0x228>
     f34:	3a45      	subs	r2, #69	; 0x45
     f36:	2a02      	cmp	r2, #2
     f38:	f200 80d1 	bhi.w	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
		conv->specifier_cat = SPECIFIER_FP;
     f3c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f40:	2204      	movs	r2, #4
     f42:	f362 0302 	bfi	r3, r2, #0, #3
     f46:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     f4a:	2301      	movs	r3, #1
			break;
     f4c:	e09e      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		val = 10U * val + *sp++ - '0';
     f4e:	fb06 2101 	mla	r1, r6, r1, r2
     f52:	3930      	subs	r1, #48	; 0x30
     f54:	4603      	mov	r3, r0
     f56:	e764      	b.n	e22 <cbvprintf+0x10e>
	switch (*sp) {
     f58:	2a74      	cmp	r2, #116	; 0x74
     f5a:	d026      	beq.n	faa <cbvprintf+0x296>
     f5c:	2a7a      	cmp	r2, #122	; 0x7a
     f5e:	d1db      	bne.n	f18 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     f60:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f64:	2206      	movs	r2, #6
     f66:	e00d      	b.n	f84 <cbvprintf+0x270>
		if (*++sp == 'h') {
     f68:	785a      	ldrb	r2, [r3, #1]
     f6a:	2a68      	cmp	r2, #104	; 0x68
     f6c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f70:	d106      	bne.n	f80 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     f72:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     f74:	f361 02c6 	bfi	r2, r1, #3, #4
     f78:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     f7c:	1c9f      	adds	r7, r3, #2
     f7e:	e7cc      	b.n	f1a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     f80:	4613      	mov	r3, r2
     f82:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     f84:	f362 03c6 	bfi	r3, r2, #3, #4
     f88:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     f8c:	e7c5      	b.n	f1a <cbvprintf+0x206>
		if (*++sp == 'l') {
     f8e:	785a      	ldrb	r2, [r3, #1]
     f90:	2a6c      	cmp	r2, #108	; 0x6c
     f92:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f96:	d101      	bne.n	f9c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     f98:	2104      	movs	r1, #4
     f9a:	e7eb      	b.n	f74 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     f9c:	4613      	mov	r3, r2
     f9e:	2203      	movs	r2, #3
     fa0:	e7f0      	b.n	f84 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     fa2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fa6:	2205      	movs	r2, #5
     fa8:	e7ec      	b.n	f84 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     faa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fae:	2207      	movs	r2, #7
     fb0:	e7e8      	b.n	f84 <cbvprintf+0x270>
		conv->unsupported = true;
     fb2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     fb6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     fba:	f023 0302 	bic.w	r3, r3, #2
     fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fc2:	f043 0302 	orr.w	r3, r3, #2
     fc6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     fca:	e7a6      	b.n	f1a <cbvprintf+0x206>
	switch (conv->specifier) {
     fcc:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     fd0:	2920      	cmp	r1, #32
     fd2:	f200 8084 	bhi.w	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
     fd6:	a001      	add	r0, pc, #4	; (adr r0, fdc <cbvprintf+0x2c8>)
     fd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     fdc:	000010a1 	.word	0x000010a1
     fe0:	000010df 	.word	0x000010df
     fe4:	000010df 	.word	0x000010df
     fe8:	000010df 	.word	0x000010df
     fec:	000010df 	.word	0x000010df
     ff0:	000010df 	.word	0x000010df
     ff4:	000010df 	.word	0x000010df
     ff8:	000010df 	.word	0x000010df
     ffc:	000010df 	.word	0x000010df
    1000:	00000f3d 	.word	0x00000f3d
    1004:	000010df 	.word	0x000010df
    1008:	000010a1 	.word	0x000010a1
    100c:	00001061 	.word	0x00001061
    1010:	00000f3d 	.word	0x00000f3d
    1014:	00000f3d 	.word	0x00000f3d
    1018:	00000f3d 	.word	0x00000f3d
    101c:	000010df 	.word	0x000010df
    1020:	00001061 	.word	0x00001061
    1024:	000010df 	.word	0x000010df
    1028:	000010df 	.word	0x000010df
    102c:	000010df 	.word	0x000010df
    1030:	000010df 	.word	0x000010df
    1034:	000010a9 	.word	0x000010a9
    1038:	000010a1 	.word	0x000010a1
    103c:	000010c5 	.word	0x000010c5
    1040:	000010df 	.word	0x000010df
    1044:	000010df 	.word	0x000010df
    1048:	000010c5 	.word	0x000010c5
    104c:	000010df 	.word	0x000010df
    1050:	000010a1 	.word	0x000010a1
    1054:	000010df 	.word	0x000010df
    1058:	000010df 	.word	0x000010df
    105c:	000010a1 	.word	0x000010a1
		conv->specifier_cat = SPECIFIER_SINT;
    1060:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1064:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1066:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    106a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    106e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1070:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1074:	bf02      	ittt	eq
    1076:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    107a:	f041 0101 	orreq.w	r1, r1, #1
    107e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1082:	2a63      	cmp	r2, #99	; 0x63
    1084:	d131      	bne.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1086:	3b00      	subs	r3, #0
    1088:	bf18      	it	ne
    108a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    108c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1090:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1094:	430b      	orrs	r3, r1
    1096:	f363 0241 	bfi	r2, r3, #1, #1
    109a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    109e:	e6d8      	b.n	e52 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    10a0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10a4:	2002      	movs	r0, #2
    10a6:	e7de      	b.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
		conv->specifier_cat = SPECIFIER_PTR;
    10a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ac:	f003 0378 	and.w	r3, r3, #120	; 0x78
    10b0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    10b4:	2103      	movs	r1, #3
    10b6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ba:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    10bc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10c0:	4143      	adcs	r3, r0
    10c2:	e7e3      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		conv->specifier_cat = SPECIFIER_PTR;
    10c4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    10c8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    10ca:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    10ce:	f361 0202 	bfi	r2, r1, #0, #3
    10d2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    10d6:	bf14      	ite	ne
    10d8:	2301      	movne	r3, #1
    10da:	2300      	moveq	r3, #0
    10dc:	e7d6      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		conv->invalid = true;
    10de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    10e2:	f043 0301 	orr.w	r3, r3, #1
    10e6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    10ea:	2300      	movs	r3, #0
    10ec:	e7ce      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		} else if (conv->width_present) {
    10ee:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    10f2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    10f4:	bfb4      	ite	lt
    10f6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    10fa:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    10fe:	e6ba      	b.n	e76 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1100:	079b      	lsls	r3, r3, #30
    1102:	f57f aec7 	bpl.w	e94 <cbvprintf+0x180>
			precision = conv->prec_value;
    1106:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    110a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    110e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1110:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1114:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1118:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    111c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    111e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1122:	d138      	bne.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
			switch (length_mod) {
    1124:	1ecb      	subs	r3, r1, #3
    1126:	2b04      	cmp	r3, #4
    1128:	d822      	bhi.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    112a:	e8df f003 	tbb	[pc, r3]
    112e:	0903      	.short	0x0903
    1130:	2109      	.short	0x2109
    1132:	21          	.byte	0x21
    1133:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1134:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1138:	17da      	asrs	r2, r3, #31
    113a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    113e:	e006      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
					(sint_value_type)va_arg(ap, intmax_t);
    1140:	3407      	adds	r4, #7
    1142:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1146:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    114a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    114e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1152:	f013 0603 	ands.w	r6, r3, #3
    1156:	d056      	beq.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
			OUTS(sp, fp);
    1158:	9802      	ldr	r0, [sp, #8]
    115a:	463b      	mov	r3, r7
    115c:	4652      	mov	r2, sl
    115e:	4659      	mov	r1, fp
    1160:	f005 fd53 	bl	6c0a <outs>
    1164:	2800      	cmp	r0, #0
    1166:	f2c0 8142 	blt.w	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    116a:	4405      	add	r5, r0
			continue;
    116c:	46ba      	mov	sl, r7
    116e:	e5d9      	b.n	d24 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1170:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1174:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1176:	ea4f 72e3 	mov.w	r2, r3, asr #31
    117a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    117e:	d105      	bne.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
				value->uint = (unsigned char)value->uint;
    1180:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1184:	930a      	str	r3, [sp, #40]	; 0x28
    1186:	2300      	movs	r3, #0
    1188:	930b      	str	r3, [sp, #44]	; 0x2c
    118a:	e7e0      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
			} else if (length_mod == LENGTH_H) {
    118c:	2902      	cmp	r1, #2
    118e:	d1de      	bne.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
				value->sint = (short)value->sint;
    1190:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1194:	e7d0      	b.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1196:	2b02      	cmp	r3, #2
    1198:	d123      	bne.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
			switch (length_mod) {
    119a:	1ecb      	subs	r3, r1, #3
    119c:	2b04      	cmp	r3, #4
    119e:	d813      	bhi.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    11a0:	e8df f003 	tbb	[pc, r3]
    11a4:	120a0a03 	.word	0x120a0a03
    11a8:	12          	.byte	0x12
    11a9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    11aa:	6822      	ldr	r2, [r4, #0]
    11ac:	920a      	str	r2, [sp, #40]	; 0x28
    11ae:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    11b0:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    11b2:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    11b4:	4604      	mov	r4, r0
    11b6:	e7ca      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
					(uint_value_type)va_arg(ap,
    11b8:	1de0      	adds	r0, r4, #7
    11ba:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    11be:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    11c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    11c6:	e7f5      	b.n	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
					(uint_value_type)va_arg(ap, size_t);
    11c8:	f854 3b04 	ldr.w	r3, [r4], #4
    11cc:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    11ce:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    11d0:	f04f 0300 	mov.w	r3, #0
    11d4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    11d6:	d0d3      	beq.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
			} else if (length_mod == LENGTH_H) {
    11d8:	2902      	cmp	r1, #2
    11da:	d1b8      	bne.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
				value->uint = (unsigned short)value->uint;
    11dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    11e0:	e7d0      	b.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
		} else if (specifier_cat == SPECIFIER_FP) {
    11e2:	2b04      	cmp	r3, #4
    11e4:	d109      	bne.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
					(sint_value_type)va_arg(ap, long long);
    11e6:	1de3      	adds	r3, r4, #7
    11e8:	f023 0307 	bic.w	r3, r3, #7
    11ec:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    11f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    11f8:	e7a9      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    11fa:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    11fc:	bf04      	itt	eq
    11fe:	f854 3b04 	ldreq.w	r3, [r4], #4
    1202:	930a      	streq	r3, [sp, #40]	; 0x28
    1204:	e7a3      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
		switch (conv->specifier) {
    1206:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    120a:	2878      	cmp	r0, #120	; 0x78
    120c:	d8ae      	bhi.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    120e:	2862      	cmp	r0, #98	; 0x62
    1210:	d822      	bhi.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    1212:	2825      	cmp	r0, #37	; 0x25
    1214:	f43f ad8f 	beq.w	d36 <cbvprintf+0x22>
    1218:	2858      	cmp	r0, #88	; 0x58
    121a:	d1a7      	bne.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    121c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1220:	9300      	str	r3, [sp, #0]
    1222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1226:	ab04      	add	r3, sp, #16
    1228:	aa0c      	add	r2, sp, #48	; 0x30
    122a:	f005 fca8 	bl	6b7e <encode_uint>
    122e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1230:	f1b8 0f00 	cmp.w	r8, #0
    1234:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1238:	db0c      	blt.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
				conv->flag_zero = false;
    123a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    123e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1242:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1246:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1248:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    124c:	d902      	bls.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
					conv->pad0_value = precision - (int)len;
    124e:	eba8 0303 	sub.w	r3, r8, r3
    1252:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1254:	4680      	mov	r8, r0
    1256:	e03d      	b.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
		switch (conv->specifier) {
    1258:	3863      	subs	r0, #99	; 0x63
    125a:	2815      	cmp	r0, #21
    125c:	d886      	bhi.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    125e:	a201      	add	r2, pc, #4	; (adr r2, 1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1260:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1264:	000012e5 	.word	0x000012e5
    1268:	00001349 	.word	0x00001349
    126c:	0000116d 	.word	0x0000116d
    1270:	0000116d 	.word	0x0000116d
    1274:	0000116d 	.word	0x0000116d
    1278:	0000116d 	.word	0x0000116d
    127c:	00001349 	.word	0x00001349
    1280:	0000116d 	.word	0x0000116d
    1284:	0000116d 	.word	0x0000116d
    1288:	0000116d 	.word	0x0000116d
    128c:	0000116d 	.word	0x0000116d
    1290:	000013a3 	.word	0x000013a3
    1294:	00001371 	.word	0x00001371
    1298:	00001375 	.word	0x00001375
    129c:	0000116d 	.word	0x0000116d
    12a0:	0000116d 	.word	0x0000116d
    12a4:	000012bd 	.word	0x000012bd
    12a8:	0000116d 	.word	0x0000116d
    12ac:	00001371 	.word	0x00001371
    12b0:	0000116d 	.word	0x0000116d
    12b4:	0000116d 	.word	0x0000116d
    12b8:	00001371 	.word	0x00001371
			if (precision >= 0) {
    12bc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    12c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    12c4:	db0a      	blt.n	12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
				len = strnlen(bps, precision);
    12c6:	4641      	mov	r1, r8
    12c8:	4650      	mov	r0, sl
    12ca:	f005 fcef 	bl	6cac <strnlen>
			bpe = bps + len;
    12ce:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    12d2:	2600      	movs	r6, #0
		if (bps == NULL) {
    12d4:	f1ba 0f00 	cmp.w	sl, #0
    12d8:	d10c      	bne.n	12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    12da:	e747      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
				len = strlen(bps);
    12dc:	4650      	mov	r0, sl
    12de:	f005 fcde 	bl	6c9e <strlen>
    12e2:	e7f4      	b.n	12ce <CONFIG_FPROTECT_BLOCK_SIZE+0x2ce>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    12e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12e6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    12ea:	2600      	movs	r6, #0
			bps = buf;
    12ec:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    12f0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    12f4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    12f8:	b106      	cbz	r6, 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
			nj_len += 1U;
    12fa:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    12fc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1300:	06d0      	lsls	r0, r2, #27
    1302:	d568      	bpl.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
			nj_len += 2U;
    1304:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1306:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1308:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    130a:	bf48      	it	mi
    130c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    130e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1310:	bf48      	it	mi
    1312:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1314:	f1b9 0f00 	cmp.w	r9, #0
    1318:	dd76      	ble.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
			if (!conv->flag_dash) {
    131a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    131e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1322:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1326:	9303      	str	r3, [sp, #12]
    1328:	0753      	lsls	r3, r2, #29
    132a:	d46d      	bmi.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
				if (conv->flag_zero) {
    132c:	0650      	lsls	r0, r2, #25
    132e:	d561      	bpl.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
					if (sign != 0) {
    1330:	b146      	cbz	r6, 1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
						OUTC(sign);
    1332:	9b02      	ldr	r3, [sp, #8]
    1334:	4659      	mov	r1, fp
    1336:	4630      	mov	r0, r6
    1338:	4798      	blx	r3
    133a:	2800      	cmp	r0, #0
    133c:	db57      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
						sign = 0;
    133e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1340:	3501      	adds	r5, #1
						sign = 0;
    1342:	461e      	mov	r6, r3
					pad = '0';
    1344:	2330      	movs	r3, #48	; 0x30
    1346:	e056      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
			if (conv->flag_plus) {
    1348:	071e      	lsls	r6, r3, #28
    134a:	d40f      	bmi.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
				sign = ' ';
    134c:	f013 0610 	ands.w	r6, r3, #16
    1350:	bf18      	it	ne
    1352:	2620      	movne	r6, #32
			sint = value->sint;
    1354:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1358:	2b00      	cmp	r3, #0
    135a:	f6bf af5f 	bge.w	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
				value->uint = (uint_value_type)-sint;
    135e:	4252      	negs	r2, r2
    1360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1364:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1368:	262d      	movs	r6, #45	; 0x2d
    136a:	e757      	b.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
				sign = '+';
    136c:	262b      	movs	r6, #43	; 0x2b
    136e:	e7f1      	b.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
		switch (conv->specifier) {
    1370:	2600      	movs	r6, #0
    1372:	e753      	b.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
			if (value->ptr != NULL) {
    1374:	980a      	ldr	r0, [sp, #40]	; 0x28
    1376:	b340      	cbz	r0, 13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1378:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    137c:	9300      	str	r3, [sp, #0]
    137e:	aa0c      	add	r2, sp, #48	; 0x30
    1380:	ab04      	add	r3, sp, #16
    1382:	2100      	movs	r1, #0
    1384:	f005 fbfb 	bl	6b7e <encode_uint>
				conv->altform_0c = true;
    1388:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    138c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1390:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1394:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1398:	4682      	mov	sl, r0
				conv->altform_0c = true;
    139a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    139e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    13a0:	e746      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
				store_count(conv, value->ptr, count);
    13a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    13a4:	2907      	cmp	r1, #7
    13a6:	f63f aee1 	bhi.w	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    13aa:	e8df f001 	tbb	[pc, r1]
    13ae:	040c      	.short	0x040c
    13b0:	08080c06 	.word	0x08080c06
    13b4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    13b6:	701d      	strb	r5, [r3, #0]
		break;
    13b8:	e6d8      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
		*(short *)dp = (short)count;
    13ba:	801d      	strh	r5, [r3, #0]
		break;
    13bc:	e6d6      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
		*(intmax_t *)dp = (intmax_t)count;
    13be:	17ea      	asrs	r2, r5, #31
    13c0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    13c4:	e6d2      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    13c6:	601d      	str	r5, [r3, #0]
		break;
    13c8:	e6d0      	b.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
			bps = "(nil)";
    13ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1494 <CONFIG_FPROTECT_BLOCK_SIZE+0x494>
    13ce:	4606      	mov	r6, r0
			bpe = bps + 5;
    13d0:	f10a 0805 	add.w	r8, sl, #5
    13d4:	e78e      	b.n	12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
		} else if (conv->altform_0) {
    13d6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    13d8:	bf48      	it	mi
    13da:	3301      	addmi	r3, #1
    13dc:	e793      	b.n	1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
					OUTC(pad);
    13de:	4618      	mov	r0, r3
    13e0:	9303      	str	r3, [sp, #12]
    13e2:	4659      	mov	r1, fp
    13e4:	9b02      	ldr	r3, [sp, #8]
    13e6:	4798      	blx	r3
    13e8:	2800      	cmp	r0, #0
    13ea:	9b03      	ldr	r3, [sp, #12]
    13ec:	da04      	bge.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
#undef OUTS
#undef OUTC
}
    13ee:	b011      	add	sp, #68	; 0x44
    13f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    13f4:	2320      	movs	r3, #32
    13f6:	444d      	add	r5, r9
    13f8:	464a      	mov	r2, r9
				while (width-- > 0) {
    13fa:	2a00      	cmp	r2, #0
    13fc:	eba5 0109 	sub.w	r1, r5, r9
    1400:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1404:	dceb      	bgt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    1406:	460d      	mov	r5, r1
		if (sign != 0) {
    1408:	b136      	cbz	r6, 1418 <CONFIG_FPROTECT_BLOCK_SIZE+0x418>
			OUTC(sign);
    140a:	9b02      	ldr	r3, [sp, #8]
    140c:	4659      	mov	r1, fp
    140e:	4630      	mov	r0, r6
    1410:	4798      	blx	r3
    1412:	2800      	cmp	r0, #0
    1414:	dbeb      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    1416:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1418:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    141c:	06d9      	lsls	r1, r3, #27
    141e:	d401      	bmi.n	1424 <CONFIG_FPROTECT_BLOCK_SIZE+0x424>
    1420:	071a      	lsls	r2, r3, #28
    1422:	d506      	bpl.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
				OUTC('0');
    1424:	9b02      	ldr	r3, [sp, #8]
    1426:	4659      	mov	r1, fp
    1428:	2030      	movs	r0, #48	; 0x30
    142a:	4798      	blx	r3
    142c:	2800      	cmp	r0, #0
    142e:	dbde      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    1430:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1432:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1436:	06db      	lsls	r3, r3, #27
    1438:	d507      	bpl.n	144a <CONFIG_FPROTECT_BLOCK_SIZE+0x44a>
				OUTC(conv->specifier);
    143a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    143e:	9b02      	ldr	r3, [sp, #8]
    1440:	4659      	mov	r1, fp
    1442:	4798      	blx	r3
    1444:	2800      	cmp	r0, #0
    1446:	dbd2      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    1448:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    144a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    144c:	442e      	add	r6, r5
    144e:	1b73      	subs	r3, r6, r5
    1450:	2b00      	cmp	r3, #0
    1452:	dc16      	bgt.n	1482 <CONFIG_FPROTECT_BLOCK_SIZE+0x482>
			OUTS(bps, bpe);
    1454:	9802      	ldr	r0, [sp, #8]
    1456:	4643      	mov	r3, r8
    1458:	4652      	mov	r2, sl
    145a:	4659      	mov	r1, fp
    145c:	f005 fbd5 	bl	6c0a <outs>
    1460:	2800      	cmp	r0, #0
    1462:	dbc4      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    1464:	4405      	add	r5, r0
		while (width > 0) {
    1466:	44a9      	add	r9, r5
    1468:	eba9 0305 	sub.w	r3, r9, r5
    146c:	2b00      	cmp	r3, #0
    146e:	f77f ae7d 	ble.w	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
			OUTC(' ');
    1472:	9b02      	ldr	r3, [sp, #8]
    1474:	4659      	mov	r1, fp
    1476:	2020      	movs	r0, #32
    1478:	4798      	blx	r3
    147a:	2800      	cmp	r0, #0
    147c:	dbb7      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    147e:	3501      	adds	r5, #1
			--width;
    1480:	e7f2      	b.n	1468 <CONFIG_FPROTECT_BLOCK_SIZE+0x468>
				OUTC('0');
    1482:	9b02      	ldr	r3, [sp, #8]
    1484:	4659      	mov	r1, fp
    1486:	2030      	movs	r0, #48	; 0x30
    1488:	4798      	blx	r3
    148a:	2800      	cmp	r0, #0
    148c:	dbaf      	blt.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
    148e:	3501      	adds	r5, #1
    1490:	e7dd      	b.n	144e <CONFIG_FPROTECT_BLOCK_SIZE+0x44e>
    1492:	bf00      	nop
    1494:	00007ca1 	.word	0x00007ca1

00001498 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1498:	b508      	push	{r3, lr}
	__asm__ volatile(
    149a:	f04f 0220 	mov.w	r2, #32
    149e:	f3ef 8311 	mrs	r3, BASEPRI
    14a2:	f382 8812 	msr	BASEPRI_MAX, r2
    14a6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    14aa:	f000 ff2b 	bl	2304 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    14ae:	4803      	ldr	r0, [pc, #12]	; (14bc <sys_reboot+0x24>)
    14b0:	f005 face 	bl	6a50 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    14b4:	f000 fa68 	bl	1988 <arch_cpu_idle>
    14b8:	e7fc      	b.n	14b4 <sys_reboot+0x1c>
    14ba:	bf00      	nop
    14bc:	00007ca7 	.word	0x00007ca7

000014c0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    14c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14c4:	4605      	mov	r5, r0
    14c6:	f04f 0320 	mov.w	r3, #32
    14ca:	f3ef 8611 	mrs	r6, BASEPRI
    14ce:	f383 8812 	msr	BASEPRI_MAX, r3
    14d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14d6:	4822      	ldr	r0, [pc, #136]	; (1560 <pm_state_notify+0xa0>)
    14d8:	f003 f9d0 	bl	487c <z_spin_lock_valid>
    14dc:	b968      	cbnz	r0, 14fa <pm_state_notify+0x3a>
    14de:	4a21      	ldr	r2, [pc, #132]	; (1564 <pm_state_notify+0xa4>)
    14e0:	4921      	ldr	r1, [pc, #132]	; (1568 <pm_state_notify+0xa8>)
    14e2:	4822      	ldr	r0, [pc, #136]	; (156c <pm_state_notify+0xac>)
    14e4:	238e      	movs	r3, #142	; 0x8e
    14e6:	f005 fbad 	bl	6c44 <assert_print>
    14ea:	491d      	ldr	r1, [pc, #116]	; (1560 <pm_state_notify+0xa0>)
    14ec:	4820      	ldr	r0, [pc, #128]	; (1570 <pm_state_notify+0xb0>)
    14ee:	f005 fba9 	bl	6c44 <assert_print>
    14f2:	481c      	ldr	r0, [pc, #112]	; (1564 <pm_state_notify+0xa4>)
    14f4:	218e      	movs	r1, #142	; 0x8e
    14f6:	f005 fb9e 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    14fa:	4819      	ldr	r0, [pc, #100]	; (1560 <pm_state_notify+0xa0>)
    14fc:	f003 f9dc 	bl	48b8 <z_spin_lock_set_owner>
	return list->head;
    1500:	4b1c      	ldr	r3, [pc, #112]	; (1574 <pm_state_notify+0xb4>)
    1502:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1504:	b19c      	cbz	r4, 152e <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1506:	4f1c      	ldr	r7, [pc, #112]	; (1578 <pm_state_notify+0xb8>)
    1508:	f8df 8070 	ldr.w	r8, [pc, #112]	; 157c <pm_state_notify+0xbc>
    150c:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1510:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1514:	2d00      	cmp	r5, #0
    1516:	bf08      	it	eq
    1518:	4613      	moveq	r3, r2
		if (callback) {
    151a:	b12b      	cbz	r3, 1528 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    151c:	f898 2014 	ldrb.w	r2, [r8, #20]
    1520:	fb09 f202 	mul.w	r2, r9, r2
    1524:	5cb8      	ldrb	r0, [r7, r2]
    1526:	4798      	blx	r3
	return node->next;
    1528:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    152a:	2c00      	cmp	r4, #0
    152c:	d1f0      	bne.n	1510 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    152e:	480c      	ldr	r0, [pc, #48]	; (1560 <pm_state_notify+0xa0>)
    1530:	f003 f9b2 	bl	4898 <z_spin_unlock_valid>
    1534:	b968      	cbnz	r0, 1552 <pm_state_notify+0x92>
    1536:	4a0b      	ldr	r2, [pc, #44]	; (1564 <pm_state_notify+0xa4>)
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <pm_state_notify+0xc0>)
    153a:	480c      	ldr	r0, [pc, #48]	; (156c <pm_state_notify+0xac>)
    153c:	23b9      	movs	r3, #185	; 0xb9
    153e:	f005 fb81 	bl	6c44 <assert_print>
    1542:	4907      	ldr	r1, [pc, #28]	; (1560 <pm_state_notify+0xa0>)
    1544:	480f      	ldr	r0, [pc, #60]	; (1584 <pm_state_notify+0xc4>)
    1546:	f005 fb7d 	bl	6c44 <assert_print>
    154a:	4806      	ldr	r0, [pc, #24]	; (1564 <pm_state_notify+0xa4>)
    154c:	21b9      	movs	r1, #185	; 0xb9
    154e:	f005 fb72 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    1552:	f386 8811 	msr	BASEPRI, r6
    1556:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    155e:	bf00      	nop
    1560:	20000498 	.word	0x20000498
    1564:	00007a94 	.word	0x00007a94
    1568:	00007aed 	.word	0x00007aed
    156c:	000079d4 	.word	0x000079d4
    1570:	00007b02 	.word	0x00007b02
    1574:	2000049c 	.word	0x2000049c
    1578:	200004a4 	.word	0x200004a4
    157c:	20000b48 	.word	0x20000b48
    1580:	00007ac1 	.word	0x00007ac1
    1584:	00007ad8 	.word	0x00007ad8

00001588 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1588:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    158a:	2301      	movs	r3, #1
    158c:	f000 001f 	and.w	r0, r0, #31
    1590:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1594:	4b07      	ldr	r3, [pc, #28]	; (15b4 <atomic_clear_bit.constprop.0+0x2c>)
    1596:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    159a:	43c0      	mvns	r0, r0
    159c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    15a0:	e853 2f00 	ldrex	r2, [r3]
    15a4:	4002      	ands	r2, r0
    15a6:	e843 2100 	strex	r1, r2, [r3]
    15aa:	2900      	cmp	r1, #0
    15ac:	d1f8      	bne.n	15a0 <atomic_clear_bit.constprop.0+0x18>
    15ae:	f3bf 8f5b 	dmb	ish
}
    15b2:	4770      	bx	lr
    15b4:	200004b0 	.word	0x200004b0

000015b8 <pm_system_resume>:

void pm_system_resume(void)
{
    15b8:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    15ba:	4b1a      	ldr	r3, [pc, #104]	; (1624 <pm_system_resume+0x6c>)
    15bc:	7d1c      	ldrb	r4, [r3, #20]
    15be:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    15c2:	f004 031f 	and.w	r3, r4, #31
    15c6:	2201      	movs	r2, #1
    15c8:	409a      	lsls	r2, r3
    15ca:	4b17      	ldr	r3, [pc, #92]	; (1628 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    15cc:	0961      	lsrs	r1, r4, #5
    15ce:	43d0      	mvns	r0, r2
    15d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    15d4:	e853 1f00 	ldrex	r1, [r3]
    15d8:	ea01 0500 	and.w	r5, r1, r0
    15dc:	e843 5c00 	strex	ip, r5, [r3]
    15e0:	f1bc 0f00 	cmp.w	ip, #0
    15e4:	d1f6      	bne.n	15d4 <pm_system_resume+0x1c>
    15e6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    15ea:	4211      	tst	r1, r2
    15ec:	d013      	beq.n	1616 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    15ee:	4b0f      	ldr	r3, [pc, #60]	; (162c <pm_system_resume+0x74>)
    15f0:	4d0f      	ldr	r5, [pc, #60]	; (1630 <pm_system_resume+0x78>)
    15f2:	b18b      	cbz	r3, 1618 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    15f4:	230c      	movs	r3, #12
    15f6:	4363      	muls	r3, r4
    15f8:	18ea      	adds	r2, r5, r3
    15fa:	5ce8      	ldrb	r0, [r5, r3]
    15fc:	7851      	ldrb	r1, [r2, #1]
    15fe:	f005 fb83 	bl	6d08 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1602:	2000      	movs	r0, #0
    1604:	f7ff ff5c 	bl	14c0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1608:	230c      	movs	r3, #12
    160a:	435c      	muls	r4, r3
    160c:	192a      	adds	r2, r5, r4
    160e:	2300      	movs	r3, #0
    1610:	512b      	str	r3, [r5, r4]
    1612:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1616:	bd38      	pop	{r3, r4, r5, pc}
    1618:	f383 8811 	msr	BASEPRI, r3
    161c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1620:	e7ef      	b.n	1602 <pm_system_resume+0x4a>
    1622:	bf00      	nop
    1624:	20000b48 	.word	0x20000b48
    1628:	200004b4 	.word	0x200004b4
    162c:	00006d09 	.word	0x00006d09
    1630:	200004a4 	.word	0x200004a4

00001634 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1638:	4b32      	ldr	r3, [pc, #200]	; (1704 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    163a:	4a33      	ldr	r2, [pc, #204]	; (1708 <pm_system_suspend+0xd4>)
    163c:	7d1c      	ldrb	r4, [r3, #20]
    163e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1642:	0963      	lsrs	r3, r4, #5
    1644:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    164c:	4e2f      	ldr	r6, [pc, #188]	; (170c <pm_system_suspend+0xd8>)
    164e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1652:	f004 081f 	and.w	r8, r4, #31
    1656:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    165a:	f013 0f01 	tst.w	r3, #1
{
    165e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1660:	d10a      	bne.n	1678 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1662:	4601      	mov	r1, r0
    1664:	4620      	mov	r0, r4
    1666:	f000 f869 	bl	173c <pm_policy_next_state>
		if (info != NULL) {
    166a:	b128      	cbz	r0, 1678 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    166c:	c807      	ldmia	r0, {r0, r1, r2}
    166e:	230c      	movs	r3, #12
    1670:	fb03 6304 	mla	r3, r3, r4, r6
    1674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1678:	230c      	movs	r3, #12
    167a:	4363      	muls	r3, r4
    167c:	18f2      	adds	r2, r6, r3
    167e:	5cf5      	ldrb	r5, [r6, r3]
    1680:	b92d      	cbnz	r5, 168e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1682:	4620      	mov	r0, r4
    1684:	f7ff ff80 	bl	1588 <atomic_clear_bit.constprop.0>
		ret = false;
    1688:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    168e:	1c7b      	adds	r3, r7, #1
    1690:	d00f      	beq.n	16b2 <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1692:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1696:	481e      	ldr	r0, [pc, #120]	; (1710 <pm_system_suspend+0xdc>)
    1698:	4a1e      	ldr	r2, [pc, #120]	; (1714 <pm_system_suspend+0xe0>)
    169a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    169e:	2100      	movs	r1, #0
    16a0:	2300      	movs	r3, #0
    16a2:	fbec 0105 	umlal	r0, r1, ip, r5
    16a6:	f7fe fd2b 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    16aa:	2101      	movs	r1, #1
    16ac:	1a38      	subs	r0, r7, r0
    16ae:	f004 fe41 	bl	6334 <z_set_timeout_expiry>
	k_sched_lock();
    16b2:	f003 fc7f 	bl	4fb4 <k_sched_lock>
	pm_state_notify(true);
    16b6:	2001      	movs	r0, #1
    16b8:	f7ff ff02 	bl	14c0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    16bc:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    16c0:	2301      	movs	r3, #1
    16c2:	fa03 f808 	lsl.w	r8, r3, r8
    16c6:	4b14      	ldr	r3, [pc, #80]	; (1718 <pm_system_suspend+0xe4>)
    16c8:	4499      	add	r9, r3
    16ca:	e859 3f00 	ldrex	r3, [r9]
    16ce:	ea43 0308 	orr.w	r3, r3, r8
    16d2:	e849 3200 	strex	r2, r3, [r9]
    16d6:	2a00      	cmp	r2, #0
    16d8:	d1f7      	bne.n	16ca <pm_system_suspend+0x96>
    16da:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    16de:	4b0f      	ldr	r3, [pc, #60]	; (171c <pm_system_suspend+0xe8>)
    16e0:	b133      	cbz	r3, 16f0 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    16e2:	230c      	movs	r3, #12
    16e4:	4363      	muls	r3, r4
    16e6:	18f2      	adds	r2, r6, r3
    16e8:	5cf0      	ldrb	r0, [r6, r3]
    16ea:	7851      	ldrb	r1, [r2, #1]
    16ec:	f005 fb00 	bl	6cf0 <pm_state_set>
	pm_system_resume();
    16f0:	f7ff ff62 	bl	15b8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    16f4:	4620      	mov	r0, r4
    16f6:	f7ff ff47 	bl	1588 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    16fa:	f004 f945 	bl	5988 <k_sched_unlock>
	bool ret = true;
    16fe:	2001      	movs	r0, #1
    1700:	e7c3      	b.n	168a <pm_system_suspend+0x56>
    1702:	bf00      	nop
    1704:	20000b48 	.word	0x20000b48
    1708:	200004b0 	.word	0x200004b0
    170c:	200004a4 	.word	0x200004a4
    1710:	000f423f 	.word	0x000f423f
    1714:	000f4240 	.word	0x000f4240
    1718:	200004b4 	.word	0x200004b4
    171c:	00006cf1 	.word	0x00006cf1

00001720 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <pm_policy_state_lock_is_active+0x18>)
    1722:	f3bf 8f5b 	dmb	ish
    1726:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    172a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    172e:	3800      	subs	r0, #0
    1730:	bf18      	it	ne
    1732:	2001      	movne	r0, #1
    1734:	4770      	bx	lr
    1736:	bf00      	nop
    1738:	200004b8 	.word	0x200004b8

0000173c <pm_policy_next_state>:
{
    173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1740:	b085      	sub	sp, #20
    1742:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1744:	a903      	add	r1, sp, #12
    1746:	f000 f847 	bl	17d8 <pm_state_cpu_get_all>
    174a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 17cc <pm_policy_next_state+0x90>
    174e:	f8df a080 	ldr.w	sl, [pc, #128]	; 17d0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1752:	1e44      	subs	r4, r0, #1
    1754:	b224      	sxth	r4, r4
    1756:	f04f 0b00 	mov.w	fp, #0
    175a:	1c63      	adds	r3, r4, #1
    175c:	d104      	bne.n	1768 <pm_policy_next_state+0x2c>
	return NULL;
    175e:	2600      	movs	r6, #0
}
    1760:	4630      	mov	r0, r6
    1762:	b005      	add	sp, #20
    1764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1768:	9a03      	ldr	r2, [sp, #12]
    176a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    176e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1772:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1776:	f7ff ffd3 	bl	1720 <pm_policy_state_lock_is_active>
    177a:	4605      	mov	r5, r0
    177c:	bb10      	cbnz	r0, 17c4 <pm_policy_next_state+0x88>
    177e:	6870      	ldr	r0, [r6, #4]
    1780:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1784:	46c4      	mov	ip, r8
    1786:	4629      	mov	r1, r5
    1788:	fbe0 c109 	umlal	ip, r1, r0, r9
    178c:	4652      	mov	r2, sl
    178e:	465b      	mov	r3, fp
    1790:	4660      	mov	r0, ip
    1792:	f7fe fcb5 	bl	100 <__aeabi_uldivmod>
    1796:	9001      	str	r0, [sp, #4]
    1798:	68b0      	ldr	r0, [r6, #8]
    179a:	46c4      	mov	ip, r8
    179c:	4629      	mov	r1, r5
    179e:	fbe0 c109 	umlal	ip, r1, r0, r9
    17a2:	465b      	mov	r3, fp
    17a4:	4652      	mov	r2, sl
    17a6:	4660      	mov	r0, ip
    17a8:	f7fe fcaa 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    17ac:	4b09      	ldr	r3, [pc, #36]	; (17d4 <pm_policy_next_state+0x98>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	1c59      	adds	r1, r3, #1
    17b2:	d001      	beq.n	17b8 <pm_policy_next_state+0x7c>
    17b4:	4283      	cmp	r3, r0
    17b6:	d905      	bls.n	17c4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    17b8:	1c7a      	adds	r2, r7, #1
    17ba:	d0d1      	beq.n	1760 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    17bc:	9b01      	ldr	r3, [sp, #4]
    17be:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    17c0:	42b8      	cmp	r0, r7
    17c2:	d9cd      	bls.n	1760 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    17c4:	3c01      	subs	r4, #1
    17c6:	b224      	sxth	r4, r4
    17c8:	e7c7      	b.n	175a <pm_policy_next_state+0x1e>
    17ca:	bf00      	nop
    17cc:	000f423f 	.word	0x000f423f
    17d0:	000f4240 	.word	0x000f4240
    17d4:	2000000c 	.word	0x2000000c

000017d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    17d8:	b908      	cbnz	r0, 17de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    17da:	4b02      	ldr	r3, [pc, #8]	; (17e4 <pm_state_cpu_get_all+0xc>)
    17dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    17de:	2000      	movs	r0, #0
    17e0:	4770      	bx	lr
    17e2:	bf00      	nop
    17e4:	000075f8 	.word	0x000075f8

000017e8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    17e8:	4801      	ldr	r0, [pc, #4]	; (17f0 <nrf_cc3xx_platform_abort_init+0x8>)
    17ea:	f004 bf81 	b.w	66f0 <nrf_cc3xx_platform_set_abort>
    17ee:	bf00      	nop
    17f0:	000075f8 	.word	0x000075f8

000017f4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17f4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    17f6:	4604      	mov	r4, r0
    17f8:	b918      	cbnz	r0, 1802 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    17fa:	4b0d      	ldr	r3, [pc, #52]	; (1830 <mutex_free_platform+0x3c>)
    17fc:	480d      	ldr	r0, [pc, #52]	; (1834 <mutex_free_platform+0x40>)
    17fe:	685b      	ldr	r3, [r3, #4]
    1800:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1802:	6861      	ldr	r1, [r4, #4]
    1804:	2908      	cmp	r1, #8
    1806:	d00d      	beq.n	1824 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1808:	f031 0304 	bics.w	r3, r1, #4
    180c:	d00a      	beq.n	1824 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    180e:	f011 0102 	ands.w	r1, r1, #2
    1812:	d008      	beq.n	1826 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1814:	4808      	ldr	r0, [pc, #32]	; (1838 <mutex_free_platform+0x44>)
    1816:	4621      	mov	r1, r4
    1818:	f002 fe90 	bl	453c <k_mem_slab_free>
        mutex->mutex = NULL;
    181c:	2300      	movs	r3, #0
    181e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1820:	2300      	movs	r3, #0
    1822:	6063      	str	r3, [r4, #4]
}
    1824:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1826:	6820      	ldr	r0, [r4, #0]
    1828:	2214      	movs	r2, #20
    182a:	f005 fa53 	bl	6cd4 <memset>
    182e:	e7f7      	b.n	1820 <mutex_free_platform+0x2c>
    1830:	200000e8 	.word	0x200000e8
    1834:	00007cd0 	.word	0x00007cd0
    1838:	200004d4 	.word	0x200004d4

0000183c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    183c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    183e:	b308      	cbz	r0, 1884 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1840:	6843      	ldr	r3, [r0, #4]
    1842:	2b04      	cmp	r3, #4
    1844:	d110      	bne.n	1868 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1846:	2201      	movs	r2, #1
    1848:	6803      	ldr	r3, [r0, #0]
    184a:	f3bf 8f5b 	dmb	ish
    184e:	e853 1f00 	ldrex	r1, [r3]
    1852:	2900      	cmp	r1, #0
    1854:	d103      	bne.n	185e <mutex_lock_platform+0x22>
    1856:	e843 2000 	strex	r0, r2, [r3]
    185a:	2800      	cmp	r0, #0
    185c:	d1f7      	bne.n	184e <mutex_lock_platform+0x12>
    185e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1862:	d10b      	bne.n	187c <mutex_lock_platform+0x40>
    1864:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1866:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1868:	b153      	cbz	r3, 1880 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    186a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    186c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1874:	f003 f85a 	bl	492c <z_impl_k_mutex_lock>
        if (ret == 0) {
    1878:	2800      	cmp	r0, #0
    187a:	d0f3      	beq.n	1864 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    187c:	4803      	ldr	r0, [pc, #12]	; (188c <mutex_lock_platform+0x50>)
    187e:	e7f2      	b.n	1866 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1880:	4803      	ldr	r0, [pc, #12]	; (1890 <mutex_lock_platform+0x54>)
    1882:	e7f0      	b.n	1866 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1884:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1888:	e7ed      	b.n	1866 <mutex_lock_platform+0x2a>
    188a:	bf00      	nop
    188c:	ffff8fe9 	.word	0xffff8fe9
    1890:	ffff8fea 	.word	0xffff8fea

00001894 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1894:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1896:	b1d0      	cbz	r0, 18ce <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1898:	6843      	ldr	r3, [r0, #4]
    189a:	2b04      	cmp	r3, #4
    189c:	d111      	bne.n	18c2 <mutex_unlock_platform+0x2e>
    189e:	2200      	movs	r2, #0
    18a0:	6803      	ldr	r3, [r0, #0]
    18a2:	f3bf 8f5b 	dmb	ish
    18a6:	e853 1f00 	ldrex	r1, [r3]
    18aa:	2901      	cmp	r1, #1
    18ac:	d103      	bne.n	18b6 <mutex_unlock_platform+0x22>
    18ae:	e843 2000 	strex	r0, r2, [r3]
    18b2:	2800      	cmp	r0, #0
    18b4:	d1f7      	bne.n	18a6 <mutex_unlock_platform+0x12>
    18b6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18ba:	4807      	ldr	r0, [pc, #28]	; (18d8 <mutex_unlock_platform+0x44>)
    18bc:	bf08      	it	eq
    18be:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    18c0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18c2:	b13b      	cbz	r3, 18d4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    18c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    18c6:	f003 f92b 	bl	4b20 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    18ca:	2000      	movs	r0, #0
    18cc:	e7f8      	b.n	18c0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    18ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    18d2:	e7f5      	b.n	18c0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18d4:	4801      	ldr	r0, [pc, #4]	; (18dc <mutex_unlock_platform+0x48>)
    18d6:	e7f3      	b.n	18c0 <mutex_unlock_platform+0x2c>
    18d8:	ffff8fe9 	.word	0xffff8fe9
    18dc:	ffff8fea 	.word	0xffff8fea

000018e0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18e0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    18e2:	4604      	mov	r4, r0
    18e4:	b918      	cbnz	r0, 18ee <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    18e6:	4b16      	ldr	r3, [pc, #88]	; (1940 <mutex_init_platform+0x60>)
    18e8:	4816      	ldr	r0, [pc, #88]	; (1944 <mutex_init_platform+0x64>)
    18ea:	685b      	ldr	r3, [r3, #4]
    18ec:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18ee:	6863      	ldr	r3, [r4, #4]
    18f0:	2b04      	cmp	r3, #4
    18f2:	d023      	beq.n	193c <mutex_init_platform+0x5c>
    18f4:	2b08      	cmp	r3, #8
    18f6:	d021      	beq.n	193c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    18f8:	b9cb      	cbnz	r3, 192e <mutex_init_platform+0x4e>
    18fa:	6823      	ldr	r3, [r4, #0]
    18fc:	b9bb      	cbnz	r3, 192e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    18fe:	4812      	ldr	r0, [pc, #72]	; (1948 <mutex_init_platform+0x68>)
    1900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1908:	4621      	mov	r1, r4
    190a:	f002 fdab 	bl	4464 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    190e:	b908      	cbnz	r0, 1914 <mutex_init_platform+0x34>
    1910:	6823      	ldr	r3, [r4, #0]
    1912:	b91b      	cbnz	r3, 191c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1914:	4b0a      	ldr	r3, [pc, #40]	; (1940 <mutex_init_platform+0x60>)
    1916:	480d      	ldr	r0, [pc, #52]	; (194c <mutex_init_platform+0x6c>)
    1918:	685b      	ldr	r3, [r3, #4]
    191a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    191c:	6820      	ldr	r0, [r4, #0]
    191e:	2214      	movs	r2, #20
    1920:	2100      	movs	r1, #0
    1922:	f005 f9d7 	bl	6cd4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1926:	6863      	ldr	r3, [r4, #4]
    1928:	f043 0302 	orr.w	r3, r3, #2
    192c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    192e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1930:	f005 fcd0 	bl	72d4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1934:	6863      	ldr	r3, [r4, #4]
    1936:	f043 0301 	orr.w	r3, r3, #1
    193a:	6063      	str	r3, [r4, #4]
}
    193c:	bd10      	pop	{r4, pc}
    193e:	bf00      	nop
    1940:	200000e8 	.word	0x200000e8
    1944:	00007cd0 	.word	0x00007cd0
    1948:	200004d4 	.word	0x200004d4
    194c:	00007cf6 	.word	0x00007cf6

00001950 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1950:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1952:	4906      	ldr	r1, [pc, #24]	; (196c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1954:	4806      	ldr	r0, [pc, #24]	; (1970 <nrf_cc3xx_platform_mutex_init+0x20>)
    1956:	2340      	movs	r3, #64	; 0x40
    1958:	2214      	movs	r2, #20
    195a:	f005 fc8a 	bl	7272 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1962:	4904      	ldr	r1, [pc, #16]	; (1974 <nrf_cc3xx_platform_mutex_init+0x24>)
    1964:	4804      	ldr	r0, [pc, #16]	; (1978 <nrf_cc3xx_platform_mutex_init+0x28>)
    1966:	f004 bf23 	b.w	67b0 <nrf_cc3xx_platform_set_mutexes>
    196a:	bf00      	nop
    196c:	200004f4 	.word	0x200004f4
    1970:	200004d4 	.word	0x200004d4
    1974:	00007610 	.word	0x00007610
    1978:	00007600 	.word	0x00007600

0000197c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    197c:	4901      	ldr	r1, [pc, #4]	; (1984 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    197e:	2210      	movs	r2, #16
	str	r2, [r1]
    1980:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1982:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1984:	e000ed10 	.word	0xe000ed10

00001988 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1988:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    198a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    198c:	f380 8811 	msr	BASEPRI, r0
	isb
    1990:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1994:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1998:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    199a:	b662      	cpsie	i
	isb
    199c:	f3bf 8f6f 	isb	sy

	bx	lr
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop

000019a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    19a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    19a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    19a8:	f381 8811 	msr	BASEPRI, r1

	wfe
    19ac:	bf20      	wfe

	msr	BASEPRI, r0
    19ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    19b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop

000019b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    19b8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    19ba:	2b00      	cmp	r3, #0
    19bc:	db08      	blt.n	19d0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19be:	2201      	movs	r2, #1
    19c0:	f000 001f 	and.w	r0, r0, #31
    19c4:	fa02 f000 	lsl.w	r0, r2, r0
    19c8:	095b      	lsrs	r3, r3, #5
    19ca:	4a02      	ldr	r2, [pc, #8]	; (19d4 <arch_irq_enable+0x1c>)
    19cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    19d0:	4770      	bx	lr
    19d2:	bf00      	nop
    19d4:	e000e100 	.word	0xe000e100

000019d8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <arch_irq_is_enabled+0x18>)
    19da:	0942      	lsrs	r2, r0, #5
    19dc:	f000 001f 	and.w	r0, r0, #31
    19e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19e4:	2301      	movs	r3, #1
    19e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    19ea:	4010      	ands	r0, r2
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	e000e100 	.word	0xe000e100

000019f4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    19f4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    19f6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19f8:	2c07      	cmp	r4, #7
{
    19fa:	4605      	mov	r5, r0
    19fc:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19fe:	d90f      	bls.n	1a20 <z_arm_irq_priority_set+0x2c>
    1a00:	4a11      	ldr	r2, [pc, #68]	; (1a48 <z_arm_irq_priority_set+0x54>)
    1a02:	4912      	ldr	r1, [pc, #72]	; (1a4c <z_arm_irq_priority_set+0x58>)
    1a04:	4812      	ldr	r0, [pc, #72]	; (1a50 <z_arm_irq_priority_set+0x5c>)
    1a06:	2357      	movs	r3, #87	; 0x57
    1a08:	f005 f91c 	bl	6c44 <assert_print>
    1a0c:	4811      	ldr	r0, [pc, #68]	; (1a54 <z_arm_irq_priority_set+0x60>)
    1a0e:	4631      	mov	r1, r6
    1a10:	2307      	movs	r3, #7
    1a12:	462a      	mov	r2, r5
    1a14:	f005 f916 	bl	6c44 <assert_print>
    1a18:	480b      	ldr	r0, [pc, #44]	; (1a48 <z_arm_irq_priority_set+0x54>)
    1a1a:	2157      	movs	r1, #87	; 0x57
    1a1c:	f005 f90b 	bl	6c36 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1a20:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1a22:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a24:	bfac      	ite	ge
    1a26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2a:	4b0b      	ldrlt	r3, [pc, #44]	; (1a58 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a30:	bfb8      	it	lt
    1a32:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a36:	b2e4      	uxtb	r4, r4
    1a38:	bfaa      	itet	ge
    1a3a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a3e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a40:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1a44:	bd70      	pop	{r4, r5, r6, pc}
    1a46:	bf00      	nop
    1a48:	00007d23 	.word	0x00007d23
    1a4c:	00007d59 	.word	0x00007d59
    1a50:	000079d4 	.word	0x000079d4
    1a54:	00007d74 	.word	0x00007d74
    1a58:	e000ed14 	.word	0xe000ed14

00001a5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a5c:	bf30      	wfi
    b z_SysNmiOnReset
    1a5e:	f7ff bffd 	b.w	1a5c <z_SysNmiOnReset>
    1a62:	bf00      	nop

00001a64 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a64:	4a0b      	ldr	r2, [pc, #44]	; (1a94 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1a66:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <z_arm_prep_c+0x34>)
    1a6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a6e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a74:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a84:	f002 fc04 	bl	4290 <z_bss_zero>
	z_data_copy();
    1a88:	f004 fa92 	bl	5fb0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a8c:	f000 fa26 	bl	1edc <z_arm_interrupt_init>
	z_cstart();
    1a90:	f002 fc42 	bl	4318 <z_cstart>
    1a94:	00000000 	.word	0x00000000
    1a98:	e000ed00 	.word	0xe000ed00

00001a9c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a9c:	4a09      	ldr	r2, [pc, #36]	; (1ac4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a9e:	490a      	ldr	r1, [pc, #40]	; (1ac8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1aa0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1aa2:	6809      	ldr	r1, [r1, #0]
    1aa4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aa6:	4909      	ldr	r1, [pc, #36]	; (1acc <arch_swap+0x30>)
	_current->arch.basepri = key;
    1aa8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aaa:	684b      	ldr	r3, [r1, #4]
    1aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1ab0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1ab2:	2300      	movs	r3, #0
    1ab4:	f383 8811 	msr	BASEPRI, r3
    1ab8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1abc:	6893      	ldr	r3, [r2, #8]
}
    1abe:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1ac0:	4770      	bx	lr
    1ac2:	bf00      	nop
    1ac4:	20000b48 	.word	0x20000b48
    1ac8:	00007750 	.word	0x00007750
    1acc:	e000ed00 	.word	0xe000ed00

00001ad0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ad0:	4912      	ldr	r1, [pc, #72]	; (1b1c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1ad2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1ad4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1ad8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1ada:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1ade:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ae2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1ae4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ae8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1aec:	4f0c      	ldr	r7, [pc, #48]	; (1b20 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1aee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1af2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1af4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1af6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1af8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1afa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1afc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1afe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1b02:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1b04:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1b06:	f000 fa85 	bl	2014 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1b0a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1b0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1b12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1b16:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1b1a:	4770      	bx	lr
    ldr r1, =_kernel
    1b1c:	20000b48 	.word	0x20000b48
    ldr v4, =_SCS_ICSR
    1b20:	e000ed04 	.word	0xe000ed04

00001b24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1b24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1b28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1b2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1b2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1b32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1b34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1b38:	2902      	cmp	r1, #2
    beq _oops
    1b3a:	d0ff      	beq.n	1b3c <_oops>

00001b3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1b3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1b3e:	f005 f895 	bl	6c6c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1b42:	bd01      	pop	{r0, pc}

00001b44 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1b44:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1b48:	9b00      	ldr	r3, [sp, #0]
    1b4a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1b4e:	490a      	ldr	r1, [pc, #40]	; (1b78 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b56:	9b02      	ldr	r3, [sp, #8]
    1b58:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b5c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b64:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b68:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b6c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b6e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1b70:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1b72:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b74:	4770      	bx	lr
    1b76:	bf00      	nop
    1b78:	00006b13 	.word	0x00006b13

00001b7c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1b7c:	4a09      	ldr	r2, [pc, #36]	; (1ba4 <z_check_thread_stack_fail+0x28>)
{
    1b7e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1b80:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1b82:	b170      	cbz	r0, 1ba2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1b84:	f113 0f16 	cmn.w	r3, #22
    1b88:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1b8a:	d005      	beq.n	1b98 <z_check_thread_stack_fail+0x1c>
    1b8c:	f1a0 0220 	sub.w	r2, r0, #32
    1b90:	429a      	cmp	r2, r3
    1b92:	d805      	bhi.n	1ba0 <z_check_thread_stack_fail+0x24>
    1b94:	4283      	cmp	r3, r0
    1b96:	d203      	bcs.n	1ba0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1b98:	4281      	cmp	r1, r0
    1b9a:	bf28      	it	cs
    1b9c:	2000      	movcs	r0, #0
    1b9e:	4770      	bx	lr
    1ba0:	2000      	movs	r0, #0
}
    1ba2:	4770      	bx	lr
    1ba4:	20000b48 	.word	0x20000b48

00001ba8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ba8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1baa:	4b09      	ldr	r3, [pc, #36]	; (1bd0 <arch_switch_to_main_thread+0x28>)
    1bac:	6098      	str	r0, [r3, #8]
{
    1bae:	460d      	mov	r5, r1
    1bb0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1bb2:	f000 fa2f 	bl	2014 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1bb6:	4620      	mov	r0, r4
    1bb8:	f385 8809 	msr	PSP, r5
    1bbc:	2100      	movs	r1, #0
    1bbe:	b663      	cpsie	if
    1bc0:	f381 8811 	msr	BASEPRI, r1
    1bc4:	f3bf 8f6f 	isb	sy
    1bc8:	2200      	movs	r2, #0
    1bca:	2300      	movs	r3, #0
    1bcc:	f004 ffa1 	bl	6b12 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1bd0:	20000b48 	.word	0x20000b48

00001bd4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1bd4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1bd6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1bd8:	4a0b      	ldr	r2, [pc, #44]	; (1c08 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1bda:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1bdc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1bde:	bf1e      	ittt	ne
	movne	r1, #0
    1be0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1be2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1be4:	f005 fb67 	blne	72b6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1be8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1bea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1bee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1bf2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1bf6:	4905      	ldr	r1, [pc, #20]	; (1c0c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1bf8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1bfa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1bfc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1bfe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1c02:	4903      	ldr	r1, [pc, #12]	; (1c10 <_isr_wrapper+0x3c>)
	bx r1
    1c04:	4708      	bx	r1
    1c06:	0000      	.short	0x0000
	ldr r2, =_kernel
    1c08:	20000b48 	.word	0x20000b48
	ldr r1, =_sw_isr_table
    1c0c:	00007444 	.word	0x00007444
	ldr r1, =z_arm_int_exit
    1c10:	00001c15 	.word	0x00001c15

00001c14 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1c14:	4b04      	ldr	r3, [pc, #16]	; (1c28 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1c16:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1c18:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1c1a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1c1c:	d003      	beq.n	1c26 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1c1e:	4903      	ldr	r1, [pc, #12]	; (1c2c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1c24:	600a      	str	r2, [r1, #0]

00001c26 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1c26:	4770      	bx	lr
	ldr r3, =_kernel
    1c28:	20000b48 	.word	0x20000b48
	ldr r1, =_SCS_ICSR
    1c2c:	e000ed04 	.word	0xe000ed04

00001c30 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1c30:	4b26      	ldr	r3, [pc, #152]	; (1ccc <mem_manage_fault+0x9c>)
{
    1c32:	b570      	push	{r4, r5, r6, lr}
    1c34:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c3c:	0792      	lsls	r2, r2, #30
{
    1c3e:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1c40:	d521      	bpl.n	1c86 <mem_manage_fault+0x56>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1c42:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c46:	0616      	lsls	r6, r2, #24
    1c48:	d51d      	bpl.n	1c86 <mem_manage_fault+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1c4a:	b119      	cbz	r1, 1c54 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c52:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c5a:	06d1      	lsls	r1, r2, #27
    1c5c:	d416      	bmi.n	1c8c <mem_manage_fault+0x5c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c60:	079a      	lsls	r2, r3, #30
    1c62:	d413      	bmi.n	1c8c <mem_manage_fault+0x5c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c64:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c66:	4b19      	ldr	r3, [pc, #100]	; (1ccc <mem_manage_fault+0x9c>)
    1c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c6a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c6c:	bf42      	ittt	mi
    1c6e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1c70:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1c74:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c78:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1c7c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1c7e:	2300      	movs	r3, #0
    1c80:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1c82:	4620      	mov	r0, r4
    1c84:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1c86:	f06f 0015 	mvn.w	r0, #21
    1c8a:	e7e3      	b.n	1c54 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1c8c:	4e0f      	ldr	r6, [pc, #60]	; (1ccc <mem_manage_fault+0x9c>)
    1c8e:	6873      	ldr	r3, [r6, #4]
    1c90:	051b      	lsls	r3, r3, #20
    1c92:	d5e7      	bpl.n	1c64 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1c94:	4621      	mov	r1, r4
    1c96:	f7ff ff71 	bl	1b7c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1c9a:	4604      	mov	r4, r0
    1c9c:	b118      	cbz	r0, 1ca6 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1c9e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1ca2:	2402      	movs	r4, #2
    1ca4:	e7df      	b.n	1c66 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1ca6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1ca8:	06d9      	lsls	r1, r3, #27
    1caa:	d5db      	bpl.n	1c64 <mem_manage_fault+0x34>
    1cac:	4a08      	ldr	r2, [pc, #32]	; (1cd0 <mem_manage_fault+0xa0>)
    1cae:	4909      	ldr	r1, [pc, #36]	; (1cd4 <mem_manage_fault+0xa4>)
    1cb0:	4809      	ldr	r0, [pc, #36]	; (1cd8 <mem_manage_fault+0xa8>)
    1cb2:	f240 1349 	movw	r3, #329	; 0x149
    1cb6:	f004 ffc5 	bl	6c44 <assert_print>
    1cba:	4808      	ldr	r0, [pc, #32]	; (1cdc <mem_manage_fault+0xac>)
    1cbc:	f004 ffc2 	bl	6c44 <assert_print>
    1cc0:	4803      	ldr	r0, [pc, #12]	; (1cd0 <mem_manage_fault+0xa0>)
    1cc2:	f240 1149 	movw	r1, #329	; 0x149
    1cc6:	f004 ffb6 	bl	6c36 <assert_post_action>
    1cca:	e7cc      	b.n	1c66 <mem_manage_fault+0x36>
    1ccc:	e000ed00 	.word	0xe000ed00
    1cd0:	00007db4 	.word	0x00007db4
    1cd4:	00007dee 	.word	0x00007dee
    1cd8:	000079d4 	.word	0x000079d4
    1cdc:	00007e38 	.word	0x00007e38

00001ce0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1ce0:	4b0d      	ldr	r3, [pc, #52]	; (1d18 <bus_fault.constprop.0+0x38>)
    1ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ce8:	0592      	lsls	r2, r2, #22
    1cea:	d508      	bpl.n	1cfe <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cf0:	0412      	lsls	r2, r2, #16
    1cf2:	d504      	bpl.n	1cfe <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1cf4:	b118      	cbz	r0, 1cfe <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1cfc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1cfe:	4b06      	ldr	r3, [pc, #24]	; (1d18 <bus_fault.constprop.0+0x38>)
    1d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d04:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1d06:	bf58      	it	pl
    1d08:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1d0c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1d0e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1d12:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1d14:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1d16:	4770      	bx	lr
    1d18:	e000ed00 	.word	0xe000ed00

00001d1c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1d1c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1d1e:	4b5e      	ldr	r3, [pc, #376]	; (1e98 <z_arm_fault+0x17c>)
    1d20:	685c      	ldr	r4, [r3, #4]
{
    1d22:	b08a      	sub	sp, #40	; 0x28
    1d24:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1d26:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1d2a:	2600      	movs	r6, #0
    1d2c:	f386 8811 	msr	BASEPRI, r6
    1d30:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1d34:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1d38:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1d3c:	d108      	bne.n	1d50 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1d3e:	f002 030c 	and.w	r3, r2, #12
    1d42:	2b08      	cmp	r3, #8
    1d44:	d004      	beq.n	1d50 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1d46:	0711      	lsls	r1, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1d48:	bf5c      	itt	pl
    1d4a:	4605      	movpl	r5, r0
			*nested_exc = true;
    1d4c:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1d4e:	b97d      	cbnz	r5, 1d70 <z_arm_fault+0x54>
    1d50:	4a52      	ldr	r2, [pc, #328]	; (1e9c <z_arm_fault+0x180>)
    1d52:	4953      	ldr	r1, [pc, #332]	; (1ea0 <z_arm_fault+0x184>)
    1d54:	4853      	ldr	r0, [pc, #332]	; (1ea4 <z_arm_fault+0x188>)
    1d56:	f240 33fb 	movw	r3, #1019	; 0x3fb
    1d5a:	f004 ff73 	bl	6c44 <assert_print>
    1d5e:	4852      	ldr	r0, [pc, #328]	; (1ea8 <z_arm_fault+0x18c>)
    1d60:	f004 ff70 	bl	6c44 <assert_print>
    1d64:	484d      	ldr	r0, [pc, #308]	; (1e9c <z_arm_fault+0x180>)
    1d66:	f240 31fb 	movw	r1, #1019	; 0x3fb
    1d6a:	f004 ff64 	bl	6c36 <assert_post_action>
    1d6e:	2500      	movs	r5, #0
	*recoverable = false;
    1d70:	2300      	movs	r3, #0
    1d72:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1d76:	1ee3      	subs	r3, r4, #3
    1d78:	2b03      	cmp	r3, #3
    1d7a:	f200 8086 	bhi.w	1e8a <z_arm_fault+0x16e>
    1d7e:	e8df f003 	tbb	[pc, r3]
    1d82:	6f02      	.short	0x6f02
    1d84:	7773      	.short	0x7773
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1d86:	4b44      	ldr	r3, [pc, #272]	; (1e98 <z_arm_fault+0x17c>)
    1d88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1d8a:	f014 0402 	ands.w	r4, r4, #2
    1d8e:	d17c      	bne.n	1e8a <z_arm_fault+0x16e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d92:	2a00      	cmp	r2, #0
    1d94:	db0a      	blt.n	1dac <z_arm_fault+0x90>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	d554      	bpl.n	1e46 <z_arm_fault+0x12a>
	uint16_t fault_insn = *(ret_addr - 1);
    1d9c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1d9e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1da2:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1da6:	4291      	cmp	r1, r2
    1da8:	d119      	bne.n	1dde <z_arm_fault+0xc2>
			reason = esf->basic.r0;
    1daa:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1db0:	b99b      	cbnz	r3, 1dda <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1db2:	2220      	movs	r2, #32
    1db4:	4629      	mov	r1, r5
    1db6:	a802      	add	r0, sp, #8
    1db8:	f004 ff81 	bl	6cbe <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dbe:	2e00      	cmp	r6, #0
    1dc0:	d065      	beq.n	1e8e <z_arm_fault+0x172>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1dc6:	b922      	cbnz	r2, 1dd2 <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1dc8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1dcc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1dd0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1dd2:	a902      	add	r1, sp, #8
    1dd4:	4620      	mov	r0, r4
    1dd6:	f004 ff47 	bl	6c68 <z_arm_fatal_error>
}
    1dda:	b00a      	add	sp, #40	; 0x28
    1ddc:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_MMFSR != 0) {
    1dde:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1de2:	b13a      	cbz	r2, 1df4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1de4:	f10d 0207 	add.w	r2, sp, #7
    1de8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1dea:	4628      	mov	r0, r5
    1dec:	f7ff ff20 	bl	1c30 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1df0:	4604      	mov	r4, r0
		break;
    1df2:	e7db      	b.n	1dac <z_arm_fault+0x90>
		} else if (SCB_BFSR != 0) {
    1df4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1df8:	b12a      	cbz	r2, 1e06 <z_arm_fault+0xea>
			reason = bus_fault(esf, 1, recoverable);
    1dfa:	f10d 0107 	add.w	r1, sp, #7
    1dfe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1e00:	f7ff ff6e 	bl	1ce0 <bus_fault.constprop.0>
    1e04:	e7f4      	b.n	1df0 <z_arm_fault+0xd4>
		} else if (SCB_UFSR != 0) {
    1e06:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1e08:	b292      	uxth	r2, r2
    1e0a:	b162      	cbz	r2, 1e26 <z_arm_fault+0x10a>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e1a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e1e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e22:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1e24:	e7c2      	b.n	1dac <z_arm_fault+0x90>
			__ASSERT(0,
    1e26:	4921      	ldr	r1, [pc, #132]	; (1eac <z_arm_fault+0x190>)
    1e28:	4a1c      	ldr	r2, [pc, #112]	; (1e9c <z_arm_fault+0x180>)
    1e2a:	481e      	ldr	r0, [pc, #120]	; (1ea4 <z_arm_fault+0x188>)
    1e2c:	f240 23cd 	movw	r3, #717	; 0x2cd
    1e30:	f004 ff08 	bl	6c44 <assert_print>
    1e34:	481e      	ldr	r0, [pc, #120]	; (1eb0 <z_arm_fault+0x194>)
    1e36:	f004 ff05 	bl	6c44 <assert_print>
    1e3a:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    1e3e:	4817      	ldr	r0, [pc, #92]	; (1e9c <z_arm_fault+0x180>)
    1e40:	f004 fef9 	bl	6c36 <assert_post_action>
    1e44:	e7b2      	b.n	1dac <z_arm_fault+0x90>
    1e46:	4919      	ldr	r1, [pc, #100]	; (1eac <z_arm_fault+0x190>)
    1e48:	4a14      	ldr	r2, [pc, #80]	; (1e9c <z_arm_fault+0x180>)
    1e4a:	4816      	ldr	r0, [pc, #88]	; (1ea4 <z_arm_fault+0x188>)
    1e4c:	f240 23d1 	movw	r3, #721	; 0x2d1
    1e50:	f004 fef8 	bl	6c44 <assert_print>
    1e54:	4817      	ldr	r0, [pc, #92]	; (1eb4 <z_arm_fault+0x198>)
    1e56:	f004 fef5 	bl	6c44 <assert_print>
    1e5a:	f240 21d1 	movw	r1, #721	; 0x2d1
    1e5e:	e7ee      	b.n	1e3e <z_arm_fault+0x122>
		reason = mem_manage_fault(esf, 0, recoverable);
    1e60:	f10d 0207 	add.w	r2, sp, #7
    1e64:	2100      	movs	r1, #0
    1e66:	e7c0      	b.n	1dea <z_arm_fault+0xce>
		reason = bus_fault(esf, 0, recoverable);
    1e68:	f10d 0107 	add.w	r1, sp, #7
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7c7      	b.n	1e00 <z_arm_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e70:	4b09      	ldr	r3, [pc, #36]	; (1e98 <z_arm_fault+0x17c>)
    1e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e80:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e84:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e88:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1e8a:	2400      	movs	r4, #0
    1e8c:	e78e      	b.n	1dac <z_arm_fault+0x90>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1e8e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1e92:	f023 0301 	bic.w	r3, r3, #1
    1e96:	e79b      	b.n	1dd0 <z_arm_fault+0xb4>
    1e98:	e000ed00 	.word	0xe000ed00
    1e9c:	00007db4 	.word	0x00007db4
    1ea0:	00007e5b 	.word	0x00007e5b
    1ea4:	000079d4 	.word	0x000079d4
    1ea8:	00007e6e 	.word	0x00007e6e
    1eac:	00007a7c 	.word	0x00007a7c
    1eb0:	00007eac 	.word	0x00007eac
    1eb4:	00007ed0 	.word	0x00007ed0

00001eb8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1eb8:	4a02      	ldr	r2, [pc, #8]	; (1ec4 <z_arm_fault_init+0xc>)
    1eba:	6953      	ldr	r3, [r2, #20]
    1ebc:	f043 0310 	orr.w	r3, r3, #16
    1ec0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1ec2:	4770      	bx	lr
    1ec4:	e000ed00 	.word	0xe000ed00

00001ec8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1ec8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ecc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1ed0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1ed2:	4672      	mov	r2, lr
	bl z_arm_fault
    1ed4:	f7ff ff22 	bl	1d1c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1ed8:	bd01      	pop	{r0, pc}
    1eda:	bf00      	nop

00001edc <z_arm_interrupt_init>:
    1edc:	4804      	ldr	r0, [pc, #16]	; (1ef0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1ede:	2300      	movs	r3, #0
    1ee0:	2120      	movs	r1, #32
    1ee2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1ee4:	3301      	adds	r3, #1
    1ee6:	2b30      	cmp	r3, #48	; 0x30
    1ee8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1eec:	d1f9      	bne.n	1ee2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1eee:	4770      	bx	lr
    1ef0:	e000e100 	.word	0xe000e100

00001ef4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1ef4:	2000      	movs	r0, #0
    msr CONTROL, r0
    1ef6:	f380 8814 	msr	CONTROL, r0
    isb
    1efa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1efe:	f005 fa2b 	bl	7358 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f02:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f04:	490d      	ldr	r1, [pc, #52]	; (1f3c <__start+0x48>)
    str r0, [r1]
    1f06:	6008      	str	r0, [r1, #0]
    dsb
    1f08:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f0c:	480c      	ldr	r0, [pc, #48]	; (1f40 <__start+0x4c>)
    msr msp, r0
    1f0e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1f12:	f000 f82b 	bl	1f6c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f16:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1f18:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1f1c:	4809      	ldr	r0, [pc, #36]	; (1f44 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1f1e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1f22:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1f24:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1f28:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1f2c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1f2e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1f30:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1f34:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1f38:	f7ff fd94 	bl	1a64 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1f3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f40:	200021e0 	.word	0x200021e0
    ldr r0, =z_interrupt_stacks
    1f44:	20002360 	.word	0x20002360

00001f48 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1f48:	4907      	ldr	r1, [pc, #28]	; (1f68 <z_arm_clear_arm_mpu_config+0x20>)
    1f4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1f4e:	2300      	movs	r3, #0
	int num_regions =
    1f50:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1f54:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1f56:	4293      	cmp	r3, r2
    1f58:	d100      	bne.n	1f5c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1f5a:	4770      	bx	lr
  MPU->RNR = rnr;
    1f5c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1f60:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1f64:	3301      	adds	r3, #1
    1f66:	e7f6      	b.n	1f56 <z_arm_clear_arm_mpu_config+0xe>
    1f68:	e000ed00 	.word	0xe000ed00

00001f6c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1f6c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1f6e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1f70:	2300      	movs	r3, #0
    1f72:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f76:	f7ff ffe7 	bl	1f48 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f7a:	4b14      	ldr	r3, [pc, #80]	; (1fcc <z_arm_init_arch_hw_at_boot+0x60>)
    1f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1f94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1f98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1f9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1fa0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1fa4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1fa8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1fac:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1fb0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1fb4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1fb8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1fbc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1fc0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fc6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1fca:	bd08      	pop	{r3, pc}
    1fcc:	e000e100 	.word	0xe000e100

00001fd0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1fd0:	4b08      	ldr	r3, [pc, #32]	; (1ff4 <z_impl_k_thread_abort+0x24>)
    1fd2:	689b      	ldr	r3, [r3, #8]
    1fd4:	4283      	cmp	r3, r0
    1fd6:	d10b      	bne.n	1ff0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1fd8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1fdc:	b143      	cbz	r3, 1ff0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1fde:	4b06      	ldr	r3, [pc, #24]	; (1ff8 <z_impl_k_thread_abort+0x28>)
    1fe0:	685a      	ldr	r2, [r3, #4]
    1fe2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1fe6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1fee:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1ff0:	f003 bf2a 	b.w	5e48 <z_thread_abort>
    1ff4:	20000b48 	.word	0x20000b48
    1ff8:	e000ed00 	.word	0xe000ed00

00001ffc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ffc:	4b02      	ldr	r3, [pc, #8]	; (2008 <z_arm_configure_static_mpu_regions+0xc>)
    1ffe:	4a03      	ldr	r2, [pc, #12]	; (200c <z_arm_configure_static_mpu_regions+0x10>)
    2000:	4803      	ldr	r0, [pc, #12]	; (2010 <z_arm_configure_static_mpu_regions+0x14>)
    2002:	2101      	movs	r1, #1
    2004:	f000 b86e 	b.w	20e4 <arm_core_mpu_configure_static_mpu_regions>
    2008:	20040000 	.word	0x20040000
    200c:	20000000 	.word	0x20000000
    2010:	00007624 	.word	0x00007624

00002014 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2014:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2016:	4b05      	ldr	r3, [pc, #20]	; (202c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2018:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    201a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    201c:	4a04      	ldr	r2, [pc, #16]	; (2030 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    201e:	2120      	movs	r1, #32
    2020:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2024:	4618      	mov	r0, r3
    2026:	2101      	movs	r1, #1
    2028:	f000 b884 	b.w	2134 <arm_core_mpu_configure_dynamic_mpu_regions>
    202c:	200009f4 	.word	0x200009f4
    2030:	150b0000 	.word	0x150b0000

00002034 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2036:	4f1f      	ldr	r7, [pc, #124]	; (20b4 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2038:	2600      	movs	r6, #0
    203a:	428e      	cmp	r6, r1
    203c:	db01      	blt.n	2042 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    203e:	4610      	mov	r0, r2
    2040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2042:	6844      	ldr	r4, [r0, #4]
    2044:	b39c      	cbz	r4, 20ae <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    2046:	b153      	cbz	r3, 205e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2048:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    204c:	ea14 0f0c 	tst.w	r4, ip
    2050:	d118      	bne.n	2084 <mpu_configure_regions+0x50>
		&&
    2052:	2c1f      	cmp	r4, #31
    2054:	d916      	bls.n	2084 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2056:	6805      	ldr	r5, [r0, #0]
		&&
    2058:	ea1c 0f05 	tst.w	ip, r5
    205c:	d112      	bne.n	2084 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    205e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2060:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2062:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2066:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2068:	d90f      	bls.n	208a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    206a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    206e:	d80e      	bhi.n	208e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2070:	3c01      	subs	r4, #1
    2072:	fab4 f484 	clz	r4, r4
    2076:	f1c4 041f 	rsb	r4, r4, #31
    207a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    207c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    207e:	ea4c 0404 	orr.w	r4, ip, r4
    2082:	d906      	bls.n	2092 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2084:	f06f 0215 	mvn.w	r2, #21
    2088:	e7d9      	b.n	203e <mpu_configure_regions+0xa>
		return REGION_32B;
    208a:	2408      	movs	r4, #8
    208c:	e7f6      	b.n	207c <mpu_configure_regions+0x48>
		return REGION_4G;
    208e:	243e      	movs	r4, #62	; 0x3e
    2090:	e7f4      	b.n	207c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2092:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2096:	4315      	orrs	r5, r2
    2098:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    209c:	f044 0401 	orr.w	r4, r4, #1
    20a0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20a4:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    20a8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20aa:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    20ae:	3601      	adds	r6, #1
    20b0:	300c      	adds	r0, #12
    20b2:	e7c2      	b.n	203a <mpu_configure_regions+0x6>
    20b4:	e000ed00 	.word	0xe000ed00

000020b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <arm_core_mpu_enable+0x14>)
    20ba:	2205      	movs	r2, #5
    20bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    20c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20c4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop
    20cc:	e000ed00 	.word	0xe000ed00

000020d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    20d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    20d4:	4b02      	ldr	r3, [pc, #8]	; (20e0 <arm_core_mpu_disable+0x10>)
    20d6:	2200      	movs	r2, #0
    20d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	e000ed00 	.word	0xe000ed00

000020e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    20e4:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    20e6:	4d0e      	ldr	r5, [pc, #56]	; (2120 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    20e8:	2301      	movs	r3, #1
    20ea:	782a      	ldrb	r2, [r5, #0]
    20ec:	f7ff ffa2 	bl	2034 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    20f0:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    20f2:	3016      	adds	r0, #22
{
    20f4:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    20f6:	d111      	bne.n	211c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    20f8:	f240 1311 	movw	r3, #273	; 0x111
    20fc:	4a09      	ldr	r2, [pc, #36]	; (2124 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    20fe:	490a      	ldr	r1, [pc, #40]	; (2128 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2100:	480a      	ldr	r0, [pc, #40]	; (212c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2102:	f004 fd9f 	bl	6c44 <assert_print>
    2106:	4621      	mov	r1, r4
    2108:	4809      	ldr	r0, [pc, #36]	; (2130 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    210a:	f004 fd9b 	bl	6c44 <assert_print>
			regions_num);
	}
}
    210e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2112:	4804      	ldr	r0, [pc, #16]	; (2124 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2114:	f240 1111 	movw	r1, #273	; 0x111
    2118:	f004 bd8d 	b.w	6c36 <assert_post_action>
}
    211c:	bd38      	pop	{r3, r4, r5, pc}
    211e:	bf00      	nop
    2120:	20000d68 	.word	0x20000d68
    2124:	00007f00 	.word	0x00007f00
    2128:	00007a7c 	.word	0x00007a7c
    212c:	000079d4 	.word	0x000079d4
    2130:	00007f37 	.word	0x00007f37

00002134 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2134:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2136:	4a12      	ldr	r2, [pc, #72]	; (2180 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2138:	2300      	movs	r3, #0
    213a:	7812      	ldrb	r2, [r2, #0]
    213c:	f7ff ff7a 	bl	2034 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2140:	f110 0f16 	cmn.w	r0, #22
    2144:	460c      	mov	r4, r1
    2146:	d009      	beq.n	215c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
    2148:	4a0e      	ldr	r2, [pc, #56]	; (2184 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    214a:	2807      	cmp	r0, #7
    214c:	dd00      	ble.n	2150 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    214e:	bd10      	pop	{r4, pc}
    2150:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2154:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2158:	3001      	adds	r0, #1
    215a:	e7f6      	b.n	214a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    215c:	4a0a      	ldr	r2, [pc, #40]	; (2188 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    215e:	490b      	ldr	r1, [pc, #44]	; (218c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2160:	480b      	ldr	r0, [pc, #44]	; (2190 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2162:	f44f 7398 	mov.w	r3, #304	; 0x130
    2166:	f004 fd6d 	bl	6c44 <assert_print>
    216a:	4621      	mov	r1, r4
    216c:	4809      	ldr	r0, [pc, #36]	; (2194 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    216e:	f004 fd69 	bl	6c44 <assert_print>
}
    2172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2176:	4804      	ldr	r0, [pc, #16]	; (2188 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2178:	f44f 7198 	mov.w	r1, #304	; 0x130
    217c:	f004 bd5b 	b.w	6c36 <assert_post_action>
    2180:	20000d68 	.word	0x20000d68
    2184:	e000ed00 	.word	0xe000ed00
    2188:	00007f00 	.word	0x00007f00
    218c:	00007a7c 	.word	0x00007a7c
    2190:	000079d4 	.word	0x000079d4
    2194:	00007f63 	.word	0x00007f63

00002198 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2198:	4927      	ldr	r1, [pc, #156]	; (2238 <z_arm_mpu_init+0xa0>)
{
    219a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    219c:	680c      	ldr	r4, [r1, #0]
    219e:	2c08      	cmp	r4, #8
    21a0:	d913      	bls.n	21ca <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    21a2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    21a6:	4a25      	ldr	r2, [pc, #148]	; (223c <z_arm_mpu_init+0xa4>)
    21a8:	4925      	ldr	r1, [pc, #148]	; (2240 <z_arm_mpu_init+0xa8>)
    21aa:	4826      	ldr	r0, [pc, #152]	; (2244 <z_arm_mpu_init+0xac>)
    21ac:	f004 fd4a 	bl	6c44 <assert_print>
    21b0:	4825      	ldr	r0, [pc, #148]	; (2248 <z_arm_mpu_init+0xb0>)
    21b2:	2208      	movs	r2, #8
    21b4:	4621      	mov	r1, r4
    21b6:	f004 fd45 	bl	6c44 <assert_print>
    21ba:	4820      	ldr	r0, [pc, #128]	; (223c <z_arm_mpu_init+0xa4>)
    21bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    21c0:	f004 fd39 	bl	6c36 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    21c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    21c8:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    21ca:	f7ff ff81 	bl	20d0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    21ce:	6848      	ldr	r0, [r1, #4]
    21d0:	491e      	ldr	r1, [pc, #120]	; (224c <z_arm_mpu_init+0xb4>)
    21d2:	2200      	movs	r2, #0
    21d4:	4294      	cmp	r4, r2
    21d6:	f100 000c 	add.w	r0, r0, #12
    21da:	d11a      	bne.n	2212 <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    21dc:	4b1c      	ldr	r3, [pc, #112]	; (2250 <z_arm_mpu_init+0xb8>)
    21de:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    21e0:	f7ff ff6a 	bl	20b8 <arm_core_mpu_enable>
	__ASSERT(
    21e4:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    21e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    21ec:	2b08      	cmp	r3, #8
    21ee:	d00e      	beq.n	220e <z_arm_mpu_init+0x76>
    21f0:	4918      	ldr	r1, [pc, #96]	; (2254 <z_arm_mpu_init+0xbc>)
    21f2:	4a12      	ldr	r2, [pc, #72]	; (223c <z_arm_mpu_init+0xa4>)
    21f4:	4813      	ldr	r0, [pc, #76]	; (2244 <z_arm_mpu_init+0xac>)
    21f6:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    21fa:	f004 fd23 	bl	6c44 <assert_print>
    21fe:	4816      	ldr	r0, [pc, #88]	; (2258 <z_arm_mpu_init+0xc0>)
    2200:	f004 fd20 	bl	6c44 <assert_print>
    2204:	480d      	ldr	r0, [pc, #52]	; (223c <z_arm_mpu_init+0xa4>)
    2206:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    220a:	f004 fd14 	bl	6c36 <assert_post_action>
	return 0;
    220e:	2000      	movs	r0, #0
    2210:	e7da      	b.n	21c8 <z_arm_mpu_init+0x30>
    2212:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2216:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    221a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    221e:	4313      	orrs	r3, r2
    2220:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2224:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2228:	f850 3c04 	ldr.w	r3, [r0, #-4]
    222c:	f043 0301 	orr.w	r3, r3, #1
    2230:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2234:	3201      	adds	r2, #1
    2236:	e7cd      	b.n	21d4 <z_arm_mpu_init+0x3c>
    2238:	00007630 	.word	0x00007630
    223c:	00007f00 	.word	0x00007f00
    2240:	00007a7c 	.word	0x00007a7c
    2244:	000079d4 	.word	0x000079d4
    2248:	00007f90 	.word	0x00007f90
    224c:	e000ed00 	.word	0xe000ed00
    2250:	20000d68 	.word	0x20000d68
    2254:	00007fc4 	.word	0x00007fc4
    2258:	00008014 	.word	0x00008014

0000225c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    225c:	4b01      	ldr	r3, [pc, #4]	; (2264 <__stdout_hook_install+0x8>)
    225e:	6018      	str	r0, [r3, #0]
}
    2260:	4770      	bx	lr
    2262:	bf00      	nop
    2264:	20000030 	.word	0x20000030

00002268 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2268:	3902      	subs	r1, #2
    226a:	2901      	cmp	r1, #1
    226c:	d802      	bhi.n	2274 <z_impl_zephyr_fputc+0xc>
    226e:	4b03      	ldr	r3, [pc, #12]	; (227c <z_impl_zephyr_fputc+0x14>)
    2270:	681b      	ldr	r3, [r3, #0]
    2272:	4718      	bx	r3
}
    2274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2278:	4770      	bx	lr
    227a:	bf00      	nop
    227c:	20000030 	.word	0x20000030

00002280 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    2280:	b40f      	push	{r0, r1, r2, r3}
    2282:	b507      	push	{r0, r1, r2, lr}
    2284:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2286:	2102      	movs	r1, #2
{
    2288:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    228c:	4804      	ldr	r0, [pc, #16]	; (22a0 <printf+0x20>)
	va_start(vargs, format);
    228e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2290:	f7fe fd40 	bl	d14 <cbvprintf>
	va_end(vargs);

	return r;
}
    2294:	b003      	add	sp, #12
    2296:	f85d eb04 	ldr.w	lr, [sp], #4
    229a:	b004      	add	sp, #16
    229c:	4770      	bx	lr
    229e:	bf00      	nop
    22a0:	00006ced 	.word	0x00006ced

000022a4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    22a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    22a6:	f04f 0320 	mov.w	r3, #32
    22aa:	f3ef 8011 	mrs	r0, BASEPRI
    22ae:	f383 8812 	msr	BASEPRI_MAX, r3
    22b2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    22b6:	4a11      	ldr	r2, [pc, #68]	; (22fc <nordicsemi_nrf52_init+0x58>)
    22b8:	2301      	movs	r3, #1
    22ba:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    22be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    22c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    22c6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    22ca:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    22ce:	2c08      	cmp	r4, #8
    22d0:	d108      	bne.n	22e4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    22d2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    22d6:	2905      	cmp	r1, #5
    22d8:	d804      	bhi.n	22e4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    22da:	4c09      	ldr	r4, [pc, #36]	; (2300 <nordicsemi_nrf52_init+0x5c>)
    22dc:	5c61      	ldrb	r1, [r4, r1]
    22de:	b109      	cbz	r1, 22e4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    22e0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    22e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22e8:	2201      	movs	r2, #1
    22ea:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    22ee:	f380 8811 	msr	BASEPRI, r0
    22f2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    22f6:	2000      	movs	r0, #0
    22f8:	bd10      	pop	{r4, pc}
    22fa:	bf00      	nop
    22fc:	4001e000 	.word	0x4001e000
    2300:	00008044 	.word	0x00008044

00002304 <sys_arch_reboot>:
    *p_gpregret = val;
    2304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2308:	b2c0      	uxtb	r0, r0
    230a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    230e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2312:	4905      	ldr	r1, [pc, #20]	; (2328 <sys_arch_reboot+0x24>)
    2314:	4b05      	ldr	r3, [pc, #20]	; (232c <sys_arch_reboot+0x28>)
    2316:	68ca      	ldr	r2, [r1, #12]
    2318:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    231c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    231e:	60cb      	str	r3, [r1, #12]
    2320:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2324:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2326:	e7fd      	b.n	2324 <sys_arch_reboot+0x20>
    2328:	e000ed00 	.word	0xe000ed00
    232c:	05fa0004 	.word	0x05fa0004

00002330 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2330:	b120      	cbz	r0, 233c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2332:	4b03      	ldr	r3, [pc, #12]	; (2340 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2334:	0180      	lsls	r0, r0, #6
    2336:	f043 0301 	orr.w	r3, r3, #1
    233a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    233c:	4770      	bx	lr
    233e:	bf00      	nop
    2340:	000075f0 	.word	0x000075f0

00002344 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2344:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2346:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2348:	490a      	ldr	r1, [pc, #40]	; (2374 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    234a:	4a0b      	ldr	r2, [pc, #44]	; (2378 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    234c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    234e:	2340      	movs	r3, #64	; 0x40
    2350:	9300      	str	r3, [sp, #0]
    2352:	1149      	asrs	r1, r1, #5
{
    2354:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2356:	4623      	mov	r3, r4
    2358:	4808      	ldr	r0, [pc, #32]	; (237c <onoff_start+0x38>)
    235a:	f004 fcee 	bl	6d3a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    235e:	1e01      	subs	r1, r0, #0
    2360:	da05      	bge.n	236e <onoff_start+0x2a>
		notify(mgr, err);
    2362:	4628      	mov	r0, r5
    2364:	4623      	mov	r3, r4
	}
}
    2366:	b003      	add	sp, #12
    2368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    236c:	4718      	bx	r3
}
    236e:	b003      	add	sp, #12
    2370:	bd30      	pop	{r4, r5, pc}
    2372:	bf00      	nop
    2374:	20000a10 	.word	0x20000a10
    2378:	00006dab 	.word	0x00006dab
    237c:	000073cc 	.word	0x000073cc

00002380 <get_status>:
{
    2380:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2382:	b2cc      	uxtb	r4, r1
    2384:	2c01      	cmp	r4, #1
{
    2386:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2388:	d909      	bls.n	239e <get_status+0x1e>
    238a:	4909      	ldr	r1, [pc, #36]	; (23b0 <get_status+0x30>)
    238c:	4809      	ldr	r0, [pc, #36]	; (23b4 <get_status+0x34>)
    238e:	4a0a      	ldr	r2, [pc, #40]	; (23b8 <get_status+0x38>)
    2390:	2379      	movs	r3, #121	; 0x79
    2392:	f004 fc57 	bl	6c44 <assert_print>
    2396:	4808      	ldr	r0, [pc, #32]	; (23b8 <get_status+0x38>)
    2398:	2179      	movs	r1, #121	; 0x79
    239a:	f004 fc4c 	bl	6c36 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    239e:	6929      	ldr	r1, [r5, #16]
    23a0:	230c      	movs	r3, #12
    23a2:	fb04 1403 	mla	r4, r4, r3, r1
    23a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    23a8:	f000 0007 	and.w	r0, r0, #7
    23ac:	bd38      	pop	{r3, r4, r5, pc}
    23ae:	bf00      	nop
    23b0:	00008087 	.word	0x00008087
    23b4:	000079d4 	.word	0x000079d4
    23b8:	0000804a 	.word	0x0000804a

000023bc <stop>:
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    23c0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    23c2:	6906      	ldr	r6, [r0, #16]
{
    23c4:	4605      	mov	r5, r0
    23c6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    23c8:	d90b      	bls.n	23e2 <stop+0x26>
    23ca:	4918      	ldr	r1, [pc, #96]	; (242c <stop+0x70>)
    23cc:	4818      	ldr	r0, [pc, #96]	; (2430 <stop+0x74>)
    23ce:	4a19      	ldr	r2, [pc, #100]	; (2434 <stop+0x78>)
    23d0:	f240 134d 	movw	r3, #333	; 0x14d
    23d4:	f004 fc36 	bl	6c44 <assert_print>
    23d8:	4816      	ldr	r0, [pc, #88]	; (2434 <stop+0x78>)
    23da:	f240 114d 	movw	r1, #333	; 0x14d
    23de:	f004 fc2a 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    23e2:	f04f 0320 	mov.w	r3, #32
    23e6:	f3ef 8111 	mrs	r1, BASEPRI
    23ea:	f383 8812 	msr	BASEPRI_MAX, r3
    23ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    23f2:	220c      	movs	r2, #12
    23f4:	fb02 6304 	mla	r3, r2, r4, r6
    23f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    23fa:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    23fe:	d001      	beq.n	2404 <stop+0x48>
    2400:	429f      	cmp	r7, r3
    2402:	d110      	bne.n	2426 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2404:	fb02 6604 	mla	r6, r2, r4, r6
    2408:	2301      	movs	r3, #1
    240a:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    240c:	2000      	movs	r0, #0
	__asm__ volatile(
    240e:	f381 8811 	msr	BASEPRI, r1
    2412:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2416:	b928      	cbnz	r0, 2424 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2418:	6869      	ldr	r1, [r5, #4]
    241a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    241e:	6863      	ldr	r3, [r4, #4]
    2420:	4798      	blx	r3
	return 0;
    2422:	2000      	movs	r0, #0
}
    2424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    242a:	e7f0      	b.n	240e <stop+0x52>
    242c:	00008087 	.word	0x00008087
    2430:	000079d4 	.word	0x000079d4
    2434:	0000804a 	.word	0x0000804a

00002438 <onoff_stop>:
{
    2438:	b570      	push	{r4, r5, r6, lr}
    243a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    243c:	4906      	ldr	r1, [pc, #24]	; (2458 <onoff_stop+0x20>)
    243e:	1a41      	subs	r1, r0, r1
{
    2440:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2442:	1149      	asrs	r1, r1, #5
    2444:	4805      	ldr	r0, [pc, #20]	; (245c <onoff_stop+0x24>)
    2446:	2240      	movs	r2, #64	; 0x40
    2448:	f7ff ffb8 	bl	23bc <stop>
	notify(mgr, res);
    244c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    244e:	4601      	mov	r1, r0
	notify(mgr, res);
    2450:	4620      	mov	r0, r4
}
    2452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2456:	4718      	bx	r3
    2458:	20000a10 	.word	0x20000a10
    245c:	000073cc 	.word	0x000073cc

00002460 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2460:	2200      	movs	r2, #0
{
    2462:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2464:	2101      	movs	r1, #1
{
    2466:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2468:	4610      	mov	r0, r2
    246a:	f7ff fac3 	bl	19f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    246e:	480f      	ldr	r0, [pc, #60]	; (24ac <clk_init+0x4c>)
    2470:	f001 f96c 	bl	374c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2474:	4b0e      	ldr	r3, [pc, #56]	; (24b0 <clk_init+0x50>)
    2476:	4298      	cmp	r0, r3
    2478:	d115      	bne.n	24a6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    247a:	f001 f98d 	bl	3798 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    247e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2480:	490c      	ldr	r1, [pc, #48]	; (24b4 <clk_init+0x54>)
    2482:	4630      	mov	r0, r6
    2484:	f004 fb32 	bl	6aec <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2488:	2800      	cmp	r0, #0
    248a:	db0b      	blt.n	24a4 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    248c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    248e:	4909      	ldr	r1, [pc, #36]	; (24b4 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2490:	2501      	movs	r5, #1
    2492:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2494:	f104 0020 	add.w	r0, r4, #32
    2498:	f004 fb28 	bl	6aec <onoff_manager_init>
		if (err < 0) {
    249c:	2800      	cmp	r0, #0
    249e:	db01      	blt.n	24a4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    24a0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    24a2:	2000      	movs	r0, #0
}
    24a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    24a6:	f06f 0004 	mvn.w	r0, #4
    24aa:	e7fb      	b.n	24a4 <clk_init+0x44>
    24ac:	000024ed 	.word	0x000024ed
    24b0:	0bad0000 	.word	0x0bad0000
    24b4:	00007678 	.word	0x00007678

000024b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    24b8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    24ba:	230c      	movs	r3, #12
    24bc:	4809      	ldr	r0, [pc, #36]	; (24e4 <clkstarted_handle.constprop.0+0x2c>)
    24be:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    24c0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    24c2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    24c4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    24c8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    24ca:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    24cc:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    24ce:	4418      	add	r0, r3
    24d0:	f004 fc20 	bl	6d14 <set_on_state>
	if (callback) {
    24d4:	b12d      	cbz	r5, 24e2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    24d6:	4632      	mov	r2, r6
    24d8:	462b      	mov	r3, r5
    24da:	4803      	ldr	r0, [pc, #12]	; (24e8 <clkstarted_handle.constprop.0+0x30>)
}
    24dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    24e0:	4718      	bx	r3
}
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	20000a10 	.word	0x20000a10
    24e8:	000073cc 	.word	0x000073cc

000024ec <clock_event_handler>:
	switch (event) {
    24ec:	2801      	cmp	r0, #1
{
    24ee:	b508      	push	{r3, lr}
	switch (event) {
    24f0:	d006      	beq.n	2500 <clock_event_handler+0x14>
    24f2:	2803      	cmp	r0, #3
    24f4:	d008      	beq.n	2508 <clock_event_handler+0x1c>
    24f6:	b9a8      	cbnz	r0, 2524 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    24f8:	4b10      	ldr	r3, [pc, #64]	; (253c <clock_event_handler+0x50>)
    24fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    24fc:	075b      	lsls	r3, r3, #29
    24fe:	d11b      	bne.n	2538 <clock_event_handler+0x4c>
}
    2500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2504:	f7ff bfd8 	b.w	24b8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2508:	490d      	ldr	r1, [pc, #52]	; (2540 <clock_event_handler+0x54>)
    250a:	4a0e      	ldr	r2, [pc, #56]	; (2544 <clock_event_handler+0x58>)
    250c:	480e      	ldr	r0, [pc, #56]	; (2548 <clock_event_handler+0x5c>)
    250e:	f240 235e 	movw	r3, #606	; 0x25e
    2512:	f004 fb97 	bl	6c44 <assert_print>
    2516:	f240 215e 	movw	r1, #606	; 0x25e
}
    251a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    251e:	4809      	ldr	r0, [pc, #36]	; (2544 <clock_event_handler+0x58>)
    2520:	f004 bb89 	b.w	6c36 <assert_post_action>
    2524:	4906      	ldr	r1, [pc, #24]	; (2540 <clock_event_handler+0x54>)
    2526:	4a07      	ldr	r2, [pc, #28]	; (2544 <clock_event_handler+0x58>)
    2528:	4807      	ldr	r0, [pc, #28]	; (2548 <clock_event_handler+0x5c>)
    252a:	f240 2362 	movw	r3, #610	; 0x262
    252e:	f004 fb89 	bl	6c44 <assert_print>
    2532:	f240 2162 	movw	r1, #610	; 0x262
    2536:	e7f0      	b.n	251a <clock_event_handler+0x2e>
}
    2538:	bd08      	pop	{r3, pc}
    253a:	bf00      	nop
    253c:	20000a10 	.word	0x20000a10
    2540:	00007a7c 	.word	0x00007a7c
    2544:	0000804a 	.word	0x0000804a
    2548:	000079d4 	.word	0x000079d4

0000254c <generic_hfclk_start>:
{
    254c:	b508      	push	{r3, lr}
	__asm__ volatile(
    254e:	f04f 0320 	mov.w	r3, #32
    2552:	f3ef 8111 	mrs	r1, BASEPRI
    2556:	f383 8812 	msr	BASEPRI_MAX, r3
    255a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    255e:	4a12      	ldr	r2, [pc, #72]	; (25a8 <generic_hfclk_start+0x5c>)
    2560:	6813      	ldr	r3, [r2, #0]
    2562:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2566:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    256a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    256c:	d00c      	beq.n	2588 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2572:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2576:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    257a:	f013 0301 	ands.w	r3, r3, #1
    257e:	d003      	beq.n	2588 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2580:	480a      	ldr	r0, [pc, #40]	; (25ac <generic_hfclk_start+0x60>)
    2582:	f004 fbc7 	bl	6d14 <set_on_state>
			already_started = true;
    2586:	2301      	movs	r3, #1
	__asm__ volatile(
    2588:	f381 8811 	msr	BASEPRI, r1
    258c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2590:	b123      	cbz	r3, 259c <generic_hfclk_start+0x50>
}
    2592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2596:	2000      	movs	r0, #0
    2598:	f7ff bf8e 	b.w	24b8 <clkstarted_handle.constprop.0>
}
    259c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    25a0:	2001      	movs	r0, #1
    25a2:	f001 b91d 	b.w	37e0 <nrfx_clock_start>
    25a6:	bf00      	nop
    25a8:	20000a68 	.word	0x20000a68
    25ac:	20000a58 	.word	0x20000a58

000025b0 <api_blocking_start>:
{
    25b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    25b2:	2200      	movs	r2, #0
    25b4:	2301      	movs	r3, #1
    25b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    25ba:	4a09      	ldr	r2, [pc, #36]	; (25e0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    25bc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    25c0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    25c2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    25c6:	f004 fbe9 	bl	6d9c <api_start>
	if (err < 0) {
    25ca:	2800      	cmp	r0, #0
    25cc:	db05      	blt.n	25da <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    25ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    25d2:	2300      	movs	r3, #0
    25d4:	4668      	mov	r0, sp
    25d6:	f002 fba5 	bl	4d24 <z_impl_k_sem_take>
}
    25da:	b005      	add	sp, #20
    25dc:	f85d fb04 	ldr.w	pc, [sp], #4
    25e0:	00006dc9 	.word	0x00006dc9

000025e4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25e4:	4b09      	ldr	r3, [pc, #36]	; (260c <generic_hfclk_stop+0x28>)
    25e6:	f3bf 8f5b 	dmb	ish
    25ea:	e853 2f00 	ldrex	r2, [r3]
    25ee:	f022 0102 	bic.w	r1, r2, #2
    25f2:	e843 1000 	strex	r0, r1, [r3]
    25f6:	2800      	cmp	r0, #0
    25f8:	d1f7      	bne.n	25ea <generic_hfclk_stop+0x6>
    25fa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    25fe:	07d3      	lsls	r3, r2, #31
    2600:	d402      	bmi.n	2608 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2602:	2001      	movs	r0, #1
    2604:	f001 b950 	b.w	38a8 <nrfx_clock_stop>
}
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	20000a68 	.word	0x20000a68

00002610 <z_nrf_clock_control_lf_on>:
{
    2610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2614:	4947      	ldr	r1, [pc, #284]	; (2734 <z_nrf_clock_control_lf_on+0x124>)
    2616:	f3bf 8f5b 	dmb	ish
    261a:	4606      	mov	r6, r0
    261c:	2201      	movs	r2, #1
    261e:	e851 3f00 	ldrex	r3, [r1]
    2622:	e841 2000 	strex	r0, r2, [r1]
    2626:	2800      	cmp	r0, #0
    2628:	d1f9      	bne.n	261e <z_nrf_clock_control_lf_on+0xe>
    262a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    262e:	b9a3      	cbnz	r3, 265a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2630:	4941      	ldr	r1, [pc, #260]	; (2738 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    2632:	4842      	ldr	r0, [pc, #264]	; (273c <z_nrf_clock_control_lf_on+0x12c>)
    2634:	604b      	str	r3, [r1, #4]
    2636:	60cb      	str	r3, [r1, #12]
    2638:	608a      	str	r2, [r1, #8]
    263a:	f7fe fa3d 	bl	ab8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    263e:	2800      	cmp	r0, #0
    2640:	da0b      	bge.n	265a <z_nrf_clock_control_lf_on+0x4a>
    2642:	493f      	ldr	r1, [pc, #252]	; (2740 <z_nrf_clock_control_lf_on+0x130>)
    2644:	483f      	ldr	r0, [pc, #252]	; (2744 <z_nrf_clock_control_lf_on+0x134>)
    2646:	4a40      	ldr	r2, [pc, #256]	; (2748 <z_nrf_clock_control_lf_on+0x138>)
    2648:	f44f 7308 	mov.w	r3, #544	; 0x220
    264c:	f004 fafa 	bl	6c44 <assert_print>
    2650:	483d      	ldr	r0, [pc, #244]	; (2748 <z_nrf_clock_control_lf_on+0x138>)
    2652:	f44f 7108 	mov.w	r1, #544	; 0x220
    2656:	f004 faee 	bl	6c36 <assert_post_action>
	switch (start_mode) {
    265a:	b396      	cbz	r6, 26c2 <z_nrf_clock_control_lf_on+0xb2>
    265c:	1e73      	subs	r3, r6, #1
    265e:	2b01      	cmp	r3, #1
    2660:	d853      	bhi.n	270a <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2662:	2e01      	cmp	r6, #1
    2664:	d107      	bne.n	2676 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    266a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    266e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2672:	2b01      	cmp	r3, #1
    2674:	d025      	beq.n	26c2 <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2676:	f004 fe18 	bl	72aa <k_is_in_isr>
    267a:	4604      	mov	r4, r0
    267c:	b918      	cbnz	r0, 2686 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    267e:	4b33      	ldr	r3, [pc, #204]	; (274c <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    2680:	781b      	ldrb	r3, [r3, #0]
    2682:	2b00      	cmp	r3, #0
    2684:	d14f      	bne.n	2726 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    2686:	f04f 0320 	mov.w	r3, #32
    268a:	f3ef 8711 	mrs	r7, BASEPRI
    268e:	f383 8812 	msr	BASEPRI_MAX, r3
    2692:	f3bf 8f6f 	isb	sy
    2696:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2698:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2750 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    269c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    26a0:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26a4:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    26a8:	03d2      	lsls	r2, r2, #15
    26aa:	d50c      	bpl.n	26c6 <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    26ac:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    26b0:	2b01      	cmp	r3, #1
    26b2:	d001      	beq.n	26b8 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    26b4:	2e01      	cmp	r6, #1
    26b6:	d106      	bne.n	26c6 <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    26b8:	b30c      	cbz	r4, 26fe <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    26ba:	f387 8811 	msr	BASEPRI, r7
    26be:	f3bf 8f6f 	isb	sy
}
    26c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    26c6:	b1ac      	cbz	r4, 26f4 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    26c8:	4638      	mov	r0, r7
    26ca:	f7ff f96b 	bl	19a4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    26ce:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    26d2:	2b00      	cmp	r3, #0
    26d4:	d1e4      	bne.n	26a0 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26d6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    26da:	2a00      	cmp	r2, #0
    26dc:	d0e0      	beq.n	26a0 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26de:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    26e2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    26e6:	2301      	movs	r3, #1
    26e8:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    26ec:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26f0:	60ab      	str	r3, [r5, #8]
}
    26f2:	e7d5      	b.n	26a0 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    26f4:	2100      	movs	r1, #0
    26f6:	2021      	movs	r0, #33	; 0x21
    26f8:	f003 fb68 	bl	5dcc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    26fc:	e7e7      	b.n	26ce <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    26fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2702:	2202      	movs	r2, #2
    2704:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2708:	e7db      	b.n	26c2 <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    270a:	4912      	ldr	r1, [pc, #72]	; (2754 <z_nrf_clock_control_lf_on+0x144>)
    270c:	480d      	ldr	r0, [pc, #52]	; (2744 <z_nrf_clock_control_lf_on+0x134>)
    270e:	4a0e      	ldr	r2, [pc, #56]	; (2748 <z_nrf_clock_control_lf_on+0x138>)
    2710:	f240 2332 	movw	r3, #562	; 0x232
    2714:	f004 fa96 	bl	6c44 <assert_print>
}
    2718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    271c:	480a      	ldr	r0, [pc, #40]	; (2748 <z_nrf_clock_control_lf_on+0x138>)
    271e:	f240 2132 	movw	r1, #562	; 0x232
    2722:	f004 ba88 	b.w	6c36 <assert_post_action>
    p_reg->INTENCLR = mask;
    2726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    272a:	2202      	movs	r2, #2
    272c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2730:	4607      	mov	r7, r0
}
    2732:	e7b1      	b.n	2698 <z_nrf_clock_control_lf_on+0x88>
    2734:	20000a6c 	.word	0x20000a6c
    2738:	20000a00 	.word	0x20000a00
    273c:	20000a30 	.word	0x20000a30
    2740:	000080ab 	.word	0x000080ab
    2744:	000079d4 	.word	0x000079d4
    2748:	0000804a 	.word	0x0000804a
    274c:	20001179 	.word	0x20001179
    2750:	e000e100 	.word	0xe000e100
    2754:	00007a7c 	.word	0x00007a7c

00002758 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2758:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    275a:	4b08      	ldr	r3, [pc, #32]	; (277c <uart_console_init+0x24>)
    275c:	4808      	ldr	r0, [pc, #32]	; (2780 <uart_console_init+0x28>)
    275e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2760:	f004 fd79 	bl	7256 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2764:	b138      	cbz	r0, 2776 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2766:	4807      	ldr	r0, [pc, #28]	; (2784 <uart_console_init+0x2c>)
    2768:	f7ff fd78 	bl	225c <__stdout_hook_install>
	__printk_hook_install(console_out);
    276c:	4805      	ldr	r0, [pc, #20]	; (2784 <uart_console_init+0x2c>)
    276e:	f7fd ff6f 	bl	650 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2772:	2000      	movs	r0, #0
}
    2774:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2776:	f06f 0012 	mvn.w	r0, #18
    277a:	e7fb      	b.n	2774 <uart_console_init+0x1c>
    277c:	20000a70 	.word	0x20000a70
    2780:	0000742c 	.word	0x0000742c
    2784:	00002789 	.word	0x00002789

00002788 <console_out>:
	if ('\n' == c) {
    2788:	280a      	cmp	r0, #10
{
    278a:	b538      	push	{r3, r4, r5, lr}
    278c:	4d07      	ldr	r5, [pc, #28]	; (27ac <console_out+0x24>)
    278e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2790:	d104      	bne.n	279c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2792:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2794:	6883      	ldr	r3, [r0, #8]
    2796:	210d      	movs	r1, #13
    2798:	685b      	ldr	r3, [r3, #4]
    279a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    279c:	6828      	ldr	r0, [r5, #0]
    279e:	6883      	ldr	r3, [r0, #8]
    27a0:	b2e1      	uxtb	r1, r4
    27a2:	685b      	ldr	r3, [r3, #4]
    27a4:	4798      	blx	r3
}
    27a6:	4620      	mov	r0, r4
    27a8:	bd38      	pop	{r3, r4, r5, pc}
    27aa:	bf00      	nop
    27ac:	20000a70 	.word	0x20000a70

000027b0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    27b0:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    27b2:	6905      	ldr	r5, [r0, #16]
{
    27b4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    27b6:	460c      	mov	r4, r1
    27b8:	b961      	cbnz	r1, 27d4 <gpio_nrfx_manage_callback+0x24>
    27ba:	4922      	ldr	r1, [pc, #136]	; (2844 <gpio_nrfx_manage_callback+0x94>)
    27bc:	4a22      	ldr	r2, [pc, #136]	; (2848 <gpio_nrfx_manage_callback+0x98>)
    27be:	4823      	ldr	r0, [pc, #140]	; (284c <gpio_nrfx_manage_callback+0x9c>)
    27c0:	2324      	movs	r3, #36	; 0x24
    27c2:	f004 fa3f 	bl	6c44 <assert_print>
    27c6:	4822      	ldr	r0, [pc, #136]	; (2850 <gpio_nrfx_manage_callback+0xa0>)
    27c8:	f004 fa3c 	bl	6c44 <assert_print>
    27cc:	481e      	ldr	r0, [pc, #120]	; (2848 <gpio_nrfx_manage_callback+0x98>)
    27ce:	2124      	movs	r1, #36	; 0x24
    27d0:	f004 fa31 	bl	6c36 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    27d4:	6863      	ldr	r3, [r4, #4]
    27d6:	b963      	cbnz	r3, 27f2 <gpio_nrfx_manage_callback+0x42>
    27d8:	491e      	ldr	r1, [pc, #120]	; (2854 <gpio_nrfx_manage_callback+0xa4>)
    27da:	4a1b      	ldr	r2, [pc, #108]	; (2848 <gpio_nrfx_manage_callback+0x98>)
    27dc:	481b      	ldr	r0, [pc, #108]	; (284c <gpio_nrfx_manage_callback+0x9c>)
    27de:	2325      	movs	r3, #37	; 0x25
    27e0:	f004 fa30 	bl	6c44 <assert_print>
    27e4:	481c      	ldr	r0, [pc, #112]	; (2858 <gpio_nrfx_manage_callback+0xa8>)
    27e6:	f004 fa2d 	bl	6c44 <assert_print>
    27ea:	4817      	ldr	r0, [pc, #92]	; (2848 <gpio_nrfx_manage_callback+0x98>)
    27ec:	2125      	movs	r1, #37	; 0x25
    27ee:	f004 fa22 	bl	6c36 <assert_post_action>
	return list->head;
    27f2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    27f4:	b15b      	cbz	r3, 280e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    27f6:	2200      	movs	r2, #0
    27f8:	429c      	cmp	r4, r3
    27fa:	d112      	bne.n	2822 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    27fc:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    27fe:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    2800:	b952      	cbnz	r2, 2818 <gpio_nrfx_manage_callback+0x68>
    2802:	42a1      	cmp	r1, r4
	list->head = node;
    2804:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2806:	d100      	bne.n	280a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2808:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    280a:	2300      	movs	r3, #0
    280c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    280e:	b96e      	cbnz	r6, 282c <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2810:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    2812:	bd70      	pop	{r4, r5, r6, pc}
    2814:	460b      	mov	r3, r1
    2816:	e7ef      	b.n	27f8 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    2818:	42a1      	cmp	r1, r4
	parent->next = child;
    281a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    281c:	bf08      	it	eq
    281e:	60aa      	streq	r2, [r5, #8]
}
    2820:	e7f3      	b.n	280a <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    2822:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2824:	461a      	mov	r2, r3
    2826:	2900      	cmp	r1, #0
    2828:	d1f4      	bne.n	2814 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    282a:	b13e      	cbz	r6, 283c <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    282c:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    282e:	686b      	ldr	r3, [r5, #4]
    2830:	6023      	str	r3, [r4, #0]
	list->head = node;
    2832:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2834:	2800      	cmp	r0, #0
    2836:	d1eb      	bne.n	2810 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2838:	60ac      	str	r4, [r5, #8]
}
    283a:	e7ea      	b.n	2812 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    283c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2840:	e7e7      	b.n	2812 <gpio_nrfx_manage_callback+0x62>
    2842:	bf00      	nop
    2844:	000080e7 	.word	0x000080e7
    2848:	000080ba 	.word	0x000080ba
    284c:	000079d4 	.word	0x000079d4
    2850:	000080f0 	.word	0x000080f0
    2854:	000080ff 	.word	0x000080ff
    2858:	00008111 	.word	0x00008111

0000285c <gpio_nrfx_pin_interrupt_configure>:
{
    285c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    285e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2860:	7b05      	ldrb	r5, [r0, #12]
    2862:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2866:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    286a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    286e:	f04f 0500 	mov.w	r5, #0
    2872:	d104      	bne.n	287e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2874:	4620      	mov	r0, r4
    2876:	f001 fb3d 	bl	3ef4 <nrfx_gpiote_trigger_disable>
	return 0;
    287a:	2000      	movs	r0, #0
    287c:	e054      	b.n	2928 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    287e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2882:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2886:	d151      	bne.n	292c <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    288c:	bf0c      	ite	eq
    288e:	2304      	moveq	r3, #4
    2890:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2892:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2896:	6883      	ldr	r3, [r0, #8]
    2898:	fa23 f101 	lsr.w	r1, r3, r1
    289c:	f011 0101 	ands.w	r1, r1, #1
    28a0:	d155      	bne.n	294e <gpio_nrfx_pin_interrupt_configure+0xf2>
    28a2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    28a6:	d152      	bne.n	294e <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    28a8:	0966      	lsrs	r6, r4, #5
    28aa:	d04a      	beq.n	2942 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    28ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    28b0:	2e01      	cmp	r6, #1
    28b2:	bf08      	it	eq
    28b4:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    28b6:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    28ba:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    28bc:	07ca      	lsls	r2, r1, #31
    28be:	d40b      	bmi.n	28d8 <gpio_nrfx_pin_interrupt_configure+0x7c>
    28c0:	492b      	ldr	r1, [pc, #172]	; (2970 <gpio_nrfx_pin_interrupt_configure+0x114>)
    28c2:	482c      	ldr	r0, [pc, #176]	; (2974 <gpio_nrfx_pin_interrupt_configure+0x118>)
    28c4:	4a2c      	ldr	r2, [pc, #176]	; (2978 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    28c6:	f240 2329 	movw	r3, #553	; 0x229
    28ca:	f004 f9bb 	bl	6c44 <assert_print>
    28ce:	482a      	ldr	r0, [pc, #168]	; (2978 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    28d0:	f240 2129 	movw	r1, #553	; 0x229
    28d4:	f004 f9af 	bl	6c36 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    28d8:	b16e      	cbz	r6, 28f6 <gpio_nrfx_pin_interrupt_configure+0x9a>
    28da:	2e01      	cmp	r6, #1
    28dc:	d034      	beq.n	2948 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    28de:	4927      	ldr	r1, [pc, #156]	; (297c <gpio_nrfx_pin_interrupt_configure+0x120>)
    28e0:	4824      	ldr	r0, [pc, #144]	; (2974 <gpio_nrfx_pin_interrupt_configure+0x118>)
    28e2:	4a25      	ldr	r2, [pc, #148]	; (2978 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    28e4:	f240 232e 	movw	r3, #558	; 0x22e
    28e8:	f004 f9ac 	bl	6c44 <assert_print>
    28ec:	4822      	ldr	r0, [pc, #136]	; (2978 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    28ee:	f240 212e 	movw	r1, #558	; 0x22e
    28f2:	f004 f9a0 	bl	6c36 <assert_post_action>
        case 0: return NRF_P0;
    28f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    28fa:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    28fe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2902:	07db      	lsls	r3, r3, #31
    2904:	d423      	bmi.n	294e <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2906:	f10d 0507 	add.w	r5, sp, #7
    290a:	4629      	mov	r1, r5
    290c:	4620      	mov	r0, r4
    290e:	f001 fa15 	bl	3d3c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2912:	4b1b      	ldr	r3, [pc, #108]	; (2980 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2914:	4298      	cmp	r0, r3
    2916:	d119      	bne.n	294c <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    2918:	4628      	mov	r0, r5
    291a:	f001 fa71 	bl	3e00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    291e:	4b19      	ldr	r3, [pc, #100]	; (2984 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2920:	4298      	cmp	r0, r3
    2922:	d013      	beq.n	294c <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    2924:	f06f 000b 	mvn.w	r0, #11
}
    2928:	b004      	add	sp, #16
    292a:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    292c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2930:	d005      	beq.n	293e <gpio_nrfx_pin_interrupt_configure+0xe2>
    2932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2936:	bf0c      	ite	eq
    2938:	2302      	moveq	r3, #2
    293a:	2301      	movne	r3, #1
    293c:	e7a9      	b.n	2892 <gpio_nrfx_pin_interrupt_configure+0x36>
    293e:	2303      	movs	r3, #3
    2940:	e7a7      	b.n	2892 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    2942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2946:	e7b6      	b.n	28b6 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2948:	4b0f      	ldr	r3, [pc, #60]	; (2988 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    294a:	e7d6      	b.n	28fa <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    294c:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    294e:	2300      	movs	r3, #0
    2950:	4619      	mov	r1, r3
    2952:	aa02      	add	r2, sp, #8
    2954:	4620      	mov	r0, r4
    2956:	f001 f8c9 	bl	3aec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    295a:	4b0a      	ldr	r3, [pc, #40]	; (2984 <gpio_nrfx_pin_interrupt_configure+0x128>)
    295c:	4298      	cmp	r0, r3
    295e:	d104      	bne.n	296a <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2960:	2101      	movs	r1, #1
    2962:	4620      	mov	r0, r4
    2964:	f001 fa52 	bl	3e0c <nrfx_gpiote_trigger_enable>
    2968:	e787      	b.n	287a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    296a:	f06f 0004 	mvn.w	r0, #4
    296e:	e7db      	b.n	2928 <gpio_nrfx_pin_interrupt_configure+0xcc>
    2970:	0000815b 	.word	0x0000815b
    2974:	000079d4 	.word	0x000079d4
    2978:	00008128 	.word	0x00008128
    297c:	00007a7c 	.word	0x00007a7c
    2980:	0bad0004 	.word	0x0bad0004
    2984:	0bad0000 	.word	0x0bad0000
    2988:	50000300 	.word	0x50000300

0000298c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    298c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    298e:	f001 fa27 	bl	3de0 <nrfx_gpiote_is_init>
    2992:	4604      	mov	r4, r0
    2994:	b968      	cbnz	r0, 29b2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2996:	f001 f9fb 	bl	3d90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    299a:	4b08      	ldr	r3, [pc, #32]	; (29bc <gpio_nrfx_init+0x30>)
    299c:	4298      	cmp	r0, r3
    299e:	d10a      	bne.n	29b6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    29a0:	4807      	ldr	r0, [pc, #28]	; (29c0 <gpio_nrfx_init+0x34>)
    29a2:	4621      	mov	r1, r4
    29a4:	f001 f9c4 	bl	3d30 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29a8:	4622      	mov	r2, r4
    29aa:	2105      	movs	r1, #5
    29ac:	2006      	movs	r0, #6
    29ae:	f7ff f821 	bl	19f4 <z_arm_irq_priority_set>
		return 0;
    29b2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    29b4:	bd10      	pop	{r4, pc}
		return -EIO;
    29b6:	f06f 0004 	mvn.w	r0, #4
    29ba:	e7fb      	b.n	29b4 <gpio_nrfx_init+0x28>
    29bc:	0bad0000 	.word	0x0bad0000
    29c0:	000029c5 	.word	0x000029c5

000029c4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29c4:	0943      	lsrs	r3, r0, #5
{
    29c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29ca:	d003      	beq.n	29d4 <nrfx_gpio_handler+0x10>
    29cc:	2b01      	cmp	r3, #1
    29ce:	d02e      	beq.n	2a2e <nrfx_gpio_handler+0x6a>
}
    29d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29d4:	4f17      	ldr	r7, [pc, #92]	; (2a34 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    29d6:	693b      	ldr	r3, [r7, #16]
    29d8:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29da:	2c00      	cmp	r4, #0
    29dc:	d0f8      	beq.n	29d0 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    29de:	f000 001f 	and.w	r0, r0, #31
    29e2:	2601      	movs	r6, #1
	return node->next;
    29e4:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    29e6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a38 <nrfx_gpio_handler+0x74>
    29ea:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2a3c <nrfx_gpio_handler+0x78>
    29ee:	f8df a050 	ldr.w	sl, [pc, #80]	; 2a40 <nrfx_gpio_handler+0x7c>
    29f2:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    29f4:	68a3      	ldr	r3, [r4, #8]
    29f6:	421e      	tst	r6, r3
    29f8:	d014      	beq.n	2a24 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    29fa:	6863      	ldr	r3, [r4, #4]
    29fc:	b963      	cbnz	r3, 2a18 <nrfx_gpio_handler+0x54>
    29fe:	4649      	mov	r1, r9
    2a00:	2345      	movs	r3, #69	; 0x45
    2a02:	4642      	mov	r2, r8
    2a04:	4650      	mov	r0, sl
    2a06:	f004 f91d 	bl	6c44 <assert_print>
    2a0a:	480e      	ldr	r0, [pc, #56]	; (2a44 <nrfx_gpio_handler+0x80>)
    2a0c:	f004 f91a 	bl	6c44 <assert_print>
    2a10:	2145      	movs	r1, #69	; 0x45
    2a12:	4640      	mov	r0, r8
    2a14:	f004 f90f 	bl	6c36 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2a18:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2a1c:	4621      	mov	r1, r4
    2a1e:	4032      	ands	r2, r6
    2a20:	4638      	mov	r0, r7
    2a22:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2a24:	2d00      	cmp	r5, #0
    2a26:	d0d3      	beq.n	29d0 <nrfx_gpio_handler+0xc>
    2a28:	462c      	mov	r4, r5
    2a2a:	682d      	ldr	r5, [r5, #0]
    2a2c:	e7e2      	b.n	29f4 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2a2e:	4f06      	ldr	r7, [pc, #24]	; (2a48 <nrfx_gpio_handler+0x84>)
    2a30:	e7d1      	b.n	29d6 <nrfx_gpio_handler+0x12>
    2a32:	bf00      	nop
    2a34:	000073e4 	.word	0x000073e4
    2a38:	000080ba 	.word	0x000080ba
    2a3c:	0000817e 	.word	0x0000817e
    2a40:	000079d4 	.word	0x000079d4
    2a44:	00008111 	.word	0x00008111
    2a48:	000073fc 	.word	0x000073fc

00002a4c <gpio_nrfx_pin_configure>:
{
    2a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2a50:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a52:	7b3b      	ldrb	r3, [r7, #12]
    2a54:	f001 051f 	and.w	r5, r1, #31
{
    2a58:	b085      	sub	sp, #20
    2a5a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a5c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2a60:	4614      	mov	r4, r2
    2a62:	b9ca      	cbnz	r2, 2a98 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a64:	a902      	add	r1, sp, #8
    2a66:	4628      	mov	r0, r5
    2a68:	f001 f968 	bl	3d3c <nrfx_gpiote_channel_get>
    2a6c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2a6e:	4628      	mov	r0, r5
    2a70:	f001 fa6a 	bl	3f48 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2a74:	4b4a      	ldr	r3, [pc, #296]	; (2ba0 <gpio_nrfx_pin_configure+0x154>)
    2a76:	4298      	cmp	r0, r3
    2a78:	d004      	beq.n	2a84 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2a7a:	f06f 0004 	mvn.w	r0, #4
}
    2a7e:	b005      	add	sp, #20
    2a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2a84:	4284      	cmp	r4, r0
    2a86:	d105      	bne.n	2a94 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2a88:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2a8c:	f001 f9b2 	bl	3df4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2a90:	42a0      	cmp	r0, r4
    2a92:	d1f2      	bne.n	2a7a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a94:	2000      	movs	r0, #0
    2a96:	e7f2      	b.n	2a7e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a98:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a9c:	f10d 0103 	add.w	r1, sp, #3
    2aa0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2aa2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2aa6:	f001 f949 	bl	3d3c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2aaa:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2aac:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2aae:	aa02      	add	r2, sp, #8
    2ab0:	4649      	mov	r1, r9
    2ab2:	4628      	mov	r0, r5
    2ab4:	f001 f81a 	bl	3aec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ab8:	4b39      	ldr	r3, [pc, #228]	; (2ba0 <gpio_nrfx_pin_configure+0x154>)
    2aba:	4298      	cmp	r0, r3
    2abc:	d002      	beq.n	2ac4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2abe:	f06f 0015 	mvn.w	r0, #21
    2ac2:	e7dc      	b.n	2a7e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2ac4:	4580      	cmp	r8, r0
    2ac6:	d103      	bne.n	2ad0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2ac8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2acc:	f001 f992 	bl	3df4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2ad0:	03a3      	lsls	r3, r4, #14
    2ad2:	d551      	bpl.n	2b78 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2ad4:	f240 6306 	movw	r3, #1542	; 0x606
    2ad8:	4023      	ands	r3, r4
    2ada:	f240 2206 	movw	r2, #518	; 0x206
    2ade:	4293      	cmp	r3, r2
    2ae0:	d03b      	beq.n	2b5a <gpio_nrfx_pin_configure+0x10e>
    2ae2:	d80c      	bhi.n	2afe <gpio_nrfx_pin_configure+0xb2>
    2ae4:	2b06      	cmp	r3, #6
    2ae6:	d015      	beq.n	2b14 <gpio_nrfx_pin_configure+0xc8>
    2ae8:	d804      	bhi.n	2af4 <gpio_nrfx_pin_configure+0xa8>
    2aea:	b19b      	cbz	r3, 2b14 <gpio_nrfx_pin_configure+0xc8>
    2aec:	2b02      	cmp	r3, #2
    2aee:	d1e6      	bne.n	2abe <gpio_nrfx_pin_configure+0x72>
    2af0:	2304      	movs	r3, #4
    2af2:	e00f      	b.n	2b14 <gpio_nrfx_pin_configure+0xc8>
    2af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2af8:	d1e1      	bne.n	2abe <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2afa:	2301      	movs	r3, #1
    2afc:	e00a      	b.n	2b14 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2afe:	f240 4202 	movw	r2, #1026	; 0x402
    2b02:	4293      	cmp	r3, r2
    2b04:	d02b      	beq.n	2b5e <gpio_nrfx_pin_configure+0x112>
    2b06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2b0a:	d02a      	beq.n	2b62 <gpio_nrfx_pin_configure+0x116>
    2b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2b10:	d1d5      	bne.n	2abe <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2b12:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2b14:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2b18:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2b1c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2b20:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2b22:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2b26:	bf54      	ite	pl
    2b28:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2b2c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2b2e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2b30:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2b34:	d517      	bpl.n	2b66 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	2101      	movs	r1, #1
    2b3a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2b3e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2b42:	2200      	movs	r2, #0
    2b44:	a901      	add	r1, sp, #4
    2b46:	4628      	mov	r0, r5
    2b48:	f001 f87e 	bl	3c48 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b4c:	4b14      	ldr	r3, [pc, #80]	; (2ba0 <gpio_nrfx_pin_configure+0x154>)
    2b4e:	4298      	cmp	r0, r3
    2b50:	bf14      	ite	ne
    2b52:	f06f 0015 	mvnne.w	r0, #21
    2b56:	2000      	moveq	r0, #0
    2b58:	e791      	b.n	2a7e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2b5a:	2307      	movs	r3, #7
    2b5c:	e7da      	b.n	2b14 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2b5e:	2305      	movs	r3, #5
    2b60:	e7d8      	b.n	2b14 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2b62:	2303      	movs	r3, #3
    2b64:	e7d6      	b.n	2b14 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2b66:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2b68:	bf41      	itttt	mi
    2b6a:	687b      	ldrmi	r3, [r7, #4]
    2b6c:	2101      	movmi	r1, #1
    2b6e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2b72:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2b76:	e7e4      	b.n	2b42 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2b78:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b7a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2b7e:	bf54      	ite	pl
    2b80:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2b84:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b86:	461a      	mov	r2, r3
    2b88:	a901      	add	r1, sp, #4
    2b8a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2b8c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b90:	f000 ffac 	bl	3aec <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b94:	4b02      	ldr	r3, [pc, #8]	; (2ba0 <gpio_nrfx_pin_configure+0x154>)
    2b96:	4298      	cmp	r0, r3
    2b98:	f43f af7c 	beq.w	2a94 <gpio_nrfx_pin_configure+0x48>
    2b9c:	e78f      	b.n	2abe <gpio_nrfx_pin_configure+0x72>
    2b9e:	bf00      	nop
    2ba0:	0bad0000 	.word	0x0bad0000

00002ba4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2ba6:	794b      	ldrb	r3, [r1, #5]
    2ba8:	2b01      	cmp	r3, #1
    2baa:	d026      	beq.n	2bfa <uarte_nrfx_configure+0x56>
    2bac:	2b03      	cmp	r3, #3
    2bae:	d121      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2bb0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2bb2:	798b      	ldrb	r3, [r1, #6]
    2bb4:	2b03      	cmp	r3, #3
    2bb6:	d11d      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2bb8:	79cc      	ldrb	r4, [r1, #7]
    2bba:	b10c      	cbz	r4, 2bc0 <uarte_nrfx_configure+0x1c>
    2bbc:	2c01      	cmp	r4, #1
    2bbe:	d119      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2bc0:	790a      	ldrb	r2, [r1, #4]
    2bc2:	b112      	cbz	r2, 2bca <uarte_nrfx_configure+0x26>
    2bc4:	2a02      	cmp	r2, #2
    2bc6:	d115      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2bc8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2bca:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2bcc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2bce:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2bd2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2bd4:	d065      	beq.n	2ca2 <uarte_nrfx_configure+0xfe>
    2bd6:	d82d      	bhi.n	2c34 <uarte_nrfx_configure+0x90>
    2bd8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2bdc:	d064      	beq.n	2ca8 <uarte_nrfx_configure+0x104>
    2bde:	d816      	bhi.n	2c0e <uarte_nrfx_configure+0x6a>
    2be0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2be4:	d062      	beq.n	2cac <uarte_nrfx_configure+0x108>
    2be6:	d80a      	bhi.n	2bfe <uarte_nrfx_configure+0x5a>
    2be8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2bec:	d061      	beq.n	2cb2 <uarte_nrfx_configure+0x10e>
    2bee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2bf2:	d061      	beq.n	2cb8 <uarte_nrfx_configure+0x114>
    2bf4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2bf8:	e052      	b.n	2ca0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2bfa:	2600      	movs	r6, #0
    2bfc:	e7d9      	b.n	2bb2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2bfe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c02:	d05c      	beq.n	2cbe <uarte_nrfx_configure+0x11a>
    2c04:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c08:	d1f4      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c0a:	4b37      	ldr	r3, [pc, #220]	; (2ce8 <uarte_nrfx_configure+0x144>)
    2c0c:	e03c      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c0e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c12:	d057      	beq.n	2cc4 <uarte_nrfx_configure+0x120>
    2c14:	d807      	bhi.n	2c26 <uarte_nrfx_configure+0x82>
    2c16:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c1a:	d055      	beq.n	2cc8 <uarte_nrfx_configure+0x124>
    2c1c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c20:	d1e8      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c22:	4b32      	ldr	r3, [pc, #200]	; (2cec <uarte_nrfx_configure+0x148>)
    2c24:	e030      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c26:	f647 2712 	movw	r7, #31250	; 0x7a12
    2c2a:	42bb      	cmp	r3, r7
    2c2c:	d1e2      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2c2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c32:	e029      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c34:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c38:	d048      	beq.n	2ccc <uarte_nrfx_configure+0x128>
    2c3a:	d813      	bhi.n	2c64 <uarte_nrfx_configure+0xc0>
    2c3c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2c40:	d047      	beq.n	2cd2 <uarte_nrfx_configure+0x12e>
    2c42:	d809      	bhi.n	2c58 <uarte_nrfx_configure+0xb4>
    2c44:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2c48:	42bb      	cmp	r3, r7
    2c4a:	d044      	beq.n	2cd6 <uarte_nrfx_configure+0x132>
    2c4c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2c50:	d1d0      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2c52:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2c56:	e017      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c58:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2c5c:	d1ca      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2c5e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2c62:	e011      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c64:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2c68:	d038      	beq.n	2cdc <uarte_nrfx_configure+0x138>
    2c6a:	d808      	bhi.n	2c7e <uarte_nrfx_configure+0xda>
    2c6c:	4f20      	ldr	r7, [pc, #128]	; (2cf0 <uarte_nrfx_configure+0x14c>)
    2c6e:	42bb      	cmp	r3, r7
    2c70:	d037      	beq.n	2ce2 <uarte_nrfx_configure+0x13e>
    2c72:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2c76:	d1bd      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2c78:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2c7c:	e004      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c7e:	4f1d      	ldr	r7, [pc, #116]	; (2cf4 <uarte_nrfx_configure+0x150>)
    2c80:	42bb      	cmp	r3, r7
    2c82:	d1b7      	bne.n	2bf4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2c88:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2c8a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2c8e:	1d03      	adds	r3, r0, #4
    2c90:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2c92:	4334      	orrs	r4, r6
    2c94:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2c96:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2c9a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2c9e:	2000      	movs	r0, #0
}
    2ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2ca2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2ca6:	e7ef      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2ca8:	4b13      	ldr	r3, [pc, #76]	; (2cf8 <uarte_nrfx_configure+0x154>)
    2caa:	e7ed      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2cac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2cb0:	e7ea      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2cb2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2cb6:	e7e7      	b.n	2c88 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cb8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2cbc:	e7e4      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2cbe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2cc2:	e7e1      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2cc4:	4b0d      	ldr	r3, [pc, #52]	; (2cfc <uarte_nrfx_configure+0x158>)
    2cc6:	e7df      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2cc8:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <uarte_nrfx_configure+0x15c>)
    2cca:	e7dd      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2ccc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2cd0:	e7da      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2cd2:	4b0c      	ldr	r3, [pc, #48]	; (2d04 <uarte_nrfx_configure+0x160>)
    2cd4:	e7d8      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2cd6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2cda:	e7d5      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2cdc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2ce0:	e7d2      	b.n	2c88 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2ce6:	e7cf      	b.n	2c88 <uarte_nrfx_configure+0xe4>
    2ce8:	0013b000 	.word	0x0013b000
    2cec:	004ea000 	.word	0x004ea000
    2cf0:	0003d090 	.word	0x0003d090
    2cf4:	000f4240 	.word	0x000f4240
    2cf8:	00275000 	.word	0x00275000
    2cfc:	0075c000 	.word	0x0075c000
    2d00:	003af000 	.word	0x003af000
    2d04:	013a9000 	.word	0x013a9000

00002d08 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2d0c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2d10:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d12:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2d16:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d1a:	2100      	movs	r1, #0
    2d1c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2d20:	4607      	mov	r7, r0
	data->dev = dev;
    2d22:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2d24:	aa01      	add	r2, sp, #4
    2d26:	4648      	mov	r0, r9
    2d28:	f004 f902 	bl	6f30 <pinctrl_lookup_state>
	if (ret < 0) {
    2d2c:	1e05      	subs	r5, r0, #0
    2d2e:	db56      	blt.n	2dde <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2d30:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2d32:	f8d9 2000 	ldr.w	r2, [r9]
    2d36:	7919      	ldrb	r1, [r3, #4]
    2d38:	6818      	ldr	r0, [r3, #0]
    2d3a:	f004 f950 	bl	6fde <pinctrl_configure_pins>
	if (err < 0) {
    2d3e:	1e05      	subs	r5, r0, #0
    2d40:	db4d      	blt.n	2dde <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2d42:	1d31      	adds	r1, r6, #4
    2d44:	4638      	mov	r0, r7
    2d46:	f7ff ff2d 	bl	2ba4 <uarte_nrfx_configure>
	if (err) {
    2d4a:	4605      	mov	r5, r0
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d146      	bne.n	2dde <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2d50:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2d54:	0799      	lsls	r1, r3, #30
    2d56:	d519      	bpl.n	2d8c <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2d58:	f106 0012 	add.w	r0, r6, #18
    2d5c:	f001 f9f0 	bl	4140 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2d60:	4b22      	ldr	r3, [pc, #136]	; (2dec <uarte_instance_init.constprop.0+0xe4>)
    2d62:	4298      	cmp	r0, r3
    2d64:	d13f      	bne.n	2de6 <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2d66:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2d68:	00c3      	lsls	r3, r0, #3
    2d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2d6e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2d72:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2d76:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2d7a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2d7e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2d82:	4a1b      	ldr	r2, [pc, #108]	; (2df0 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2d84:	2301      	movs	r3, #1
    2d86:	4083      	lsls	r3, r0
    2d88:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2d8c:	2308      	movs	r3, #8
    2d8e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    2d92:	f898 3008 	ldrb.w	r3, [r8, #8]
    2d96:	b95b      	cbnz	r3, 2db0 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d98:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2d9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2da0:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2da4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2da8:	2301      	movs	r3, #1
    2daa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dae:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2db0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2db4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2db6:	bf5c      	itt	pl
    2db8:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2dbc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2dc0:	06db      	lsls	r3, r3, #27
    2dc2:	bf44      	itt	mi
    2dc4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2dc8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2dcc:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2dce:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2dd0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2dd4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dd8:	2301      	movs	r3, #1
    2dda:	60a3      	str	r3, [r4, #8]
    2ddc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2dde:	4628      	mov	r0, r5
    2de0:	b003      	add	sp, #12
    2de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2de6:	f06f 0504 	mvn.w	r5, #4
    2dea:	e7f8      	b.n	2dde <uarte_instance_init.constprop.0+0xd6>
    2dec:	0bad0000 	.word	0x0bad0000
    2df0:	4001f000 	.word	0x4001f000

00002df4 <uarte_nrfx_poll_out>:
{
    2df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2df6:	6906      	ldr	r6, [r0, #16]
{
    2df8:	4605      	mov	r5, r0
    2dfa:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2dfc:	f004 fa55 	bl	72aa <k_is_in_isr>
    2e00:	b910      	cbnz	r0, 2e08 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2e02:	4b2c      	ldr	r3, [pc, #176]	; (2eb4 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	b983      	cbnz	r3, 2e2a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2e08:	f04f 0320 	mov.w	r3, #32
    2e0c:	f3ef 8411 	mrs	r4, BASEPRI
    2e10:	f383 8812 	msr	BASEPRI_MAX, r3
    2e14:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e18:	6868      	ldr	r0, [r5, #4]
    2e1a:	f004 f821 	bl	6e60 <is_tx_ready.isra.0>
    2e1e:	bb28      	cbnz	r0, 2e6c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2e20:	f384 8811 	msr	BASEPRI, r4
    2e24:	f3bf 8f6f 	isb	sy
}
    2e28:	e7ee      	b.n	2e08 <uarte_nrfx_poll_out+0x14>
{
    2e2a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2e2c:	6868      	ldr	r0, [r5, #4]
    2e2e:	f004 f817 	bl	6e60 <is_tx_ready.isra.0>
    2e32:	b970      	cbnz	r0, 2e52 <uarte_nrfx_poll_out+0x5e>
    2e34:	2001      	movs	r0, #1
    2e36:	f004 f98a 	bl	714e <nrfx_busy_wait>
    2e3a:	3c01      	subs	r4, #1
    2e3c:	d1f6      	bne.n	2e2c <uarte_nrfx_poll_out+0x38>
    2e3e:	2100      	movs	r1, #0
    2e40:	2021      	movs	r0, #33	; 0x21
    2e42:	f002 ffc3 	bl	5dcc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2e46:	e7f0      	b.n	2e2a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2e48:	f384 8811 	msr	BASEPRI, r4
    2e4c:	f3bf 8f6f 	isb	sy
}
    2e50:	e7f5      	b.n	2e3e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2e52:	f04f 0320 	mov.w	r3, #32
    2e56:	f3ef 8411 	mrs	r4, BASEPRI
    2e5a:	f383 8812 	msr	BASEPRI_MAX, r3
    2e5e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e62:	6868      	ldr	r0, [r5, #4]
    2e64:	f003 fffc 	bl	6e60 <is_tx_ready.isra.0>
    2e68:	2800      	cmp	r0, #0
    2e6a:	d0ed      	beq.n	2e48 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    2e6c:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2e70:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2e72:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    2e74:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e76:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e7a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e7e:	2200      	movs	r2, #0
    2e80:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2e84:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2e88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2e8c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e90:	684a      	ldr	r2, [r1, #4]
    2e92:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e94:	bf41      	itttt	mi
    2e96:	2208      	movmi	r2, #8
    2e98:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2e9c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2ea0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ea4:	2201      	movs	r2, #1
    2ea6:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2ea8:	f384 8811 	msr	BASEPRI, r4
    2eac:	f3bf 8f6f 	isb	sy
}
    2eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eb2:	bf00      	nop
    2eb4:	20001179 	.word	0x20001179

00002eb8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2eb8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2eba:	2301      	movs	r3, #1
    2ebc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ebe:	4a11      	ldr	r2, [pc, #68]	; (2f04 <compare_int_lock+0x4c>)
    2ec0:	f3bf 8f5b 	dmb	ish
    2ec4:	43dc      	mvns	r4, r3
    2ec6:	e852 1f00 	ldrex	r1, [r2]
    2eca:	ea01 0c04 	and.w	ip, r1, r4
    2ece:	e842 ce00 	strex	lr, ip, [r2]
    2ed2:	f1be 0f00 	cmp.w	lr, #0
    2ed6:	d1f6      	bne.n	2ec6 <compare_int_lock+0xe>
    2ed8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2edc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2ee0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2ee4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2eec:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2ef0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ef4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2ef8:	420b      	tst	r3, r1
}
    2efa:	bf14      	ite	ne
    2efc:	2001      	movne	r0, #1
    2efe:	2000      	moveq	r0, #0
    2f00:	bd10      	pop	{r4, pc}
    2f02:	bf00      	nop
    2f04:	20000a90 	.word	0x20000a90

00002f08 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f08:	4919      	ldr	r1, [pc, #100]	; (2f70 <sys_clock_timeout_handler+0x68>)
{
    2f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f0c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2f0e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f12:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2f14:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f18:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f1c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2f22:	d222      	bcs.n	2f6a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2f24:	4b13      	ldr	r3, [pc, #76]	; (2f74 <sys_clock_timeout_handler+0x6c>)
    2f26:	681b      	ldr	r3, [r3, #0]
    2f28:	0a1a      	lsrs	r2, r3, #8
    2f2a:	061b      	lsls	r3, r3, #24
    2f2c:	195e      	adds	r6, r3, r5
    2f2e:	4b12      	ldr	r3, [pc, #72]	; (2f78 <sys_clock_timeout_handler+0x70>)
    2f30:	f142 0700 	adc.w	r7, r2, #0
    2f34:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2f38:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2f3a:	f003 fa4b 	bl	63d4 <sys_clock_announce>
    return p_reg->CC[ch];
    2f3e:	00a3      	lsls	r3, r4, #2
    2f40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f44:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2f48:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2f4c:	42aa      	cmp	r2, r5
    2f4e:	d10b      	bne.n	2f68 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2f50:	b91e      	cbnz	r6, 2f5a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2f52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2f56:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2f5a:	4b08      	ldr	r3, [pc, #32]	; (2f7c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f60:	fa00 f404 	lsl.w	r4, r0, r4
    2f64:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2f6a:	2600      	movs	r6, #0
    2f6c:	e7e5      	b.n	2f3a <sys_clock_timeout_handler+0x32>
    2f6e:	bf00      	nop
    2f70:	20000360 	.word	0x20000360
    2f74:	20000a94 	.word	0x20000a94
    2f78:	20000348 	.word	0x20000348
    2f7c:	40011000 	.word	0x40011000

00002f80 <compare_int_unlock>:
	if (key) {
    2f80:	b319      	cbz	r1, 2fca <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2f82:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2f86:	2301      	movs	r3, #1
    2f88:	4a10      	ldr	r2, [pc, #64]	; (2fcc <compare_int_unlock+0x4c>)
    2f8a:	4083      	lsls	r3, r0
    2f8c:	e852 1f00 	ldrex	r1, [r2]
    2f90:	4319      	orrs	r1, r3
    2f92:	e842 1c00 	strex	ip, r1, [r2]
    2f96:	f1bc 0f00 	cmp.w	ip, #0
    2f9a:	d1f7      	bne.n	2f8c <compare_int_unlock+0xc>
    2f9c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2fa0:	4a0b      	ldr	r2, [pc, #44]	; (2fd0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2fa6:	4083      	lsls	r3, r0
    2fa8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2fac:	4b09      	ldr	r3, [pc, #36]	; (2fd4 <compare_int_unlock+0x54>)
    2fae:	f3bf 8f5b 	dmb	ish
    2fb2:	681b      	ldr	r3, [r3, #0]
    2fb4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2fb8:	fa23 f000 	lsr.w	r0, r3, r0
    2fbc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fbe:	bf42      	ittt	mi
    2fc0:	4b05      	ldrmi	r3, [pc, #20]	; (2fd8 <compare_int_unlock+0x58>)
    2fc2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2fc6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2fca:	4770      	bx	lr
    2fcc:	20000a90 	.word	0x20000a90
    2fd0:	40011000 	.word	0x40011000
    2fd4:	20000a8c 	.word	0x20000a8c
    2fd8:	e000e100 	.word	0xe000e100

00002fdc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2fdc:	4b0d      	ldr	r3, [pc, #52]	; (3014 <z_nrf_rtc_timer_read+0x38>)
    2fde:	6818      	ldr	r0, [r3, #0]
    2fe0:	0a01      	lsrs	r1, r0, #8
    2fe2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2fe4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2fe8:	4b0b      	ldr	r3, [pc, #44]	; (3018 <z_nrf_rtc_timer_read+0x3c>)
    2fea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2fee:	1818      	adds	r0, r3, r0
    2ff0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2ff8:	d20a      	bcs.n	3010 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2ffa:	4b08      	ldr	r3, [pc, #32]	; (301c <z_nrf_rtc_timer_read+0x40>)
    2ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3000:	4290      	cmp	r0, r2
    3002:	eb71 0303 	sbcs.w	r3, r1, r3
    3006:	d203      	bcs.n	3010 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3008:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    300c:	f141 0100 	adc.w	r1, r1, #0
}
    3010:	4770      	bx	lr
    3012:	bf00      	nop
    3014:	20000a94 	.word	0x20000a94
    3018:	40011000 	.word	0x40011000
    301c:	20000348 	.word	0x20000348

00003020 <compare_set>:
{
    3020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3024:	b085      	sub	sp, #20
    3026:	4616      	mov	r6, r2
    3028:	4698      	mov	r8, r3
    302a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    302c:	f7ff ff44 	bl	2eb8 <compare_int_lock>
    3030:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3032:	f7ff ffd3 	bl	2fdc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3036:	42b0      	cmp	r0, r6
    3038:	eb71 0308 	sbcs.w	r3, r1, r8
    303c:	d278      	bcs.n	3130 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    303e:	4b46      	ldr	r3, [pc, #280]	; (3158 <compare_set+0x138>)
    3040:	1a30      	subs	r0, r6, r0
    3042:	eb68 0101 	sbc.w	r1, r8, r1
    3046:	4298      	cmp	r0, r3
    3048:	f171 0300 	sbcs.w	r3, r1, #0
    304c:	f080 8081 	bcs.w	3152 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3050:	4b42      	ldr	r3, [pc, #264]	; (315c <compare_set+0x13c>)
    3052:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3056:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    305a:	45d8      	cmp	r8, fp
    305c:	bf08      	it	eq
    305e:	4556      	cmpeq	r6, sl
    3060:	d051      	beq.n	3106 <compare_set+0xe6>
    3062:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3066:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    306a:	f105 0750 	add.w	r7, r5, #80	; 0x50
    306e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3072:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3074:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3078:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    307c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    307e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3082:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3086:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3088:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    308c:	4b34      	ldr	r3, [pc, #208]	; (3160 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    308e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3092:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3094:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3098:	1a40      	subs	r0, r0, r1
    309a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    309e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    30a2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    30a4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    30a8:	d107      	bne.n	30ba <compare_set+0x9a>
    30aa:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    30ae:	2013      	movs	r0, #19
    30b0:	f004 f945 	bl	733e <z_impl_k_busy_wait>
    30b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    30b8:	4b29      	ldr	r3, [pc, #164]	; (3160 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    30ba:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    30be:	eba4 000c 	sub.w	r0, r4, ip
    30c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    30c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    30ca:	bf88      	it	hi
    30cc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30ce:	2000      	movs	r0, #0
    30d0:	6038      	str	r0, [r7, #0]
    30d2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    30d4:	9801      	ldr	r0, [sp, #4]
    30d6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    30da:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    30de:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    30e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    30e6:	4281      	cmp	r1, r0
    30e8:	d006      	beq.n	30f8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    30ea:	1a20      	subs	r0, r4, r0
    30ec:	3802      	subs	r0, #2
    30ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    30f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    30f6:	d819      	bhi.n	312c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    30f8:	1aa4      	subs	r4, r4, r2
    30fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    30fe:	eb14 0a06 	adds.w	sl, r4, r6
    3102:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3106:	4915      	ldr	r1, [pc, #84]	; (315c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3108:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    310a:	012b      	lsls	r3, r5, #4
    310c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3110:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3114:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3118:	6053      	str	r3, [r2, #4]
	return ret;
    311a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    311c:	4628      	mov	r0, r5
    311e:	9900      	ldr	r1, [sp, #0]
    3120:	f7ff ff2e 	bl	2f80 <compare_int_unlock>
}
    3124:	4620      	mov	r0, r4
    3126:	b005      	add	sp, #20
    3128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    312c:	4620      	mov	r0, r4
    312e:	e7b1      	b.n	3094 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3130:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3132:	4a0c      	ldr	r2, [pc, #48]	; (3164 <compare_set+0x144>)
    3134:	f3bf 8f5b 	dmb	ish
    3138:	40ab      	lsls	r3, r5
    313a:	e852 1f00 	ldrex	r1, [r2]
    313e:	4319      	orrs	r1, r3
    3140:	e842 1000 	strex	r0, r1, [r2]
    3144:	2800      	cmp	r0, #0
    3146:	d1f8      	bne.n	313a <compare_set+0x11a>
    3148:	f3bf 8f5b 	dmb	ish
    314c:	46b2      	mov	sl, r6
    314e:	46c3      	mov	fp, r8
    3150:	e7d9      	b.n	3106 <compare_set+0xe6>
			return -EINVAL;
    3152:	f06f 0415 	mvn.w	r4, #21
    3156:	e7e1      	b.n	311c <compare_set+0xfc>
    3158:	01000001 	.word	0x01000001
    315c:	20000350 	.word	0x20000350
    3160:	40011000 	.word	0x40011000
    3164:	20000a8c 	.word	0x20000a8c

00003168 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3168:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    316a:	4b19      	ldr	r3, [pc, #100]	; (31d0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    316c:	4d19      	ldr	r5, [pc, #100]	; (31d4 <sys_clock_driver_init+0x6c>)
    316e:	2400      	movs	r4, #0
    3170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3178:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    317c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3184:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3188:	4b13      	ldr	r3, [pc, #76]	; (31d8 <sys_clock_driver_init+0x70>)
    318a:	2602      	movs	r6, #2
    318c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3190:	2101      	movs	r1, #1
    3192:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3196:	2011      	movs	r0, #17
    3198:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    319c:	4622      	mov	r2, r4
    319e:	f7fe fc29 	bl	19f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    31a2:	2011      	movs	r0, #17
    31a4:	f7fe fc08 	bl	19b8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    31a8:	4a0c      	ldr	r2, [pc, #48]	; (31dc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    31aa:	2301      	movs	r3, #1
    31ac:	60ab      	str	r3, [r5, #8]
    31ae:	602b      	str	r3, [r5, #0]
    31b0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    31b2:	4b0b      	ldr	r3, [pc, #44]	; (31e0 <sys_clock_driver_init+0x78>)
    31b4:	4a0b      	ldr	r2, [pc, #44]	; (31e4 <sys_clock_driver_init+0x7c>)
    31b6:	9300      	str	r3, [sp, #0]
    31b8:	9401      	str	r4, [sp, #4]
    31ba:	2300      	movs	r3, #0
    31bc:	4620      	mov	r0, r4
    31be:	f7ff ff2f 	bl	3020 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    31c2:	4630      	mov	r0, r6
    31c4:	f7ff fa24 	bl	2610 <z_nrf_clock_control_lf_on>

	return 0;
}
    31c8:	4620      	mov	r0, r4
    31ca:	b002      	add	sp, #8
    31cc:	bd70      	pop	{r4, r5, r6, pc}
    31ce:	bf00      	nop
    31d0:	20000350 	.word	0x20000350
    31d4:	40011000 	.word	0x40011000
    31d8:	e000e100 	.word	0xe000e100
    31dc:	20000a90 	.word	0x20000a90
    31e0:	00002f09 	.word	0x00002f09
    31e4:	007fffff 	.word	0x007fffff

000031e8 <rtc_nrf_isr>:
{
    31e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    31ec:	4c35      	ldr	r4, [pc, #212]	; (32c4 <rtc_nrf_isr+0xdc>)
    31ee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    31f2:	079a      	lsls	r2, r3, #30
    31f4:	d50b      	bpl.n	320e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31f6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    31fa:	b143      	cbz	r3, 320e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    31fc:	4a32      	ldr	r2, [pc, #200]	; (32c8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    31fe:	2300      	movs	r3, #0
    3200:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3204:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3208:	6813      	ldr	r3, [r2, #0]
    320a:	3301      	adds	r3, #1
    320c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    320e:	f04f 0320 	mov.w	r3, #32
    3212:	f3ef 8211 	mrs	r2, BASEPRI
    3216:	f383 8812 	msr	BASEPRI_MAX, r3
    321a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    321e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3222:	03db      	lsls	r3, r3, #15
    3224:	d512      	bpl.n	324c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3226:	f3bf 8f5b 	dmb	ish
    322a:	4b28      	ldr	r3, [pc, #160]	; (32cc <rtc_nrf_isr+0xe4>)
    322c:	e853 1f00 	ldrex	r1, [r3]
    3230:	f021 0001 	bic.w	r0, r1, #1
    3234:	e843 0600 	strex	r6, r0, [r3]
    3238:	2e00      	cmp	r6, #0
    323a:	d1f7      	bne.n	322c <rtc_nrf_isr+0x44>
    323c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3240:	2900      	cmp	r1, #0
    3242:	d136      	bne.n	32b2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3244:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3248:	2b00      	cmp	r3, #0
    324a:	d132      	bne.n	32b2 <rtc_nrf_isr+0xca>
{
    324c:	2300      	movs	r3, #0
	__asm__ volatile(
    324e:	f382 8811 	msr	BASEPRI, r2
    3252:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3256:	b34b      	cbz	r3, 32ac <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3258:	f7ff fec0 	bl	2fdc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    325c:	f04f 0320 	mov.w	r3, #32
    3260:	f3ef 8c11 	mrs	ip, BASEPRI
    3264:	f383 8812 	msr	BASEPRI_MAX, r3
    3268:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    326c:	4b18      	ldr	r3, [pc, #96]	; (32d0 <rtc_nrf_isr+0xe8>)
    326e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3272:	42b0      	cmp	r0, r6
    3274:	eb71 0207 	sbcs.w	r2, r1, r7
    3278:	f04f 0200 	mov.w	r2, #0
    327c:	d320      	bcc.n	32c0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    327e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3282:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3286:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    328a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    328e:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3294:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3298:	f38c 8811 	msr	BASEPRI, ip
    329c:	f3bf 8f6f 	isb	sy
		if (handler) {
    32a0:	b121      	cbz	r1, 32ac <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    32a2:	9500      	str	r5, [sp, #0]
    32a4:	4632      	mov	r2, r6
    32a6:	463b      	mov	r3, r7
    32a8:	2000      	movs	r0, #0
    32aa:	4788      	blx	r1
}
    32ac:	b003      	add	sp, #12
    32ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    32b2:	2300      	movs	r3, #0
    32b4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    32b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    32bc:	2301      	movs	r3, #1
}
    32be:	e7c6      	b.n	324e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    32c0:	4611      	mov	r1, r2
    32c2:	e7e9      	b.n	3298 <rtc_nrf_isr+0xb0>
    32c4:	40011000 	.word	0x40011000
    32c8:	20000a94 	.word	0x20000a94
    32cc:	20000a8c 	.word	0x20000a8c
    32d0:	20000350 	.word	0x20000350

000032d4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    32d4:	1c43      	adds	r3, r0, #1
{
    32d6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    32d8:	d021      	beq.n	331e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    32da:	2801      	cmp	r0, #1
    32dc:	dd21      	ble.n	3322 <sys_clock_set_timeout+0x4e>
    32de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    32e2:	da20      	bge.n	3326 <sys_clock_set_timeout+0x52>
    32e4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    32e6:	f7ff fe79 	bl	2fdc <z_nrf_rtc_timer_read>
    32ea:	4b10      	ldr	r3, [pc, #64]	; (332c <sys_clock_set_timeout+0x58>)
    32ec:	e9d3 1300 	ldrd	r1, r3, [r3]
    32f0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    32f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    32f6:	bf28      	it	cs
    32f8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    32fa:	3001      	adds	r0, #1
    32fc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    32fe:	480c      	ldr	r0, [pc, #48]	; (3330 <sys_clock_set_timeout+0x5c>)
    3300:	4282      	cmp	r2, r0
    3302:	bf28      	it	cs
    3304:	4602      	movcs	r2, r0
    3306:	1852      	adds	r2, r2, r1
    3308:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    330c:	4909      	ldr	r1, [pc, #36]	; (3334 <sys_clock_set_timeout+0x60>)
    330e:	9001      	str	r0, [sp, #4]
    3310:	9100      	str	r1, [sp, #0]
    3312:	f143 0300 	adc.w	r3, r3, #0
    3316:	f7ff fe83 	bl	3020 <compare_set>
}
    331a:	b002      	add	sp, #8
    331c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    331e:	4804      	ldr	r0, [pc, #16]	; (3330 <sys_clock_set_timeout+0x5c>)
    3320:	e7e0      	b.n	32e4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3322:	2400      	movs	r4, #0
    3324:	e7df      	b.n	32e6 <sys_clock_set_timeout+0x12>
    3326:	4c02      	ldr	r4, [pc, #8]	; (3330 <sys_clock_set_timeout+0x5c>)
    3328:	e7dd      	b.n	32e6 <sys_clock_set_timeout+0x12>
    332a:	bf00      	nop
    332c:	20000360 	.word	0x20000360
    3330:	007fffff 	.word	0x007fffff
    3334:	00002f09 	.word	0x00002f09

00003338 <sys_clock_elapsed>:
{
    3338:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    333a:	f7ff fe4f 	bl	2fdc <z_nrf_rtc_timer_read>
    333e:	4b02      	ldr	r3, [pc, #8]	; (3348 <sys_clock_elapsed+0x10>)
    3340:	681b      	ldr	r3, [r3, #0]
}
    3342:	1ac0      	subs	r0, r0, r3
    3344:	bd08      	pop	{r3, pc}
    3346:	bf00      	nop
    3348:	20000360 	.word	0x20000360

0000334c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    334c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    334e:	0953      	lsrs	r3, r2, #5
{
    3350:	b510      	push	{r4, lr}
    3352:	4604      	mov	r4, r0
    switch (port)
    3354:	d02c      	beq.n	33b0 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    3356:	2b01      	cmp	r3, #1
    3358:	f64f 73ff 	movw	r3, #65535	; 0xffff
    335c:	bf18      	it	ne
    335e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3360:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3364:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3366:	07db      	lsls	r3, r3, #31
    3368:	d40b      	bmi.n	3382 <nrf_gpio_pin_port_decode+0x36>
    336a:	4914      	ldr	r1, [pc, #80]	; (33bc <nrf_gpio_pin_port_decode+0x70>)
    336c:	4814      	ldr	r0, [pc, #80]	; (33c0 <nrf_gpio_pin_port_decode+0x74>)
    336e:	4a15      	ldr	r2, [pc, #84]	; (33c4 <nrf_gpio_pin_port_decode+0x78>)
    3370:	f240 2329 	movw	r3, #553	; 0x229
    3374:	f003 fc66 	bl	6c44 <assert_print>
    3378:	4812      	ldr	r0, [pc, #72]	; (33c4 <nrf_gpio_pin_port_decode+0x78>)
    337a:	f240 2129 	movw	r1, #553	; 0x229
    337e:	f003 fc5a 	bl	6c36 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3382:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3384:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3388:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    338a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    338c:	d00d      	beq.n	33aa <nrf_gpio_pin_port_decode+0x5e>
    338e:	2b01      	cmp	r3, #1
    3390:	d011      	beq.n	33b6 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3392:	490d      	ldr	r1, [pc, #52]	; (33c8 <nrf_gpio_pin_port_decode+0x7c>)
    3394:	480a      	ldr	r0, [pc, #40]	; (33c0 <nrf_gpio_pin_port_decode+0x74>)
    3396:	4a0b      	ldr	r2, [pc, #44]	; (33c4 <nrf_gpio_pin_port_decode+0x78>)
    3398:	f240 232e 	movw	r3, #558	; 0x22e
    339c:	f003 fc52 	bl	6c44 <assert_print>
    33a0:	4808      	ldr	r0, [pc, #32]	; (33c4 <nrf_gpio_pin_port_decode+0x78>)
    33a2:	f240 212e 	movw	r1, #558	; 0x22e
    33a6:	f003 fc46 	bl	6c36 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    33ae:	bd10      	pop	{r4, pc}
    switch (port)
    33b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33b4:	e7d4      	b.n	3360 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    33b6:	4805      	ldr	r0, [pc, #20]	; (33cc <nrf_gpio_pin_port_decode+0x80>)
    33b8:	e7f9      	b.n	33ae <nrf_gpio_pin_port_decode+0x62>
    33ba:	bf00      	nop
    33bc:	0000815b 	.word	0x0000815b
    33c0:	000079d4 	.word	0x000079d4
    33c4:	00008128 	.word	0x00008128
    33c8:	00007a7c 	.word	0x00007a7c
    33cc:	50000300 	.word	0x50000300

000033d0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    33d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    33d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    33d8:	2a08      	cmp	r2, #8
    33da:	d106      	bne.n	33ea <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    33dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    33e0:	2b05      	cmp	r3, #5
    33e2:	d802      	bhi.n	33ea <nrf52_errata_103+0x1a>
    33e4:	4a02      	ldr	r2, [pc, #8]	; (33f0 <nrf52_errata_103+0x20>)
    33e6:	5cd0      	ldrb	r0, [r2, r3]
    33e8:	4770      	bx	lr
        return false;
    33ea:	2000      	movs	r0, #0
}
    33ec:	4770      	bx	lr
    33ee:	bf00      	nop
    33f0:	000081ac 	.word	0x000081ac

000033f4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    33f4:	4a02      	ldr	r2, [pc, #8]	; (3400 <nvmc_wait+0xc>)
    33f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    33fa:	2b00      	cmp	r3, #0
    33fc:	d0fb      	beq.n	33f6 <nvmc_wait+0x2>
}
    33fe:	4770      	bx	lr
    3400:	4001e000 	.word	0x4001e000

00003404 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3404:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3406:	f003 fe98 	bl	713a <nrf52_errata_136>
    340a:	b140      	cbz	r0, 341e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    340c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3410:	2200      	movs	r2, #0
    3412:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3416:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    341a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    341e:	f003 fe8c 	bl	713a <nrf52_errata_136>
    3422:	2800      	cmp	r0, #0
    3424:	d046      	beq.n	34b4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    342a:	4b60      	ldr	r3, [pc, #384]	; (35ac <SystemInit+0x1a8>)
    342c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3430:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3434:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3438:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    343c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3440:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3444:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3448:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    344c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3450:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3454:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3458:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    345c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3460:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3464:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3468:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    346c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3470:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3474:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3478:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    347c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3480:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3484:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3488:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    348c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3490:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3494:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3498:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    349c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    34a0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    34a4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    34a8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    34ac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    34b0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    34b4:	f7ff ff8c 	bl	33d0 <nrf52_errata_103>
    34b8:	b118      	cbz	r0, 34c2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    34ba:	4b3d      	ldr	r3, [pc, #244]	; (35b0 <SystemInit+0x1ac>)
    34bc:	4a3d      	ldr	r2, [pc, #244]	; (35b4 <SystemInit+0x1b0>)
    34be:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    34c2:	f7ff ff85 	bl	33d0 <nrf52_errata_103>
    34c6:	b118      	cbz	r0, 34d0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    34c8:	4b3b      	ldr	r3, [pc, #236]	; (35b8 <SystemInit+0x1b4>)
    34ca:	22fb      	movs	r2, #251	; 0xfb
    34cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    34d0:	f7ff ff7e 	bl	33d0 <nrf52_errata_103>
    34d4:	b170      	cbz	r0, 34f4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    34d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    34da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    34de:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    34e2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    34e6:	f022 020f 	bic.w	r2, r2, #15
    34ea:	f003 030f 	and.w	r3, r3, #15
    34ee:	4313      	orrs	r3, r2
    34f0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    34f4:	f7ff ff6c 	bl	33d0 <nrf52_errata_103>
    34f8:	b120      	cbz	r0, 3504 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    34fa:	4b30      	ldr	r3, [pc, #192]	; (35bc <SystemInit+0x1b8>)
    34fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    3500:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3504:	f003 fe19 	bl	713a <nrf52_errata_136>
    3508:	b148      	cbz	r0, 351e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    350a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    350e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3512:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3514:	bf44      	itt	mi
    3516:	f06f 0201 	mvnmi.w	r2, #1
    351a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    351e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3522:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3526:	2a08      	cmp	r2, #8
    3528:	d10e      	bne.n	3548 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    352a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    352e:	2b05      	cmp	r3, #5
    3530:	d802      	bhi.n	3538 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3532:	4a23      	ldr	r2, [pc, #140]	; (35c0 <SystemInit+0x1bc>)
    3534:	5cd3      	ldrb	r3, [r2, r3]
    3536:	b13b      	cbz	r3, 3548 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3538:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    353c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3544:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3548:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    354c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3550:	2a00      	cmp	r2, #0
    3552:	db03      	blt.n	355c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3554:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3558:	2b00      	cmp	r3, #0
    355a:	da22      	bge.n	35a2 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    355c:	4919      	ldr	r1, [pc, #100]	; (35c4 <SystemInit+0x1c0>)
    355e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3560:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3564:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3568:	2412      	movs	r4, #18
    nvmc_wait();
    356a:	f7ff ff43 	bl	33f4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    356e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3572:	f7ff ff3f 	bl	33f4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3576:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    357a:	f7ff ff3b 	bl	33f4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    357e:	2300      	movs	r3, #0
    3580:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3584:	f7ff ff36 	bl	33f4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3588:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    358c:	490e      	ldr	r1, [pc, #56]	; (35c8 <SystemInit+0x1c4>)
    358e:	4b0f      	ldr	r3, [pc, #60]	; (35cc <SystemInit+0x1c8>)
    3590:	68ca      	ldr	r2, [r1, #12]
    3592:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3596:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3598:	60cb      	str	r3, [r1, #12]
    359a:	f3bf 8f4f 	dsb	sy
    __NOP();
    359e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    35a0:	e7fd      	b.n	359e <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    35a2:	4b0b      	ldr	r3, [pc, #44]	; (35d0 <SystemInit+0x1cc>)
    35a4:	4a0b      	ldr	r2, [pc, #44]	; (35d4 <SystemInit+0x1d0>)
    35a6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    35a8:	bd10      	pop	{r4, pc}
    35aa:	bf00      	nop
    35ac:	4000c000 	.word	0x4000c000
    35b0:	40005000 	.word	0x40005000
    35b4:	00038148 	.word	0x00038148
    35b8:	4000f000 	.word	0x4000f000
    35bc:	40029000 	.word	0x40029000
    35c0:	000081a6 	.word	0x000081a6
    35c4:	4001e000 	.word	0x4001e000
    35c8:	e000ed00 	.word	0xe000ed00
    35cc:	05fa0004 	.word	0x05fa0004
    35d0:	2000005c 	.word	0x2000005c
    35d4:	03d09000 	.word	0x03d09000

000035d8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    35d8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    35da:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    35dc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    35de:	fab2 f382 	clz	r3, r2
    35e2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    35e6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    35e8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    35ea:	d014      	beq.n	3616 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    35ec:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    35f0:	fa05 f303 	lsl.w	r3, r5, r3
    35f4:	ea22 0303 	bic.w	r3, r2, r3
    35f8:	e850 6f00 	ldrex	r6, [r0]
    35fc:	4296      	cmp	r6, r2
    35fe:	d104      	bne.n	360a <nrfx_flag32_alloc+0x32>
    3600:	e840 3c00 	strex	ip, r3, [r0]
    3604:	f1bc 0f00 	cmp.w	ip, #0
    3608:	d1f6      	bne.n	35f8 <nrfx_flag32_alloc+0x20>
    360a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    360e:	d1e5      	bne.n	35dc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3610:	4802      	ldr	r0, [pc, #8]	; (361c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3612:	700c      	strb	r4, [r1, #0]
}
    3614:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3616:	4802      	ldr	r0, [pc, #8]	; (3620 <nrfx_flag32_alloc+0x48>)
    3618:	e7fc      	b.n	3614 <nrfx_flag32_alloc+0x3c>
    361a:	bf00      	nop
    361c:	0bad0000 	.word	0x0bad0000
    3620:	0bad0002 	.word	0x0bad0002

00003624 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3624:	6803      	ldr	r3, [r0, #0]
    3626:	40cb      	lsrs	r3, r1
    3628:	07db      	lsls	r3, r3, #31
{
    362a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    362c:	d415      	bmi.n	365a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    362e:	2301      	movs	r3, #1
    3630:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3634:	6803      	ldr	r3, [r0, #0]
    3636:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    363a:	ea41 0203 	orr.w	r2, r1, r3
    363e:	e850 4f00 	ldrex	r4, [r0]
    3642:	429c      	cmp	r4, r3
    3644:	d104      	bne.n	3650 <nrfx_flag32_free+0x2c>
    3646:	e840 2c00 	strex	ip, r2, [r0]
    364a:	f1bc 0f00 	cmp.w	ip, #0
    364e:	d1f6      	bne.n	363e <nrfx_flag32_free+0x1a>
    3650:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3654:	d1ee      	bne.n	3634 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3656:	4802      	ldr	r0, [pc, #8]	; (3660 <nrfx_flag32_free+0x3c>)
}
    3658:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    365a:	4802      	ldr	r0, [pc, #8]	; (3664 <nrfx_flag32_free+0x40>)
    365c:	e7fc      	b.n	3658 <nrfx_flag32_free+0x34>
    365e:	bf00      	nop
    3660:	0bad0000 	.word	0x0bad0000
    3664:	0bad0004 	.word	0x0bad0004

00003668 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    366a:	4604      	mov	r4, r0
    366c:	b170      	cbz	r0, 368c <clock_stop+0x24>
    366e:	2801      	cmp	r0, #1
    3670:	d031      	beq.n	36d6 <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3672:	4931      	ldr	r1, [pc, #196]	; (3738 <clock_stop+0xd0>)
    3674:	4831      	ldr	r0, [pc, #196]	; (373c <clock_stop+0xd4>)
    3676:	4a32      	ldr	r2, [pc, #200]	; (3740 <clock_stop+0xd8>)
    3678:	23d8      	movs	r3, #216	; 0xd8
    367a:	f003 fae3 	bl	6c44 <assert_print>
    367e:	4830      	ldr	r0, [pc, #192]	; (3740 <clock_stop+0xd8>)
    3680:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3682:	b003      	add	sp, #12
    3684:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    3688:	f003 bad5 	b.w	6c36 <assert_post_action>
    p_reg->INTENCLR = mask;
    368c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3690:	2202      	movs	r2, #2
    3692:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3696:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    369a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    369e:	2201      	movs	r2, #1
    36a0:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    36a2:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    36a4:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    36a6:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    36aa:	bf14      	ite	ne
    36ac:	2500      	movne	r5, #0
    36ae:	f10d 0507 	addeq.w	r5, sp, #7
    36b2:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36b6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    36ba:	b1bc      	cbz	r4, 36ec <clock_stop+0x84>
    36bc:	2c01      	cmp	r4, #1
    36be:	d02c      	beq.n	371a <clock_stop+0xb2>
            NRFX_ASSERT(0);
    36c0:	491d      	ldr	r1, [pc, #116]	; (3738 <clock_stop+0xd0>)
    36c2:	481e      	ldr	r0, [pc, #120]	; (373c <clock_stop+0xd4>)
    36c4:	4a1f      	ldr	r2, [pc, #124]	; (3744 <clock_stop+0xdc>)
    36c6:	f44f 734f 	mov.w	r3, #828	; 0x33c
    36ca:	f003 fabb 	bl	6c44 <assert_print>
    36ce:	481d      	ldr	r0, [pc, #116]	; (3744 <clock_stop+0xdc>)
    36d0:	f44f 714f 	mov.w	r1, #828	; 0x33c
    36d4:	e7d5      	b.n	3682 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    36d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36da:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    36dc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    36e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36e8:	6058      	str	r0, [r3, #4]
}
    36ea:	e7da      	b.n	36a2 <clock_stop+0x3a>
            if (p_clk_src != NULL)
    36ec:	b125      	cbz	r5, 36f8 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    36ee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    36f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    36f6:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36f8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    36fc:	03da      	lsls	r2, r3, #15
    36fe:	d519      	bpl.n	3734 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3700:	b11d      	cbz	r5, 370a <clock_stop+0xa2>
    3702:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3706:	2b01      	cmp	r3, #1
    3708:	d104      	bne.n	3714 <clock_stop+0xac>
    370a:	2001      	movs	r0, #1
    370c:	f003 fd1f 	bl	714e <nrfx_busy_wait>
    3710:	3f01      	subs	r7, #1
    3712:	d1d2      	bne.n	36ba <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3714:	2c01      	cmp	r4, #1
    3716:	d00a      	beq.n	372e <clock_stop+0xc6>
    3718:	e00c      	b.n	3734 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    371a:	b125      	cbz	r5, 3726 <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    371c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3720:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3724:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3726:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    372a:	03db      	lsls	r3, r3, #15
    372c:	d4e8      	bmi.n	3700 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    372e:	4b06      	ldr	r3, [pc, #24]	; (3748 <clock_stop+0xe0>)
    3730:	2200      	movs	r2, #0
    3732:	715a      	strb	r2, [r3, #5]
}
    3734:	b003      	add	sp, #12
    3736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3738:	00007a7c 	.word	0x00007a7c
    373c:	000079d4 	.word	0x000079d4
    3740:	000081b2 	.word	0x000081b2
    3744:	000081ef 	.word	0x000081ef
    3748:	20000a98 	.word	0x20000a98

0000374c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    374c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    374e:	4604      	mov	r4, r0
    3750:	b958      	cbnz	r0, 376a <nrfx_clock_init+0x1e>
    3752:	490b      	ldr	r1, [pc, #44]	; (3780 <nrfx_clock_init+0x34>)
    3754:	480b      	ldr	r0, [pc, #44]	; (3784 <nrfx_clock_init+0x38>)
    3756:	4a0c      	ldr	r2, [pc, #48]	; (3788 <nrfx_clock_init+0x3c>)
    3758:	f240 1315 	movw	r3, #277	; 0x115
    375c:	f003 fa72 	bl	6c44 <assert_print>
    3760:	4809      	ldr	r0, [pc, #36]	; (3788 <nrfx_clock_init+0x3c>)
    3762:	f240 1115 	movw	r1, #277	; 0x115
    3766:	f003 fa66 	bl	6c36 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    376a:	4b08      	ldr	r3, [pc, #32]	; (378c <nrfx_clock_init+0x40>)
    376c:	791a      	ldrb	r2, [r3, #4]
    376e:	b922      	cbnz	r2, 377a <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3770:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3772:	4807      	ldr	r0, [pc, #28]	; (3790 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    3774:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3776:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3778:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    377a:	4806      	ldr	r0, [pc, #24]	; (3794 <nrfx_clock_init+0x48>)
    return err_code;
    377c:	e7fc      	b.n	3778 <nrfx_clock_init+0x2c>
    377e:	bf00      	nop
    3780:	00008223 	.word	0x00008223
    3784:	000079d4 	.word	0x000079d4
    3788:	000081b2 	.word	0x000081b2
    378c:	20000a98 	.word	0x20000a98
    3790:	0bad0000 	.word	0x0bad0000
    3794:	0bad000c 	.word	0x0bad000c

00003798 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3798:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    379a:	4b0d      	ldr	r3, [pc, #52]	; (37d0 <nrfx_clock_enable+0x38>)
    379c:	791b      	ldrb	r3, [r3, #4]
    379e:	b95b      	cbnz	r3, 37b8 <nrfx_clock_enable+0x20>
    37a0:	490c      	ldr	r1, [pc, #48]	; (37d4 <nrfx_clock_enable+0x3c>)
    37a2:	480d      	ldr	r0, [pc, #52]	; (37d8 <nrfx_clock_enable+0x40>)
    37a4:	4a0d      	ldr	r2, [pc, #52]	; (37dc <nrfx_clock_enable+0x44>)
    37a6:	f44f 7397 	mov.w	r3, #302	; 0x12e
    37aa:	f003 fa4b 	bl	6c44 <assert_print>
    37ae:	480b      	ldr	r0, [pc, #44]	; (37dc <nrfx_clock_enable+0x44>)
    37b0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    37b4:	f003 fa3f 	bl	6c36 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    37b8:	2000      	movs	r0, #0
    37ba:	f7fe f90d 	bl	19d8 <arch_irq_is_enabled>
    37be:	b908      	cbnz	r0, 37c4 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    37c0:	f7fe f8fa 	bl	19b8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    37c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37c8:	2200      	movs	r2, #0
    37ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    37ce:	bd08      	pop	{r3, pc}
    37d0:	20000a98 	.word	0x20000a98
    37d4:	00008231 	.word	0x00008231
    37d8:	000079d4 	.word	0x000079d4
    37dc:	000081b2 	.word	0x000081b2

000037e0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    37e0:	4b2c      	ldr	r3, [pc, #176]	; (3894 <nrfx_clock_start+0xb4>)
    37e2:	791b      	ldrb	r3, [r3, #4]
{
    37e4:	b510      	push	{r4, lr}
    37e6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    37e8:	b95b      	cbnz	r3, 3802 <nrfx_clock_start+0x22>
    37ea:	492b      	ldr	r1, [pc, #172]	; (3898 <nrfx_clock_start+0xb8>)
    37ec:	482b      	ldr	r0, [pc, #172]	; (389c <nrfx_clock_start+0xbc>)
    37ee:	4a2c      	ldr	r2, [pc, #176]	; (38a0 <nrfx_clock_start+0xc0>)
    37f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    37f4:	f003 fa26 	bl	6c44 <assert_print>
    37f8:	4829      	ldr	r0, [pc, #164]	; (38a0 <nrfx_clock_start+0xc0>)
    37fa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    37fe:	f003 fa1a 	bl	6c36 <assert_post_action>
    switch (domain)
    3802:	b17c      	cbz	r4, 3824 <nrfx_clock_start+0x44>
    3804:	2c01      	cmp	r4, #1
    3806:	d03a      	beq.n	387e <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3808:	4926      	ldr	r1, [pc, #152]	; (38a4 <nrfx_clock_start+0xc4>)
    380a:	4824      	ldr	r0, [pc, #144]	; (389c <nrfx_clock_start+0xbc>)
    380c:	4a24      	ldr	r2, [pc, #144]	; (38a0 <nrfx_clock_start+0xc0>)
    380e:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    3812:	f003 fa17 	bl	6c44 <assert_print>
            break;
    }
}
    3816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    381a:	4821      	ldr	r0, [pc, #132]	; (38a0 <nrfx_clock_start+0xc0>)
    381c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    3820:	f003 ba09 	b.w	6c36 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3828:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    382c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3830:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    3834:	d10b      	bne.n	384e <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    3836:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    383a:	07c9      	lsls	r1, r1, #31
    383c:	d510      	bpl.n	3860 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    383e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    3842:	079b      	lsls	r3, r3, #30
    3844:	d408      	bmi.n	3858 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    3846:	2302      	movs	r3, #2
    3848:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    384c:	e016      	b.n	387c <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    384e:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3852:	2b01      	cmp	r3, #1
    3854:	d004      	beq.n	3860 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    3856:	b11b      	cbz	r3, 3860 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    3858:	2000      	movs	r0, #0
    385a:	f7ff ff05 	bl	3668 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    385e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    3860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3864:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3868:	2300      	movs	r3, #0
    386a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    386e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    3872:	2302      	movs	r3, #2
    3874:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3878:	2301      	movs	r3, #1
    387a:	6093      	str	r3, [r2, #8]
}
    387c:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    387e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3882:	2200      	movs	r2, #0
    3884:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3888:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    388c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3890:	601c      	str	r4, [r3, #0]
}
    3892:	e7f3      	b.n	387c <nrfx_clock_start+0x9c>
    3894:	20000a98 	.word	0x20000a98
    3898:	00008231 	.word	0x00008231
    389c:	000079d4 	.word	0x000079d4
    38a0:	000081b2 	.word	0x000081b2
    38a4:	00007a7c 	.word	0x00007a7c

000038a8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38a8:	4b0a      	ldr	r3, [pc, #40]	; (38d4 <nrfx_clock_stop+0x2c>)
    38aa:	791b      	ldrb	r3, [r3, #4]
{
    38ac:	b510      	push	{r4, lr}
    38ae:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38b0:	b95b      	cbnz	r3, 38ca <nrfx_clock_stop+0x22>
    38b2:	4909      	ldr	r1, [pc, #36]	; (38d8 <nrfx_clock_stop+0x30>)
    38b4:	4809      	ldr	r0, [pc, #36]	; (38dc <nrfx_clock_stop+0x34>)
    38b6:	4a0a      	ldr	r2, [pc, #40]	; (38e0 <nrfx_clock_stop+0x38>)
    38b8:	f240 13ad 	movw	r3, #429	; 0x1ad
    38bc:	f003 f9c2 	bl	6c44 <assert_print>
    38c0:	4807      	ldr	r0, [pc, #28]	; (38e0 <nrfx_clock_stop+0x38>)
    38c2:	f240 11ad 	movw	r1, #429	; 0x1ad
    38c6:	f003 f9b6 	bl	6c36 <assert_post_action>
    clock_stop(domain);
    38ca:	4620      	mov	r0, r4
}
    38cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    38d0:	f7ff beca 	b.w	3668 <clock_stop>
    38d4:	20000a98 	.word	0x20000a98
    38d8:	00008231 	.word	0x00008231
    38dc:	000079d4 	.word	0x000079d4
    38e0:	000081b2 	.word	0x000081b2

000038e4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    38e8:	b510      	push	{r4, lr}
    38ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    38ee:	b16a      	cbz	r2, 390c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38f0:	2200      	movs	r2, #0
    38f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    38f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    38fa:	2201      	movs	r2, #1
    38fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3900:	4b11      	ldr	r3, [pc, #68]	; (3948 <nrfx_power_clock_irq_handler+0x64>)
    3902:	7958      	ldrb	r0, [r3, #5]
    3904:	b910      	cbnz	r0, 390c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3906:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    390c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3910:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3914:	b172      	cbz	r2, 3934 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3916:	2200      	movs	r2, #0
    3918:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    391c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3920:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3924:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3928:	0792      	lsls	r2, r2, #30
    392a:	d104      	bne.n	3936 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    392c:	2201      	movs	r2, #1
    392e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3932:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3934:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3936:	2202      	movs	r2, #2
    3938:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    393c:	4b02      	ldr	r3, [pc, #8]	; (3948 <nrfx_power_clock_irq_handler+0x64>)
}
    393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	2001      	movs	r0, #1
    3946:	4718      	bx	r3
    3948:	20000a98 	.word	0x20000a98

0000394c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    394c:	4b03      	ldr	r3, [pc, #12]	; (395c <pin_in_use_by_te+0x10>)
    394e:	3008      	adds	r0, #8
    3950:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3954:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3958:	4770      	bx	lr
    395a:	bf00      	nop
    395c:	20000060 	.word	0x20000060

00003960 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3960:	4b04      	ldr	r3, [pc, #16]	; (3974 <pin_has_trigger+0x14>)
    3962:	3008      	adds	r0, #8
    3964:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3968:	f010 001c 	ands.w	r0, r0, #28
    396c:	bf18      	it	ne
    396e:	2001      	movne	r0, #1
    3970:	4770      	bx	lr
    3972:	bf00      	nop
    3974:	20000060 	.word	0x20000060

00003978 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3978:	4b03      	ldr	r3, [pc, #12]	; (3988 <pin_is_output+0x10>)
    397a:	3008      	adds	r0, #8
    397c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3980:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3984:	4770      	bx	lr
    3986:	bf00      	nop
    3988:	20000060 	.word	0x20000060

0000398c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    398c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    398e:	f100 0308 	add.w	r3, r0, #8
    3992:	4c0c      	ldr	r4, [pc, #48]	; (39c4 <call_handler+0x38>)
    3994:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3998:	05da      	lsls	r2, r3, #23
{
    399a:	4605      	mov	r5, r0
    399c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    399e:	d507      	bpl.n	39b0 <call_handler+0x24>
    39a0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    39a4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    39a8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    39ac:	6852      	ldr	r2, [r2, #4]
    39ae:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    39b0:	68a3      	ldr	r3, [r4, #8]
    39b2:	b12b      	cbz	r3, 39c0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    39b4:	68e2      	ldr	r2, [r4, #12]
    39b6:	4631      	mov	r1, r6
    39b8:	4628      	mov	r0, r5
    }
}
    39ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    39be:	4718      	bx	r3
}
    39c0:	bd70      	pop	{r4, r5, r6, pc}
    39c2:	bf00      	nop
    39c4:	20000060 	.word	0x20000060

000039c8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    39c8:	4a19      	ldr	r2, [pc, #100]	; (3a30 <release_handler+0x68>)
    39ca:	3008      	adds	r0, #8
{
    39cc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    39ce:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    39d2:	05d9      	lsls	r1, r3, #23
    39d4:	d51d      	bpl.n	3a12 <release_handler+0x4a>
    39d6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    39da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    39de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39e2:	f102 0410 	add.w	r4, r2, #16
    39e6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    39e8:	f834 3b02 	ldrh.w	r3, [r4], #2
    39ec:	f413 7f80 	tst.w	r3, #256	; 0x100
    39f0:	d003      	beq.n	39fa <release_handler+0x32>
    39f2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    39f6:	4299      	cmp	r1, r3
    39f8:	d00b      	beq.n	3a12 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39fa:	3001      	adds	r0, #1
    39fc:	2830      	cmp	r0, #48	; 0x30
    39fe:	d1f3      	bne.n	39e8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3a00:	2300      	movs	r3, #0
    3a02:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3a06:	480b      	ldr	r0, [pc, #44]	; (3a34 <release_handler+0x6c>)
    3a08:	f7ff fe0c 	bl	3624 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3a0c:	4b0a      	ldr	r3, [pc, #40]	; (3a38 <release_handler+0x70>)
    3a0e:	4298      	cmp	r0, r3
    3a10:	d100      	bne.n	3a14 <release_handler+0x4c>
}
    3a12:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3a14:	4909      	ldr	r1, [pc, #36]	; (3a3c <release_handler+0x74>)
    3a16:	480a      	ldr	r0, [pc, #40]	; (3a40 <release_handler+0x78>)
    3a18:	4a0a      	ldr	r2, [pc, #40]	; (3a44 <release_handler+0x7c>)
    3a1a:	f44f 7399 	mov.w	r3, #306	; 0x132
    3a1e:	f003 f911 	bl	6c44 <assert_print>
}
    3a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3a26:	4807      	ldr	r0, [pc, #28]	; (3a44 <release_handler+0x7c>)
    3a28:	f44f 7199 	mov.w	r1, #306	; 0x132
    3a2c:	f003 b903 	b.w	6c36 <assert_post_action>
    3a30:	20000060 	.word	0x20000060
    3a34:	200000d4 	.word	0x200000d4
    3a38:	0bad0000 	.word	0x0bad0000
    3a3c:	000082b3 	.word	0x000082b3
    3a40:	000079d4 	.word	0x000079d4
    3a44:	0000824f 	.word	0x0000824f

00003a48 <pin_handler_trigger_uninit>:
{
    3a48:	b538      	push	{r3, r4, r5, lr}
    3a4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3a4c:	f7ff ff7e 	bl	394c <pin_in_use_by_te>
    3a50:	4c09      	ldr	r4, [pc, #36]	; (3a78 <pin_handler_trigger_uninit+0x30>)
    3a52:	f102 0508 	add.w	r5, r2, #8
    3a56:	b140      	cbz	r0, 3a6a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a58:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3a5c:	4907      	ldr	r1, [pc, #28]	; (3a7c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3a5e:	0b5b      	lsrs	r3, r3, #13
    3a60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3a64:	2000      	movs	r0, #0
    3a66:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3a6a:	4610      	mov	r0, r2
    3a6c:	f7ff ffac 	bl	39c8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3a70:	2300      	movs	r3, #0
    3a72:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3a76:	bd38      	pop	{r3, r4, r5, pc}
    3a78:	20000060 	.word	0x20000060
    3a7c:	40006000 	.word	0x40006000

00003a80 <nrf_gpio_pin_port_decode>:
{
    3a80:	b510      	push	{r4, lr}
    3a82:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3a84:	6800      	ldr	r0, [r0, #0]
    3a86:	f003 fb64 	bl	7152 <nrf_gpio_pin_present_check>
    3a8a:	b958      	cbnz	r0, 3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a8c:	4912      	ldr	r1, [pc, #72]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a8e:	4813      	ldr	r0, [pc, #76]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3a90:	4a13      	ldr	r2, [pc, #76]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a92:	f240 2329 	movw	r3, #553	; 0x229
    3a96:	f003 f8d5 	bl	6c44 <assert_print>
    3a9a:	4811      	ldr	r0, [pc, #68]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a9c:	f240 2129 	movw	r1, #553	; 0x229
    3aa0:	f003 f8c9 	bl	6c36 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3aa4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3aa6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3aaa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3aac:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3aae:	d00d      	beq.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ab0:	2b01      	cmp	r3, #1
    3ab2:	d00e      	beq.n	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
            NRFX_ASSERT(0);
    3ab4:	490b      	ldr	r1, [pc, #44]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3ab6:	4809      	ldr	r0, [pc, #36]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3ab8:	4a09      	ldr	r2, [pc, #36]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3aba:	f240 232e 	movw	r3, #558	; 0x22e
    3abe:	f003 f8c1 	bl	6c44 <assert_print>
    3ac2:	4807      	ldr	r0, [pc, #28]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3ac4:	f240 212e 	movw	r1, #558	; 0x22e
    3ac8:	f003 f8b5 	bl	6c36 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3ad0:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3ad2:	4805      	ldr	r0, [pc, #20]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3ad4:	e7fc      	b.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3ad6:	bf00      	nop
    3ad8:	0000815b 	.word	0x0000815b
    3adc:	000079d4 	.word	0x000079d4
    3ae0:	00008128 	.word	0x00008128
    3ae4:	00007a7c 	.word	0x00007a7c
    3ae8:	50000300 	.word	0x50000300

00003aec <nrfx_gpiote_input_configure>:
{
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	4604      	mov	r4, r0
    3af0:	b085      	sub	sp, #20
    3af2:	4617      	mov	r7, r2
    3af4:	461d      	mov	r5, r3
    if (p_input_config)
    3af6:	b1f1      	cbz	r1, 3b36 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3af8:	f003 fb3c 	bl	7174 <pin_is_task_output>
    3afc:	b110      	cbz	r0, 3b04 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3afe:	484d      	ldr	r0, [pc, #308]	; (3c34 <nrfx_gpiote_input_configure+0x148>)
}
    3b00:	b005      	add	sp, #20
    3b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b04:	460b      	mov	r3, r1
    3b06:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b0a:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3b0e:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b12:	f10d 020f 	add.w	r2, sp, #15
    3b16:	f10d 010e 	add.w	r1, sp, #14
    3b1a:	4620      	mov	r0, r4
    3b1c:	f003 fb39 	bl	7192 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b20:	4a45      	ldr	r2, [pc, #276]	; (3c38 <nrfx_gpiote_input_configure+0x14c>)
    3b22:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3b26:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b2a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b2e:	f043 0301 	orr.w	r3, r3, #1
    3b32:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3b36:	b197      	cbz	r7, 3b5e <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    3b38:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3b3a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3b3c:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    3b3e:	f7ff ff1b 	bl	3978 <pin_is_output>
    3b42:	b180      	cbz	r0, 3b66 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    3b44:	2a00      	cmp	r2, #0
    3b46:	d1da      	bne.n	3afe <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3b48:	4a3b      	ldr	r2, [pc, #236]	; (3c38 <nrfx_gpiote_input_configure+0x14c>)
    3b4a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3b4e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b52:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3b56:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    3b5a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3b5e:	2d00      	cmp	r5, #0
    3b60:	d13d      	bne.n	3bde <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    3b62:	4836      	ldr	r0, [pc, #216]	; (3c3c <nrfx_gpiote_input_configure+0x150>)
    3b64:	e7cc      	b.n	3b00 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3b66:	4f34      	ldr	r7, [pc, #208]	; (3c38 <nrfx_gpiote_input_configure+0x14c>)
    3b68:	f104 0c08 	add.w	ip, r4, #8
    3b6c:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    3b70:	f021 0120 	bic.w	r1, r1, #32
    3b74:	04c9      	lsls	r1, r1, #19
    3b76:	0cc9      	lsrs	r1, r1, #19
    3b78:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    3b7c:	2a00      	cmp	r2, #0
    3b7e:	d0e3      	beq.n	3b48 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    3b80:	2e03      	cmp	r6, #3
    3b82:	d8bc      	bhi.n	3afe <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3b84:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3b86:	b92e      	cbnz	r6, 3b94 <nrfx_gpiote_input_configure+0xa8>
    3b88:	4a2d      	ldr	r2, [pc, #180]	; (3c40 <nrfx_gpiote_input_configure+0x154>)
    3b8a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    3b8e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3b92:	e7d9      	b.n	3b48 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b94:	009a      	lsls	r2, r3, #2
    3b96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3b9a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3b9e:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    3ba2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3ba6:	f020 0003 	bic.w	r0, r0, #3
    3baa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3bae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3bb2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    3bb6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3bba:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bbe:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3bc2:	0220      	lsls	r0, r4, #8
    3bc4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    3bc8:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3bcc:	ea40 000e 	orr.w	r0, r0, lr
    3bd0:	f041 0120 	orr.w	r1, r1, #32
    3bd4:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    3bd8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3bdc:	e7b4      	b.n	3b48 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3bde:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3be2:	4620      	mov	r0, r4
    3be4:	f7ff fef0 	bl	39c8 <release_handler>
    if (!handler)
    3be8:	2e00      	cmp	r6, #0
    3bea:	d0ba      	beq.n	3b62 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3bec:	4d12      	ldr	r5, [pc, #72]	; (3c38 <nrfx_gpiote_input_configure+0x14c>)
    3bee:	682b      	ldr	r3, [r5, #0]
    3bf0:	429e      	cmp	r6, r3
    3bf2:	d104      	bne.n	3bfe <nrfx_gpiote_input_configure+0x112>
    3bf4:	686b      	ldr	r3, [r5, #4]
    3bf6:	429f      	cmp	r7, r3
    3bf8:	d101      	bne.n	3bfe <nrfx_gpiote_input_configure+0x112>
    3bfa:	2200      	movs	r2, #0
    3bfc:	e00a      	b.n	3c14 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3bfe:	4811      	ldr	r0, [pc, #68]	; (3c44 <nrfx_gpiote_input_configure+0x158>)
    3c00:	f10d 010f 	add.w	r1, sp, #15
    3c04:	f7ff fce8 	bl	35d8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3c08:	4b0c      	ldr	r3, [pc, #48]	; (3c3c <nrfx_gpiote_input_configure+0x150>)
    3c0a:	4298      	cmp	r0, r3
    3c0c:	f47f af78 	bne.w	3b00 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    3c10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3c14:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3c18:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c1c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3c1e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c20:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3c24:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c2c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3c30:	e797      	b.n	3b62 <nrfx_gpiote_input_configure+0x76>
    3c32:	bf00      	nop
    3c34:	0bad0004 	.word	0x0bad0004
    3c38:	20000060 	.word	0x20000060
    3c3c:	0bad0000 	.word	0x0bad0000
    3c40:	40006000 	.word	0x40006000
    3c44:	200000d4 	.word	0x200000d4

00003c48 <nrfx_gpiote_output_configure>:
{
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	4604      	mov	r4, r0
    3c4c:	b085      	sub	sp, #20
    3c4e:	4615      	mov	r5, r2
    if (p_config)
    3c50:	b321      	cbz	r1, 3c9c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    3c52:	f7ff fe91 	bl	3978 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3c56:	b920      	cbnz	r0, 3c62 <nrfx_gpiote_output_configure+0x1a>
    3c58:	4620      	mov	r0, r4
    3c5a:	f7ff fe77 	bl	394c <pin_in_use_by_te>
    3c5e:	2800      	cmp	r0, #0
    3c60:	d15e      	bne.n	3d20 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3c62:	4620      	mov	r0, r4
    3c64:	f7ff fe7c 	bl	3960 <pin_has_trigger>
    3c68:	b110      	cbz	r0, 3c70 <nrfx_gpiote_output_configure+0x28>
    3c6a:	784b      	ldrb	r3, [r1, #1]
    3c6c:	2b01      	cmp	r3, #1
    3c6e:	d057      	beq.n	3d20 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3c70:	2301      	movs	r3, #1
    3c72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3c76:	2300      	movs	r3, #0
    3c78:	e9cd 1300 	strd	r1, r3, [sp]
    3c7c:	1c4a      	adds	r2, r1, #1
    3c7e:	1c8b      	adds	r3, r1, #2
    3c80:	4620      	mov	r0, r4
    3c82:	f10d 010f 	add.w	r1, sp, #15
    3c86:	f003 fa84 	bl	7192 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3c8a:	4a26      	ldr	r2, [pc, #152]	; (3d24 <nrfx_gpiote_output_configure+0xdc>)
    3c8c:	f104 0108 	add.w	r1, r4, #8
    3c90:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3c94:	f043 0303 	orr.w	r3, r3, #3
    3c98:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3c9c:	b915      	cbnz	r5, 3ca4 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    3c9e:	4822      	ldr	r0, [pc, #136]	; (3d28 <nrfx_gpiote_output_configure+0xe0>)
}
    3ca0:	b005      	add	sp, #20
    3ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    3ca4:	4620      	mov	r0, r4
    3ca6:	f7ff fe67 	bl	3978 <pin_is_output>
        if (pin_is_input(pin))
    3caa:	b3c8      	cbz	r0, 3d20 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3cac:	4e1d      	ldr	r6, [pc, #116]	; (3d24 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    3cae:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3cb2:	f104 0708 	add.w	r7, r4, #8
    3cb6:	4661      	mov	r1, ip
    3cb8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    3cbc:	0089      	lsls	r1, r1, #2
    3cbe:	f020 0020 	bic.w	r0, r0, #32
    3cc2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3cc6:	04c0      	lsls	r0, r0, #19
    3cc8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3ccc:	0cc0      	lsrs	r0, r0, #19
    3cce:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3cd2:	2300      	movs	r3, #0
    3cd4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3cd8:	786a      	ldrb	r2, [r5, #1]
    3cda:	2a00      	cmp	r2, #0
    3cdc:	d0df      	beq.n	3c9e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3cde:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3ce2:	78ad      	ldrb	r5, [r5, #2]
    3ce4:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3ce8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3cec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3cf0:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3cf4:	0223      	lsls	r3, r4, #8
    3cf6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3cfa:	0412      	lsls	r2, r2, #16
    3cfc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d00:	ea43 030e 	orr.w	r3, r3, lr
    3d04:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d06:	052a      	lsls	r2, r5, #20
    3d08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d0c:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d10:	4313      	orrs	r3, r2
    3d12:	f040 0020 	orr.w	r0, r0, #32
    3d16:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d1a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3d1e:	e7be      	b.n	3c9e <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    3d20:	4802      	ldr	r0, [pc, #8]	; (3d2c <nrfx_gpiote_output_configure+0xe4>)
    3d22:	e7bd      	b.n	3ca0 <nrfx_gpiote_output_configure+0x58>
    3d24:	20000060 	.word	0x20000060
    3d28:	0bad0000 	.word	0x0bad0000
    3d2c:	0bad0004 	.word	0x0bad0004

00003d30 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3d30:	4b01      	ldr	r3, [pc, #4]	; (3d38 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3d32:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3d36:	4770      	bx	lr
    3d38:	20000060 	.word	0x20000060

00003d3c <nrfx_gpiote_channel_get>:
{
    3d3c:	b538      	push	{r3, r4, r5, lr}
    3d3e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    3d40:	460d      	mov	r5, r1
    3d42:	b959      	cbnz	r1, 3d5c <nrfx_gpiote_channel_get+0x20>
    3d44:	490c      	ldr	r1, [pc, #48]	; (3d78 <nrfx_gpiote_channel_get+0x3c>)
    3d46:	480d      	ldr	r0, [pc, #52]	; (3d7c <nrfx_gpiote_channel_get+0x40>)
    3d48:	4a0d      	ldr	r2, [pc, #52]	; (3d80 <nrfx_gpiote_channel_get+0x44>)
    3d4a:	f240 2335 	movw	r3, #565	; 0x235
    3d4e:	f002 ff79 	bl	6c44 <assert_print>
    3d52:	480b      	ldr	r0, [pc, #44]	; (3d80 <nrfx_gpiote_channel_get+0x44>)
    3d54:	f240 2135 	movw	r1, #565	; 0x235
    3d58:	f002 ff6d 	bl	6c36 <assert_post_action>
    if (pin_in_use_by_te(pin))
    3d5c:	4620      	mov	r0, r4
    3d5e:	f7ff fdf5 	bl	394c <pin_in_use_by_te>
    3d62:	b138      	cbz	r0, 3d74 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d64:	4b07      	ldr	r3, [pc, #28]	; (3d84 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    3d66:	4808      	ldr	r0, [pc, #32]	; (3d88 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d68:	3408      	adds	r4, #8
    3d6a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    3d6e:	0b5b      	lsrs	r3, r3, #13
    3d70:	702b      	strb	r3, [r5, #0]
}
    3d72:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3d74:	4805      	ldr	r0, [pc, #20]	; (3d8c <nrfx_gpiote_channel_get+0x50>)
    3d76:	e7fc      	b.n	3d72 <nrfx_gpiote_channel_get+0x36>
    3d78:	000082c7 	.word	0x000082c7
    3d7c:	000079d4 	.word	0x000079d4
    3d80:	0000824f 	.word	0x0000824f
    3d84:	20000060 	.word	0x20000060
    3d88:	0bad0000 	.word	0x0bad0000
    3d8c:	0bad0004 	.word	0x0bad0004

00003d90 <nrfx_gpiote_init>:
{
    3d90:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3d92:	4c0f      	ldr	r4, [pc, #60]	; (3dd0 <nrfx_gpiote_init+0x40>)
    3d94:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3d98:	b9bd      	cbnz	r5, 3dca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3d9a:	2260      	movs	r2, #96	; 0x60
    3d9c:	4629      	mov	r1, r5
    3d9e:	f104 0010 	add.w	r0, r4, #16
    3da2:	f002 ff97 	bl	6cd4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3da6:	2006      	movs	r0, #6
    3da8:	f7fd fe06 	bl	19b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dac:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <nrfx_gpiote_init+0x44>)
    return err_code;
    3dae:	480a      	ldr	r0, [pc, #40]	; (3dd8 <nrfx_gpiote_init+0x48>)
    3db0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3db4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3dc0:	2301      	movs	r3, #1
    3dc2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3dc6:	6763      	str	r3, [r4, #116]	; 0x74
}
    3dc8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3dca:	4804      	ldr	r0, [pc, #16]	; (3ddc <nrfx_gpiote_init+0x4c>)
    3dcc:	e7fc      	b.n	3dc8 <nrfx_gpiote_init+0x38>
    3dce:	bf00      	nop
    3dd0:	20000060 	.word	0x20000060
    3dd4:	40006000 	.word	0x40006000
    3dd8:	0bad0000 	.word	0x0bad0000
    3ddc:	0bad0005 	.word	0x0bad0005

00003de0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3de0:	4b03      	ldr	r3, [pc, #12]	; (3df0 <nrfx_gpiote_is_init+0x10>)
    3de2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3de6:	3800      	subs	r0, #0
    3de8:	bf18      	it	ne
    3dea:	2001      	movne	r0, #1
    3dec:	4770      	bx	lr
    3dee:	bf00      	nop
    3df0:	20000060 	.word	0x20000060

00003df4 <nrfx_gpiote_channel_free>:
{
    3df4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3df6:	4801      	ldr	r0, [pc, #4]	; (3dfc <nrfx_gpiote_channel_free+0x8>)
    3df8:	f7ff bc14 	b.w	3624 <nrfx_flag32_free>
    3dfc:	200000d0 	.word	0x200000d0

00003e00 <nrfx_gpiote_channel_alloc>:
{
    3e00:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3e02:	4801      	ldr	r0, [pc, #4]	; (3e08 <nrfx_gpiote_channel_alloc+0x8>)
    3e04:	f7ff bbe8 	b.w	35d8 <nrfx_flag32_alloc>
    3e08:	200000d0 	.word	0x200000d0

00003e0c <nrfx_gpiote_trigger_enable>:
{
    3e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e0e:	4604      	mov	r4, r0
    3e10:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3e12:	f7ff fda5 	bl	3960 <pin_has_trigger>
    3e16:	b958      	cbnz	r0, 3e30 <nrfx_gpiote_trigger_enable+0x24>
    3e18:	4930      	ldr	r1, [pc, #192]	; (3edc <nrfx_gpiote_trigger_enable+0xd0>)
    3e1a:	4831      	ldr	r0, [pc, #196]	; (3ee0 <nrfx_gpiote_trigger_enable+0xd4>)
    3e1c:	4a31      	ldr	r2, [pc, #196]	; (3ee4 <nrfx_gpiote_trigger_enable+0xd8>)
    3e1e:	f240 33df 	movw	r3, #991	; 0x3df
    3e22:	f002 ff0f 	bl	6c44 <assert_print>
    3e26:	482f      	ldr	r0, [pc, #188]	; (3ee4 <nrfx_gpiote_trigger_enable+0xd8>)
    3e28:	f240 31df 	movw	r1, #991	; 0x3df
    3e2c:	f002 ff03 	bl	6c36 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e30:	4620      	mov	r0, r4
    3e32:	f7ff fd8b 	bl	394c <pin_in_use_by_te>
    3e36:	4e2c      	ldr	r6, [pc, #176]	; (3ee8 <nrfx_gpiote_trigger_enable+0xdc>)
    3e38:	f104 0708 	add.w	r7, r4, #8
    3e3c:	b318      	cbz	r0, 3e86 <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    3e3e:	4620      	mov	r0, r4
    3e40:	f7ff fd9a 	bl	3978 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e44:	4602      	mov	r2, r0
    3e46:	b9f0      	cbnz	r0, 3e86 <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e48:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    3e4c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3e4e:	4608      	mov	r0, r1
    3e50:	f003 f99b 	bl	718a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3e54:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    3e58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e5c:	601a      	str	r2, [r3, #0]
    3e5e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3e60:	008b      	lsls	r3, r1, #2
    3e62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3e6a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3e6e:	f042 0201 	orr.w	r2, r2, #1
    3e72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    3e76:	b125      	cbz	r5, 3e82 <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    3e78:	4a1c      	ldr	r2, [pc, #112]	; (3eec <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3e7a:	2301      	movs	r3, #1
    3e7c:	408b      	lsls	r3, r1
    3e7e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3e82:	b003      	add	sp, #12
    3e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    3e86:	b95d      	cbnz	r5, 3ea0 <nrfx_gpiote_trigger_enable+0x94>
    3e88:	4919      	ldr	r1, [pc, #100]	; (3ef0 <nrfx_gpiote_trigger_enable+0xe4>)
    3e8a:	4815      	ldr	r0, [pc, #84]	; (3ee0 <nrfx_gpiote_trigger_enable+0xd4>)
    3e8c:	4a15      	ldr	r2, [pc, #84]	; (3ee4 <nrfx_gpiote_trigger_enable+0xd8>)
    3e8e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    3e92:	f002 fed7 	bl	6c44 <assert_print>
    3e96:	4813      	ldr	r0, [pc, #76]	; (3ee4 <nrfx_gpiote_trigger_enable+0xd8>)
    3e98:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3e9c:	f002 fecb 	bl	6c36 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ea0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3ea4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3ea8:	2b04      	cmp	r3, #4
    3eaa:	d012      	beq.n	3ed2 <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3eac:	2b05      	cmp	r3, #5
    3eae:	d012      	beq.n	3ed6 <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3eb0:	a801      	add	r0, sp, #4
    3eb2:	9401      	str	r4, [sp, #4]
    3eb4:	f7ff fde4 	bl	3a80 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3eb8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3eba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3ebe:	40d9      	lsrs	r1, r3
    3ec0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3ec4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3ec6:	4620      	mov	r0, r4
}
    3ec8:	b003      	add	sp, #12
    3eca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3ece:	f003 b9ab 	b.w	7228 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3ed2:	2103      	movs	r1, #3
    3ed4:	e7f7      	b.n	3ec6 <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3ed6:	2102      	movs	r1, #2
    3ed8:	e7f5      	b.n	3ec6 <nrfx_gpiote_trigger_enable+0xba>
    3eda:	bf00      	nop
    3edc:	000082d1 	.word	0x000082d1
    3ee0:	000079d4 	.word	0x000079d4
    3ee4:	0000824f 	.word	0x0000824f
    3ee8:	20000060 	.word	0x20000060
    3eec:	40006000 	.word	0x40006000
    3ef0:	000082e6 	.word	0x000082e6

00003ef4 <nrfx_gpiote_trigger_disable>:
{
    3ef4:	b508      	push	{r3, lr}
    3ef6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3ef8:	f7ff fd28 	bl	394c <pin_in_use_by_te>
    3efc:	b1c8      	cbz	r0, 3f32 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    3efe:	4610      	mov	r0, r2
    3f00:	f7ff fd3a 	bl	3978 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3f04:	b9a8      	cbnz	r0, 3f32 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f06:	3208      	adds	r2, #8
    3f08:	4b0d      	ldr	r3, [pc, #52]	; (3f40 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    3f0a:	490e      	ldr	r1, [pc, #56]	; (3f44 <nrfx_gpiote_trigger_disable+0x50>)
    3f0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3f10:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f12:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3f14:	409a      	lsls	r2, r3
    3f16:	009b      	lsls	r3, r3, #2
    3f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3f20:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3f24:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3f28:	f022 0203 	bic.w	r2, r2, #3
    3f2c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3f30:	bd08      	pop	{r3, pc}
    3f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3f36:	2100      	movs	r1, #0
    3f38:	4610      	mov	r0, r2
    3f3a:	f003 b975 	b.w	7228 <nrf_gpio_cfg_sense_set>
    3f3e:	bf00      	nop
    3f40:	20000060 	.word	0x20000060
    3f44:	40006000 	.word	0x40006000

00003f48 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3f48:	4b0e      	ldr	r3, [pc, #56]	; (3f84 <nrfx_gpiote_pin_uninit+0x3c>)
    3f4a:	f100 0208 	add.w	r2, r0, #8
{
    3f4e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3f50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3f54:	07db      	lsls	r3, r3, #31
{
    3f56:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3f58:	d511      	bpl.n	3f7e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3f5a:	f7ff ffcb 	bl	3ef4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3f5e:	4620      	mov	r0, r4
    3f60:	f7ff fd72 	bl	3a48 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f64:	a801      	add	r0, sp, #4
    3f66:	9401      	str	r4, [sp, #4]
    3f68:	f7ff fd8a 	bl	3a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f6c:	9b01      	ldr	r3, [sp, #4]
    3f6e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f72:	2202      	movs	r2, #2
    3f74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3f78:	4803      	ldr	r0, [pc, #12]	; (3f88 <nrfx_gpiote_pin_uninit+0x40>)
}
    3f7a:	b002      	add	sp, #8
    3f7c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f7e:	4803      	ldr	r0, [pc, #12]	; (3f8c <nrfx_gpiote_pin_uninit+0x44>)
    3f80:	e7fb      	b.n	3f7a <nrfx_gpiote_pin_uninit+0x32>
    3f82:	bf00      	nop
    3f84:	20000060 	.word	0x20000060
    3f88:	0bad0000 	.word	0x0bad0000
    3f8c:	0bad0004 	.word	0x0bad0004

00003f90 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f94:	4b65      	ldr	r3, [pc, #404]	; (412c <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    3f96:	4866      	ldr	r0, [pc, #408]	; (4130 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f98:	4966      	ldr	r1, [pc, #408]	; (4134 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    3f9a:	2600      	movs	r6, #0
{
    3f9c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3f9e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fa0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fa2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3fa4:	b135      	cbz	r5, 3fb4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3fa6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3faa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fac:	bf1e      	ittt	ne
    3fae:	601c      	strne	r4, [r3, #0]
    3fb0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3fb2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3fb4:	3304      	adds	r3, #4
    3fb6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3fb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3fbc:	d1f1      	bne.n	3fa2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fbe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4130 <nrfx_gpiote_irq_handler+0x1a0>
    3fc2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	f000 8093 	beq.w	40f2 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    3fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3fd0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3fd4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3fd6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3fda:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3fde:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3fe0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3fe4:	2700      	movs	r7, #0
            while (latch[i])
    3fe6:	f10d 0910 	add.w	r9, sp, #16
    3fea:	017b      	lsls	r3, r7, #5
    3fec:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3fee:	f04f 0a01 	mov.w	sl, #1
    3ff2:	e04b      	b.n	408c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    3ff4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ff6:	4a50      	ldr	r2, [pc, #320]	; (4138 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3ff8:	fa94 f4a4 	rbit	r4, r4
    3ffc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4000:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4002:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4006:	08e0      	lsrs	r0, r4, #3
    4008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    400c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    400e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4012:	fa0a fc02 	lsl.w	ip, sl, r2
    4016:	f819 2000 	ldrb.w	r2, [r9, r0]
    401a:	ea22 020c 	bic.w	r2, r2, ip
    401e:	0899      	lsrs	r1, r3, #2
    4020:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4024:	a803      	add	r0, sp, #12
    4026:	f3c3 0582 	ubfx	r5, r3, #2, #3
    402a:	9101      	str	r1, [sp, #4]
    402c:	f7ff fd28 	bl	3a80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4030:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    4032:	9901      	ldr	r1, [sp, #4]
    4034:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4038:	074b      	lsls	r3, r1, #29
    403a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    403e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4040:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4044:	d529      	bpl.n	409a <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    4046:	4659      	mov	r1, fp
    4048:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    404a:	b2d5      	uxtb	r5, r2
    404c:	f7ff fc9e 	bl	398c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4050:	a803      	add	r0, sp, #12
    4052:	9403      	str	r4, [sp, #12]
    4054:	f7ff fd14 	bl	3a80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4058:	9b03      	ldr	r3, [sp, #12]
    405a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    405e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4062:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4066:	429d      	cmp	r5, r3
    4068:	d107      	bne.n	407a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    406a:	2100      	movs	r1, #0
    406c:	4620      	mov	r0, r4
    406e:	f003 f8db 	bl	7228 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4072:	4629      	mov	r1, r5
    4074:	4620      	mov	r0, r4
    4076:	f003 f8d7 	bl	7228 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    407a:	a803      	add	r0, sp, #12
    407c:	9403      	str	r4, [sp, #12]
    407e:	f7ff fcff 	bl	3a80 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4082:	9b03      	ldr	r3, [sp, #12]
    4084:	fa0a f303 	lsl.w	r3, sl, r3
    4088:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    408c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4090:	2c00      	cmp	r4, #0
    4092:	d1af      	bne.n	3ff4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4094:	b9cf      	cbnz	r7, 40ca <nrfx_gpiote_irq_handler+0x13a>
    4096:	2701      	movs	r7, #1
    4098:	e7a7      	b.n	3fea <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    409a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    409c:	bf0c      	ite	eq
    409e:	2103      	moveq	r1, #3
    40a0:	2102      	movne	r1, #2
    40a2:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    40a4:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    40a6:	f003 f8bf 	bl	7228 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    40aa:	2d03      	cmp	r5, #3
    40ac:	d004      	beq.n	40b8 <nrfx_gpiote_irq_handler+0x128>
    40ae:	9a01      	ldr	r2, [sp, #4]
    40b0:	2a02      	cmp	r2, #2
    40b2:	d106      	bne.n	40c2 <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    40b4:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    40b6:	d1e0      	bne.n	407a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    40b8:	4659      	mov	r1, fp
    40ba:	4620      	mov	r0, r4
    40bc:	f7ff fc66 	bl	398c <call_handler>
    40c0:	e7db      	b.n	407a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    40c2:	2a03      	cmp	r2, #3
    40c4:	d1d9      	bne.n	407a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    40c6:	2d02      	cmp	r5, #2
    40c8:	e7f5      	b.n	40b6 <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40ca:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    40ce:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    40d2:	491a      	ldr	r1, [pc, #104]	; (413c <nrfx_gpiote_irq_handler+0x1ac>)
    40d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    40d8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    40dc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    40de:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    40e2:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    40e6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    40e8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    40ec:	4313      	orrs	r3, r2
    40ee:	f47f af79 	bne.w	3fe4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    40f2:	2401      	movs	r4, #1
    while (mask)
    40f4:	b916      	cbnz	r6, 40fc <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    40f6:	b007      	add	sp, #28
    40f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    40fc:	fa96 f3a6 	rbit	r3, r6
    4100:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4104:	fa04 f203 	lsl.w	r2, r4, r3
    4108:	009b      	lsls	r3, r3, #2
    410a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    410e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4112:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4116:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    411a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    411e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4122:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4126:	f7ff fc31 	bl	398c <call_handler>
    412a:	e7e3      	b.n	40f4 <nrfx_gpiote_irq_handler+0x164>
    412c:	40006100 	.word	0x40006100
    4130:	40006000 	.word	0x40006000
    4134:	40006120 	.word	0x40006120
    4138:	20000060 	.word	0x20000060
    413c:	50000300 	.word	0x50000300

00004140 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4140:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4142:	4801      	ldr	r0, [pc, #4]	; (4148 <nrfx_ppi_channel_alloc+0x8>)
    4144:	f7ff ba48 	b.w	35d8 <nrfx_flag32_alloc>
    4148:	200000dc 	.word	0x200000dc

0000414c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    414c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    414e:	4c14      	ldr	r4, [pc, #80]	; (41a0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4150:	4a14      	ldr	r2, [pc, #80]	; (41a4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4152:	4915      	ldr	r1, [pc, #84]	; (41a8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4154:	2303      	movs	r3, #3
    4156:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4158:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    415a:	4b14      	ldr	r3, [pc, #80]	; (41ac <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    415c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    415e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4160:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4164:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4166:	2300      	movs	r3, #0
    4168:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    416a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    416c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    416e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4170:	4a0f      	ldr	r2, [pc, #60]	; (41b0 <_DoInit+0x64>)
    4172:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4174:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4176:	2210      	movs	r2, #16
    4178:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    417a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    417c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    417e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4180:	f002 fd83 	bl	6c8a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4184:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4188:	490a      	ldr	r1, [pc, #40]	; (41b4 <_DoInit+0x68>)
    418a:	4620      	mov	r0, r4
    418c:	f002 fd7d 	bl	6c8a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4190:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4194:	2320      	movs	r3, #32
    4196:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4198:	f3bf 8f5f 	dmb	sy
}
    419c:	bd10      	pop	{r4, pc}
    419e:	bf00      	nop
    41a0:	20000aa0 	.word	0x20000aa0
    41a4:	000082f1 	.word	0x000082f1
    41a8:	000082fa 	.word	0x000082fa
    41ac:	20000d79 	.word	0x20000d79
    41b0:	20000d69 	.word	0x20000d69
    41b4:	000082fe 	.word	0x000082fe

000041b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41b8:	4b0e      	ldr	r3, [pc, #56]	; (41f4 <z_sys_init_run_level+0x3c>)
{
    41ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    41c0:	3001      	adds	r0, #1
    41c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    41c6:	42a6      	cmp	r6, r4
    41c8:	d800      	bhi.n	41cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    41ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    41cc:	e9d4 3500 	ldrd	r3, r5, [r4]
    41d0:	4628      	mov	r0, r5
    41d2:	4798      	blx	r3
		if (dev != NULL) {
    41d4:	b165      	cbz	r5, 41f0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    41d6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    41d8:	b130      	cbz	r0, 41e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    41da:	2800      	cmp	r0, #0
    41dc:	bfb8      	it	lt
    41de:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    41e0:	28ff      	cmp	r0, #255	; 0xff
    41e2:	bfa8      	it	ge
    41e4:	20ff      	movge	r0, #255	; 0xff
    41e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    41e8:	785a      	ldrb	r2, [r3, #1]
    41ea:	f042 0201 	orr.w	r2, r2, #1
    41ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41f0:	3408      	adds	r4, #8
    41f2:	e7e8      	b.n	41c6 <z_sys_init_run_level+0xe>
    41f4:	0000773c 	.word	0x0000773c

000041f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    41f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41fa:	4604      	mov	r4, r0
    41fc:	460e      	mov	r6, r1
	__asm__ volatile(
    41fe:	f04f 0320 	mov.w	r3, #32
    4202:	f3ef 8711 	mrs	r7, BASEPRI
    4206:	f383 8812 	msr	BASEPRI_MAX, r3
    420a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    420e:	f001 fe15 	bl	5e3c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4212:	4631      	mov	r1, r6
    4214:	4605      	mov	r5, r0
    4216:	4620      	mov	r0, r4
    4218:	f002 ff80 	bl	711c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    421c:	2c04      	cmp	r4, #4
    421e:	d10c      	bne.n	423a <z_fatal_error+0x42>
    4220:	490a      	ldr	r1, [pc, #40]	; (424c <z_fatal_error+0x54>)
    4222:	4a0b      	ldr	r2, [pc, #44]	; (4250 <z_fatal_error+0x58>)
    4224:	480b      	ldr	r0, [pc, #44]	; (4254 <z_fatal_error+0x5c>)
    4226:	238f      	movs	r3, #143	; 0x8f
    4228:	f002 fd0c 	bl	6c44 <assert_print>
    422c:	480a      	ldr	r0, [pc, #40]	; (4258 <z_fatal_error+0x60>)
    422e:	f002 fd09 	bl	6c44 <assert_print>
    4232:	4807      	ldr	r0, [pc, #28]	; (4250 <z_fatal_error+0x58>)
    4234:	218f      	movs	r1, #143	; 0x8f
    4236:	f002 fcfe 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    423a:	f387 8811 	msr	BASEPRI, r7
    423e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4242:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4248:	f7fd bec2 	b.w	1fd0 <z_impl_k_thread_abort>
    424c:	00008327 	.word	0x00008327
    4250:	00008305 	.word	0x00008305
    4254:	000079d4 	.word	0x000079d4
    4258:	00008344 	.word	0x00008344

0000425c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    425c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    425e:	4b0a      	ldr	r3, [pc, #40]	; (4288 <bg_thread_main+0x2c>)
    4260:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4262:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4264:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4266:	f7ff ffa7 	bl	41b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    426a:	f002 f9c3 	bl	65f4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    426e:	2003      	movs	r0, #3
    4270:	f7ff ffa2 	bl	41b8 <z_sys_init_run_level>

	z_init_static_threads();
    4274:	f000 fa7a 	bl	476c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4278:	f7fc f95c 	bl	534 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    427c:	4a03      	ldr	r2, [pc, #12]	; (428c <bg_thread_main+0x30>)
    427e:	7b13      	ldrb	r3, [r2, #12]
    4280:	f023 0301 	bic.w	r3, r3, #1
    4284:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4286:	bd08      	pop	{r3, pc}
    4288:	20001179 	.word	0x20001179
    428c:	200003e8 	.word	0x200003e8

00004290 <z_bss_zero>:
{
    4290:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4292:	4803      	ldr	r0, [pc, #12]	; (42a0 <z_bss_zero+0x10>)
    4294:	4a03      	ldr	r2, [pc, #12]	; (42a4 <z_bss_zero+0x14>)
    4296:	2100      	movs	r1, #0
    4298:	1a12      	subs	r2, r2, r0
    429a:	f002 ffe6 	bl	726a <z_early_memset>
}
    429e:	bd08      	pop	{r3, pc}
    42a0:	200001c8 	.word	0x200001c8
    42a4:	2000117c 	.word	0x2000117c

000042a8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    42a8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    42aa:	2300      	movs	r3, #0
{
    42ac:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    42ae:	2201      	movs	r2, #1
    42b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    42b4:	4e13      	ldr	r6, [pc, #76]	; (4304 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42b6:	4d14      	ldr	r5, [pc, #80]	; (4308 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    42b8:	9301      	str	r3, [sp, #4]
    42ba:	220f      	movs	r2, #15
    42bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    42c0:	4912      	ldr	r1, [pc, #72]	; (430c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42c2:	2318      	movs	r3, #24
    42c4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    42c8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    42cc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    42ce:	f44f 70b0 	mov.w	r0, #352	; 0x160
    42d2:	fb00 1104 	mla	r1, r0, r4, r1
    42d6:	4b0e      	ldr	r3, [pc, #56]	; (4310 <z_init_cpu+0x68>)
    42d8:	9500      	str	r5, [sp, #0]
    42da:	f44f 72a0 	mov.w	r2, #320	; 0x140
    42de:	4630      	mov	r0, r6
    42e0:	f000 f990 	bl	4604 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    42e4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    42e6:	480b      	ldr	r0, [pc, #44]	; (4314 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    42e8:	752c      	strb	r4, [r5, #20]
    42ea:	f023 0304 	bic.w	r3, r3, #4
    42ee:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    42f0:	f44f 6302 	mov.w	r3, #2080	; 0x820
    42f4:	fb03 0404 	mla	r4, r3, r4, r0
    42f8:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    42fa:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    42fc:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    42fe:	b006      	add	sp, #24
    4300:	bd70      	pop	{r4, r5, r6, pc}
    4302:	bf00      	nop
    4304:	20000368 	.word	0x20000368
    4308:	20000b48 	.word	0x20000b48
    430c:	20002200 	.word	0x20002200
    4310:	000048c9 	.word	0x000048c9
    4314:	20002360 	.word	0x20002360

00004318 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4318:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    431a:	4b2e      	ldr	r3, [pc, #184]	; (43d4 <z_cstart+0xbc>)
    431c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    431e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4322:	4d2d      	ldr	r5, [pc, #180]	; (43d8 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4324:	4e2d      	ldr	r6, [pc, #180]	; (43dc <z_cstart+0xc4>)
    4326:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4328:	4f2d      	ldr	r7, [pc, #180]	; (43e0 <z_cstart+0xc8>)
    432a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    432e:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4330:	2400      	movs	r4, #0
    4332:	23e0      	movs	r3, #224	; 0xe0
    4334:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4338:	77ec      	strb	r4, [r5, #31]
    433a:	762c      	strb	r4, [r5, #24]
    433c:	766c      	strb	r4, [r5, #25]
    433e:	76ac      	strb	r4, [r5, #26]
    4340:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4346:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    434a:	626b      	str	r3, [r5, #36]	; 0x24
    434c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4350:	f7fd fdb2 	bl	1eb8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4354:	f7fd fb12 	bl	197c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    435c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    435e:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    4360:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4362:	f7fd ff19 	bl	2198 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4366:	f7fd fe49 	bl	1ffc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    436a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    436e:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    4370:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    4374:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    4378:	f002 f936 	bl	65e8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    437c:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    437e:	f002 ff69 	bl	7254 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4382:	4620      	mov	r0, r4
    4384:	f7ff ff18 	bl	41b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4388:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    438a:	4d16      	ldr	r5, [pc, #88]	; (43e4 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    438c:	f7ff ff14 	bl	41b8 <z_sys_init_run_level>
	z_sched_init();
    4390:	f001 fbc6 	bl	5b20 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4394:	4b14      	ldr	r3, [pc, #80]	; (43e8 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4396:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4398:	9305      	str	r3, [sp, #20]
    439a:	2301      	movs	r3, #1
    439c:	4913      	ldr	r1, [pc, #76]	; (43ec <z_cstart+0xd4>)
    439e:	9400      	str	r4, [sp, #0]
    43a0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    43a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    43a8:	463b      	mov	r3, r7
    43aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    43ae:	4628      	mov	r0, r5
    43b0:	f000 f928 	bl	4604 <z_setup_new_thread>
    43b4:	7b6a      	ldrb	r2, [r5, #13]
    43b6:	4606      	mov	r6, r0
    43b8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    43bc:	4628      	mov	r0, r5
    43be:	736a      	strb	r2, [r5, #13]
    43c0:	f001 f800 	bl	53c4 <z_ready_thread>
	z_init_cpu(0);
    43c4:	4620      	mov	r0, r4
    43c6:	f7ff ff6f 	bl	42a8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    43ca:	463a      	mov	r2, r7
    43cc:	4631      	mov	r1, r6
    43ce:	4628      	mov	r0, r5
    43d0:	f7fd fbea 	bl	1ba8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    43d4:	20002b80 	.word	0x20002b80
    43d8:	e000ed00 	.word	0xe000ed00
    43dc:	20000b48 	.word	0x20000b48
    43e0:	0000425d 	.word	0x0000425d
    43e4:	200003e8 	.word	0x200003e8
    43e8:	00008379 	.word	0x00008379
    43ec:	20001de0 	.word	0x20001de0

000043f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    43f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    43f2:	4c16      	ldr	r4, [pc, #88]	; (444c <init_mem_slab_module+0x5c>)
    43f4:	4d16      	ldr	r5, [pc, #88]	; (4450 <init_mem_slab_module+0x60>)
    43f6:	4e17      	ldr	r6, [pc, #92]	; (4454 <init_mem_slab_module+0x64>)
    43f8:	42ac      	cmp	r4, r5
    43fa:	d90c      	bls.n	4416 <init_mem_slab_module+0x26>
    43fc:	4916      	ldr	r1, [pc, #88]	; (4458 <init_mem_slab_module+0x68>)
    43fe:	4817      	ldr	r0, [pc, #92]	; (445c <init_mem_slab_module+0x6c>)
    4400:	233d      	movs	r3, #61	; 0x3d
    4402:	4632      	mov	r2, r6
    4404:	f002 fc1e 	bl	6c44 <assert_print>
    4408:	4815      	ldr	r0, [pc, #84]	; (4460 <init_mem_slab_module+0x70>)
    440a:	f002 fc1b 	bl	6c44 <assert_print>
    440e:	213d      	movs	r1, #61	; 0x3d
    4410:	4630      	mov	r0, r6
    4412:	f002 fc10 	bl	6c36 <assert_post_action>
    4416:	42ac      	cmp	r4, r5
    4418:	d301      	bcc.n	441e <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    441a:	2000      	movs	r0, #0
	return rc;
}
    441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    441e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4422:	ea41 0302 	orr.w	r3, r1, r2
    4426:	f013 0303 	ands.w	r3, r3, #3
    442a:	d10b      	bne.n	4444 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    442c:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    442e:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4430:	4283      	cmp	r3, r0
    4432:	d101      	bne.n	4438 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4434:	3420      	adds	r4, #32
    4436:	e7df      	b.n	43f8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    4438:	69a7      	ldr	r7, [r4, #24]
    443a:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    443c:	3301      	adds	r3, #1
		slab->free_list = p;
    443e:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4440:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4442:	e7f5      	b.n	4430 <init_mem_slab_module+0x40>
	return rc;
    4444:	f06f 0015 	mvn.w	r0, #21
    4448:	e7e8      	b.n	441c <init_mem_slab_module+0x2c>
    444a:	bf00      	nop
    444c:	2000015c 	.word	0x2000015c
    4450:	2000015c 	.word	0x2000015c
    4454:	0000837e 	.word	0x0000837e
    4458:	000083a3 	.word	0x000083a3
    445c:	000079d4 	.word	0x000079d4
    4460:	000083c0 	.word	0x000083c0

00004464 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4468:	4604      	mov	r4, r0
    446a:	460e      	mov	r6, r1
    446c:	4690      	mov	r8, r2
    446e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4470:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4474:	f04f 0320 	mov.w	r3, #32
    4478:	f3ef 8911 	mrs	r9, BASEPRI
    447c:	f383 8812 	msr	BASEPRI_MAX, r3
    4480:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4484:	4628      	mov	r0, r5
    4486:	f000 f9f9 	bl	487c <z_spin_lock_valid>
    448a:	b968      	cbnz	r0, 44a8 <k_mem_slab_alloc+0x44>
    448c:	4a24      	ldr	r2, [pc, #144]	; (4520 <k_mem_slab_alloc+0xbc>)
    448e:	4925      	ldr	r1, [pc, #148]	; (4524 <k_mem_slab_alloc+0xc0>)
    4490:	4825      	ldr	r0, [pc, #148]	; (4528 <k_mem_slab_alloc+0xc4>)
    4492:	238e      	movs	r3, #142	; 0x8e
    4494:	f002 fbd6 	bl	6c44 <assert_print>
    4498:	4824      	ldr	r0, [pc, #144]	; (452c <k_mem_slab_alloc+0xc8>)
    449a:	4629      	mov	r1, r5
    449c:	f002 fbd2 	bl	6c44 <assert_print>
    44a0:	481f      	ldr	r0, [pc, #124]	; (4520 <k_mem_slab_alloc+0xbc>)
    44a2:	218e      	movs	r1, #142	; 0x8e
    44a4:	f002 fbc7 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    44a8:	4628      	mov	r0, r5
    44aa:	f000 fa05 	bl	48b8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    44ae:	69a3      	ldr	r3, [r4, #24]
    44b0:	b1eb      	cbz	r3, 44ee <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    44b2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    44b8:	69e3      	ldr	r3, [r4, #28]
    44ba:	3301      	adds	r3, #1
    44bc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    44be:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    44c0:	4628      	mov	r0, r5
    44c2:	f000 f9e9 	bl	4898 <z_spin_unlock_valid>
    44c6:	b968      	cbnz	r0, 44e4 <k_mem_slab_alloc+0x80>
    44c8:	4a15      	ldr	r2, [pc, #84]	; (4520 <k_mem_slab_alloc+0xbc>)
    44ca:	4919      	ldr	r1, [pc, #100]	; (4530 <k_mem_slab_alloc+0xcc>)
    44cc:	4816      	ldr	r0, [pc, #88]	; (4528 <k_mem_slab_alloc+0xc4>)
    44ce:	23b9      	movs	r3, #185	; 0xb9
    44d0:	f002 fbb8 	bl	6c44 <assert_print>
    44d4:	4817      	ldr	r0, [pc, #92]	; (4534 <k_mem_slab_alloc+0xd0>)
    44d6:	4629      	mov	r1, r5
    44d8:	f002 fbb4 	bl	6c44 <assert_print>
    44dc:	4810      	ldr	r0, [pc, #64]	; (4520 <k_mem_slab_alloc+0xbc>)
    44de:	21b9      	movs	r1, #185	; 0xb9
    44e0:	f002 fba9 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    44e4:	f389 8811 	msr	BASEPRI, r9
    44e8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    44ec:	e013      	b.n	4516 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    44ee:	ea58 0207 	orrs.w	r2, r8, r7
    44f2:	d103      	bne.n	44fc <k_mem_slab_alloc+0x98>
		*mem = NULL;
    44f4:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    44f6:	f06f 040b 	mvn.w	r4, #11
    44fa:	e7e1      	b.n	44c0 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    44fc:	4622      	mov	r2, r4
    44fe:	e9cd 8700 	strd	r8, r7, [sp]
    4502:	4649      	mov	r1, r9
    4504:	4628      	mov	r0, r5
    4506:	f001 f90d 	bl	5724 <z_pend_curr>
		if (result == 0) {
    450a:	4604      	mov	r4, r0
    450c:	b918      	cbnz	r0, 4516 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    450e:	4b0a      	ldr	r3, [pc, #40]	; (4538 <k_mem_slab_alloc+0xd4>)
    4510:	689b      	ldr	r3, [r3, #8]
    4512:	695b      	ldr	r3, [r3, #20]
    4514:	6033      	str	r3, [r6, #0]
}
    4516:	4620      	mov	r0, r4
    4518:	b003      	add	sp, #12
    451a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    451e:	bf00      	nop
    4520:	00007a94 	.word	0x00007a94
    4524:	00007aed 	.word	0x00007aed
    4528:	000079d4 	.word	0x000079d4
    452c:	00007b02 	.word	0x00007b02
    4530:	00007ac1 	.word	0x00007ac1
    4534:	00007ad8 	.word	0x00007ad8
    4538:	20000b48 	.word	0x20000b48

0000453c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4540:	4604      	mov	r4, r0
    4542:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4544:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4548:	f04f 0320 	mov.w	r3, #32
    454c:	f3ef 8711 	mrs	r7, BASEPRI
    4550:	f383 8812 	msr	BASEPRI_MAX, r3
    4554:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4558:	4628      	mov	r0, r5
    455a:	f000 f98f 	bl	487c <z_spin_lock_valid>
    455e:	b968      	cbnz	r0, 457c <k_mem_slab_free+0x40>
    4560:	4a22      	ldr	r2, [pc, #136]	; (45ec <k_mem_slab_free+0xb0>)
    4562:	4923      	ldr	r1, [pc, #140]	; (45f0 <k_mem_slab_free+0xb4>)
    4564:	4823      	ldr	r0, [pc, #140]	; (45f4 <k_mem_slab_free+0xb8>)
    4566:	238e      	movs	r3, #142	; 0x8e
    4568:	f002 fb6c 	bl	6c44 <assert_print>
    456c:	4822      	ldr	r0, [pc, #136]	; (45f8 <k_mem_slab_free+0xbc>)
    456e:	4629      	mov	r1, r5
    4570:	f002 fb68 	bl	6c44 <assert_print>
    4574:	481d      	ldr	r0, [pc, #116]	; (45ec <k_mem_slab_free+0xb0>)
    4576:	218e      	movs	r1, #142	; 0x8e
    4578:	f002 fb5d 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    457c:	4628      	mov	r0, r5
    457e:	f000 f99b 	bl	48b8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4582:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4586:	f1b8 0f00 	cmp.w	r8, #0
    458a:	d10f      	bne.n	45ac <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    458c:	4620      	mov	r0, r4
    458e:	f001 fa77 	bl	5a80 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4592:	b158      	cbz	r0, 45ac <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4594:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4596:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4598:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    459c:	f000 ff12 	bl	53c4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    45a0:	4639      	mov	r1, r7
    45a2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    45a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    45a8:	f000 bcc0 	b.w	4f2c <z_reschedule>
	**(char ***) mem = slab->free_list;
    45ac:	6833      	ldr	r3, [r6, #0]
    45ae:	69a2      	ldr	r2, [r4, #24]
    45b0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    45b2:	6833      	ldr	r3, [r6, #0]
    45b4:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    45b6:	69e3      	ldr	r3, [r4, #28]
    45b8:	3b01      	subs	r3, #1
    45ba:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45bc:	4628      	mov	r0, r5
    45be:	f000 f96b 	bl	4898 <z_spin_unlock_valid>
    45c2:	b968      	cbnz	r0, 45e0 <k_mem_slab_free+0xa4>
    45c4:	4a09      	ldr	r2, [pc, #36]	; (45ec <k_mem_slab_free+0xb0>)
    45c6:	490d      	ldr	r1, [pc, #52]	; (45fc <k_mem_slab_free+0xc0>)
    45c8:	480a      	ldr	r0, [pc, #40]	; (45f4 <k_mem_slab_free+0xb8>)
    45ca:	23b9      	movs	r3, #185	; 0xb9
    45cc:	f002 fb3a 	bl	6c44 <assert_print>
    45d0:	480b      	ldr	r0, [pc, #44]	; (4600 <k_mem_slab_free+0xc4>)
    45d2:	4629      	mov	r1, r5
    45d4:	f002 fb36 	bl	6c44 <assert_print>
    45d8:	4804      	ldr	r0, [pc, #16]	; (45ec <k_mem_slab_free+0xb0>)
    45da:	21b9      	movs	r1, #185	; 0xb9
    45dc:	f002 fb2b 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    45e0:	f387 8811 	msr	BASEPRI, r7
    45e4:	f3bf 8f6f 	isb	sy
}
    45e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ec:	00007a94 	.word	0x00007a94
    45f0:	00007aed 	.word	0x00007aed
    45f4:	000079d4 	.word	0x000079d4
    45f8:	00007b02 	.word	0x00007b02
    45fc:	00007ac1 	.word	0x00007ac1
    4600:	00007ad8 	.word	0x00007ad8

00004604 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4608:	b085      	sub	sp, #20
    460a:	4604      	mov	r4, r0
    460c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4610:	f1b8 0f0f 	cmp.w	r8, #15
{
    4614:	460f      	mov	r7, r1
    4616:	4615      	mov	r5, r2
    4618:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    461a:	d132      	bne.n	4682 <z_setup_new_thread+0x7e>
    461c:	4b25      	ldr	r3, [pc, #148]	; (46b4 <z_setup_new_thread+0xb0>)
    461e:	4599      	cmp	r9, r3
    4620:	d133      	bne.n	468a <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4622:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4626:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    462a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    462c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    462e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    4630:	2304      	movs	r3, #4
    4632:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4634:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4638:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    463c:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4640:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    4642:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4646:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4648:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    464e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    4650:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4654:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    4656:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4658:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    465a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    465e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    4660:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    4662:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4664:	4642      	mov	r2, r8
    4666:	4639      	mov	r1, r7
    4668:	4620      	mov	r0, r4
    466a:	f7fd fa6b 	bl	1b44 <arch_new_thread>
	if (!_current) {
    466e:	4b12      	ldr	r3, [pc, #72]	; (46b8 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    4670:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    4672:	689b      	ldr	r3, [r3, #8]
    4674:	b103      	cbz	r3, 4678 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    4676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4678:	6723      	str	r3, [r4, #112]	; 0x70
}
    467a:	4640      	mov	r0, r8
    467c:	b005      	add	sp, #20
    467e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4682:	f108 0310 	add.w	r3, r8, #16
    4686:	2b1e      	cmp	r3, #30
    4688:	d9cb      	bls.n	4622 <z_setup_new_thread+0x1e>
    468a:	4a0c      	ldr	r2, [pc, #48]	; (46bc <z_setup_new_thread+0xb8>)
    468c:	490c      	ldr	r1, [pc, #48]	; (46c0 <z_setup_new_thread+0xbc>)
    468e:	480d      	ldr	r0, [pc, #52]	; (46c4 <z_setup_new_thread+0xc0>)
    4690:	f240 13ff 	movw	r3, #511	; 0x1ff
    4694:	f002 fad6 	bl	6c44 <assert_print>
    4698:	4641      	mov	r1, r8
    469a:	480b      	ldr	r0, [pc, #44]	; (46c8 <z_setup_new_thread+0xc4>)
    469c:	f06f 030f 	mvn.w	r3, #15
    46a0:	220e      	movs	r2, #14
    46a2:	f002 facf 	bl	6c44 <assert_print>
    46a6:	4805      	ldr	r0, [pc, #20]	; (46bc <z_setup_new_thread+0xb8>)
    46a8:	f240 11ff 	movw	r1, #511	; 0x1ff
    46ac:	f002 fac3 	bl	6c36 <assert_post_action>
    46b0:	e7b7      	b.n	4622 <z_setup_new_thread+0x1e>
    46b2:	bf00      	nop
    46b4:	000048c9 	.word	0x000048c9
    46b8:	20000b48 	.word	0x20000b48
    46bc:	000083df 	.word	0x000083df
    46c0:	00008402 	.word	0x00008402
    46c4:	000079d4 	.word	0x000079d4
    46c8:	00008482 	.word	0x00008482

000046cc <z_impl_k_thread_create>:
{
    46cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    46d0:	b087      	sub	sp, #28
    46d2:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    46d6:	4604      	mov	r4, r0
    46d8:	460f      	mov	r7, r1
    46da:	4690      	mov	r8, r2
    46dc:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    46de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    46e2:	b173      	cbz	r3, 4702 <z_impl_k_thread_create+0x36>
    46e4:	491c      	ldr	r1, [pc, #112]	; (4758 <z_impl_k_thread_create+0x8c>)
    46e6:	4a1d      	ldr	r2, [pc, #116]	; (475c <z_impl_k_thread_create+0x90>)
    46e8:	481d      	ldr	r0, [pc, #116]	; (4760 <z_impl_k_thread_create+0x94>)
    46ea:	f240 236e 	movw	r3, #622	; 0x26e
    46ee:	f002 faa9 	bl	6c44 <assert_print>
    46f2:	481c      	ldr	r0, [pc, #112]	; (4764 <z_impl_k_thread_create+0x98>)
    46f4:	f002 faa6 	bl	6c44 <assert_print>
    46f8:	4818      	ldr	r0, [pc, #96]	; (475c <z_impl_k_thread_create+0x90>)
    46fa:	f240 216e 	movw	r1, #622	; 0x26e
    46fe:	f002 fa9a 	bl	6c36 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4702:	2300      	movs	r3, #0
    4704:	9305      	str	r3, [sp, #20]
    4706:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4708:	9304      	str	r3, [sp, #16]
    470a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    470c:	9303      	str	r3, [sp, #12]
    470e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4710:	9302      	str	r3, [sp, #8]
    4712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4714:	9301      	str	r3, [sp, #4]
    4716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4718:	9300      	str	r3, [sp, #0]
    471a:	4642      	mov	r2, r8
    471c:	464b      	mov	r3, r9
    471e:	4639      	mov	r1, r7
    4720:	4620      	mov	r0, r4
    4722:	f7ff ff6f 	bl	4604 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4726:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    472a:	bf08      	it	eq
    472c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4730:	d005      	beq.n	473e <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4732:	ea55 0306 	orrs.w	r3, r5, r6
    4736:	d106      	bne.n	4746 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    4738:	4620      	mov	r0, r4
    473a:	f000 fe8b 	bl	5454 <z_sched_start>
}
    473e:	4620      	mov	r0, r4
    4740:	b007      	add	sp, #28
    4742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4746:	4908      	ldr	r1, [pc, #32]	; (4768 <z_impl_k_thread_create+0x9c>)
    4748:	4632      	mov	r2, r6
    474a:	462b      	mov	r3, r5
    474c:	f104 0018 	add.w	r0, r4, #24
    4750:	f001 fc92 	bl	6078 <z_add_timeout>
    4754:	e7f3      	b.n	473e <z_impl_k_thread_create+0x72>
    4756:	bf00      	nop
    4758:	000084b3 	.word	0x000084b3
    475c:	000083df 	.word	0x000083df
    4760:	000079d4 	.word	0x000079d4
    4764:	000084c5 	.word	0x000084c5
    4768:	000054fd 	.word	0x000054fd

0000476c <z_init_static_threads>:
{
    476c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4770:	4c3b      	ldr	r4, [pc, #236]	; (4860 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4772:	4d3c      	ldr	r5, [pc, #240]	; (4864 <z_init_static_threads+0xf8>)
    4774:	4f3c      	ldr	r7, [pc, #240]	; (4868 <z_init_static_threads+0xfc>)
{
    4776:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4778:	42ac      	cmp	r4, r5
    477a:	4626      	mov	r6, r4
    477c:	d90e      	bls.n	479c <z_init_static_threads+0x30>
    477e:	493b      	ldr	r1, [pc, #236]	; (486c <z_init_static_threads+0x100>)
    4780:	483b      	ldr	r0, [pc, #236]	; (4870 <z_init_static_threads+0x104>)
    4782:	f240 23d5 	movw	r3, #725	; 0x2d5
    4786:	463a      	mov	r2, r7
    4788:	f002 fa5c 	bl	6c44 <assert_print>
    478c:	4839      	ldr	r0, [pc, #228]	; (4874 <z_init_static_threads+0x108>)
    478e:	f002 fa59 	bl	6c44 <assert_print>
    4792:	f240 21d5 	movw	r1, #725	; 0x2d5
    4796:	4638      	mov	r0, r7
    4798:	f002 fa4d 	bl	6c36 <assert_post_action>
    479c:	42ae      	cmp	r6, r5
    479e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    47a2:	d31f      	bcc.n	47e4 <z_init_static_threads+0x78>
	k_sched_lock();
    47a4:	f000 fc06 	bl	4fb4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    47a8:	4c2d      	ldr	r4, [pc, #180]	; (4860 <z_init_static_threads+0xf4>)
    47aa:	4e2f      	ldr	r6, [pc, #188]	; (4868 <z_init_static_threads+0xfc>)
    47ac:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 486c <z_init_static_threads+0x100>
    47b0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4870 <z_init_static_threads+0x104>
    47b4:	42ac      	cmp	r4, r5
    47b6:	d90e      	bls.n	47d6 <z_init_static_threads+0x6a>
    47b8:	4641      	mov	r1, r8
    47ba:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    47be:	4632      	mov	r2, r6
    47c0:	4648      	mov	r0, r9
    47c2:	f002 fa3f 	bl	6c44 <assert_print>
    47c6:	482b      	ldr	r0, [pc, #172]	; (4874 <z_init_static_threads+0x108>)
    47c8:	f002 fa3c 	bl	6c44 <assert_print>
    47cc:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    47d0:	4630      	mov	r0, r6
    47d2:	f002 fa30 	bl	6c36 <assert_post_action>
    47d6:	42ac      	cmp	r4, r5
    47d8:	d320      	bcc.n	481c <z_init_static_threads+0xb0>
}
    47da:	b007      	add	sp, #28
    47dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    47e0:	f001 b8d2 	b.w	5988 <k_sched_unlock>
		z_setup_new_thread(
    47e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    47e8:	9305      	str	r3, [sp, #20]
    47ea:	f854 3c10 	ldr.w	r3, [r4, #-16]
    47ee:	9304      	str	r3, [sp, #16]
    47f0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    47f4:	9303      	str	r3, [sp, #12]
    47f6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    47fa:	9302      	str	r3, [sp, #8]
    47fc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4800:	9301      	str	r3, [sp, #4]
    4802:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4806:	9300      	str	r3, [sp, #0]
    4808:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    480c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4810:	f7ff fef8 	bl	4604 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4814:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4818:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    481a:	e7ad      	b.n	4778 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    481c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    481e:	1c5a      	adds	r2, r3, #1
    4820:	d00f      	beq.n	4842 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    4822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			return ((t * to_hz + off) / from_hz);
    4826:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    482a:	f240 30e7 	movw	r0, #999	; 0x3e7
    482e:	2100      	movs	r1, #0
    4830:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4834:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4838:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    483a:	d104      	bne.n	4846 <z_init_static_threads+0xda>
	z_sched_start(thread);
    483c:	4638      	mov	r0, r7
    483e:	f000 fe09 	bl	5454 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4842:	3430      	adds	r4, #48	; 0x30
    4844:	e7b6      	b.n	47b4 <z_init_static_threads+0x48>
    4846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    484a:	2300      	movs	r3, #0
    484c:	f7fb fc58 	bl	100 <__aeabi_uldivmod>
    4850:	4602      	mov	r2, r0
    4852:	460b      	mov	r3, r1
    4854:	f107 0018 	add.w	r0, r7, #24
    4858:	4907      	ldr	r1, [pc, #28]	; (4878 <z_init_static_threads+0x10c>)
    485a:	f001 fc0d 	bl	6078 <z_add_timeout>
    485e:	e7f0      	b.n	4842 <z_init_static_threads+0xd6>
    4860:	2000015c 	.word	0x2000015c
    4864:	2000015c 	.word	0x2000015c
    4868:	000083df 	.word	0x000083df
    486c:	000084ea 	.word	0x000084ea
    4870:	000079d4 	.word	0x000079d4
    4874:	000083c0 	.word	0x000083c0
    4878:	000054fd 	.word	0x000054fd

0000487c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    487c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    487e:	b138      	cbz	r0, 4890 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    4880:	4b04      	ldr	r3, [pc, #16]	; (4894 <z_spin_lock_valid+0x18>)
    4882:	7d1b      	ldrb	r3, [r3, #20]
    4884:	f000 0003 	and.w	r0, r0, #3
    4888:	1ac0      	subs	r0, r0, r3
    488a:	bf18      	it	ne
    488c:	2001      	movne	r0, #1
    488e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4890:	2001      	movs	r0, #1
}
    4892:	4770      	bx	lr
    4894:	20000b48 	.word	0x20000b48

00004898 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4898:	4906      	ldr	r1, [pc, #24]	; (48b4 <z_spin_unlock_valid+0x1c>)
{
    489a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    489c:	688a      	ldr	r2, [r1, #8]
    489e:	7d08      	ldrb	r0, [r1, #20]
    48a0:	6819      	ldr	r1, [r3, #0]
    48a2:	4302      	orrs	r2, r0
    48a4:	4291      	cmp	r1, r2
    48a6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    48aa:	bf04      	itt	eq
    48ac:	6018      	streq	r0, [r3, #0]
	return true;
    48ae:	2001      	moveq	r0, #1
}
    48b0:	4770      	bx	lr
    48b2:	bf00      	nop
    48b4:	20000b48 	.word	0x20000b48

000048b8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    48b8:	4a02      	ldr	r2, [pc, #8]	; (48c4 <z_spin_lock_set_owner+0xc>)
    48ba:	7d11      	ldrb	r1, [r2, #20]
    48bc:	6893      	ldr	r3, [r2, #8]
    48be:	430b      	orrs	r3, r1
    48c0:	6003      	str	r3, [r0, #0]
}
    48c2:	4770      	bx	lr
    48c4:	20000b48 	.word	0x20000b48

000048c8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    48c8:	4c13      	ldr	r4, [pc, #76]	; (4918 <idle+0x50>)
{
    48ca:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    48cc:	68a3      	ldr	r3, [r4, #8]
    48ce:	f993 300e 	ldrsb.w	r3, [r3, #14]
    48d2:	2b00      	cmp	r3, #0
    48d4:	da09      	bge.n	48ea <idle+0x22>
    48d6:	4911      	ldr	r1, [pc, #68]	; (491c <idle+0x54>)
    48d8:	4811      	ldr	r0, [pc, #68]	; (4920 <idle+0x58>)
    48da:	4a12      	ldr	r2, [pc, #72]	; (4924 <idle+0x5c>)
    48dc:	2327      	movs	r3, #39	; 0x27
    48de:	f002 f9b1 	bl	6c44 <assert_print>
    48e2:	4810      	ldr	r0, [pc, #64]	; (4924 <idle+0x5c>)
    48e4:	2127      	movs	r1, #39	; 0x27
    48e6:	f002 f9a6 	bl	6c36 <assert_post_action>
	return !z_sys_post_kernel;
    48ea:	4d0f      	ldr	r5, [pc, #60]	; (4928 <idle+0x60>)
	__asm__ volatile(
    48ec:	f04f 0220 	mov.w	r2, #32
    48f0:	f3ef 8311 	mrs	r3, BASEPRI
    48f4:	f382 8812 	msr	BASEPRI_MAX, r2
    48f8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    48fc:	f001 fcd2 	bl	62a4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4900:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4902:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4904:	b913      	cbnz	r3, 490c <idle+0x44>
	arch_cpu_idle();
    4906:	f7fd f83f 	bl	1988 <arch_cpu_idle>
}
    490a:	e7ef      	b.n	48ec <idle+0x24>
    490c:	f7fc fe92 	bl	1634 <pm_system_suspend>
    4910:	2800      	cmp	r0, #0
    4912:	d1eb      	bne.n	48ec <idle+0x24>
    4914:	e7f7      	b.n	4906 <idle+0x3e>
    4916:	bf00      	nop
    4918:	20000b48 	.word	0x20000b48
    491c:	00008538 	.word	0x00008538
    4920:	000079d4 	.word	0x000079d4
    4924:	00008517 	.word	0x00008517
    4928:	20001179 	.word	0x20001179

0000492c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    492c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4930:	4604      	mov	r4, r0
    4932:	4617      	mov	r7, r2
    4934:	461e      	mov	r6, r3
    4936:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    493a:	b163      	cbz	r3, 4956 <z_impl_k_mutex_lock+0x2a>
    493c:	496d      	ldr	r1, [pc, #436]	; (4af4 <z_impl_k_mutex_lock+0x1c8>)
    493e:	4a6e      	ldr	r2, [pc, #440]	; (4af8 <z_impl_k_mutex_lock+0x1cc>)
    4940:	486e      	ldr	r0, [pc, #440]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    4942:	2365      	movs	r3, #101	; 0x65
    4944:	f002 f97e 	bl	6c44 <assert_print>
    4948:	486d      	ldr	r0, [pc, #436]	; (4b00 <z_impl_k_mutex_lock+0x1d4>)
    494a:	f002 f97b 	bl	6c44 <assert_print>
    494e:	486a      	ldr	r0, [pc, #424]	; (4af8 <z_impl_k_mutex_lock+0x1cc>)
    4950:	2165      	movs	r1, #101	; 0x65
    4952:	f002 f970 	bl	6c36 <assert_post_action>
    4956:	f04f 0320 	mov.w	r3, #32
    495a:	f3ef 8811 	mrs	r8, BASEPRI
    495e:	f383 8812 	msr	BASEPRI_MAX, r3
    4962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4966:	4867      	ldr	r0, [pc, #412]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4968:	f7ff ff88 	bl	487c <z_spin_lock_valid>
    496c:	b968      	cbnz	r0, 498a <z_impl_k_mutex_lock+0x5e>
    496e:	4a66      	ldr	r2, [pc, #408]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4970:	4966      	ldr	r1, [pc, #408]	; (4b0c <z_impl_k_mutex_lock+0x1e0>)
    4972:	4862      	ldr	r0, [pc, #392]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    4974:	238e      	movs	r3, #142	; 0x8e
    4976:	f002 f965 	bl	6c44 <assert_print>
    497a:	4962      	ldr	r1, [pc, #392]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    497c:	4864      	ldr	r0, [pc, #400]	; (4b10 <z_impl_k_mutex_lock+0x1e4>)
    497e:	f002 f961 	bl	6c44 <assert_print>
    4982:	4861      	ldr	r0, [pc, #388]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4984:	218e      	movs	r1, #142	; 0x8e
    4986:	f002 f956 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    498a:	485e      	ldr	r0, [pc, #376]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    498c:	f7ff ff94 	bl	48b8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4990:	68e3      	ldr	r3, [r4, #12]
    4992:	4a60      	ldr	r2, [pc, #384]	; (4b14 <z_impl_k_mutex_lock+0x1e8>)
    4994:	b1fb      	cbz	r3, 49d6 <z_impl_k_mutex_lock+0xaa>
    4996:	68a0      	ldr	r0, [r4, #8]
    4998:	6891      	ldr	r1, [r2, #8]
    499a:	4288      	cmp	r0, r1
    499c:	d03d      	beq.n	4a1a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    499e:	ea57 0306 	orrs.w	r3, r7, r6
    49a2:	d13c      	bne.n	4a1e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49a4:	4857      	ldr	r0, [pc, #348]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    49a6:	f7ff ff77 	bl	4898 <z_spin_unlock_valid>
    49aa:	b968      	cbnz	r0, 49c8 <z_impl_k_mutex_lock+0x9c>
    49ac:	4a56      	ldr	r2, [pc, #344]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    49ae:	495a      	ldr	r1, [pc, #360]	; (4b18 <z_impl_k_mutex_lock+0x1ec>)
    49b0:	4852      	ldr	r0, [pc, #328]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    49b2:	23b9      	movs	r3, #185	; 0xb9
    49b4:	f002 f946 	bl	6c44 <assert_print>
    49b8:	4952      	ldr	r1, [pc, #328]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    49ba:	4858      	ldr	r0, [pc, #352]	; (4b1c <z_impl_k_mutex_lock+0x1f0>)
    49bc:	f002 f942 	bl	6c44 <assert_print>
    49c0:	4851      	ldr	r0, [pc, #324]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    49c2:	21b9      	movs	r1, #185	; 0xb9
    49c4:	f002 f937 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    49c8:	f388 8811 	msr	BASEPRI, r8
    49cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    49d0:	f06f 000f 	mvn.w	r0, #15
    49d4:	e01e      	b.n	4a14 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    49d6:	6891      	ldr	r1, [r2, #8]
    49d8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    49dc:	4849      	ldr	r0, [pc, #292]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    49de:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    49e0:	3301      	adds	r3, #1
    49e2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    49e4:	6893      	ldr	r3, [r2, #8]
    49e6:	60a3      	str	r3, [r4, #8]
    49e8:	f7ff ff56 	bl	4898 <z_spin_unlock_valid>
    49ec:	b968      	cbnz	r0, 4a0a <z_impl_k_mutex_lock+0xde>
    49ee:	4a46      	ldr	r2, [pc, #280]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    49f0:	4949      	ldr	r1, [pc, #292]	; (4b18 <z_impl_k_mutex_lock+0x1ec>)
    49f2:	4842      	ldr	r0, [pc, #264]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    49f4:	23b9      	movs	r3, #185	; 0xb9
    49f6:	f002 f925 	bl	6c44 <assert_print>
    49fa:	4942      	ldr	r1, [pc, #264]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    49fc:	4847      	ldr	r0, [pc, #284]	; (4b1c <z_impl_k_mutex_lock+0x1f0>)
    49fe:	f002 f921 	bl	6c44 <assert_print>
    4a02:	4841      	ldr	r0, [pc, #260]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4a04:	21b9      	movs	r1, #185	; 0xb9
    4a06:	f002 f916 	bl	6c36 <assert_post_action>
    4a0a:	f388 8811 	msr	BASEPRI, r8
    4a0e:	f3bf 8f6f 	isb	sy
		return 0;
    4a12:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4a14:	b002      	add	sp, #8
    4a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4a1a:	6921      	ldr	r1, [r4, #16]
    4a1c:	e7de      	b.n	49dc <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4a1e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4a22:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4a26:	4299      	cmp	r1, r3
    4a28:	bfa8      	it	ge
    4a2a:	4619      	movge	r1, r3
    4a2c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4a30:	4291      	cmp	r1, r2
    4a32:	bfb8      	it	lt
    4a34:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4a36:	428b      	cmp	r3, r1
    4a38:	dd43      	ble.n	4ac2 <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    4a3a:	f002 fc43 	bl	72c4 <adjust_owner_prio.isra.0>
    4a3e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4a40:	e9cd 7600 	strd	r7, r6, [sp]
    4a44:	482f      	ldr	r0, [pc, #188]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4a46:	4622      	mov	r2, r4
    4a48:	4641      	mov	r1, r8
    4a4a:	f000 fe6b 	bl	5724 <z_pend_curr>
	if (got_mutex == 0) {
    4a4e:	2800      	cmp	r0, #0
    4a50:	d0e0      	beq.n	4a14 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4a52:	f04f 0320 	mov.w	r3, #32
    4a56:	f3ef 8611 	mrs	r6, BASEPRI
    4a5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a62:	4828      	ldr	r0, [pc, #160]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4a64:	f7ff ff0a 	bl	487c <z_spin_lock_valid>
    4a68:	b968      	cbnz	r0, 4a86 <z_impl_k_mutex_lock+0x15a>
    4a6a:	4a27      	ldr	r2, [pc, #156]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4a6c:	4927      	ldr	r1, [pc, #156]	; (4b0c <z_impl_k_mutex_lock+0x1e0>)
    4a6e:	4823      	ldr	r0, [pc, #140]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    4a70:	238e      	movs	r3, #142	; 0x8e
    4a72:	f002 f8e7 	bl	6c44 <assert_print>
    4a76:	4923      	ldr	r1, [pc, #140]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4a78:	4825      	ldr	r0, [pc, #148]	; (4b10 <z_impl_k_mutex_lock+0x1e4>)
    4a7a:	f002 f8e3 	bl	6c44 <assert_print>
    4a7e:	4822      	ldr	r0, [pc, #136]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4a80:	218e      	movs	r1, #142	; 0x8e
    4a82:	f002 f8d8 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a86:	481f      	ldr	r0, [pc, #124]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4a88:	f7ff ff16 	bl	48b8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4a8c:	6823      	ldr	r3, [r4, #0]
    4a8e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a90:	429c      	cmp	r4, r3
    4a92:	d00a      	beq.n	4aaa <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4a94:	b14b      	cbz	r3, 4aaa <z_impl_k_mutex_lock+0x17e>
    4a96:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4a9a:	4299      	cmp	r1, r3
    4a9c:	bfa8      	it	ge
    4a9e:	4619      	movge	r1, r3
    4aa0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4aa4:	4299      	cmp	r1, r3
    4aa6:	bfb8      	it	lt
    4aa8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4aaa:	68a0      	ldr	r0, [r4, #8]
    4aac:	f002 fc0a 	bl	72c4 <adjust_owner_prio.isra.0>
    4ab0:	b900      	cbnz	r0, 4ab4 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    4ab2:	b145      	cbz	r5, 4ac6 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    4ab4:	4813      	ldr	r0, [pc, #76]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4ab6:	4631      	mov	r1, r6
    4ab8:	f000 fa38 	bl	4f2c <z_reschedule>
	return -EAGAIN;
    4abc:	f06f 000a 	mvn.w	r0, #10
    4ac0:	e7a8      	b.n	4a14 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    4ac2:	2500      	movs	r5, #0
    4ac4:	e7bc      	b.n	4a40 <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ac6:	480f      	ldr	r0, [pc, #60]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4ac8:	f7ff fee6 	bl	4898 <z_spin_unlock_valid>
    4acc:	b968      	cbnz	r0, 4aea <z_impl_k_mutex_lock+0x1be>
    4ace:	4a0e      	ldr	r2, [pc, #56]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4ad0:	4911      	ldr	r1, [pc, #68]	; (4b18 <z_impl_k_mutex_lock+0x1ec>)
    4ad2:	480a      	ldr	r0, [pc, #40]	; (4afc <z_impl_k_mutex_lock+0x1d0>)
    4ad4:	23b9      	movs	r3, #185	; 0xb9
    4ad6:	f002 f8b5 	bl	6c44 <assert_print>
    4ada:	490a      	ldr	r1, [pc, #40]	; (4b04 <z_impl_k_mutex_lock+0x1d8>)
    4adc:	480f      	ldr	r0, [pc, #60]	; (4b1c <z_impl_k_mutex_lock+0x1f0>)
    4ade:	f002 f8b1 	bl	6c44 <assert_print>
    4ae2:	4809      	ldr	r0, [pc, #36]	; (4b08 <z_impl_k_mutex_lock+0x1dc>)
    4ae4:	21b9      	movs	r1, #185	; 0xb9
    4ae6:	f002 f8a6 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    4aea:	f386 8811 	msr	BASEPRI, r6
    4aee:	f3bf 8f6f 	isb	sy
    4af2:	e7e3      	b.n	4abc <z_impl_k_mutex_lock+0x190>
    4af4:	000084b3 	.word	0x000084b3
    4af8:	00008560 	.word	0x00008560
    4afc:	000079d4 	.word	0x000079d4
    4b00:	00008582 	.word	0x00008582
    4b04:	20000b70 	.word	0x20000b70
    4b08:	00007a94 	.word	0x00007a94
    4b0c:	00007aed 	.word	0x00007aed
    4b10:	00007b02 	.word	0x00007b02
    4b14:	20000b48 	.word	0x20000b48
    4b18:	00007ac1 	.word	0x00007ac1
    4b1c:	00007ad8 	.word	0x00007ad8

00004b20 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4b20:	b538      	push	{r3, r4, r5, lr}
    4b22:	4604      	mov	r4, r0
    4b24:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4b28:	b163      	cbz	r3, 4b44 <z_impl_k_mutex_unlock+0x24>
    4b2a:	4950      	ldr	r1, [pc, #320]	; (4c6c <z_impl_k_mutex_unlock+0x14c>)
    4b2c:	4a50      	ldr	r2, [pc, #320]	; (4c70 <z_impl_k_mutex_unlock+0x150>)
    4b2e:	4851      	ldr	r0, [pc, #324]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4b30:	23c7      	movs	r3, #199	; 0xc7
    4b32:	f002 f887 	bl	6c44 <assert_print>
    4b36:	4850      	ldr	r0, [pc, #320]	; (4c78 <z_impl_k_mutex_unlock+0x158>)
    4b38:	f002 f884 	bl	6c44 <assert_print>
    4b3c:	484c      	ldr	r0, [pc, #304]	; (4c70 <z_impl_k_mutex_unlock+0x150>)
    4b3e:	21c7      	movs	r1, #199	; 0xc7
    4b40:	f002 f879 	bl	6c36 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4b44:	68a3      	ldr	r3, [r4, #8]
    4b46:	2b00      	cmp	r3, #0
    4b48:	f000 8089 	beq.w	4c5e <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4b4c:	4d4b      	ldr	r5, [pc, #300]	; (4c7c <z_impl_k_mutex_unlock+0x15c>)
    4b4e:	68aa      	ldr	r2, [r5, #8]
    4b50:	4293      	cmp	r3, r2
    4b52:	f040 8087 	bne.w	4c64 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4b56:	68e3      	ldr	r3, [r4, #12]
    4b58:	b94b      	cbnz	r3, 4b6e <z_impl_k_mutex_unlock+0x4e>
    4b5a:	4949      	ldr	r1, [pc, #292]	; (4c80 <z_impl_k_mutex_unlock+0x160>)
    4b5c:	4845      	ldr	r0, [pc, #276]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4b5e:	4a44      	ldr	r2, [pc, #272]	; (4c70 <z_impl_k_mutex_unlock+0x150>)
    4b60:	23df      	movs	r3, #223	; 0xdf
    4b62:	f002 f86f 	bl	6c44 <assert_print>
    4b66:	4842      	ldr	r0, [pc, #264]	; (4c70 <z_impl_k_mutex_unlock+0x150>)
    4b68:	21df      	movs	r1, #223	; 0xdf
    4b6a:	f002 f864 	bl	6c36 <assert_post_action>
    4b6e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    4b72:	b163      	cbz	r3, 4b8e <z_impl_k_mutex_unlock+0x6e>
    4b74:	493d      	ldr	r1, [pc, #244]	; (4c6c <z_impl_k_mutex_unlock+0x14c>)
    4b76:	4a43      	ldr	r2, [pc, #268]	; (4c84 <z_impl_k_mutex_unlock+0x164>)
    4b78:	483e      	ldr	r0, [pc, #248]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4b7a:	23fd      	movs	r3, #253	; 0xfd
    4b7c:	f002 f862 	bl	6c44 <assert_print>
    4b80:	4841      	ldr	r0, [pc, #260]	; (4c88 <z_impl_k_mutex_unlock+0x168>)
    4b82:	f002 f85f 	bl	6c44 <assert_print>
    4b86:	483f      	ldr	r0, [pc, #252]	; (4c84 <z_impl_k_mutex_unlock+0x164>)
    4b88:	21fd      	movs	r1, #253	; 0xfd
    4b8a:	f002 f854 	bl	6c36 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4b8e:	68ab      	ldr	r3, [r5, #8]
    4b90:	7bdb      	ldrb	r3, [r3, #15]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d10c      	bne.n	4bb0 <z_impl_k_mutex_unlock+0x90>
    4b96:	493d      	ldr	r1, [pc, #244]	; (4c8c <z_impl_k_mutex_unlock+0x16c>)
    4b98:	4a3a      	ldr	r2, [pc, #232]	; (4c84 <z_impl_k_mutex_unlock+0x164>)
    4b9a:	4836      	ldr	r0, [pc, #216]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4b9c:	23fe      	movs	r3, #254	; 0xfe
    4b9e:	f002 f851 	bl	6c44 <assert_print>
    4ba2:	4839      	ldr	r0, [pc, #228]	; (4c88 <z_impl_k_mutex_unlock+0x168>)
    4ba4:	f002 f84e 	bl	6c44 <assert_print>
    4ba8:	4836      	ldr	r0, [pc, #216]	; (4c84 <z_impl_k_mutex_unlock+0x164>)
    4baa:	21fe      	movs	r1, #254	; 0xfe
    4bac:	f002 f843 	bl	6c36 <assert_post_action>

	--_current->base.sched_locked;
    4bb0:	68aa      	ldr	r2, [r5, #8]
    4bb2:	7bd3      	ldrb	r3, [r2, #15]
    4bb4:	3b01      	subs	r3, #1
    4bb6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4bb8:	68e3      	ldr	r3, [r4, #12]
    4bba:	2b01      	cmp	r3, #1
    4bbc:	d905      	bls.n	4bca <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    4bbe:	3b01      	subs	r3, #1
    4bc0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4bc2:	f000 fee1 	bl	5988 <k_sched_unlock>

	return 0;
    4bc6:	2000      	movs	r0, #0
}
    4bc8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4bca:	f04f 0320 	mov.w	r3, #32
    4bce:	f3ef 8511 	mrs	r5, BASEPRI
    4bd2:	f383 8812 	msr	BASEPRI_MAX, r3
    4bd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bda:	482d      	ldr	r0, [pc, #180]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4bdc:	f7ff fe4e 	bl	487c <z_spin_lock_valid>
    4be0:	b968      	cbnz	r0, 4bfe <z_impl_k_mutex_unlock+0xde>
    4be2:	4a2c      	ldr	r2, [pc, #176]	; (4c94 <z_impl_k_mutex_unlock+0x174>)
    4be4:	492c      	ldr	r1, [pc, #176]	; (4c98 <z_impl_k_mutex_unlock+0x178>)
    4be6:	4823      	ldr	r0, [pc, #140]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4be8:	238e      	movs	r3, #142	; 0x8e
    4bea:	f002 f82b 	bl	6c44 <assert_print>
    4bee:	4928      	ldr	r1, [pc, #160]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4bf0:	482a      	ldr	r0, [pc, #168]	; (4c9c <z_impl_k_mutex_unlock+0x17c>)
    4bf2:	f002 f827 	bl	6c44 <assert_print>
    4bf6:	4827      	ldr	r0, [pc, #156]	; (4c94 <z_impl_k_mutex_unlock+0x174>)
    4bf8:	218e      	movs	r1, #142	; 0x8e
    4bfa:	f002 f81c 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4bfe:	4824      	ldr	r0, [pc, #144]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4c00:	f7ff fe5a 	bl	48b8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c04:	6921      	ldr	r1, [r4, #16]
    4c06:	68a0      	ldr	r0, [r4, #8]
    4c08:	f002 fb5c 	bl	72c4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c0c:	4620      	mov	r0, r4
    4c0e:	f000 ff37 	bl	5a80 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c12:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c14:	b158      	cbz	r0, 4c2e <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c16:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c1a:	6122      	str	r2, [r4, #16]
    4c1c:	2200      	movs	r2, #0
    4c1e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4c20:	f000 fbd0 	bl	53c4 <z_ready_thread>
		z_reschedule(&lock, key);
    4c24:	481a      	ldr	r0, [pc, #104]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4c26:	4629      	mov	r1, r5
    4c28:	f000 f980 	bl	4f2c <z_reschedule>
    4c2c:	e7c9      	b.n	4bc2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    4c2e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c30:	4817      	ldr	r0, [pc, #92]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4c32:	f7ff fe31 	bl	4898 <z_spin_unlock_valid>
    4c36:	b968      	cbnz	r0, 4c54 <z_impl_k_mutex_unlock+0x134>
    4c38:	4a16      	ldr	r2, [pc, #88]	; (4c94 <z_impl_k_mutex_unlock+0x174>)
    4c3a:	4919      	ldr	r1, [pc, #100]	; (4ca0 <z_impl_k_mutex_unlock+0x180>)
    4c3c:	480d      	ldr	r0, [pc, #52]	; (4c74 <z_impl_k_mutex_unlock+0x154>)
    4c3e:	23b9      	movs	r3, #185	; 0xb9
    4c40:	f002 f800 	bl	6c44 <assert_print>
    4c44:	4912      	ldr	r1, [pc, #72]	; (4c90 <z_impl_k_mutex_unlock+0x170>)
    4c46:	4817      	ldr	r0, [pc, #92]	; (4ca4 <z_impl_k_mutex_unlock+0x184>)
    4c48:	f001 fffc 	bl	6c44 <assert_print>
    4c4c:	4811      	ldr	r0, [pc, #68]	; (4c94 <z_impl_k_mutex_unlock+0x174>)
    4c4e:	21b9      	movs	r1, #185	; 0xb9
    4c50:	f001 fff1 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    4c54:	f385 8811 	msr	BASEPRI, r5
    4c58:	f3bf 8f6f 	isb	sy
    4c5c:	e7b1      	b.n	4bc2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    4c5e:	f06f 0015 	mvn.w	r0, #21
    4c62:	e7b1      	b.n	4bc8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    4c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c68:	e7ae      	b.n	4bc8 <z_impl_k_mutex_unlock+0xa8>
    4c6a:	bf00      	nop
    4c6c:	000084b3 	.word	0x000084b3
    4c70:	00008560 	.word	0x00008560
    4c74:	000079d4 	.word	0x000079d4
    4c78:	00008582 	.word	0x00008582
    4c7c:	20000b48 	.word	0x20000b48
    4c80:	000085a7 	.word	0x000085a7
    4c84:	000085be 	.word	0x000085be
    4c88:	000085e9 	.word	0x000085e9
    4c8c:	000085ec 	.word	0x000085ec
    4c90:	20000b70 	.word	0x20000b70
    4c94:	00007a94 	.word	0x00007a94
    4c98:	00007aed 	.word	0x00007aed
    4c9c:	00007b02 	.word	0x00007b02
    4ca0:	00007ac1 	.word	0x00007ac1
    4ca4:	00007ad8 	.word	0x00007ad8

00004ca8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4ca8:	b538      	push	{r3, r4, r5, lr}
    4caa:	4604      	mov	r4, r0
	__asm__ volatile(
    4cac:	f04f 0320 	mov.w	r3, #32
    4cb0:	f3ef 8511 	mrs	r5, BASEPRI
    4cb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cbc:	4814      	ldr	r0, [pc, #80]	; (4d10 <z_impl_k_sem_give+0x68>)
    4cbe:	f7ff fddd 	bl	487c <z_spin_lock_valid>
    4cc2:	b968      	cbnz	r0, 4ce0 <z_impl_k_sem_give+0x38>
    4cc4:	4a13      	ldr	r2, [pc, #76]	; (4d14 <z_impl_k_sem_give+0x6c>)
    4cc6:	4914      	ldr	r1, [pc, #80]	; (4d18 <z_impl_k_sem_give+0x70>)
    4cc8:	4814      	ldr	r0, [pc, #80]	; (4d1c <z_impl_k_sem_give+0x74>)
    4cca:	238e      	movs	r3, #142	; 0x8e
    4ccc:	f001 ffba 	bl	6c44 <assert_print>
    4cd0:	490f      	ldr	r1, [pc, #60]	; (4d10 <z_impl_k_sem_give+0x68>)
    4cd2:	4813      	ldr	r0, [pc, #76]	; (4d20 <z_impl_k_sem_give+0x78>)
    4cd4:	f001 ffb6 	bl	6c44 <assert_print>
    4cd8:	480e      	ldr	r0, [pc, #56]	; (4d14 <z_impl_k_sem_give+0x6c>)
    4cda:	218e      	movs	r1, #142	; 0x8e
    4cdc:	f001 ffab 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ce0:	480b      	ldr	r0, [pc, #44]	; (4d10 <z_impl_k_sem_give+0x68>)
    4ce2:	f7ff fde9 	bl	48b8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4ce6:	4620      	mov	r0, r4
    4ce8:	f000 feca 	bl	5a80 <z_unpend_first_thread>

	if (thread != NULL) {
    4cec:	b148      	cbz	r0, 4d02 <z_impl_k_sem_give+0x5a>
    4cee:	2200      	movs	r2, #0
    4cf0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4cf2:	f000 fb67 	bl	53c4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4cf6:	4629      	mov	r1, r5
    4cf8:	4805      	ldr	r0, [pc, #20]	; (4d10 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4cfe:	f000 b915 	b.w	4f2c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4d02:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4d06:	429a      	cmp	r2, r3
    4d08:	bf18      	it	ne
    4d0a:	3301      	addne	r3, #1
    4d0c:	60a3      	str	r3, [r4, #8]
}
    4d0e:	e7f2      	b.n	4cf6 <z_impl_k_sem_give+0x4e>
    4d10:	20000b74 	.word	0x20000b74
    4d14:	00007a94 	.word	0x00007a94
    4d18:	00007aed 	.word	0x00007aed
    4d1c:	000079d4 	.word	0x000079d4
    4d20:	00007b02 	.word	0x00007b02

00004d24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d26:	4604      	mov	r4, r0
    4d28:	4616      	mov	r6, r2
    4d2a:	461d      	mov	r5, r3
    4d2c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4d30:	b17b      	cbz	r3, 4d52 <z_impl_k_sem_take+0x2e>
    4d32:	ea52 0305 	orrs.w	r3, r2, r5
    4d36:	d00c      	beq.n	4d52 <z_impl_k_sem_take+0x2e>
    4d38:	4935      	ldr	r1, [pc, #212]	; (4e10 <z_impl_k_sem_take+0xec>)
    4d3a:	4a36      	ldr	r2, [pc, #216]	; (4e14 <z_impl_k_sem_take+0xf0>)
    4d3c:	4836      	ldr	r0, [pc, #216]	; (4e18 <z_impl_k_sem_take+0xf4>)
    4d3e:	2379      	movs	r3, #121	; 0x79
    4d40:	f001 ff80 	bl	6c44 <assert_print>
    4d44:	4835      	ldr	r0, [pc, #212]	; (4e1c <z_impl_k_sem_take+0xf8>)
    4d46:	f001 ff7d 	bl	6c44 <assert_print>
    4d4a:	4832      	ldr	r0, [pc, #200]	; (4e14 <z_impl_k_sem_take+0xf0>)
    4d4c:	2179      	movs	r1, #121	; 0x79
    4d4e:	f001 ff72 	bl	6c36 <assert_post_action>
    4d52:	f04f 0320 	mov.w	r3, #32
    4d56:	f3ef 8711 	mrs	r7, BASEPRI
    4d5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d62:	482f      	ldr	r0, [pc, #188]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4d64:	f7ff fd8a 	bl	487c <z_spin_lock_valid>
    4d68:	b968      	cbnz	r0, 4d86 <z_impl_k_sem_take+0x62>
    4d6a:	4a2e      	ldr	r2, [pc, #184]	; (4e24 <z_impl_k_sem_take+0x100>)
    4d6c:	492e      	ldr	r1, [pc, #184]	; (4e28 <z_impl_k_sem_take+0x104>)
    4d6e:	482a      	ldr	r0, [pc, #168]	; (4e18 <z_impl_k_sem_take+0xf4>)
    4d70:	238e      	movs	r3, #142	; 0x8e
    4d72:	f001 ff67 	bl	6c44 <assert_print>
    4d76:	492a      	ldr	r1, [pc, #168]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4d78:	482c      	ldr	r0, [pc, #176]	; (4e2c <z_impl_k_sem_take+0x108>)
    4d7a:	f001 ff63 	bl	6c44 <assert_print>
    4d7e:	4829      	ldr	r0, [pc, #164]	; (4e24 <z_impl_k_sem_take+0x100>)
    4d80:	218e      	movs	r1, #142	; 0x8e
    4d82:	f001 ff58 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d86:	4826      	ldr	r0, [pc, #152]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4d88:	f7ff fd96 	bl	48b8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4d8c:	68a3      	ldr	r3, [r4, #8]
    4d8e:	b1d3      	cbz	r3, 4dc6 <z_impl_k_sem_take+0xa2>
		sem->count--;
    4d90:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d92:	4823      	ldr	r0, [pc, #140]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4d94:	60a3      	str	r3, [r4, #8]
    4d96:	f7ff fd7f 	bl	4898 <z_spin_unlock_valid>
    4d9a:	b968      	cbnz	r0, 4db8 <z_impl_k_sem_take+0x94>
    4d9c:	4a21      	ldr	r2, [pc, #132]	; (4e24 <z_impl_k_sem_take+0x100>)
    4d9e:	4924      	ldr	r1, [pc, #144]	; (4e30 <z_impl_k_sem_take+0x10c>)
    4da0:	481d      	ldr	r0, [pc, #116]	; (4e18 <z_impl_k_sem_take+0xf4>)
    4da2:	23b9      	movs	r3, #185	; 0xb9
    4da4:	f001 ff4e 	bl	6c44 <assert_print>
    4da8:	491d      	ldr	r1, [pc, #116]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4daa:	4822      	ldr	r0, [pc, #136]	; (4e34 <z_impl_k_sem_take+0x110>)
    4dac:	f001 ff4a 	bl	6c44 <assert_print>
    4db0:	481c      	ldr	r0, [pc, #112]	; (4e24 <z_impl_k_sem_take+0x100>)
    4db2:	21b9      	movs	r1, #185	; 0xb9
    4db4:	f001 ff3f 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    4db8:	f387 8811 	msr	BASEPRI, r7
    4dbc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4dc0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4dc2:	b003      	add	sp, #12
    4dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4dc6:	ea56 0305 	orrs.w	r3, r6, r5
    4dca:	d118      	bne.n	4dfe <z_impl_k_sem_take+0xda>
    4dcc:	4814      	ldr	r0, [pc, #80]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4dce:	f7ff fd63 	bl	4898 <z_spin_unlock_valid>
    4dd2:	b968      	cbnz	r0, 4df0 <z_impl_k_sem_take+0xcc>
    4dd4:	4a13      	ldr	r2, [pc, #76]	; (4e24 <z_impl_k_sem_take+0x100>)
    4dd6:	4916      	ldr	r1, [pc, #88]	; (4e30 <z_impl_k_sem_take+0x10c>)
    4dd8:	480f      	ldr	r0, [pc, #60]	; (4e18 <z_impl_k_sem_take+0xf4>)
    4dda:	23b9      	movs	r3, #185	; 0xb9
    4ddc:	f001 ff32 	bl	6c44 <assert_print>
    4de0:	490f      	ldr	r1, [pc, #60]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4de2:	4814      	ldr	r0, [pc, #80]	; (4e34 <z_impl_k_sem_take+0x110>)
    4de4:	f001 ff2e 	bl	6c44 <assert_print>
    4de8:	480e      	ldr	r0, [pc, #56]	; (4e24 <z_impl_k_sem_take+0x100>)
    4dea:	21b9      	movs	r1, #185	; 0xb9
    4dec:	f001 ff23 	bl	6c36 <assert_post_action>
    4df0:	f387 8811 	msr	BASEPRI, r7
    4df4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4df8:	f06f 000f 	mvn.w	r0, #15
    4dfc:	e7e1      	b.n	4dc2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4dfe:	e9cd 6500 	strd	r6, r5, [sp]
    4e02:	4622      	mov	r2, r4
    4e04:	4639      	mov	r1, r7
    4e06:	4806      	ldr	r0, [pc, #24]	; (4e20 <z_impl_k_sem_take+0xfc>)
    4e08:	f000 fc8c 	bl	5724 <z_pend_curr>
	return ret;
    4e0c:	e7d9      	b.n	4dc2 <z_impl_k_sem_take+0x9e>
    4e0e:	bf00      	nop
    4e10:	0000863d 	.word	0x0000863d
    4e14:	0000861d 	.word	0x0000861d
    4e18:	000079d4 	.word	0x000079d4
    4e1c:	000085e9 	.word	0x000085e9
    4e20:	20000b74 	.word	0x20000b74
    4e24:	00007a94 	.word	0x00007a94
    4e28:	00007aed 	.word	0x00007aed
    4e2c:	00007b02 	.word	0x00007b02
    4e30:	00007ac1 	.word	0x00007ac1
    4e34:	00007ad8 	.word	0x00007ad8

00004e38 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    4e38:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    4e3a:	4d07      	ldr	r5, [pc, #28]	; (4e58 <z_reset_time_slice+0x20>)
    4e3c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    4e3e:	b154      	cbz	r4, 4e56 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4e40:	f7fe fa7a 	bl	3338 <sys_clock_elapsed>
    4e44:	4b05      	ldr	r3, [pc, #20]	; (4e5c <z_reset_time_slice+0x24>)
    4e46:	4404      	add	r4, r0
    4e48:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4e4a:	6828      	ldr	r0, [r5, #0]
    4e4c:	2100      	movs	r1, #0
	}
}
    4e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    4e52:	f001 ba6f 	b.w	6334 <z_set_timeout_expiry>
}
    4e56:	bd38      	pop	{r3, r4, r5, pc}
    4e58:	20000b84 	.word	0x20000b84
    4e5c:	20000b48 	.word	0x20000b48

00004e60 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e62:	4604      	mov	r4, r0
    4e64:	460d      	mov	r5, r1
	__asm__ volatile(
    4e66:	f04f 0320 	mov.w	r3, #32
    4e6a:	f3ef 8711 	mrs	r7, BASEPRI
    4e6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e76:	4823      	ldr	r0, [pc, #140]	; (4f04 <k_sched_time_slice_set+0xa4>)
    4e78:	f7ff fd00 	bl	487c <z_spin_lock_valid>
    4e7c:	b968      	cbnz	r0, 4e9a <k_sched_time_slice_set+0x3a>
    4e7e:	4a22      	ldr	r2, [pc, #136]	; (4f08 <k_sched_time_slice_set+0xa8>)
    4e80:	4922      	ldr	r1, [pc, #136]	; (4f0c <k_sched_time_slice_set+0xac>)
    4e82:	4823      	ldr	r0, [pc, #140]	; (4f10 <k_sched_time_slice_set+0xb0>)
    4e84:	238e      	movs	r3, #142	; 0x8e
    4e86:	f001 fedd 	bl	6c44 <assert_print>
    4e8a:	491e      	ldr	r1, [pc, #120]	; (4f04 <k_sched_time_slice_set+0xa4>)
    4e8c:	4821      	ldr	r0, [pc, #132]	; (4f14 <k_sched_time_slice_set+0xb4>)
    4e8e:	f001 fed9 	bl	6c44 <assert_print>
    4e92:	481d      	ldr	r0, [pc, #116]	; (4f08 <k_sched_time_slice_set+0xa8>)
    4e94:	218e      	movs	r1, #142	; 0x8e
    4e96:	f001 fece 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e9a:	481a      	ldr	r0, [pc, #104]	; (4f04 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4e9c:	4e1e      	ldr	r6, [pc, #120]	; (4f18 <k_sched_time_slice_set+0xb8>)
    4e9e:	f7ff fd0b 	bl	48b8 <z_spin_lock_set_owner>
    4ea2:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    4ea4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    4ea8:	f240 30e7 	movw	r0, #999	; 0x3e7
    4eac:	6131      	str	r1, [r6, #16]
    4eae:	2300      	movs	r3, #0
    4eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4eb4:	fbe4 010c 	umlal	r0, r1, r4, ip
    4eb8:	f7fb f922 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4ebc:	2c00      	cmp	r4, #0
    4ebe:	4b17      	ldr	r3, [pc, #92]	; (4f1c <k_sched_time_slice_set+0xbc>)
    4ec0:	dc1c      	bgt.n	4efc <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    4ec2:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4ec4:	4b16      	ldr	r3, [pc, #88]	; (4f20 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    4ec6:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    4ec8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4eca:	f7ff ffb5 	bl	4e38 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ece:	480d      	ldr	r0, [pc, #52]	; (4f04 <k_sched_time_slice_set+0xa4>)
    4ed0:	f7ff fce2 	bl	4898 <z_spin_unlock_valid>
    4ed4:	b968      	cbnz	r0, 4ef2 <k_sched_time_slice_set+0x92>
    4ed6:	4a0c      	ldr	r2, [pc, #48]	; (4f08 <k_sched_time_slice_set+0xa8>)
    4ed8:	4912      	ldr	r1, [pc, #72]	; (4f24 <k_sched_time_slice_set+0xc4>)
    4eda:	480d      	ldr	r0, [pc, #52]	; (4f10 <k_sched_time_slice_set+0xb0>)
    4edc:	23b9      	movs	r3, #185	; 0xb9
    4ede:	f001 feb1 	bl	6c44 <assert_print>
    4ee2:	4908      	ldr	r1, [pc, #32]	; (4f04 <k_sched_time_slice_set+0xa4>)
    4ee4:	4810      	ldr	r0, [pc, #64]	; (4f28 <k_sched_time_slice_set+0xc8>)
    4ee6:	f001 fead 	bl	6c44 <assert_print>
    4eea:	4807      	ldr	r0, [pc, #28]	; (4f08 <k_sched_time_slice_set+0xa8>)
    4eec:	21b9      	movs	r1, #185	; 0xb9
    4eee:	f001 fea2 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    4ef2:	f387 8811 	msr	BASEPRI, r7
    4ef6:	f3bf 8f6f 	isb	sy
	}
}
    4efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    4efc:	2802      	cmp	r0, #2
    4efe:	bfb8      	it	lt
    4f00:	2002      	movlt	r0, #2
    4f02:	e7de      	b.n	4ec2 <k_sched_time_slice_set+0x62>
    4f04:	20000b7c 	.word	0x20000b7c
    4f08:	00007a94 	.word	0x00007a94
    4f0c:	00007aed 	.word	0x00007aed
    4f10:	000079d4 	.word	0x000079d4
    4f14:	00007b02 	.word	0x00007b02
    4f18:	20000b48 	.word	0x20000b48
    4f1c:	20000b84 	.word	0x20000b84
    4f20:	20000b80 	.word	0x20000b80
    4f24:	00007ac1 	.word	0x00007ac1
    4f28:	00007ad8 	.word	0x00007ad8

00004f2c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4f2c:	b538      	push	{r3, r4, r5, lr}
    4f2e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4f30:	460d      	mov	r5, r1
    4f32:	b9e9      	cbnz	r1, 4f70 <z_reschedule+0x44>
    4f34:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    4f38:	b9d3      	cbnz	r3, 4f70 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    4f3a:	4b19      	ldr	r3, [pc, #100]	; (4fa0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    4f3c:	69da      	ldr	r2, [r3, #28]
    4f3e:	689b      	ldr	r3, [r3, #8]
    4f40:	429a      	cmp	r2, r3
    4f42:	d015      	beq.n	4f70 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f44:	f7ff fca8 	bl	4898 <z_spin_unlock_valid>
    4f48:	b968      	cbnz	r0, 4f66 <z_reschedule+0x3a>
    4f4a:	4a16      	ldr	r2, [pc, #88]	; (4fa4 <z_reschedule+0x78>)
    4f4c:	4916      	ldr	r1, [pc, #88]	; (4fa8 <z_reschedule+0x7c>)
    4f4e:	4817      	ldr	r0, [pc, #92]	; (4fac <z_reschedule+0x80>)
    4f50:	23d0      	movs	r3, #208	; 0xd0
    4f52:	f001 fe77 	bl	6c44 <assert_print>
    4f56:	4816      	ldr	r0, [pc, #88]	; (4fb0 <z_reschedule+0x84>)
    4f58:	4621      	mov	r1, r4
    4f5a:	f001 fe73 	bl	6c44 <assert_print>
    4f5e:	4811      	ldr	r0, [pc, #68]	; (4fa4 <z_reschedule+0x78>)
    4f60:	21d0      	movs	r1, #208	; 0xd0
    4f62:	f001 fe68 	bl	6c36 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4f6a:	2000      	movs	r0, #0
    4f6c:	f7fc bd96 	b.w	1a9c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f70:	4620      	mov	r0, r4
    4f72:	f7ff fc91 	bl	4898 <z_spin_unlock_valid>
    4f76:	b968      	cbnz	r0, 4f94 <z_reschedule+0x68>
    4f78:	4a0a      	ldr	r2, [pc, #40]	; (4fa4 <z_reschedule+0x78>)
    4f7a:	490b      	ldr	r1, [pc, #44]	; (4fa8 <z_reschedule+0x7c>)
    4f7c:	480b      	ldr	r0, [pc, #44]	; (4fac <z_reschedule+0x80>)
    4f7e:	23b9      	movs	r3, #185	; 0xb9
    4f80:	f001 fe60 	bl	6c44 <assert_print>
    4f84:	480a      	ldr	r0, [pc, #40]	; (4fb0 <z_reschedule+0x84>)
    4f86:	4621      	mov	r1, r4
    4f88:	f001 fe5c 	bl	6c44 <assert_print>
    4f8c:	4805      	ldr	r0, [pc, #20]	; (4fa4 <z_reschedule+0x78>)
    4f8e:	21b9      	movs	r1, #185	; 0xb9
    4f90:	f001 fe51 	bl	6c36 <assert_post_action>
    4f94:	f385 8811 	msr	BASEPRI, r5
    4f98:	f3bf 8f6f 	isb	sy
    4f9c:	bd38      	pop	{r3, r4, r5, pc}
    4f9e:	bf00      	nop
    4fa0:	20000b48 	.word	0x20000b48
    4fa4:	00007a94 	.word	0x00007a94
    4fa8:	00007ac1 	.word	0x00007ac1
    4fac:	000079d4 	.word	0x000079d4
    4fb0:	00007ad8 	.word	0x00007ad8

00004fb4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4fb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4fb6:	f04f 0320 	mov.w	r3, #32
    4fba:	f3ef 8511 	mrs	r5, BASEPRI
    4fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    4fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fc6:	4829      	ldr	r0, [pc, #164]	; (506c <k_sched_lock+0xb8>)
    4fc8:	f7ff fc58 	bl	487c <z_spin_lock_valid>
    4fcc:	b968      	cbnz	r0, 4fea <k_sched_lock+0x36>
    4fce:	4a28      	ldr	r2, [pc, #160]	; (5070 <k_sched_lock+0xbc>)
    4fd0:	4928      	ldr	r1, [pc, #160]	; (5074 <k_sched_lock+0xc0>)
    4fd2:	4829      	ldr	r0, [pc, #164]	; (5078 <k_sched_lock+0xc4>)
    4fd4:	238e      	movs	r3, #142	; 0x8e
    4fd6:	f001 fe35 	bl	6c44 <assert_print>
    4fda:	4924      	ldr	r1, [pc, #144]	; (506c <k_sched_lock+0xb8>)
    4fdc:	4827      	ldr	r0, [pc, #156]	; (507c <k_sched_lock+0xc8>)
    4fde:	f001 fe31 	bl	6c44 <assert_print>
    4fe2:	4823      	ldr	r0, [pc, #140]	; (5070 <k_sched_lock+0xbc>)
    4fe4:	218e      	movs	r1, #142	; 0x8e
    4fe6:	f001 fe26 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    4fea:	4820      	ldr	r0, [pc, #128]	; (506c <k_sched_lock+0xb8>)
    4fec:	f7ff fc64 	bl	48b8 <z_spin_lock_set_owner>
    4ff0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4ff4:	b163      	cbz	r3, 5010 <k_sched_lock+0x5c>
    4ff6:	4922      	ldr	r1, [pc, #136]	; (5080 <k_sched_lock+0xcc>)
    4ff8:	4a22      	ldr	r2, [pc, #136]	; (5084 <k_sched_lock+0xd0>)
    4ffa:	481f      	ldr	r0, [pc, #124]	; (5078 <k_sched_lock+0xc4>)
    4ffc:	23fd      	movs	r3, #253	; 0xfd
    4ffe:	f001 fe21 	bl	6c44 <assert_print>
    5002:	4821      	ldr	r0, [pc, #132]	; (5088 <k_sched_lock+0xd4>)
    5004:	f001 fe1e 	bl	6c44 <assert_print>
    5008:	481e      	ldr	r0, [pc, #120]	; (5084 <k_sched_lock+0xd0>)
    500a:	21fd      	movs	r1, #253	; 0xfd
    500c:	f001 fe13 	bl	6c36 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5010:	4c1e      	ldr	r4, [pc, #120]	; (508c <k_sched_lock+0xd8>)
    5012:	68a3      	ldr	r3, [r4, #8]
    5014:	7bdb      	ldrb	r3, [r3, #15]
    5016:	2b01      	cmp	r3, #1
    5018:	d10c      	bne.n	5034 <k_sched_lock+0x80>
    501a:	491d      	ldr	r1, [pc, #116]	; (5090 <k_sched_lock+0xdc>)
    501c:	4a19      	ldr	r2, [pc, #100]	; (5084 <k_sched_lock+0xd0>)
    501e:	4816      	ldr	r0, [pc, #88]	; (5078 <k_sched_lock+0xc4>)
    5020:	23fe      	movs	r3, #254	; 0xfe
    5022:	f001 fe0f 	bl	6c44 <assert_print>
    5026:	4818      	ldr	r0, [pc, #96]	; (5088 <k_sched_lock+0xd4>)
    5028:	f001 fe0c 	bl	6c44 <assert_print>
    502c:	4815      	ldr	r0, [pc, #84]	; (5084 <k_sched_lock+0xd0>)
    502e:	21fe      	movs	r1, #254	; 0xfe
    5030:	f001 fe01 	bl	6c36 <assert_post_action>
	--_current->base.sched_locked;
    5034:	68a2      	ldr	r2, [r4, #8]
    5036:	7bd3      	ldrb	r3, [r2, #15]
    5038:	3b01      	subs	r3, #1
    503a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    503c:	480b      	ldr	r0, [pc, #44]	; (506c <k_sched_lock+0xb8>)
    503e:	f7ff fc2b 	bl	4898 <z_spin_unlock_valid>
    5042:	b968      	cbnz	r0, 5060 <k_sched_lock+0xac>
    5044:	4a0a      	ldr	r2, [pc, #40]	; (5070 <k_sched_lock+0xbc>)
    5046:	4913      	ldr	r1, [pc, #76]	; (5094 <k_sched_lock+0xe0>)
    5048:	480b      	ldr	r0, [pc, #44]	; (5078 <k_sched_lock+0xc4>)
    504a:	23b9      	movs	r3, #185	; 0xb9
    504c:	f001 fdfa 	bl	6c44 <assert_print>
    5050:	4906      	ldr	r1, [pc, #24]	; (506c <k_sched_lock+0xb8>)
    5052:	4811      	ldr	r0, [pc, #68]	; (5098 <k_sched_lock+0xe4>)
    5054:	f001 fdf6 	bl	6c44 <assert_print>
    5058:	4805      	ldr	r0, [pc, #20]	; (5070 <k_sched_lock+0xbc>)
    505a:	21b9      	movs	r1, #185	; 0xb9
    505c:	f001 fdeb 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    5060:	f385 8811 	msr	BASEPRI, r5
    5064:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5068:	bd38      	pop	{r3, r4, r5, pc}
    506a:	bf00      	nop
    506c:	20000b7c 	.word	0x20000b7c
    5070:	00007a94 	.word	0x00007a94
    5074:	00007aed 	.word	0x00007aed
    5078:	000079d4 	.word	0x000079d4
    507c:	00007b02 	.word	0x00007b02
    5080:	000084b3 	.word	0x000084b3
    5084:	000085be 	.word	0x000085be
    5088:	000085e9 	.word	0x000085e9
    508c:	20000b48 	.word	0x20000b48
    5090:	000085ec 	.word	0x000085ec
    5094:	00007ac1 	.word	0x00007ac1
    5098:	00007ad8 	.word	0x00007ad8

0000509c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    509c:	4b0c      	ldr	r3, [pc, #48]	; (50d0 <z_priq_dumb_remove+0x34>)
    509e:	4299      	cmp	r1, r3
{
    50a0:	b510      	push	{r4, lr}
    50a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    50a4:	d10b      	bne.n	50be <z_priq_dumb_remove+0x22>
    50a6:	490b      	ldr	r1, [pc, #44]	; (50d4 <z_priq_dumb_remove+0x38>)
    50a8:	480b      	ldr	r0, [pc, #44]	; (50d8 <z_priq_dumb_remove+0x3c>)
    50aa:	4a0c      	ldr	r2, [pc, #48]	; (50dc <z_priq_dumb_remove+0x40>)
    50ac:	f240 433d 	movw	r3, #1085	; 0x43d
    50b0:	f001 fdc8 	bl	6c44 <assert_print>
    50b4:	4809      	ldr	r0, [pc, #36]	; (50dc <z_priq_dumb_remove+0x40>)
    50b6:	f240 413d 	movw	r1, #1085	; 0x43d
    50ba:	f001 fdbc 	bl	6c36 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    50be:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    50c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    50c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    50c6:	2300      	movs	r3, #0
	node->prev = NULL;
    50c8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    50cc:	bd10      	pop	{r4, pc}
    50ce:	bf00      	nop
    50d0:	20000368 	.word	0x20000368
    50d4:	000086ad 	.word	0x000086ad
    50d8:	000079d4 	.word	0x000079d4
    50dc:	0000868b 	.word	0x0000868b

000050e0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    50e0:	6883      	ldr	r3, [r0, #8]
{
    50e2:	b510      	push	{r4, lr}
    50e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    50e6:	b95b      	cbnz	r3, 5100 <unpend_thread_no_timeout+0x20>
    50e8:	490b      	ldr	r1, [pc, #44]	; (5118 <unpend_thread_no_timeout+0x38>)
    50ea:	480c      	ldr	r0, [pc, #48]	; (511c <unpend_thread_no_timeout+0x3c>)
    50ec:	4a0c      	ldr	r2, [pc, #48]	; (5120 <unpend_thread_no_timeout+0x40>)
    50ee:	f240 23b9 	movw	r3, #697	; 0x2b9
    50f2:	f001 fda7 	bl	6c44 <assert_print>
    50f6:	480a      	ldr	r0, [pc, #40]	; (5120 <unpend_thread_no_timeout+0x40>)
    50f8:	f240 21b9 	movw	r1, #697	; 0x2b9
    50fc:	f001 fd9b 	bl	6c36 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5100:	68a0      	ldr	r0, [r4, #8]
    5102:	4621      	mov	r1, r4
    5104:	f7ff ffca 	bl	509c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5108:	7b63      	ldrb	r3, [r4, #13]
    510a:	f023 0302 	bic.w	r3, r3, #2
    510e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5110:	2300      	movs	r3, #0
    5112:	60a3      	str	r3, [r4, #8]
}
    5114:	bd10      	pop	{r4, pc}
    5116:	bf00      	nop
    5118:	000086ce 	.word	0x000086ce
    511c:	000079d4 	.word	0x000079d4
    5120:	0000868b 	.word	0x0000868b

00005124 <update_cache>:
{
    5124:	b538      	push	{r3, r4, r5, lr}
    5126:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5128:	4814      	ldr	r0, [pc, #80]	; (517c <update_cache+0x58>)
    512a:	4d15      	ldr	r5, [pc, #84]	; (5180 <update_cache+0x5c>)
    512c:	f002 f8fb 	bl	7326 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5130:	4604      	mov	r4, r0
    5132:	b900      	cbnz	r0, 5136 <update_cache+0x12>
    5134:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5136:	b9ca      	cbnz	r2, 516c <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5138:	68ab      	ldr	r3, [r5, #8]
    513a:	b963      	cbnz	r3, 5156 <update_cache+0x32>
    513c:	4911      	ldr	r1, [pc, #68]	; (5184 <update_cache+0x60>)
    513e:	4a12      	ldr	r2, [pc, #72]	; (5188 <update_cache+0x64>)
    5140:	4812      	ldr	r0, [pc, #72]	; (518c <update_cache+0x68>)
    5142:	2389      	movs	r3, #137	; 0x89
    5144:	f001 fd7e 	bl	6c44 <assert_print>
    5148:	4811      	ldr	r0, [pc, #68]	; (5190 <update_cache+0x6c>)
    514a:	f001 fd7b 	bl	6c44 <assert_print>
    514e:	480e      	ldr	r0, [pc, #56]	; (5188 <update_cache+0x64>)
    5150:	2189      	movs	r1, #137	; 0x89
    5152:	f001 fd70 	bl	6c36 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5156:	68ab      	ldr	r3, [r5, #8]
    5158:	7b5a      	ldrb	r2, [r3, #13]
    515a:	06d2      	lsls	r2, r2, #27
    515c:	d106      	bne.n	516c <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    515e:	69a2      	ldr	r2, [r4, #24]
    5160:	b922      	cbnz	r2, 516c <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5162:	89da      	ldrh	r2, [r3, #14]
    5164:	2a7f      	cmp	r2, #127	; 0x7f
    5166:	d901      	bls.n	516c <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5168:	61eb      	str	r3, [r5, #28]
}
    516a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    516c:	68ab      	ldr	r3, [r5, #8]
    516e:	42a3      	cmp	r3, r4
    5170:	d002      	beq.n	5178 <update_cache+0x54>
			z_reset_time_slice(thread);
    5172:	4620      	mov	r0, r4
    5174:	f7ff fe60 	bl	4e38 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5178:	61ec      	str	r4, [r5, #28]
}
    517a:	e7f6      	b.n	516a <update_cache+0x46>
    517c:	20000b68 	.word	0x20000b68
    5180:	20000b48 	.word	0x20000b48
    5184:	000086e5 	.word	0x000086e5
    5188:	0000868b 	.word	0x0000868b
    518c:	000079d4 	.word	0x000079d4
    5190:	000085e9 	.word	0x000085e9

00005194 <move_thread_to_end_of_prio_q>:
{
    5194:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5196:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    519a:	7b43      	ldrb	r3, [r0, #13]
    519c:	2a00      	cmp	r2, #0
{
    519e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    51a0:	da06      	bge.n	51b0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    51a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    51a6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    51a8:	4601      	mov	r1, r0
    51aa:	481e      	ldr	r0, [pc, #120]	; (5224 <move_thread_to_end_of_prio_q+0x90>)
    51ac:	f7ff ff76 	bl	509c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    51b0:	7b63      	ldrb	r3, [r4, #13]
    51b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    51b6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    51b8:	4b1b      	ldr	r3, [pc, #108]	; (5228 <move_thread_to_end_of_prio_q+0x94>)
    51ba:	429c      	cmp	r4, r3
    51bc:	d109      	bne.n	51d2 <move_thread_to_end_of_prio_q+0x3e>
    51be:	491b      	ldr	r1, [pc, #108]	; (522c <move_thread_to_end_of_prio_q+0x98>)
    51c0:	481b      	ldr	r0, [pc, #108]	; (5230 <move_thread_to_end_of_prio_q+0x9c>)
    51c2:	4a1c      	ldr	r2, [pc, #112]	; (5234 <move_thread_to_end_of_prio_q+0xa0>)
    51c4:	23ba      	movs	r3, #186	; 0xba
    51c6:	f001 fd3d 	bl	6c44 <assert_print>
    51ca:	481a      	ldr	r0, [pc, #104]	; (5234 <move_thread_to_end_of_prio_q+0xa0>)
    51cc:	21ba      	movs	r1, #186	; 0xba
    51ce:	f001 fd32 	bl	6c36 <assert_post_action>
	return list->head == list;
    51d2:	4a19      	ldr	r2, [pc, #100]	; (5238 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    51d4:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51d8:	f102 0520 	add.w	r5, r2, #32
    51dc:	42ab      	cmp	r3, r5
    51de:	d01b      	beq.n	5218 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51e0:	b1d3      	cbz	r3, 5218 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    51e2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    51e6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    51ea:	428e      	cmp	r6, r1
    51ec:	d00f      	beq.n	520e <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    51ee:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    51f0:	2900      	cmp	r1, #0
    51f2:	dd0c      	ble.n	520e <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    51f4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    51f6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    51fa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    51fc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    51fe:	6890      	ldr	r0, [r2, #8]
    5200:	1b03      	subs	r3, r0, r4
    5202:	4258      	negs	r0, r3
}
    5204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5208:	4158      	adcs	r0, r3
    520a:	f7ff bf8b 	b.w	5124 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    520e:	4283      	cmp	r3, r0
    5210:	d002      	beq.n	5218 <move_thread_to_end_of_prio_q+0x84>
    5212:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5214:	2b00      	cmp	r3, #0
    5216:	d1e6      	bne.n	51e6 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    5218:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    521c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    521e:	6254      	str	r4, [r2, #36]	; 0x24
}
    5220:	e7ed      	b.n	51fe <move_thread_to_end_of_prio_q+0x6a>
    5222:	bf00      	nop
    5224:	20000b68 	.word	0x20000b68
    5228:	20000368 	.word	0x20000368
    522c:	000086ad 	.word	0x000086ad
    5230:	000079d4 	.word	0x000079d4
    5234:	0000868b 	.word	0x0000868b
    5238:	20000b48 	.word	0x20000b48

0000523c <z_time_slice>:
{
    523c:	b570      	push	{r4, r5, r6, lr}
    523e:	4605      	mov	r5, r0
	__asm__ volatile(
    5240:	f04f 0320 	mov.w	r3, #32
    5244:	f3ef 8611 	mrs	r6, BASEPRI
    5248:	f383 8812 	msr	BASEPRI_MAX, r3
    524c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5250:	482a      	ldr	r0, [pc, #168]	; (52fc <z_time_slice+0xc0>)
    5252:	f7ff fb13 	bl	487c <z_spin_lock_valid>
    5256:	b968      	cbnz	r0, 5274 <z_time_slice+0x38>
    5258:	4a29      	ldr	r2, [pc, #164]	; (5300 <z_time_slice+0xc4>)
    525a:	492a      	ldr	r1, [pc, #168]	; (5304 <z_time_slice+0xc8>)
    525c:	482a      	ldr	r0, [pc, #168]	; (5308 <z_time_slice+0xcc>)
    525e:	238e      	movs	r3, #142	; 0x8e
    5260:	f001 fcf0 	bl	6c44 <assert_print>
    5264:	4925      	ldr	r1, [pc, #148]	; (52fc <z_time_slice+0xc0>)
    5266:	4829      	ldr	r0, [pc, #164]	; (530c <z_time_slice+0xd0>)
    5268:	f001 fcec 	bl	6c44 <assert_print>
    526c:	4824      	ldr	r0, [pc, #144]	; (5300 <z_time_slice+0xc4>)
    526e:	218e      	movs	r1, #142	; 0x8e
    5270:	f001 fce1 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    5274:	4821      	ldr	r0, [pc, #132]	; (52fc <z_time_slice+0xc0>)
    5276:	f7ff fb1f 	bl	48b8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    527a:	4b25      	ldr	r3, [pc, #148]	; (5310 <z_time_slice+0xd4>)
    527c:	4a25      	ldr	r2, [pc, #148]	; (5314 <z_time_slice+0xd8>)
    527e:	689c      	ldr	r4, [r3, #8]
    5280:	6811      	ldr	r1, [r2, #0]
    5282:	428c      	cmp	r4, r1
    5284:	d119      	bne.n	52ba <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    5286:	4620      	mov	r0, r4
    5288:	f7ff fdd6 	bl	4e38 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    528c:	481b      	ldr	r0, [pc, #108]	; (52fc <z_time_slice+0xc0>)
    528e:	f7ff fb03 	bl	4898 <z_spin_unlock_valid>
    5292:	b968      	cbnz	r0, 52b0 <z_time_slice+0x74>
    5294:	4a1a      	ldr	r2, [pc, #104]	; (5300 <z_time_slice+0xc4>)
    5296:	4920      	ldr	r1, [pc, #128]	; (5318 <z_time_slice+0xdc>)
    5298:	481b      	ldr	r0, [pc, #108]	; (5308 <z_time_slice+0xcc>)
    529a:	23b9      	movs	r3, #185	; 0xb9
    529c:	f001 fcd2 	bl	6c44 <assert_print>
    52a0:	4916      	ldr	r1, [pc, #88]	; (52fc <z_time_slice+0xc0>)
    52a2:	481e      	ldr	r0, [pc, #120]	; (531c <z_time_slice+0xe0>)
    52a4:	f001 fcce 	bl	6c44 <assert_print>
    52a8:	4815      	ldr	r0, [pc, #84]	; (5300 <z_time_slice+0xc4>)
    52aa:	21b9      	movs	r1, #185	; 0xb9
    52ac:	f001 fcc3 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    52b0:	f386 8811 	msr	BASEPRI, r6
    52b4:	f3bf 8f6f 	isb	sy
}
    52b8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    52ba:	2100      	movs	r1, #0
    52bc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    52be:	4a18      	ldr	r2, [pc, #96]	; (5320 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    52c0:	6812      	ldr	r2, [r2, #0]
    52c2:	b1c2      	cbz	r2, 52f6 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    52c4:	89e2      	ldrh	r2, [r4, #14]
    52c6:	2a7f      	cmp	r2, #127	; 0x7f
    52c8:	d815      	bhi.n	52f6 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    52ca:	7b62      	ldrb	r2, [r4, #13]
    52cc:	06d2      	lsls	r2, r2, #27
    52ce:	d112      	bne.n	52f6 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    52d0:	4a14      	ldr	r2, [pc, #80]	; (5324 <z_time_slice+0xe8>)
    52d2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    52d6:	6812      	ldr	r2, [r2, #0]
    52d8:	4291      	cmp	r1, r2
    52da:	db0c      	blt.n	52f6 <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    52dc:	4a12      	ldr	r2, [pc, #72]	; (5328 <z_time_slice+0xec>)
    52de:	4294      	cmp	r4, r2
    52e0:	d009      	beq.n	52f6 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    52e2:	691a      	ldr	r2, [r3, #16]
    52e4:	42aa      	cmp	r2, r5
    52e6:	dc03      	bgt.n	52f0 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    52e8:	4620      	mov	r0, r4
    52ea:	f7ff ff53 	bl	5194 <move_thread_to_end_of_prio_q>
    52ee:	e7ca      	b.n	5286 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    52f0:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    52f2:	611a      	str	r2, [r3, #16]
    52f4:	e7ca      	b.n	528c <z_time_slice+0x50>
    52f6:	2200      	movs	r2, #0
    52f8:	e7fb      	b.n	52f2 <z_time_slice+0xb6>
    52fa:	bf00      	nop
    52fc:	20000b7c 	.word	0x20000b7c
    5300:	00007a94 	.word	0x00007a94
    5304:	00007aed 	.word	0x00007aed
    5308:	000079d4 	.word	0x000079d4
    530c:	00007b02 	.word	0x00007b02
    5310:	20000b48 	.word	0x20000b48
    5314:	20000b78 	.word	0x20000b78
    5318:	00007ac1 	.word	0x00007ac1
    531c:	00007ad8 	.word	0x00007ad8
    5320:	20000b84 	.word	0x20000b84
    5324:	20000b80 	.word	0x20000b80
    5328:	20000368 	.word	0x20000368

0000532c <ready_thread>:
{
    532c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    532e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5332:	7b43      	ldrb	r3, [r0, #13]
    5334:	2a00      	cmp	r2, #0
{
    5336:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5338:	db39      	blt.n	53ae <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    533a:	06da      	lsls	r2, r3, #27
    533c:	d137      	bne.n	53ae <ready_thread+0x82>
    533e:	6982      	ldr	r2, [r0, #24]
    5340:	2a00      	cmp	r2, #0
    5342:	d134      	bne.n	53ae <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    5344:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5348:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    534a:	4b19      	ldr	r3, [pc, #100]	; (53b0 <ready_thread+0x84>)
    534c:	4298      	cmp	r0, r3
    534e:	d109      	bne.n	5364 <ready_thread+0x38>
    5350:	4918      	ldr	r1, [pc, #96]	; (53b4 <ready_thread+0x88>)
    5352:	4819      	ldr	r0, [pc, #100]	; (53b8 <ready_thread+0x8c>)
    5354:	4a19      	ldr	r2, [pc, #100]	; (53bc <ready_thread+0x90>)
    5356:	23ba      	movs	r3, #186	; 0xba
    5358:	f001 fc74 	bl	6c44 <assert_print>
    535c:	4817      	ldr	r0, [pc, #92]	; (53bc <ready_thread+0x90>)
    535e:	21ba      	movs	r1, #186	; 0xba
    5360:	f001 fc69 	bl	6c36 <assert_post_action>
	return list->head == list;
    5364:	4a16      	ldr	r2, [pc, #88]	; (53c0 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    5366:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    536a:	f102 0520 	add.w	r5, r2, #32
    536e:	42ab      	cmp	r3, r5
    5370:	d018      	beq.n	53a4 <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5372:	b1bb      	cbz	r3, 53a4 <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    5374:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5378:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    537c:	428e      	cmp	r6, r1
    537e:	d00c      	beq.n	539a <ready_thread+0x6e>
		return b2 - b1;
    5380:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5382:	2900      	cmp	r1, #0
    5384:	dd09      	ble.n	539a <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5386:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5388:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    538c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    538e:	605c      	str	r4, [r3, #4]
}
    5390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5394:	2000      	movs	r0, #0
    5396:	f7ff bec5 	b.w	5124 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    539a:	4298      	cmp	r0, r3
    539c:	d002      	beq.n	53a4 <ready_thread+0x78>
    539e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53a0:	2b00      	cmp	r3, #0
    53a2:	d1e9      	bne.n	5378 <ready_thread+0x4c>
	node->prev = tail;
    53a4:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    53a8:	6004      	str	r4, [r0, #0]
	list->tail = node;
    53aa:	6254      	str	r4, [r2, #36]	; 0x24
}
    53ac:	e7f0      	b.n	5390 <ready_thread+0x64>
}
    53ae:	bd70      	pop	{r4, r5, r6, pc}
    53b0:	20000368 	.word	0x20000368
    53b4:	000086ad 	.word	0x000086ad
    53b8:	000079d4 	.word	0x000079d4
    53bc:	0000868b 	.word	0x0000868b
    53c0:	20000b48 	.word	0x20000b48

000053c4 <z_ready_thread>:
{
    53c4:	b538      	push	{r3, r4, r5, lr}
    53c6:	4604      	mov	r4, r0
	__asm__ volatile(
    53c8:	f04f 0320 	mov.w	r3, #32
    53cc:	f3ef 8511 	mrs	r5, BASEPRI
    53d0:	f383 8812 	msr	BASEPRI_MAX, r3
    53d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53d8:	4817      	ldr	r0, [pc, #92]	; (5438 <z_ready_thread+0x74>)
    53da:	f7ff fa4f 	bl	487c <z_spin_lock_valid>
    53de:	b968      	cbnz	r0, 53fc <z_ready_thread+0x38>
    53e0:	4a16      	ldr	r2, [pc, #88]	; (543c <z_ready_thread+0x78>)
    53e2:	4917      	ldr	r1, [pc, #92]	; (5440 <z_ready_thread+0x7c>)
    53e4:	4817      	ldr	r0, [pc, #92]	; (5444 <z_ready_thread+0x80>)
    53e6:	238e      	movs	r3, #142	; 0x8e
    53e8:	f001 fc2c 	bl	6c44 <assert_print>
    53ec:	4912      	ldr	r1, [pc, #72]	; (5438 <z_ready_thread+0x74>)
    53ee:	4816      	ldr	r0, [pc, #88]	; (5448 <z_ready_thread+0x84>)
    53f0:	f001 fc28 	bl	6c44 <assert_print>
    53f4:	4811      	ldr	r0, [pc, #68]	; (543c <z_ready_thread+0x78>)
    53f6:	218e      	movs	r1, #142	; 0x8e
    53f8:	f001 fc1d 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    53fc:	480e      	ldr	r0, [pc, #56]	; (5438 <z_ready_thread+0x74>)
    53fe:	f7ff fa5b 	bl	48b8 <z_spin_lock_set_owner>
			ready_thread(thread);
    5402:	4620      	mov	r0, r4
    5404:	f7ff ff92 	bl	532c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5408:	480b      	ldr	r0, [pc, #44]	; (5438 <z_ready_thread+0x74>)
    540a:	f7ff fa45 	bl	4898 <z_spin_unlock_valid>
    540e:	b968      	cbnz	r0, 542c <z_ready_thread+0x68>
    5410:	4a0a      	ldr	r2, [pc, #40]	; (543c <z_ready_thread+0x78>)
    5412:	490e      	ldr	r1, [pc, #56]	; (544c <z_ready_thread+0x88>)
    5414:	480b      	ldr	r0, [pc, #44]	; (5444 <z_ready_thread+0x80>)
    5416:	23b9      	movs	r3, #185	; 0xb9
    5418:	f001 fc14 	bl	6c44 <assert_print>
    541c:	4906      	ldr	r1, [pc, #24]	; (5438 <z_ready_thread+0x74>)
    541e:	480c      	ldr	r0, [pc, #48]	; (5450 <z_ready_thread+0x8c>)
    5420:	f001 fc10 	bl	6c44 <assert_print>
    5424:	4805      	ldr	r0, [pc, #20]	; (543c <z_ready_thread+0x78>)
    5426:	21b9      	movs	r1, #185	; 0xb9
    5428:	f001 fc05 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    542c:	f385 8811 	msr	BASEPRI, r5
    5430:	f3bf 8f6f 	isb	sy
}
    5434:	bd38      	pop	{r3, r4, r5, pc}
    5436:	bf00      	nop
    5438:	20000b7c 	.word	0x20000b7c
    543c:	00007a94 	.word	0x00007a94
    5440:	00007aed 	.word	0x00007aed
    5444:	000079d4 	.word	0x000079d4
    5448:	00007b02 	.word	0x00007b02
    544c:	00007ac1 	.word	0x00007ac1
    5450:	00007ad8 	.word	0x00007ad8

00005454 <z_sched_start>:
{
    5454:	b538      	push	{r3, r4, r5, lr}
    5456:	4604      	mov	r4, r0
	__asm__ volatile(
    5458:	f04f 0320 	mov.w	r3, #32
    545c:	f3ef 8511 	mrs	r5, BASEPRI
    5460:	f383 8812 	msr	BASEPRI_MAX, r3
    5464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5468:	481d      	ldr	r0, [pc, #116]	; (54e0 <z_sched_start+0x8c>)
    546a:	f7ff fa07 	bl	487c <z_spin_lock_valid>
    546e:	b968      	cbnz	r0, 548c <z_sched_start+0x38>
    5470:	4a1c      	ldr	r2, [pc, #112]	; (54e4 <z_sched_start+0x90>)
    5472:	491d      	ldr	r1, [pc, #116]	; (54e8 <z_sched_start+0x94>)
    5474:	481d      	ldr	r0, [pc, #116]	; (54ec <z_sched_start+0x98>)
    5476:	238e      	movs	r3, #142	; 0x8e
    5478:	f001 fbe4 	bl	6c44 <assert_print>
    547c:	4918      	ldr	r1, [pc, #96]	; (54e0 <z_sched_start+0x8c>)
    547e:	481c      	ldr	r0, [pc, #112]	; (54f0 <z_sched_start+0x9c>)
    5480:	f001 fbe0 	bl	6c44 <assert_print>
    5484:	4817      	ldr	r0, [pc, #92]	; (54e4 <z_sched_start+0x90>)
    5486:	218e      	movs	r1, #142	; 0x8e
    5488:	f001 fbd5 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    548c:	4814      	ldr	r0, [pc, #80]	; (54e0 <z_sched_start+0x8c>)
    548e:	f7ff fa13 	bl	48b8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5492:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    5494:	075a      	lsls	r2, r3, #29
    5496:	d416      	bmi.n	54c6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5498:	4811      	ldr	r0, [pc, #68]	; (54e0 <z_sched_start+0x8c>)
    549a:	f7ff f9fd 	bl	4898 <z_spin_unlock_valid>
    549e:	b968      	cbnz	r0, 54bc <z_sched_start+0x68>
    54a0:	4a10      	ldr	r2, [pc, #64]	; (54e4 <z_sched_start+0x90>)
    54a2:	4914      	ldr	r1, [pc, #80]	; (54f4 <z_sched_start+0xa0>)
    54a4:	4811      	ldr	r0, [pc, #68]	; (54ec <z_sched_start+0x98>)
    54a6:	23b9      	movs	r3, #185	; 0xb9
    54a8:	f001 fbcc 	bl	6c44 <assert_print>
    54ac:	490c      	ldr	r1, [pc, #48]	; (54e0 <z_sched_start+0x8c>)
    54ae:	4812      	ldr	r0, [pc, #72]	; (54f8 <z_sched_start+0xa4>)
    54b0:	f001 fbc8 	bl	6c44 <assert_print>
    54b4:	480b      	ldr	r0, [pc, #44]	; (54e4 <z_sched_start+0x90>)
    54b6:	21b9      	movs	r1, #185	; 0xb9
    54b8:	f001 fbbd 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    54bc:	f385 8811 	msr	BASEPRI, r5
    54c0:	f3bf 8f6f 	isb	sy
}
    54c4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    54c6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    54ca:	4620      	mov	r0, r4
    54cc:	7363      	strb	r3, [r4, #13]
    54ce:	f7ff ff2d 	bl	532c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    54d2:	4629      	mov	r1, r5
    54d4:	4802      	ldr	r0, [pc, #8]	; (54e0 <z_sched_start+0x8c>)
}
    54d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    54da:	f7ff bd27 	b.w	4f2c <z_reschedule>
    54de:	bf00      	nop
    54e0:	20000b7c 	.word	0x20000b7c
    54e4:	00007a94 	.word	0x00007a94
    54e8:	00007aed 	.word	0x00007aed
    54ec:	000079d4 	.word	0x000079d4
    54f0:	00007b02 	.word	0x00007b02
    54f4:	00007ac1 	.word	0x00007ac1
    54f8:	00007ad8 	.word	0x00007ad8

000054fc <z_thread_timeout>:
{
    54fc:	b570      	push	{r4, r5, r6, lr}
    54fe:	4604      	mov	r4, r0
	__asm__ volatile(
    5500:	f04f 0320 	mov.w	r3, #32
    5504:	f3ef 8611 	mrs	r6, BASEPRI
    5508:	f383 8812 	msr	BASEPRI_MAX, r3
    550c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5510:	4820      	ldr	r0, [pc, #128]	; (5594 <z_thread_timeout+0x98>)
    5512:	f7ff f9b3 	bl	487c <z_spin_lock_valid>
    5516:	b968      	cbnz	r0, 5534 <z_thread_timeout+0x38>
    5518:	4a1f      	ldr	r2, [pc, #124]	; (5598 <z_thread_timeout+0x9c>)
    551a:	4920      	ldr	r1, [pc, #128]	; (559c <z_thread_timeout+0xa0>)
    551c:	4820      	ldr	r0, [pc, #128]	; (55a0 <z_thread_timeout+0xa4>)
    551e:	238e      	movs	r3, #142	; 0x8e
    5520:	f001 fb90 	bl	6c44 <assert_print>
    5524:	491b      	ldr	r1, [pc, #108]	; (5594 <z_thread_timeout+0x98>)
    5526:	481f      	ldr	r0, [pc, #124]	; (55a4 <z_thread_timeout+0xa8>)
    5528:	f001 fb8c 	bl	6c44 <assert_print>
    552c:	481a      	ldr	r0, [pc, #104]	; (5598 <z_thread_timeout+0x9c>)
    552e:	218e      	movs	r1, #142	; 0x8e
    5530:	f001 fb81 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    5534:	4817      	ldr	r0, [pc, #92]	; (5594 <z_thread_timeout+0x98>)
    5536:	f7ff f9bf 	bl	48b8 <z_spin_lock_set_owner>
		if (!killed) {
    553a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    553e:	f013 0f28 	tst.w	r3, #40	; 0x28
    5542:	d110      	bne.n	5566 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5544:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5548:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    554c:	b113      	cbz	r3, 5554 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    554e:	4628      	mov	r0, r5
    5550:	f7ff fdc6 	bl	50e0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5554:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5558:	f023 0314 	bic.w	r3, r3, #20
    555c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5560:	4628      	mov	r0, r5
    5562:	f7ff fee3 	bl	532c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5566:	480b      	ldr	r0, [pc, #44]	; (5594 <z_thread_timeout+0x98>)
    5568:	f7ff f996 	bl	4898 <z_spin_unlock_valid>
    556c:	b968      	cbnz	r0, 558a <z_thread_timeout+0x8e>
    556e:	4a0a      	ldr	r2, [pc, #40]	; (5598 <z_thread_timeout+0x9c>)
    5570:	490d      	ldr	r1, [pc, #52]	; (55a8 <z_thread_timeout+0xac>)
    5572:	480b      	ldr	r0, [pc, #44]	; (55a0 <z_thread_timeout+0xa4>)
    5574:	23b9      	movs	r3, #185	; 0xb9
    5576:	f001 fb65 	bl	6c44 <assert_print>
    557a:	4906      	ldr	r1, [pc, #24]	; (5594 <z_thread_timeout+0x98>)
    557c:	480b      	ldr	r0, [pc, #44]	; (55ac <z_thread_timeout+0xb0>)
    557e:	f001 fb61 	bl	6c44 <assert_print>
    5582:	4805      	ldr	r0, [pc, #20]	; (5598 <z_thread_timeout+0x9c>)
    5584:	21b9      	movs	r1, #185	; 0xb9
    5586:	f001 fb56 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    558a:	f386 8811 	msr	BASEPRI, r6
    558e:	f3bf 8f6f 	isb	sy
}
    5592:	bd70      	pop	{r4, r5, r6, pc}
    5594:	20000b7c 	.word	0x20000b7c
    5598:	00007a94 	.word	0x00007a94
    559c:	00007aed 	.word	0x00007aed
    55a0:	000079d4 	.word	0x000079d4
    55a4:	00007b02 	.word	0x00007b02
    55a8:	00007ac1 	.word	0x00007ac1
    55ac:	00007ad8 	.word	0x00007ad8

000055b0 <unready_thread>:
{
    55b0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    55b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    55b6:	7b43      	ldrb	r3, [r0, #13]
    55b8:	2a00      	cmp	r2, #0
{
    55ba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    55bc:	da06      	bge.n	55cc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    55be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55c2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    55c4:	4601      	mov	r1, r0
    55c6:	4806      	ldr	r0, [pc, #24]	; (55e0 <unready_thread+0x30>)
    55c8:	f7ff fd68 	bl	509c <z_priq_dumb_remove>
	update_cache(thread == _current);
    55cc:	4b05      	ldr	r3, [pc, #20]	; (55e4 <unready_thread+0x34>)
    55ce:	6898      	ldr	r0, [r3, #8]
    55d0:	1b03      	subs	r3, r0, r4
    55d2:	4258      	negs	r0, r3
}
    55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    55d8:	4158      	adcs	r0, r3
    55da:	f7ff bda3 	b.w	5124 <update_cache>
    55de:	bf00      	nop
    55e0:	20000b68 	.word	0x20000b68
    55e4:	20000b48 	.word	0x20000b48

000055e8 <add_to_waitq_locked>:
{
    55e8:	b538      	push	{r3, r4, r5, lr}
    55ea:	4604      	mov	r4, r0
    55ec:	460d      	mov	r5, r1
	unready_thread(thread);
    55ee:	f7ff ffdf 	bl	55b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    55f2:	7b63      	ldrb	r3, [r4, #13]
    55f4:	f043 0302 	orr.w	r3, r3, #2
    55f8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    55fa:	b1fd      	cbz	r5, 563c <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    55fc:	4b16      	ldr	r3, [pc, #88]	; (5658 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    55fe:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5600:	429c      	cmp	r4, r3
    5602:	d109      	bne.n	5618 <add_to_waitq_locked+0x30>
    5604:	4915      	ldr	r1, [pc, #84]	; (565c <add_to_waitq_locked+0x74>)
    5606:	4816      	ldr	r0, [pc, #88]	; (5660 <add_to_waitq_locked+0x78>)
    5608:	4a16      	ldr	r2, [pc, #88]	; (5664 <add_to_waitq_locked+0x7c>)
    560a:	23ba      	movs	r3, #186	; 0xba
    560c:	f001 fb1a 	bl	6c44 <assert_print>
    5610:	4814      	ldr	r0, [pc, #80]	; (5664 <add_to_waitq_locked+0x7c>)
    5612:	21ba      	movs	r1, #186	; 0xba
    5614:	f001 fb0f 	bl	6c36 <assert_post_action>
	return list->head == list;
    5618:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    561a:	429d      	cmp	r5, r3
    561c:	d015      	beq.n	564a <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    561e:	b1a3      	cbz	r3, 564a <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    5620:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5624:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5628:	4291      	cmp	r1, r2
    562a:	d008      	beq.n	563e <add_to_waitq_locked+0x56>
		return b2 - b1;
    562c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    562e:	2a00      	cmp	r2, #0
    5630:	dd05      	ble.n	563e <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    5632:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5634:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5638:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    563a:	605c      	str	r4, [r3, #4]
}
    563c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    563e:	686a      	ldr	r2, [r5, #4]
    5640:	4293      	cmp	r3, r2
    5642:	d002      	beq.n	564a <add_to_waitq_locked+0x62>
    5644:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5646:	2b00      	cmp	r3, #0
    5648:	d1ec      	bne.n	5624 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    564a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    564c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5650:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5652:	606c      	str	r4, [r5, #4]
}
    5654:	e7f2      	b.n	563c <add_to_waitq_locked+0x54>
    5656:	bf00      	nop
    5658:	20000368 	.word	0x20000368
    565c:	000086ad 	.word	0x000086ad
    5660:	000079d4 	.word	0x000079d4
    5664:	0000868b 	.word	0x0000868b

00005668 <pend>:
{
    5668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    566c:	4604      	mov	r4, r0
    566e:	4688      	mov	r8, r1
    5670:	4616      	mov	r6, r2
    5672:	461d      	mov	r5, r3
	__asm__ volatile(
    5674:	f04f 0320 	mov.w	r3, #32
    5678:	f3ef 8711 	mrs	r7, BASEPRI
    567c:	f383 8812 	msr	BASEPRI_MAX, r3
    5680:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5684:	481f      	ldr	r0, [pc, #124]	; (5704 <pend+0x9c>)
    5686:	f7ff f8f9 	bl	487c <z_spin_lock_valid>
    568a:	b968      	cbnz	r0, 56a8 <pend+0x40>
    568c:	4a1e      	ldr	r2, [pc, #120]	; (5708 <pend+0xa0>)
    568e:	491f      	ldr	r1, [pc, #124]	; (570c <pend+0xa4>)
    5690:	481f      	ldr	r0, [pc, #124]	; (5710 <pend+0xa8>)
    5692:	238e      	movs	r3, #142	; 0x8e
    5694:	f001 fad6 	bl	6c44 <assert_print>
    5698:	491a      	ldr	r1, [pc, #104]	; (5704 <pend+0x9c>)
    569a:	481e      	ldr	r0, [pc, #120]	; (5714 <pend+0xac>)
    569c:	f001 fad2 	bl	6c44 <assert_print>
    56a0:	4819      	ldr	r0, [pc, #100]	; (5708 <pend+0xa0>)
    56a2:	218e      	movs	r1, #142	; 0x8e
    56a4:	f001 fac7 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    56a8:	4816      	ldr	r0, [pc, #88]	; (5704 <pend+0x9c>)
    56aa:	f7ff f905 	bl	48b8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    56ae:	4620      	mov	r0, r4
    56b0:	4641      	mov	r1, r8
    56b2:	f7ff ff99 	bl	55e8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56b6:	4813      	ldr	r0, [pc, #76]	; (5704 <pend+0x9c>)
    56b8:	f7ff f8ee 	bl	4898 <z_spin_unlock_valid>
    56bc:	b968      	cbnz	r0, 56da <pend+0x72>
    56be:	4a12      	ldr	r2, [pc, #72]	; (5708 <pend+0xa0>)
    56c0:	4915      	ldr	r1, [pc, #84]	; (5718 <pend+0xb0>)
    56c2:	4813      	ldr	r0, [pc, #76]	; (5710 <pend+0xa8>)
    56c4:	23b9      	movs	r3, #185	; 0xb9
    56c6:	f001 fabd 	bl	6c44 <assert_print>
    56ca:	490e      	ldr	r1, [pc, #56]	; (5704 <pend+0x9c>)
    56cc:	4813      	ldr	r0, [pc, #76]	; (571c <pend+0xb4>)
    56ce:	f001 fab9 	bl	6c44 <assert_print>
    56d2:	480d      	ldr	r0, [pc, #52]	; (5708 <pend+0xa0>)
    56d4:	21b9      	movs	r1, #185	; 0xb9
    56d6:	f001 faae 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    56da:	f387 8811 	msr	BASEPRI, r7
    56de:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    56e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    56e6:	bf08      	it	eq
    56e8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    56ec:	d008      	beq.n	5700 <pend+0x98>
    56ee:	4632      	mov	r2, r6
    56f0:	462b      	mov	r3, r5
    56f2:	f104 0018 	add.w	r0, r4, #24
    56f6:	490a      	ldr	r1, [pc, #40]	; (5720 <pend+0xb8>)
}
    56f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    56fc:	f000 bcbc 	b.w	6078 <z_add_timeout>
    5700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5704:	20000b7c 	.word	0x20000b7c
    5708:	00007a94 	.word	0x00007a94
    570c:	00007aed 	.word	0x00007aed
    5710:	000079d4 	.word	0x000079d4
    5714:	00007b02 	.word	0x00007b02
    5718:	00007ac1 	.word	0x00007ac1
    571c:	00007ad8 	.word	0x00007ad8
    5720:	000054fd 	.word	0x000054fd

00005724 <z_pend_curr>:
{
    5724:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5726:	4b11      	ldr	r3, [pc, #68]	; (576c <z_pend_curr+0x48>)
{
    5728:	4604      	mov	r4, r0
	pending_current = _current;
    572a:	6898      	ldr	r0, [r3, #8]
    572c:	4b10      	ldr	r3, [pc, #64]	; (5770 <z_pend_curr+0x4c>)
{
    572e:	460d      	mov	r5, r1
	pending_current = _current;
    5730:	6018      	str	r0, [r3, #0]
{
    5732:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5738:	f7ff ff96 	bl	5668 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    573c:	4620      	mov	r0, r4
    573e:	f7ff f8ab 	bl	4898 <z_spin_unlock_valid>
    5742:	b968      	cbnz	r0, 5760 <z_pend_curr+0x3c>
    5744:	4a0b      	ldr	r2, [pc, #44]	; (5774 <z_pend_curr+0x50>)
    5746:	490c      	ldr	r1, [pc, #48]	; (5778 <z_pend_curr+0x54>)
    5748:	480c      	ldr	r0, [pc, #48]	; (577c <z_pend_curr+0x58>)
    574a:	23d0      	movs	r3, #208	; 0xd0
    574c:	f001 fa7a 	bl	6c44 <assert_print>
    5750:	480b      	ldr	r0, [pc, #44]	; (5780 <z_pend_curr+0x5c>)
    5752:	4621      	mov	r1, r4
    5754:	f001 fa76 	bl	6c44 <assert_print>
    5758:	4806      	ldr	r0, [pc, #24]	; (5774 <z_pend_curr+0x50>)
    575a:	21d0      	movs	r1, #208	; 0xd0
    575c:	f001 fa6b 	bl	6c36 <assert_post_action>
    5760:	4628      	mov	r0, r5
}
    5762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5766:	f7fc b999 	b.w	1a9c <arch_swap>
    576a:	bf00      	nop
    576c:	20000b48 	.word	0x20000b48
    5770:	20000b78 	.word	0x20000b78
    5774:	00007a94 	.word	0x00007a94
    5778:	00007ac1 	.word	0x00007ac1
    577c:	000079d4 	.word	0x000079d4
    5780:	00007ad8 	.word	0x00007ad8

00005784 <z_set_prio>:
{
    5784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5786:	4604      	mov	r4, r0
    5788:	460d      	mov	r5, r1
	__asm__ volatile(
    578a:	f04f 0320 	mov.w	r3, #32
    578e:	f3ef 8611 	mrs	r6, BASEPRI
    5792:	f383 8812 	msr	BASEPRI_MAX, r3
    5796:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    579a:	483a      	ldr	r0, [pc, #232]	; (5884 <z_set_prio+0x100>)
    579c:	f7ff f86e 	bl	487c <z_spin_lock_valid>
    57a0:	b968      	cbnz	r0, 57be <z_set_prio+0x3a>
    57a2:	4a39      	ldr	r2, [pc, #228]	; (5888 <z_set_prio+0x104>)
    57a4:	4939      	ldr	r1, [pc, #228]	; (588c <z_set_prio+0x108>)
    57a6:	483a      	ldr	r0, [pc, #232]	; (5890 <z_set_prio+0x10c>)
    57a8:	238e      	movs	r3, #142	; 0x8e
    57aa:	f001 fa4b 	bl	6c44 <assert_print>
    57ae:	4935      	ldr	r1, [pc, #212]	; (5884 <z_set_prio+0x100>)
    57b0:	4838      	ldr	r0, [pc, #224]	; (5894 <z_set_prio+0x110>)
    57b2:	f001 fa47 	bl	6c44 <assert_print>
    57b6:	4834      	ldr	r0, [pc, #208]	; (5888 <z_set_prio+0x104>)
    57b8:	218e      	movs	r1, #142	; 0x8e
    57ba:	f001 fa3c 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    57be:	4831      	ldr	r0, [pc, #196]	; (5884 <z_set_prio+0x100>)
    57c0:	f7ff f87a 	bl	48b8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    57c4:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    57c6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    57c8:	b26d      	sxtb	r5, r5
    57ca:	d157      	bne.n	587c <z_set_prio+0xf8>
		if (need_sched) {
    57cc:	69a2      	ldr	r2, [r4, #24]
    57ce:	2a00      	cmp	r2, #0
    57d0:	d154      	bne.n	587c <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    57d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57d6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    57d8:	482f      	ldr	r0, [pc, #188]	; (5898 <z_set_prio+0x114>)
    57da:	4621      	mov	r1, r4
    57dc:	f7ff fc5e 	bl	509c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    57e0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    57e2:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    57e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57e8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    57ea:	4b2c      	ldr	r3, [pc, #176]	; (589c <z_set_prio+0x118>)
    57ec:	429c      	cmp	r4, r3
    57ee:	d109      	bne.n	5804 <z_set_prio+0x80>
    57f0:	492b      	ldr	r1, [pc, #172]	; (58a0 <z_set_prio+0x11c>)
    57f2:	4827      	ldr	r0, [pc, #156]	; (5890 <z_set_prio+0x10c>)
    57f4:	4a2b      	ldr	r2, [pc, #172]	; (58a4 <z_set_prio+0x120>)
    57f6:	23ba      	movs	r3, #186	; 0xba
    57f8:	f001 fa24 	bl	6c44 <assert_print>
    57fc:	4829      	ldr	r0, [pc, #164]	; (58a4 <z_set_prio+0x120>)
    57fe:	21ba      	movs	r1, #186	; 0xba
    5800:	f001 fa19 	bl	6c36 <assert_post_action>
	return list->head == list;
    5804:	4a28      	ldr	r2, [pc, #160]	; (58a8 <z_set_prio+0x124>)
	return (node == list->tail) ? NULL : node->next;
    5806:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    580a:	f102 0520 	add.w	r5, r2, #32
    580e:	42ab      	cmp	r3, r5
    5810:	d02f      	beq.n	5872 <z_set_prio+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5812:	b373      	cbz	r3, 5872 <z_set_prio+0xee>
	int32_t b1 = thread_1->base.prio;
    5814:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5818:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    581c:	428f      	cmp	r7, r1
    581e:	d023      	beq.n	5868 <z_set_prio+0xe4>
		return b2 - b1;
    5820:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5822:	2900      	cmp	r1, #0
    5824:	dd20      	ble.n	5868 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    5826:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5828:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    582c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    582e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5830:	2001      	movs	r0, #1
    5832:	f7ff fc77 	bl	5124 <update_cache>
    5836:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5838:	4812      	ldr	r0, [pc, #72]	; (5884 <z_set_prio+0x100>)
    583a:	f7ff f82d 	bl	4898 <z_spin_unlock_valid>
    583e:	b968      	cbnz	r0, 585c <z_set_prio+0xd8>
    5840:	4a11      	ldr	r2, [pc, #68]	; (5888 <z_set_prio+0x104>)
    5842:	491a      	ldr	r1, [pc, #104]	; (58ac <z_set_prio+0x128>)
    5844:	4812      	ldr	r0, [pc, #72]	; (5890 <z_set_prio+0x10c>)
    5846:	23b9      	movs	r3, #185	; 0xb9
    5848:	f001 f9fc 	bl	6c44 <assert_print>
    584c:	490d      	ldr	r1, [pc, #52]	; (5884 <z_set_prio+0x100>)
    584e:	4818      	ldr	r0, [pc, #96]	; (58b0 <z_set_prio+0x12c>)
    5850:	f001 f9f8 	bl	6c44 <assert_print>
    5854:	480c      	ldr	r0, [pc, #48]	; (5888 <z_set_prio+0x104>)
    5856:	21b9      	movs	r1, #185	; 0xb9
    5858:	f001 f9ed 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    585c:	f386 8811 	msr	BASEPRI, r6
    5860:	f3bf 8f6f 	isb	sy
}
    5864:	4620      	mov	r0, r4
    5866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5868:	4283      	cmp	r3, r0
    586a:	d002      	beq.n	5872 <z_set_prio+0xee>
    586c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    586e:	2b00      	cmp	r3, #0
    5870:	d1d2      	bne.n	5818 <z_set_prio+0x94>
	node->prev = tail;
    5872:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    5876:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5878:	6254      	str	r4, [r2, #36]	; 0x24
}
    587a:	e7d9      	b.n	5830 <z_set_prio+0xac>
			thread->base.prio = prio;
    587c:	73a5      	strb	r5, [r4, #14]
    587e:	2400      	movs	r4, #0
    5880:	e7da      	b.n	5838 <z_set_prio+0xb4>
    5882:	bf00      	nop
    5884:	20000b7c 	.word	0x20000b7c
    5888:	00007a94 	.word	0x00007a94
    588c:	00007aed 	.word	0x00007aed
    5890:	000079d4 	.word	0x000079d4
    5894:	00007b02 	.word	0x00007b02
    5898:	20000b68 	.word	0x20000b68
    589c:	20000368 	.word	0x20000368
    58a0:	000086ad 	.word	0x000086ad
    58a4:	0000868b 	.word	0x0000868b
    58a8:	20000b48 	.word	0x20000b48
    58ac:	00007ac1 	.word	0x00007ac1
    58b0:	00007ad8 	.word	0x00007ad8

000058b4 <z_impl_k_thread_suspend>:
{
    58b4:	b570      	push	{r4, r5, r6, lr}
    58b6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    58b8:	3018      	adds	r0, #24
    58ba:	f000 fca5 	bl	6208 <z_abort_timeout>
	__asm__ volatile(
    58be:	f04f 0320 	mov.w	r3, #32
    58c2:	f3ef 8611 	mrs	r6, BASEPRI
    58c6:	f383 8812 	msr	BASEPRI_MAX, r3
    58ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58ce:	4825      	ldr	r0, [pc, #148]	; (5964 <z_impl_k_thread_suspend+0xb0>)
    58d0:	f7fe ffd4 	bl	487c <z_spin_lock_valid>
    58d4:	b968      	cbnz	r0, 58f2 <z_impl_k_thread_suspend+0x3e>
    58d6:	4a24      	ldr	r2, [pc, #144]	; (5968 <z_impl_k_thread_suspend+0xb4>)
    58d8:	4924      	ldr	r1, [pc, #144]	; (596c <z_impl_k_thread_suspend+0xb8>)
    58da:	4825      	ldr	r0, [pc, #148]	; (5970 <z_impl_k_thread_suspend+0xbc>)
    58dc:	238e      	movs	r3, #142	; 0x8e
    58de:	f001 f9b1 	bl	6c44 <assert_print>
    58e2:	4920      	ldr	r1, [pc, #128]	; (5964 <z_impl_k_thread_suspend+0xb0>)
    58e4:	4823      	ldr	r0, [pc, #140]	; (5974 <z_impl_k_thread_suspend+0xc0>)
    58e6:	f001 f9ad 	bl	6c44 <assert_print>
    58ea:	481f      	ldr	r0, [pc, #124]	; (5968 <z_impl_k_thread_suspend+0xb4>)
    58ec:	218e      	movs	r1, #142	; 0x8e
    58ee:	f001 f9a2 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    58f2:	481c      	ldr	r0, [pc, #112]	; (5964 <z_impl_k_thread_suspend+0xb0>)
    58f4:	f7fe ffe0 	bl	48b8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    58f8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    58fc:	7b63      	ldrb	r3, [r4, #13]
    58fe:	2a00      	cmp	r2, #0
    5900:	da06      	bge.n	5910 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5906:	481c      	ldr	r0, [pc, #112]	; (5978 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5908:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    590a:	4621      	mov	r1, r4
    590c:	f7ff fbc6 	bl	509c <z_priq_dumb_remove>
		update_cache(thread == _current);
    5910:	4d1a      	ldr	r5, [pc, #104]	; (597c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5912:	7b63      	ldrb	r3, [r4, #13]
    5914:	68a8      	ldr	r0, [r5, #8]
    5916:	f043 0310 	orr.w	r3, r3, #16
    591a:	7363      	strb	r3, [r4, #13]
    591c:	1b03      	subs	r3, r0, r4
    591e:	4258      	negs	r0, r3
    5920:	4158      	adcs	r0, r3
    5922:	f7ff fbff 	bl	5124 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5926:	480f      	ldr	r0, [pc, #60]	; (5964 <z_impl_k_thread_suspend+0xb0>)
    5928:	f7fe ffb6 	bl	4898 <z_spin_unlock_valid>
    592c:	b968      	cbnz	r0, 594a <z_impl_k_thread_suspend+0x96>
    592e:	4a0e      	ldr	r2, [pc, #56]	; (5968 <z_impl_k_thread_suspend+0xb4>)
    5930:	4913      	ldr	r1, [pc, #76]	; (5980 <z_impl_k_thread_suspend+0xcc>)
    5932:	480f      	ldr	r0, [pc, #60]	; (5970 <z_impl_k_thread_suspend+0xbc>)
    5934:	23b9      	movs	r3, #185	; 0xb9
    5936:	f001 f985 	bl	6c44 <assert_print>
    593a:	490a      	ldr	r1, [pc, #40]	; (5964 <z_impl_k_thread_suspend+0xb0>)
    593c:	4811      	ldr	r0, [pc, #68]	; (5984 <z_impl_k_thread_suspend+0xd0>)
    593e:	f001 f981 	bl	6c44 <assert_print>
    5942:	4809      	ldr	r0, [pc, #36]	; (5968 <z_impl_k_thread_suspend+0xb4>)
    5944:	21b9      	movs	r1, #185	; 0xb9
    5946:	f001 f976 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    594a:	f386 8811 	msr	BASEPRI, r6
    594e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5952:	68ab      	ldr	r3, [r5, #8]
    5954:	42a3      	cmp	r3, r4
    5956:	d103      	bne.n	5960 <z_impl_k_thread_suspend+0xac>
}
    5958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    595c:	f001 bcd9 	b.w	7312 <z_reschedule_unlocked>
}
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	bf00      	nop
    5964:	20000b7c 	.word	0x20000b7c
    5968:	00007a94 	.word	0x00007a94
    596c:	00007aed 	.word	0x00007aed
    5970:	000079d4 	.word	0x000079d4
    5974:	00007b02 	.word	0x00007b02
    5978:	20000b68 	.word	0x20000b68
    597c:	20000b48 	.word	0x20000b48
    5980:	00007ac1 	.word	0x00007ac1
    5984:	00007ad8 	.word	0x00007ad8

00005988 <k_sched_unlock>:
{
    5988:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    598a:	f04f 0320 	mov.w	r3, #32
    598e:	f3ef 8511 	mrs	r5, BASEPRI
    5992:	f383 8812 	msr	BASEPRI_MAX, r3
    5996:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    599a:	482d      	ldr	r0, [pc, #180]	; (5a50 <k_sched_unlock+0xc8>)
    599c:	f7fe ff6e 	bl	487c <z_spin_lock_valid>
    59a0:	b968      	cbnz	r0, 59be <k_sched_unlock+0x36>
    59a2:	4a2c      	ldr	r2, [pc, #176]	; (5a54 <k_sched_unlock+0xcc>)
    59a4:	492c      	ldr	r1, [pc, #176]	; (5a58 <k_sched_unlock+0xd0>)
    59a6:	482d      	ldr	r0, [pc, #180]	; (5a5c <k_sched_unlock+0xd4>)
    59a8:	238e      	movs	r3, #142	; 0x8e
    59aa:	f001 f94b 	bl	6c44 <assert_print>
    59ae:	4928      	ldr	r1, [pc, #160]	; (5a50 <k_sched_unlock+0xc8>)
    59b0:	482b      	ldr	r0, [pc, #172]	; (5a60 <k_sched_unlock+0xd8>)
    59b2:	f001 f947 	bl	6c44 <assert_print>
    59b6:	4827      	ldr	r0, [pc, #156]	; (5a54 <k_sched_unlock+0xcc>)
    59b8:	218e      	movs	r1, #142	; 0x8e
    59ba:	f001 f93c 	bl	6c36 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    59be:	4c29      	ldr	r4, [pc, #164]	; (5a64 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    59c0:	4823      	ldr	r0, [pc, #140]	; (5a50 <k_sched_unlock+0xc8>)
    59c2:	f7fe ff79 	bl	48b8 <z_spin_lock_set_owner>
    59c6:	68a3      	ldr	r3, [r4, #8]
    59c8:	7bdb      	ldrb	r3, [r3, #15]
    59ca:	b973      	cbnz	r3, 59ea <k_sched_unlock+0x62>
    59cc:	4926      	ldr	r1, [pc, #152]	; (5a68 <k_sched_unlock+0xe0>)
    59ce:	4a27      	ldr	r2, [pc, #156]	; (5a6c <k_sched_unlock+0xe4>)
    59d0:	4822      	ldr	r0, [pc, #136]	; (5a5c <k_sched_unlock+0xd4>)
    59d2:	f240 33bb 	movw	r3, #955	; 0x3bb
    59d6:	f001 f935 	bl	6c44 <assert_print>
    59da:	4825      	ldr	r0, [pc, #148]	; (5a70 <k_sched_unlock+0xe8>)
    59dc:	f001 f932 	bl	6c44 <assert_print>
    59e0:	4822      	ldr	r0, [pc, #136]	; (5a6c <k_sched_unlock+0xe4>)
    59e2:	f240 31bb 	movw	r1, #955	; 0x3bb
    59e6:	f001 f926 	bl	6c36 <assert_post_action>
    59ea:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    59ee:	b173      	cbz	r3, 5a0e <k_sched_unlock+0x86>
    59f0:	4920      	ldr	r1, [pc, #128]	; (5a74 <k_sched_unlock+0xec>)
    59f2:	4a1e      	ldr	r2, [pc, #120]	; (5a6c <k_sched_unlock+0xe4>)
    59f4:	4819      	ldr	r0, [pc, #100]	; (5a5c <k_sched_unlock+0xd4>)
    59f6:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    59fa:	f001 f923 	bl	6c44 <assert_print>
    59fe:	481c      	ldr	r0, [pc, #112]	; (5a70 <k_sched_unlock+0xe8>)
    5a00:	f001 f920 	bl	6c44 <assert_print>
    5a04:	4819      	ldr	r0, [pc, #100]	; (5a6c <k_sched_unlock+0xe4>)
    5a06:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    5a0a:	f001 f914 	bl	6c36 <assert_post_action>
		++_current->base.sched_locked;
    5a0e:	68a2      	ldr	r2, [r4, #8]
    5a10:	7bd3      	ldrb	r3, [r2, #15]
    5a12:	3301      	adds	r3, #1
		update_cache(0);
    5a14:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5a16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5a18:	f7ff fb84 	bl	5124 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a1c:	480c      	ldr	r0, [pc, #48]	; (5a50 <k_sched_unlock+0xc8>)
    5a1e:	f7fe ff3b 	bl	4898 <z_spin_unlock_valid>
    5a22:	b968      	cbnz	r0, 5a40 <k_sched_unlock+0xb8>
    5a24:	4a0b      	ldr	r2, [pc, #44]	; (5a54 <k_sched_unlock+0xcc>)
    5a26:	4914      	ldr	r1, [pc, #80]	; (5a78 <k_sched_unlock+0xf0>)
    5a28:	480c      	ldr	r0, [pc, #48]	; (5a5c <k_sched_unlock+0xd4>)
    5a2a:	23b9      	movs	r3, #185	; 0xb9
    5a2c:	f001 f90a 	bl	6c44 <assert_print>
    5a30:	4907      	ldr	r1, [pc, #28]	; (5a50 <k_sched_unlock+0xc8>)
    5a32:	4812      	ldr	r0, [pc, #72]	; (5a7c <k_sched_unlock+0xf4>)
    5a34:	f001 f906 	bl	6c44 <assert_print>
    5a38:	4806      	ldr	r0, [pc, #24]	; (5a54 <k_sched_unlock+0xcc>)
    5a3a:	21b9      	movs	r1, #185	; 0xb9
    5a3c:	f001 f8fb 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    5a40:	f385 8811 	msr	BASEPRI, r5
    5a44:	f3bf 8f6f 	isb	sy
}
    5a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5a4c:	f001 bc61 	b.w	7312 <z_reschedule_unlocked>
    5a50:	20000b7c 	.word	0x20000b7c
    5a54:	00007a94 	.word	0x00007a94
    5a58:	00007aed 	.word	0x00007aed
    5a5c:	000079d4 	.word	0x000079d4
    5a60:	00007b02 	.word	0x00007b02
    5a64:	20000b48 	.word	0x20000b48
    5a68:	0000870c 	.word	0x0000870c
    5a6c:	0000868b 	.word	0x0000868b
    5a70:	000085e9 	.word	0x000085e9
    5a74:	000084b3 	.word	0x000084b3
    5a78:	00007ac1 	.word	0x00007ac1
    5a7c:	00007ad8 	.word	0x00007ad8

00005a80 <z_unpend_first_thread>:
{
    5a80:	b538      	push	{r3, r4, r5, lr}
    5a82:	4604      	mov	r4, r0
	__asm__ volatile(
    5a84:	f04f 0320 	mov.w	r3, #32
    5a88:	f3ef 8511 	mrs	r5, BASEPRI
    5a8c:	f383 8812 	msr	BASEPRI_MAX, r3
    5a90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a94:	481b      	ldr	r0, [pc, #108]	; (5b04 <z_unpend_first_thread+0x84>)
    5a96:	f7fe fef1 	bl	487c <z_spin_lock_valid>
    5a9a:	b968      	cbnz	r0, 5ab8 <z_unpend_first_thread+0x38>
    5a9c:	4a1a      	ldr	r2, [pc, #104]	; (5b08 <z_unpend_first_thread+0x88>)
    5a9e:	491b      	ldr	r1, [pc, #108]	; (5b0c <z_unpend_first_thread+0x8c>)
    5aa0:	481b      	ldr	r0, [pc, #108]	; (5b10 <z_unpend_first_thread+0x90>)
    5aa2:	238e      	movs	r3, #142	; 0x8e
    5aa4:	f001 f8ce 	bl	6c44 <assert_print>
    5aa8:	4916      	ldr	r1, [pc, #88]	; (5b04 <z_unpend_first_thread+0x84>)
    5aaa:	481a      	ldr	r0, [pc, #104]	; (5b14 <z_unpend_first_thread+0x94>)
    5aac:	f001 f8ca 	bl	6c44 <assert_print>
    5ab0:	4815      	ldr	r0, [pc, #84]	; (5b08 <z_unpend_first_thread+0x88>)
    5ab2:	218e      	movs	r1, #142	; 0x8e
    5ab4:	f001 f8bf 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    5ab8:	4812      	ldr	r0, [pc, #72]	; (5b04 <z_unpend_first_thread+0x84>)
    5aba:	f7fe fefd 	bl	48b8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    5abe:	4620      	mov	r0, r4
    5ac0:	f001 fc31 	bl	7326 <z_priq_dumb_best>
		if (thread != NULL) {
    5ac4:	4604      	mov	r4, r0
    5ac6:	b128      	cbz	r0, 5ad4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5ac8:	f7ff fb0a 	bl	50e0 <unpend_thread_no_timeout>
    5acc:	f104 0018 	add.w	r0, r4, #24
    5ad0:	f000 fb9a 	bl	6208 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ad4:	480b      	ldr	r0, [pc, #44]	; (5b04 <z_unpend_first_thread+0x84>)
    5ad6:	f7fe fedf 	bl	4898 <z_spin_unlock_valid>
    5ada:	b968      	cbnz	r0, 5af8 <z_unpend_first_thread+0x78>
    5adc:	4a0a      	ldr	r2, [pc, #40]	; (5b08 <z_unpend_first_thread+0x88>)
    5ade:	490e      	ldr	r1, [pc, #56]	; (5b18 <z_unpend_first_thread+0x98>)
    5ae0:	480b      	ldr	r0, [pc, #44]	; (5b10 <z_unpend_first_thread+0x90>)
    5ae2:	23b9      	movs	r3, #185	; 0xb9
    5ae4:	f001 f8ae 	bl	6c44 <assert_print>
    5ae8:	4906      	ldr	r1, [pc, #24]	; (5b04 <z_unpend_first_thread+0x84>)
    5aea:	480c      	ldr	r0, [pc, #48]	; (5b1c <z_unpend_first_thread+0x9c>)
    5aec:	f001 f8aa 	bl	6c44 <assert_print>
    5af0:	4805      	ldr	r0, [pc, #20]	; (5b08 <z_unpend_first_thread+0x88>)
    5af2:	21b9      	movs	r1, #185	; 0xb9
    5af4:	f001 f89f 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    5af8:	f385 8811 	msr	BASEPRI, r5
    5afc:	f3bf 8f6f 	isb	sy
}
    5b00:	4620      	mov	r0, r4
    5b02:	bd38      	pop	{r3, r4, r5, pc}
    5b04:	20000b7c 	.word	0x20000b7c
    5b08:	00007a94 	.word	0x00007a94
    5b0c:	00007aed 	.word	0x00007aed
    5b10:	000079d4 	.word	0x000079d4
    5b14:	00007b02 	.word	0x00007b02
    5b18:	00007ac1 	.word	0x00007ac1
    5b1c:	00007ad8 	.word	0x00007ad8

00005b20 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5b20:	4b04      	ldr	r3, [pc, #16]	; (5b34 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5b22:	2100      	movs	r1, #0
    5b24:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5b28:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5b2c:	4608      	mov	r0, r1
    5b2e:	f7ff b997 	b.w	4e60 <k_sched_time_slice_set>
    5b32:	bf00      	nop
    5b34:	20000b48 	.word	0x20000b48

00005b38 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b3a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5b3e:	b173      	cbz	r3, 5b5e <z_impl_k_yield+0x26>
    5b40:	493f      	ldr	r1, [pc, #252]	; (5c40 <z_impl_k_yield+0x108>)
    5b42:	4a40      	ldr	r2, [pc, #256]	; (5c44 <z_impl_k_yield+0x10c>)
    5b44:	4840      	ldr	r0, [pc, #256]	; (5c48 <z_impl_k_yield+0x110>)
    5b46:	f240 5332 	movw	r3, #1330	; 0x532
    5b4a:	f001 f87b 	bl	6c44 <assert_print>
    5b4e:	483f      	ldr	r0, [pc, #252]	; (5c4c <z_impl_k_yield+0x114>)
    5b50:	f001 f878 	bl	6c44 <assert_print>
    5b54:	483b      	ldr	r0, [pc, #236]	; (5c44 <z_impl_k_yield+0x10c>)
    5b56:	f240 5132 	movw	r1, #1330	; 0x532
    5b5a:	f001 f86c 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    5b5e:	f04f 0320 	mov.w	r3, #32
    5b62:	f3ef 8611 	mrs	r6, BASEPRI
    5b66:	f383 8812 	msr	BASEPRI_MAX, r3
    5b6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b6e:	4838      	ldr	r0, [pc, #224]	; (5c50 <z_impl_k_yield+0x118>)
    5b70:	f7fe fe84 	bl	487c <z_spin_lock_valid>
    5b74:	b968      	cbnz	r0, 5b92 <z_impl_k_yield+0x5a>
    5b76:	4a37      	ldr	r2, [pc, #220]	; (5c54 <z_impl_k_yield+0x11c>)
    5b78:	4937      	ldr	r1, [pc, #220]	; (5c58 <z_impl_k_yield+0x120>)
    5b7a:	4833      	ldr	r0, [pc, #204]	; (5c48 <z_impl_k_yield+0x110>)
    5b7c:	238e      	movs	r3, #142	; 0x8e
    5b7e:	f001 f861 	bl	6c44 <assert_print>
    5b82:	4933      	ldr	r1, [pc, #204]	; (5c50 <z_impl_k_yield+0x118>)
    5b84:	4835      	ldr	r0, [pc, #212]	; (5c5c <z_impl_k_yield+0x124>)
    5b86:	f001 f85d 	bl	6c44 <assert_print>
    5b8a:	4832      	ldr	r0, [pc, #200]	; (5c54 <z_impl_k_yield+0x11c>)
    5b8c:	218e      	movs	r1, #142	; 0x8e
    5b8e:	f001 f852 	bl	6c36 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5b92:	4d33      	ldr	r5, [pc, #204]	; (5c60 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    5b94:	482e      	ldr	r0, [pc, #184]	; (5c50 <z_impl_k_yield+0x118>)
    5b96:	f7fe fe8f 	bl	48b8 <z_spin_lock_set_owner>
    5b9a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b9c:	7b4b      	ldrb	r3, [r1, #13]
    5b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ba2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ba4:	f105 0020 	add.w	r0, r5, #32
    5ba8:	f7ff fa78 	bl	509c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    5bac:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5bae:	7b63      	ldrb	r3, [r4, #13]
    5bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5bb4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5bb6:	4b2b      	ldr	r3, [pc, #172]	; (5c64 <z_impl_k_yield+0x12c>)
    5bb8:	429c      	cmp	r4, r3
    5bba:	d109      	bne.n	5bd0 <z_impl_k_yield+0x98>
    5bbc:	492a      	ldr	r1, [pc, #168]	; (5c68 <z_impl_k_yield+0x130>)
    5bbe:	4822      	ldr	r0, [pc, #136]	; (5c48 <z_impl_k_yield+0x110>)
    5bc0:	4a20      	ldr	r2, [pc, #128]	; (5c44 <z_impl_k_yield+0x10c>)
    5bc2:	23ba      	movs	r3, #186	; 0xba
    5bc4:	f001 f83e 	bl	6c44 <assert_print>
    5bc8:	481e      	ldr	r0, [pc, #120]	; (5c44 <z_impl_k_yield+0x10c>)
    5bca:	21ba      	movs	r1, #186	; 0xba
    5bcc:	f001 f833 	bl	6c36 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    5bd0:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bd4:	4825      	ldr	r0, [pc, #148]	; (5c6c <z_impl_k_yield+0x134>)
    5bd6:	4283      	cmp	r3, r0
    5bd8:	d02d      	beq.n	5c36 <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5bda:	b363      	cbz	r3, 5c36 <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    5bdc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5be0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5be4:	4297      	cmp	r7, r2
    5be6:	d021      	beq.n	5c2c <z_impl_k_yield+0xf4>
		return b2 - b1;
    5be8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5bea:	2a00      	cmp	r2, #0
    5bec:	dd1e      	ble.n	5c2c <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    5bee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5bf0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5bf4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5bf6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    5bf8:	2001      	movs	r0, #1
    5bfa:	f7ff fa93 	bl	5124 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bfe:	4814      	ldr	r0, [pc, #80]	; (5c50 <z_impl_k_yield+0x118>)
    5c00:	f7fe fe4a 	bl	4898 <z_spin_unlock_valid>
    5c04:	b968      	cbnz	r0, 5c22 <z_impl_k_yield+0xea>
    5c06:	4a13      	ldr	r2, [pc, #76]	; (5c54 <z_impl_k_yield+0x11c>)
    5c08:	4919      	ldr	r1, [pc, #100]	; (5c70 <z_impl_k_yield+0x138>)
    5c0a:	480f      	ldr	r0, [pc, #60]	; (5c48 <z_impl_k_yield+0x110>)
    5c0c:	23d0      	movs	r3, #208	; 0xd0
    5c0e:	f001 f819 	bl	6c44 <assert_print>
    5c12:	490f      	ldr	r1, [pc, #60]	; (5c50 <z_impl_k_yield+0x118>)
    5c14:	4817      	ldr	r0, [pc, #92]	; (5c74 <z_impl_k_yield+0x13c>)
    5c16:	f001 f815 	bl	6c44 <assert_print>
    5c1a:	480e      	ldr	r0, [pc, #56]	; (5c54 <z_impl_k_yield+0x11c>)
    5c1c:	21d0      	movs	r1, #208	; 0xd0
    5c1e:	f001 f80a 	bl	6c36 <assert_post_action>
    5c22:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    5c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5c28:	f7fb bf38 	b.w	1a9c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5c2c:	428b      	cmp	r3, r1
    5c2e:	d002      	beq.n	5c36 <z_impl_k_yield+0xfe>
    5c30:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c32:	2b00      	cmp	r3, #0
    5c34:	d1d4      	bne.n	5be0 <z_impl_k_yield+0xa8>
	node->prev = tail;
    5c36:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    5c3a:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5c3c:	626c      	str	r4, [r5, #36]	; 0x24
}
    5c3e:	e7db      	b.n	5bf8 <z_impl_k_yield+0xc0>
    5c40:	000084b3 	.word	0x000084b3
    5c44:	0000868b 	.word	0x0000868b
    5c48:	000079d4 	.word	0x000079d4
    5c4c:	000085e9 	.word	0x000085e9
    5c50:	20000b7c 	.word	0x20000b7c
    5c54:	00007a94 	.word	0x00007a94
    5c58:	00007aed 	.word	0x00007aed
    5c5c:	00007b02 	.word	0x00007b02
    5c60:	20000b48 	.word	0x20000b48
    5c64:	20000368 	.word	0x20000368
    5c68:	000086ad 	.word	0x000086ad
    5c6c:	20000b68 	.word	0x20000b68
    5c70:	00007ac1 	.word	0x00007ac1
    5c74:	00007ad8 	.word	0x00007ad8

00005c78 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c7c:	4605      	mov	r5, r0
    5c7e:	460e      	mov	r6, r1
    5c80:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5c84:	b173      	cbz	r3, 5ca4 <z_tick_sleep+0x2c>
    5c86:	4943      	ldr	r1, [pc, #268]	; (5d94 <z_tick_sleep+0x11c>)
    5c88:	4a43      	ldr	r2, [pc, #268]	; (5d98 <z_tick_sleep+0x120>)
    5c8a:	4844      	ldr	r0, [pc, #272]	; (5d9c <z_tick_sleep+0x124>)
    5c8c:	f240 534e 	movw	r3, #1358	; 0x54e
    5c90:	f000 ffd8 	bl	6c44 <assert_print>
    5c94:	4842      	ldr	r0, [pc, #264]	; (5da0 <z_tick_sleep+0x128>)
    5c96:	f000 ffd5 	bl	6c44 <assert_print>
    5c9a:	483f      	ldr	r0, [pc, #252]	; (5d98 <z_tick_sleep+0x120>)
    5c9c:	f240 514e 	movw	r1, #1358	; 0x54e
    5ca0:	f000 ffc9 	bl	6c36 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5ca4:	ea55 0306 	orrs.w	r3, r5, r6
    5ca8:	d103      	bne.n	5cb2 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    5caa:	f7ff ff45 	bl	5b38 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5cae:	2000      	movs	r0, #0
    5cb0:	e06d      	b.n	5d8e <z_tick_sleep+0x116>
	if (Z_TICK_ABS(ticks) <= 0) {
    5cb2:	f06f 0401 	mvn.w	r4, #1
    5cb6:	1b64      	subs	r4, r4, r5
    5cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5cbc:	eb63 0306 	sbc.w	r3, r3, r6
    5cc0:	2c01      	cmp	r4, #1
    5cc2:	f173 0300 	sbcs.w	r3, r3, #0
    5cc6:	da02      	bge.n	5cce <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5cc8:	f001 fb33 	bl	7332 <sys_clock_tick_get_32>
    5ccc:	1944      	adds	r4, r0, r5
    5cce:	f04f 0320 	mov.w	r3, #32
    5cd2:	f3ef 8811 	mrs	r8, BASEPRI
    5cd6:	f383 8812 	msr	BASEPRI_MAX, r3
    5cda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5cde:	4831      	ldr	r0, [pc, #196]	; (5da4 <z_tick_sleep+0x12c>)
    5ce0:	f7fe fdcc 	bl	487c <z_spin_lock_valid>
    5ce4:	b968      	cbnz	r0, 5d02 <z_tick_sleep+0x8a>
    5ce6:	4a30      	ldr	r2, [pc, #192]	; (5da8 <z_tick_sleep+0x130>)
    5ce8:	4930      	ldr	r1, [pc, #192]	; (5dac <z_tick_sleep+0x134>)
    5cea:	482c      	ldr	r0, [pc, #176]	; (5d9c <z_tick_sleep+0x124>)
    5cec:	238e      	movs	r3, #142	; 0x8e
    5cee:	f000 ffa9 	bl	6c44 <assert_print>
    5cf2:	492c      	ldr	r1, [pc, #176]	; (5da4 <z_tick_sleep+0x12c>)
    5cf4:	482e      	ldr	r0, [pc, #184]	; (5db0 <z_tick_sleep+0x138>)
    5cf6:	f000 ffa5 	bl	6c44 <assert_print>
    5cfa:	482b      	ldr	r0, [pc, #172]	; (5da8 <z_tick_sleep+0x130>)
    5cfc:	218e      	movs	r1, #142	; 0x8e
    5cfe:	f000 ff9a 	bl	6c36 <assert_post_action>
	pending_current = _current;
    5d02:	4f2c      	ldr	r7, [pc, #176]	; (5db4 <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
    5d04:	4827      	ldr	r0, [pc, #156]	; (5da4 <z_tick_sleep+0x12c>)
    5d06:	f7fe fdd7 	bl	48b8 <z_spin_lock_set_owner>
    5d0a:	4b2b      	ldr	r3, [pc, #172]	; (5db8 <z_tick_sleep+0x140>)
    5d0c:	68b8      	ldr	r0, [r7, #8]
    5d0e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5d10:	f7ff fc4e 	bl	55b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5d14:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5d16:	4929      	ldr	r1, [pc, #164]	; (5dbc <z_tick_sleep+0x144>)
    5d18:	462a      	mov	r2, r5
    5d1a:	4633      	mov	r3, r6
    5d1c:	3018      	adds	r0, #24
    5d1e:	f000 f9ab 	bl	6078 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5d22:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d24:	481f      	ldr	r0, [pc, #124]	; (5da4 <z_tick_sleep+0x12c>)
    5d26:	7b53      	ldrb	r3, [r2, #13]
    5d28:	f043 0310 	orr.w	r3, r3, #16
    5d2c:	7353      	strb	r3, [r2, #13]
    5d2e:	f7fe fdb3 	bl	4898 <z_spin_unlock_valid>
    5d32:	b968      	cbnz	r0, 5d50 <z_tick_sleep+0xd8>
    5d34:	4a1c      	ldr	r2, [pc, #112]	; (5da8 <z_tick_sleep+0x130>)
    5d36:	4922      	ldr	r1, [pc, #136]	; (5dc0 <z_tick_sleep+0x148>)
    5d38:	4818      	ldr	r0, [pc, #96]	; (5d9c <z_tick_sleep+0x124>)
    5d3a:	23d0      	movs	r3, #208	; 0xd0
    5d3c:	f000 ff82 	bl	6c44 <assert_print>
    5d40:	4918      	ldr	r1, [pc, #96]	; (5da4 <z_tick_sleep+0x12c>)
    5d42:	4820      	ldr	r0, [pc, #128]	; (5dc4 <z_tick_sleep+0x14c>)
    5d44:	f000 ff7e 	bl	6c44 <assert_print>
    5d48:	4817      	ldr	r0, [pc, #92]	; (5da8 <z_tick_sleep+0x130>)
    5d4a:	21d0      	movs	r1, #208	; 0xd0
    5d4c:	f000 ff73 	bl	6c36 <assert_post_action>
    5d50:	4640      	mov	r0, r8
    5d52:	f7fb fea3 	bl	1a9c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    5d56:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5d58:	7b5b      	ldrb	r3, [r3, #13]
    5d5a:	06db      	lsls	r3, r3, #27
    5d5c:	d50e      	bpl.n	5d7c <z_tick_sleep+0x104>
    5d5e:	491a      	ldr	r1, [pc, #104]	; (5dc8 <z_tick_sleep+0x150>)
    5d60:	4a0d      	ldr	r2, [pc, #52]	; (5d98 <z_tick_sleep+0x120>)
    5d62:	480e      	ldr	r0, [pc, #56]	; (5d9c <z_tick_sleep+0x124>)
    5d64:	f240 536f 	movw	r3, #1391	; 0x56f
    5d68:	f000 ff6c 	bl	6c44 <assert_print>
    5d6c:	480c      	ldr	r0, [pc, #48]	; (5da0 <z_tick_sleep+0x128>)
    5d6e:	f000 ff69 	bl	6c44 <assert_print>
    5d72:	4809      	ldr	r0, [pc, #36]	; (5d98 <z_tick_sleep+0x120>)
    5d74:	f240 516f 	movw	r1, #1391	; 0x56f
    5d78:	f000 ff5d 	bl	6c36 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5d7c:	f001 fad9 	bl	7332 <sys_clock_tick_get_32>
    5d80:	1a20      	subs	r0, r4, r0
    5d82:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5d86:	2801      	cmp	r0, #1
    5d88:	f173 0300 	sbcs.w	r3, r3, #0
    5d8c:	db8f      	blt.n	5cae <z_tick_sleep+0x36>
}
    5d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d92:	bf00      	nop
    5d94:	000084b3 	.word	0x000084b3
    5d98:	0000868b 	.word	0x0000868b
    5d9c:	000079d4 	.word	0x000079d4
    5da0:	000085e9 	.word	0x000085e9
    5da4:	20000b7c 	.word	0x20000b7c
    5da8:	00007a94 	.word	0x00007a94
    5dac:	00007aed 	.word	0x00007aed
    5db0:	00007b02 	.word	0x00007b02
    5db4:	20000b48 	.word	0x20000b48
    5db8:	20000b78 	.word	0x20000b78
    5dbc:	000054fd 	.word	0x000054fd
    5dc0:	00007ac1 	.word	0x00007ac1
    5dc4:	00007ad8 	.word	0x00007ad8
    5dc8:	0000873d 	.word	0x0000873d

00005dcc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5dcc:	b538      	push	{r3, r4, r5, lr}
    5dce:	4605      	mov	r5, r0
    5dd0:	460c      	mov	r4, r1
    5dd2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5dd6:	b173      	cbz	r3, 5df6 <z_impl_k_sleep+0x2a>
    5dd8:	4913      	ldr	r1, [pc, #76]	; (5e28 <z_impl_k_sleep+0x5c>)
    5dda:	4a14      	ldr	r2, [pc, #80]	; (5e2c <z_impl_k_sleep+0x60>)
    5ddc:	4814      	ldr	r0, [pc, #80]	; (5e30 <z_impl_k_sleep+0x64>)
    5dde:	f240 537e 	movw	r3, #1406	; 0x57e
    5de2:	f000 ff2f 	bl	6c44 <assert_print>
    5de6:	4813      	ldr	r0, [pc, #76]	; (5e34 <z_impl_k_sleep+0x68>)
    5de8:	f000 ff2c 	bl	6c44 <assert_print>
    5dec:	480f      	ldr	r0, [pc, #60]	; (5e2c <z_impl_k_sleep+0x60>)
    5dee:	f240 517e 	movw	r1, #1406	; 0x57e
    5df2:	f000 ff20 	bl	6c36 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5df6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5dfa:	bf08      	it	eq
    5dfc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5e00:	d106      	bne.n	5e10 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    5e02:	4b0d      	ldr	r3, [pc, #52]	; (5e38 <z_impl_k_sleep+0x6c>)
    5e04:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5e06:	f7ff fd55 	bl	58b4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5e0e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    5e10:	4628      	mov	r0, r5
    5e12:	4621      	mov	r1, r4
    5e14:	f7ff ff30 	bl	5c78 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5e1c:	fb80 0303 	smull	r0, r3, r0, r3
    5e20:	0bc0      	lsrs	r0, r0, #15
    5e22:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5e26:	e7f2      	b.n	5e0e <z_impl_k_sleep+0x42>
    5e28:	000084b3 	.word	0x000084b3
    5e2c:	0000868b 	.word	0x0000868b
    5e30:	000079d4 	.word	0x000079d4
    5e34:	000085e9 	.word	0x000085e9
    5e38:	20000b48 	.word	0x20000b48

00005e3c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5e3c:	4b01      	ldr	r3, [pc, #4]	; (5e44 <z_impl_z_current_get+0x8>)
    5e3e:	6898      	ldr	r0, [r3, #8]
    5e40:	4770      	bx	lr
    5e42:	bf00      	nop
    5e44:	20000b48 	.word	0x20000b48

00005e48 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e4c:	4604      	mov	r4, r0
    5e4e:	f04f 0320 	mov.w	r3, #32
    5e52:	f3ef 8611 	mrs	r6, BASEPRI
    5e56:	f383 8812 	msr	BASEPRI_MAX, r3
    5e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e5e:	4848      	ldr	r0, [pc, #288]	; (5f80 <z_thread_abort+0x138>)
    5e60:	f7fe fd0c 	bl	487c <z_spin_lock_valid>
    5e64:	b968      	cbnz	r0, 5e82 <z_thread_abort+0x3a>
    5e66:	4a47      	ldr	r2, [pc, #284]	; (5f84 <z_thread_abort+0x13c>)
    5e68:	4947      	ldr	r1, [pc, #284]	; (5f88 <z_thread_abort+0x140>)
    5e6a:	4848      	ldr	r0, [pc, #288]	; (5f8c <z_thread_abort+0x144>)
    5e6c:	238e      	movs	r3, #142	; 0x8e
    5e6e:	f000 fee9 	bl	6c44 <assert_print>
    5e72:	4943      	ldr	r1, [pc, #268]	; (5f80 <z_thread_abort+0x138>)
    5e74:	4846      	ldr	r0, [pc, #280]	; (5f90 <z_thread_abort+0x148>)
    5e76:	f000 fee5 	bl	6c44 <assert_print>
    5e7a:	4842      	ldr	r0, [pc, #264]	; (5f84 <z_thread_abort+0x13c>)
    5e7c:	218e      	movs	r1, #142	; 0x8e
    5e7e:	f000 feda 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e82:	483f      	ldr	r0, [pc, #252]	; (5f80 <z_thread_abort+0x138>)
    5e84:	f7fe fd18 	bl	48b8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5e88:	7b63      	ldrb	r3, [r4, #13]
    5e8a:	071a      	lsls	r2, r3, #28
    5e8c:	d517      	bpl.n	5ebe <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e8e:	483c      	ldr	r0, [pc, #240]	; (5f80 <z_thread_abort+0x138>)
    5e90:	f7fe fd02 	bl	4898 <z_spin_unlock_valid>
    5e94:	b968      	cbnz	r0, 5eb2 <z_thread_abort+0x6a>
    5e96:	4a3b      	ldr	r2, [pc, #236]	; (5f84 <z_thread_abort+0x13c>)
    5e98:	493e      	ldr	r1, [pc, #248]	; (5f94 <z_thread_abort+0x14c>)
    5e9a:	483c      	ldr	r0, [pc, #240]	; (5f8c <z_thread_abort+0x144>)
    5e9c:	23b9      	movs	r3, #185	; 0xb9
    5e9e:	f000 fed1 	bl	6c44 <assert_print>
    5ea2:	4937      	ldr	r1, [pc, #220]	; (5f80 <z_thread_abort+0x138>)
    5ea4:	483c      	ldr	r0, [pc, #240]	; (5f98 <z_thread_abort+0x150>)
    5ea6:	f000 fecd 	bl	6c44 <assert_print>
    5eaa:	4836      	ldr	r0, [pc, #216]	; (5f84 <z_thread_abort+0x13c>)
    5eac:	21b9      	movs	r1, #185	; 0xb9
    5eae:	f000 fec2 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    5eb2:	f386 8811 	msr	BASEPRI, r6
    5eb6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5ebe:	f023 0220 	bic.w	r2, r3, #32
    5ec2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5ec6:	09d2      	lsrs	r2, r2, #7
    5ec8:	d142      	bne.n	5f50 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5eca:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5ecc:	68a3      	ldr	r3, [r4, #8]
    5ece:	b113      	cbz	r3, 5ed6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5ed0:	4620      	mov	r0, r4
    5ed2:	f7ff f905 	bl	50e0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5ed6:	f104 0018 	add.w	r0, r4, #24
    5eda:	f000 f995 	bl	6208 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5ede:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5ee2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5ee6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ee8:	42bd      	cmp	r5, r7
    5eea:	d001      	beq.n	5ef0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5eec:	2d00      	cmp	r5, #0
    5eee:	d139      	bne.n	5f64 <z_thread_abort+0x11c>
		update_cache(1);
    5ef0:	2001      	movs	r0, #1
    5ef2:	f7ff f917 	bl	5124 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5ef6:	4b29      	ldr	r3, [pc, #164]	; (5f9c <z_thread_abort+0x154>)
    5ef8:	689b      	ldr	r3, [r3, #8]
    5efa:	42a3      	cmp	r3, r4
    5efc:	d1c7      	bne.n	5e8e <z_thread_abort+0x46>
    5efe:	f3ef 8305 	mrs	r3, IPSR
    5f02:	2b00      	cmp	r3, #0
    5f04:	d1c3      	bne.n	5e8e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f06:	481e      	ldr	r0, [pc, #120]	; (5f80 <z_thread_abort+0x138>)
    5f08:	f7fe fcc6 	bl	4898 <z_spin_unlock_valid>
    5f0c:	b968      	cbnz	r0, 5f2a <z_thread_abort+0xe2>
    5f0e:	4a1d      	ldr	r2, [pc, #116]	; (5f84 <z_thread_abort+0x13c>)
    5f10:	4920      	ldr	r1, [pc, #128]	; (5f94 <z_thread_abort+0x14c>)
    5f12:	481e      	ldr	r0, [pc, #120]	; (5f8c <z_thread_abort+0x144>)
    5f14:	23d0      	movs	r3, #208	; 0xd0
    5f16:	f000 fe95 	bl	6c44 <assert_print>
    5f1a:	4919      	ldr	r1, [pc, #100]	; (5f80 <z_thread_abort+0x138>)
    5f1c:	481e      	ldr	r0, [pc, #120]	; (5f98 <z_thread_abort+0x150>)
    5f1e:	f000 fe91 	bl	6c44 <assert_print>
    5f22:	4818      	ldr	r0, [pc, #96]	; (5f84 <z_thread_abort+0x13c>)
    5f24:	21d0      	movs	r1, #208	; 0xd0
    5f26:	f000 fe86 	bl	6c36 <assert_post_action>
    5f2a:	4630      	mov	r0, r6
    5f2c:	f7fb fdb6 	bl	1a9c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5f30:	4a1b      	ldr	r2, [pc, #108]	; (5fa0 <z_thread_abort+0x158>)
    5f32:	491c      	ldr	r1, [pc, #112]	; (5fa4 <z_thread_abort+0x15c>)
    5f34:	4815      	ldr	r0, [pc, #84]	; (5f8c <z_thread_abort+0x144>)
    5f36:	f240 63ac 	movw	r3, #1708	; 0x6ac
    5f3a:	f000 fe83 	bl	6c44 <assert_print>
    5f3e:	481a      	ldr	r0, [pc, #104]	; (5fa8 <z_thread_abort+0x160>)
    5f40:	f000 fe80 	bl	6c44 <assert_print>
    5f44:	4816      	ldr	r0, [pc, #88]	; (5fa0 <z_thread_abort+0x158>)
    5f46:	f240 61ac 	movw	r1, #1708	; 0x6ac
    5f4a:	f000 fe74 	bl	6c36 <assert_post_action>
    5f4e:	e79e      	b.n	5e8e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f50:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5f54:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5f58:	4814      	ldr	r0, [pc, #80]	; (5fac <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f5a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5f5c:	4621      	mov	r1, r4
    5f5e:	f7ff f89d 	bl	509c <z_priq_dumb_remove>
}
    5f62:	e7b3      	b.n	5ecc <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5f64:	4628      	mov	r0, r5
    5f66:	f7ff f8bb 	bl	50e0 <unpend_thread_no_timeout>
    5f6a:	f105 0018 	add.w	r0, r5, #24
    5f6e:	f000 f94b 	bl	6208 <z_abort_timeout>
    5f72:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5f76:	4628      	mov	r0, r5
    5f78:	f7ff f9d8 	bl	532c <ready_thread>
    5f7c:	e7b3      	b.n	5ee6 <z_thread_abort+0x9e>
    5f7e:	bf00      	nop
    5f80:	20000b7c 	.word	0x20000b7c
    5f84:	00007a94 	.word	0x00007a94
    5f88:	00007aed 	.word	0x00007aed
    5f8c:	000079d4 	.word	0x000079d4
    5f90:	00007b02 	.word	0x00007b02
    5f94:	00007ac1 	.word	0x00007ac1
    5f98:	00007ad8 	.word	0x00007ad8
    5f9c:	20000b48 	.word	0x20000b48
    5fa0:	0000868b 	.word	0x0000868b
    5fa4:	00007a7c 	.word	0x00007a7c
    5fa8:	0000877d 	.word	0x0000877d
    5fac:	20000b68 	.word	0x20000b68

00005fb0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5fb0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5fb2:	4806      	ldr	r0, [pc, #24]	; (5fcc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5fb4:	4a06      	ldr	r2, [pc, #24]	; (5fd0 <z_data_copy+0x20>)
    5fb6:	4907      	ldr	r1, [pc, #28]	; (5fd4 <z_data_copy+0x24>)
    5fb8:	1a12      	subs	r2, r2, r0
    5fba:	f001 f958 	bl	726e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5fc2:	4a05      	ldr	r2, [pc, #20]	; (5fd8 <z_data_copy+0x28>)
    5fc4:	4905      	ldr	r1, [pc, #20]	; (5fdc <z_data_copy+0x2c>)
    5fc6:	4806      	ldr	r0, [pc, #24]	; (5fe0 <z_data_copy+0x30>)
    5fc8:	f001 b951 	b.w	726e <z_early_memcpy>
    5fcc:	20000000 	.word	0x20000000
    5fd0:	200001c4 	.word	0x200001c4
    5fd4:	00008850 	.word	0x00008850
    5fd8:	00000000 	.word	0x00000000
    5fdc:	00008850 	.word	0x00008850
    5fe0:	20000000 	.word	0x20000000

00005fe4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5fe4:	4b03      	ldr	r3, [pc, #12]	; (5ff4 <elapsed+0x10>)
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	b90b      	cbnz	r3, 5fee <elapsed+0xa>
    5fea:	f7fd b9a5 	b.w	3338 <sys_clock_elapsed>
}
    5fee:	2000      	movs	r0, #0
    5ff0:	4770      	bx	lr
    5ff2:	bf00      	nop
    5ff4:	20000b88 	.word	0x20000b88

00005ff8 <next_timeout>:
	return list->head == list;
    5ff8:	4b10      	ldr	r3, [pc, #64]	; (603c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5ffa:	b510      	push	{r4, lr}
    5ffc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ffe:	429c      	cmp	r4, r3
    6000:	bf08      	it	eq
    6002:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6004:	f7ff ffee 	bl	5fe4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    6008:	b1a4      	cbz	r4, 6034 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    600a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    600e:	1a1b      	subs	r3, r3, r0
    6010:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6018:	f170 0200 	sbcs.w	r2, r0, #0
    601c:	da0a      	bge.n	6034 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    601e:	2800      	cmp	r0, #0
    6020:	bfac      	ite	ge
    6022:	4618      	movge	r0, r3
    6024:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6026:	4b06      	ldr	r3, [pc, #24]	; (6040 <next_timeout+0x48>)
    6028:	691b      	ldr	r3, [r3, #16]
    602a:	b113      	cbz	r3, 6032 <next_timeout+0x3a>
    602c:	4298      	cmp	r0, r3
    602e:	bfa8      	it	ge
    6030:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6032:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6034:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6038:	e7f5      	b.n	6026 <next_timeout+0x2e>
    603a:	bf00      	nop
    603c:	200000e0 	.word	0x200000e0
    6040:	20000b48 	.word	0x20000b48

00006044 <remove_timeout>:
{
    6044:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    6046:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6048:	b168      	cbz	r0, 6066 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    604a:	4a0a      	ldr	r2, [pc, #40]	; (6074 <remove_timeout+0x30>)
    604c:	6852      	ldr	r2, [r2, #4]
    604e:	4290      	cmp	r0, r2
    6050:	d009      	beq.n	6066 <remove_timeout+0x22>
	if (next(t) != NULL) {
    6052:	b143      	cbz	r3, 6066 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6054:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6058:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    605c:	1912      	adds	r2, r2, r4
    605e:	eb41 0105 	adc.w	r1, r1, r5
    6062:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6066:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6068:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    606a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    606c:	2300      	movs	r3, #0
	node->prev = NULL;
    606e:	e9c0 3300 	strd	r3, r3, [r0]
}
    6072:	bd30      	pop	{r4, r5, pc}
    6074:	200000e0 	.word	0x200000e0

00006078 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    607c:	bf08      	it	eq
    607e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    6082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6086:	4604      	mov	r4, r0
    6088:	460e      	mov	r6, r1
    608a:	4698      	mov	r8, r3
    608c:	4615      	mov	r5, r2
    608e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6090:	f000 809e 	beq.w	61d0 <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6094:	6803      	ldr	r3, [r0, #0]
    6096:	b163      	cbz	r3, 60b2 <z_add_timeout+0x3a>
    6098:	494e      	ldr	r1, [pc, #312]	; (61d4 <z_add_timeout+0x15c>)
    609a:	4a4f      	ldr	r2, [pc, #316]	; (61d8 <z_add_timeout+0x160>)
    609c:	484f      	ldr	r0, [pc, #316]	; (61dc <z_add_timeout+0x164>)
    609e:	2363      	movs	r3, #99	; 0x63
    60a0:	f000 fdd0 	bl	6c44 <assert_print>
    60a4:	484e      	ldr	r0, [pc, #312]	; (61e0 <z_add_timeout+0x168>)
    60a6:	f000 fdcd 	bl	6c44 <assert_print>
    60aa:	484b      	ldr	r0, [pc, #300]	; (61d8 <z_add_timeout+0x160>)
    60ac:	2163      	movs	r1, #99	; 0x63
    60ae:	f000 fdc2 	bl	6c36 <assert_post_action>
	to->fn = fn;
    60b2:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    60b4:	f04f 0320 	mov.w	r3, #32
    60b8:	f3ef 8611 	mrs	r6, BASEPRI
    60bc:	f383 8812 	msr	BASEPRI_MAX, r3
    60c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60c4:	4847      	ldr	r0, [pc, #284]	; (61e4 <z_add_timeout+0x16c>)
    60c6:	f7fe fbd9 	bl	487c <z_spin_lock_valid>
    60ca:	b968      	cbnz	r0, 60e8 <z_add_timeout+0x70>
    60cc:	4a46      	ldr	r2, [pc, #280]	; (61e8 <z_add_timeout+0x170>)
    60ce:	4947      	ldr	r1, [pc, #284]	; (61ec <z_add_timeout+0x174>)
    60d0:	4842      	ldr	r0, [pc, #264]	; (61dc <z_add_timeout+0x164>)
    60d2:	238e      	movs	r3, #142	; 0x8e
    60d4:	f000 fdb6 	bl	6c44 <assert_print>
    60d8:	4942      	ldr	r1, [pc, #264]	; (61e4 <z_add_timeout+0x16c>)
    60da:	4845      	ldr	r0, [pc, #276]	; (61f0 <z_add_timeout+0x178>)
    60dc:	f000 fdb2 	bl	6c44 <assert_print>
    60e0:	4841      	ldr	r0, [pc, #260]	; (61e8 <z_add_timeout+0x170>)
    60e2:	218e      	movs	r1, #142	; 0x8e
    60e4:	f000 fda7 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    60e8:	483e      	ldr	r0, [pc, #248]	; (61e4 <z_add_timeout+0x16c>)
    60ea:	f7fe fbe5 	bl	48b8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    60ee:	f06f 0201 	mvn.w	r2, #1
    60f2:	1b53      	subs	r3, r2, r5
    60f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60f8:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    60fc:	2b00      	cmp	r3, #0
    60fe:	db1b      	blt.n	6138 <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6100:	4b3c      	ldr	r3, [pc, #240]	; (61f4 <z_add_timeout+0x17c>)
    6102:	e9d3 1300 	ldrd	r1, r3, [r3]
    6106:	1a52      	subs	r2, r2, r1
    6108:	eb60 0303 	sbc.w	r3, r0, r3
    610c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    610e:	eb63 0707 	sbc.w	r7, r3, r7
    6112:	2d01      	cmp	r5, #1
    6114:	f177 0300 	sbcs.w	r3, r7, #0
    6118:	bfbc      	itt	lt
    611a:	2501      	movlt	r5, #1
    611c:	2700      	movlt	r7, #0
    611e:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    6122:	4a35      	ldr	r2, [pc, #212]	; (61f8 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    6124:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6128:	4293      	cmp	r3, r2
    612a:	d118      	bne.n	615e <z_add_timeout+0xe6>
	node->prev = tail;
    612c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    6130:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6134:	6054      	str	r4, [r2, #4]
}
    6136:	e026      	b.n	6186 <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6138:	f7ff ff54 	bl	5fe4 <elapsed>
    613c:	3501      	adds	r5, #1
    613e:	f148 0800 	adc.w	r8, r8, #0
    6142:	182d      	adds	r5, r5, r0
    6144:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    6148:	e9c4 5004 	strd	r5, r0, [r4, #16]
    614c:	e7e9      	b.n	6122 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    614e:	1a09      	subs	r1, r1, r0
    6150:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6154:	459c      	cmp	ip, r3
    6156:	e9c4 1504 	strd	r1, r5, [r4, #16]
    615a:	d0e7      	beq.n	612c <z_add_timeout+0xb4>
    615c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    615e:	2b00      	cmp	r3, #0
    6160:	d0e4      	beq.n	612c <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
    6162:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    6166:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    616a:	4281      	cmp	r1, r0
    616c:	eb75 0e07 	sbcs.w	lr, r5, r7
    6170:	daed      	bge.n	614e <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
    6172:	1a41      	subs	r1, r0, r1
    6174:	eb67 0505 	sbc.w	r5, r7, r5
    6178:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    617c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    617e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6182:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6184:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6186:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6188:	4293      	cmp	r3, r2
    618a:	d00b      	beq.n	61a4 <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    618c:	429c      	cmp	r4, r3
    618e:	d109      	bne.n	61a4 <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6190:	f7ff ff32 	bl	5ff8 <next_timeout>

			if (next_time == 0 ||
    6194:	b118      	cbz	r0, 619e <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
    6196:	4b19      	ldr	r3, [pc, #100]	; (61fc <z_add_timeout+0x184>)
			if (next_time == 0 ||
    6198:	691b      	ldr	r3, [r3, #16]
    619a:	4283      	cmp	r3, r0
    619c:	d002      	beq.n	61a4 <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
    619e:	2100      	movs	r1, #0
    61a0:	f7fd f898 	bl	32d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61a4:	480f      	ldr	r0, [pc, #60]	; (61e4 <z_add_timeout+0x16c>)
    61a6:	f7fe fb77 	bl	4898 <z_spin_unlock_valid>
    61aa:	b968      	cbnz	r0, 61c8 <z_add_timeout+0x150>
    61ac:	4a0e      	ldr	r2, [pc, #56]	; (61e8 <z_add_timeout+0x170>)
    61ae:	4914      	ldr	r1, [pc, #80]	; (6200 <z_add_timeout+0x188>)
    61b0:	480a      	ldr	r0, [pc, #40]	; (61dc <z_add_timeout+0x164>)
    61b2:	23b9      	movs	r3, #185	; 0xb9
    61b4:	f000 fd46 	bl	6c44 <assert_print>
    61b8:	490a      	ldr	r1, [pc, #40]	; (61e4 <z_add_timeout+0x16c>)
    61ba:	4812      	ldr	r0, [pc, #72]	; (6204 <z_add_timeout+0x18c>)
    61bc:	f000 fd42 	bl	6c44 <assert_print>
    61c0:	4809      	ldr	r0, [pc, #36]	; (61e8 <z_add_timeout+0x170>)
    61c2:	21b9      	movs	r1, #185	; 0xb9
    61c4:	f000 fd37 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    61c8:	f386 8811 	msr	BASEPRI, r6
    61cc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    61d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61d4:	000087c3 	.word	0x000087c3
    61d8:	0000879f 	.word	0x0000879f
    61dc:	000079d4 	.word	0x000079d4
    61e0:	000085e9 	.word	0x000085e9
    61e4:	20000b8c 	.word	0x20000b8c
    61e8:	00007a94 	.word	0x00007a94
    61ec:	00007aed 	.word	0x00007aed
    61f0:	00007b02 	.word	0x00007b02
    61f4:	20000468 	.word	0x20000468
    61f8:	200000e0 	.word	0x200000e0
    61fc:	20000b48 	.word	0x20000b48
    6200:	00007ac1 	.word	0x00007ac1
    6204:	00007ad8 	.word	0x00007ad8

00006208 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6208:	b538      	push	{r3, r4, r5, lr}
    620a:	4604      	mov	r4, r0
	__asm__ volatile(
    620c:	f04f 0320 	mov.w	r3, #32
    6210:	f3ef 8511 	mrs	r5, BASEPRI
    6214:	f383 8812 	msr	BASEPRI_MAX, r3
    6218:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    621c:	481a      	ldr	r0, [pc, #104]	; (6288 <z_abort_timeout+0x80>)
    621e:	f7fe fb2d 	bl	487c <z_spin_lock_valid>
    6222:	b968      	cbnz	r0, 6240 <z_abort_timeout+0x38>
    6224:	4a19      	ldr	r2, [pc, #100]	; (628c <z_abort_timeout+0x84>)
    6226:	491a      	ldr	r1, [pc, #104]	; (6290 <z_abort_timeout+0x88>)
    6228:	481a      	ldr	r0, [pc, #104]	; (6294 <z_abort_timeout+0x8c>)
    622a:	238e      	movs	r3, #142	; 0x8e
    622c:	f000 fd0a 	bl	6c44 <assert_print>
    6230:	4915      	ldr	r1, [pc, #84]	; (6288 <z_abort_timeout+0x80>)
    6232:	4819      	ldr	r0, [pc, #100]	; (6298 <z_abort_timeout+0x90>)
    6234:	f000 fd06 	bl	6c44 <assert_print>
    6238:	4814      	ldr	r0, [pc, #80]	; (628c <z_abort_timeout+0x84>)
    623a:	218e      	movs	r1, #142	; 0x8e
    623c:	f000 fcfb 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    6240:	4811      	ldr	r0, [pc, #68]	; (6288 <z_abort_timeout+0x80>)
    6242:	f7fe fb39 	bl	48b8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6246:	6823      	ldr	r3, [r4, #0]
    6248:	b1db      	cbz	r3, 6282 <z_abort_timeout+0x7a>
			remove_timeout(to);
    624a:	4620      	mov	r0, r4
    624c:	f7ff fefa 	bl	6044 <remove_timeout>
			ret = 0;
    6250:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6252:	480d      	ldr	r0, [pc, #52]	; (6288 <z_abort_timeout+0x80>)
    6254:	f7fe fb20 	bl	4898 <z_spin_unlock_valid>
    6258:	b968      	cbnz	r0, 6276 <z_abort_timeout+0x6e>
    625a:	4a0c      	ldr	r2, [pc, #48]	; (628c <z_abort_timeout+0x84>)
    625c:	490f      	ldr	r1, [pc, #60]	; (629c <z_abort_timeout+0x94>)
    625e:	480d      	ldr	r0, [pc, #52]	; (6294 <z_abort_timeout+0x8c>)
    6260:	23b9      	movs	r3, #185	; 0xb9
    6262:	f000 fcef 	bl	6c44 <assert_print>
    6266:	4908      	ldr	r1, [pc, #32]	; (6288 <z_abort_timeout+0x80>)
    6268:	480d      	ldr	r0, [pc, #52]	; (62a0 <z_abort_timeout+0x98>)
    626a:	f000 fceb 	bl	6c44 <assert_print>
    626e:	4807      	ldr	r0, [pc, #28]	; (628c <z_abort_timeout+0x84>)
    6270:	21b9      	movs	r1, #185	; 0xb9
    6272:	f000 fce0 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    6276:	f385 8811 	msr	BASEPRI, r5
    627a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    627e:	4620      	mov	r0, r4
    6280:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6282:	f06f 0415 	mvn.w	r4, #21
    6286:	e7e4      	b.n	6252 <z_abort_timeout+0x4a>
    6288:	20000b8c 	.word	0x20000b8c
    628c:	00007a94 	.word	0x00007a94
    6290:	00007aed 	.word	0x00007aed
    6294:	000079d4 	.word	0x000079d4
    6298:	00007b02 	.word	0x00007b02
    629c:	00007ac1 	.word	0x00007ac1
    62a0:	00007ad8 	.word	0x00007ad8

000062a4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    62a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    62a6:	f04f 0320 	mov.w	r3, #32
    62aa:	f3ef 8511 	mrs	r5, BASEPRI
    62ae:	f383 8812 	msr	BASEPRI_MAX, r3
    62b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62b6:	4818      	ldr	r0, [pc, #96]	; (6318 <z_get_next_timeout_expiry+0x74>)
    62b8:	f7fe fae0 	bl	487c <z_spin_lock_valid>
    62bc:	b968      	cbnz	r0, 62da <z_get_next_timeout_expiry+0x36>
    62be:	4a17      	ldr	r2, [pc, #92]	; (631c <z_get_next_timeout_expiry+0x78>)
    62c0:	4917      	ldr	r1, [pc, #92]	; (6320 <z_get_next_timeout_expiry+0x7c>)
    62c2:	4818      	ldr	r0, [pc, #96]	; (6324 <z_get_next_timeout_expiry+0x80>)
    62c4:	238e      	movs	r3, #142	; 0x8e
    62c6:	f000 fcbd 	bl	6c44 <assert_print>
    62ca:	4913      	ldr	r1, [pc, #76]	; (6318 <z_get_next_timeout_expiry+0x74>)
    62cc:	4816      	ldr	r0, [pc, #88]	; (6328 <z_get_next_timeout_expiry+0x84>)
    62ce:	f000 fcb9 	bl	6c44 <assert_print>
    62d2:	4812      	ldr	r0, [pc, #72]	; (631c <z_get_next_timeout_expiry+0x78>)
    62d4:	218e      	movs	r1, #142	; 0x8e
    62d6:	f000 fcae 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    62da:	480f      	ldr	r0, [pc, #60]	; (6318 <z_get_next_timeout_expiry+0x74>)
    62dc:	f7fe faec 	bl	48b8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    62e0:	f7ff fe8a 	bl	5ff8 <next_timeout>
    62e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62e6:	480c      	ldr	r0, [pc, #48]	; (6318 <z_get_next_timeout_expiry+0x74>)
    62e8:	f7fe fad6 	bl	4898 <z_spin_unlock_valid>
    62ec:	b968      	cbnz	r0, 630a <z_get_next_timeout_expiry+0x66>
    62ee:	4a0b      	ldr	r2, [pc, #44]	; (631c <z_get_next_timeout_expiry+0x78>)
    62f0:	490e      	ldr	r1, [pc, #56]	; (632c <z_get_next_timeout_expiry+0x88>)
    62f2:	480c      	ldr	r0, [pc, #48]	; (6324 <z_get_next_timeout_expiry+0x80>)
    62f4:	23b9      	movs	r3, #185	; 0xb9
    62f6:	f000 fca5 	bl	6c44 <assert_print>
    62fa:	4907      	ldr	r1, [pc, #28]	; (6318 <z_get_next_timeout_expiry+0x74>)
    62fc:	480c      	ldr	r0, [pc, #48]	; (6330 <z_get_next_timeout_expiry+0x8c>)
    62fe:	f000 fca1 	bl	6c44 <assert_print>
    6302:	4806      	ldr	r0, [pc, #24]	; (631c <z_get_next_timeout_expiry+0x78>)
    6304:	21b9      	movs	r1, #185	; 0xb9
    6306:	f000 fc96 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    630a:	f385 8811 	msr	BASEPRI, r5
    630e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6312:	4620      	mov	r0, r4
    6314:	bd38      	pop	{r3, r4, r5, pc}
    6316:	bf00      	nop
    6318:	20000b8c 	.word	0x20000b8c
    631c:	00007a94 	.word	0x00007a94
    6320:	00007aed 	.word	0x00007aed
    6324:	000079d4 	.word	0x000079d4
    6328:	00007b02 	.word	0x00007b02
    632c:	00007ac1 	.word	0x00007ac1
    6330:	00007ad8 	.word	0x00007ad8

00006334 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6334:	b570      	push	{r4, r5, r6, lr}
    6336:	4604      	mov	r4, r0
    6338:	460d      	mov	r5, r1
	__asm__ volatile(
    633a:	f04f 0320 	mov.w	r3, #32
    633e:	f3ef 8611 	mrs	r6, BASEPRI
    6342:	f383 8812 	msr	BASEPRI_MAX, r3
    6346:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    634a:	481b      	ldr	r0, [pc, #108]	; (63b8 <z_set_timeout_expiry+0x84>)
    634c:	f7fe fa96 	bl	487c <z_spin_lock_valid>
    6350:	b968      	cbnz	r0, 636e <z_set_timeout_expiry+0x3a>
    6352:	4a1a      	ldr	r2, [pc, #104]	; (63bc <z_set_timeout_expiry+0x88>)
    6354:	491a      	ldr	r1, [pc, #104]	; (63c0 <z_set_timeout_expiry+0x8c>)
    6356:	481b      	ldr	r0, [pc, #108]	; (63c4 <z_set_timeout_expiry+0x90>)
    6358:	238e      	movs	r3, #142	; 0x8e
    635a:	f000 fc73 	bl	6c44 <assert_print>
    635e:	4916      	ldr	r1, [pc, #88]	; (63b8 <z_set_timeout_expiry+0x84>)
    6360:	4819      	ldr	r0, [pc, #100]	; (63c8 <z_set_timeout_expiry+0x94>)
    6362:	f000 fc6f 	bl	6c44 <assert_print>
    6366:	4815      	ldr	r0, [pc, #84]	; (63bc <z_set_timeout_expiry+0x88>)
    6368:	218e      	movs	r1, #142	; 0x8e
    636a:	f000 fc64 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    636e:	4812      	ldr	r0, [pc, #72]	; (63b8 <z_set_timeout_expiry+0x84>)
    6370:	f7fe faa2 	bl	48b8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6374:	f7ff fe40 	bl	5ff8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6378:	2801      	cmp	r0, #1
    637a:	dd05      	ble.n	6388 <z_set_timeout_expiry+0x54>
    637c:	42a0      	cmp	r0, r4
    637e:	db03      	blt.n	6388 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6380:	4629      	mov	r1, r5
    6382:	4620      	mov	r0, r4
    6384:	f7fc ffa6 	bl	32d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6388:	480b      	ldr	r0, [pc, #44]	; (63b8 <z_set_timeout_expiry+0x84>)
    638a:	f7fe fa85 	bl	4898 <z_spin_unlock_valid>
    638e:	b968      	cbnz	r0, 63ac <z_set_timeout_expiry+0x78>
    6390:	4a0a      	ldr	r2, [pc, #40]	; (63bc <z_set_timeout_expiry+0x88>)
    6392:	490e      	ldr	r1, [pc, #56]	; (63cc <z_set_timeout_expiry+0x98>)
    6394:	480b      	ldr	r0, [pc, #44]	; (63c4 <z_set_timeout_expiry+0x90>)
    6396:	23b9      	movs	r3, #185	; 0xb9
    6398:	f000 fc54 	bl	6c44 <assert_print>
    639c:	4906      	ldr	r1, [pc, #24]	; (63b8 <z_set_timeout_expiry+0x84>)
    639e:	480c      	ldr	r0, [pc, #48]	; (63d0 <z_set_timeout_expiry+0x9c>)
    63a0:	f000 fc50 	bl	6c44 <assert_print>
    63a4:	4805      	ldr	r0, [pc, #20]	; (63bc <z_set_timeout_expiry+0x88>)
    63a6:	21b9      	movs	r1, #185	; 0xb9
    63a8:	f000 fc45 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    63ac:	f386 8811 	msr	BASEPRI, r6
    63b0:	f3bf 8f6f 	isb	sy
		}
	}
}
    63b4:	bd70      	pop	{r4, r5, r6, pc}
    63b6:	bf00      	nop
    63b8:	20000b8c 	.word	0x20000b8c
    63bc:	00007a94 	.word	0x00007a94
    63c0:	00007aed 	.word	0x00007aed
    63c4:	000079d4 	.word	0x000079d4
    63c8:	00007b02 	.word	0x00007b02
    63cc:	00007ac1 	.word	0x00007ac1
    63d0:	00007ad8 	.word	0x00007ad8

000063d4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    63d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    63da:	f7fe ff2f 	bl	523c <z_time_slice>
	__asm__ volatile(
    63de:	f04f 0320 	mov.w	r3, #32
    63e2:	f3ef 8511 	mrs	r5, BASEPRI
    63e6:	f383 8812 	msr	BASEPRI_MAX, r3
    63ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63ee:	484c      	ldr	r0, [pc, #304]	; (6520 <sys_clock_announce+0x14c>)
    63f0:	f7fe fa44 	bl	487c <z_spin_lock_valid>
    63f4:	b968      	cbnz	r0, 6412 <sys_clock_announce+0x3e>
    63f6:	4a4b      	ldr	r2, [pc, #300]	; (6524 <sys_clock_announce+0x150>)
    63f8:	494b      	ldr	r1, [pc, #300]	; (6528 <sys_clock_announce+0x154>)
    63fa:	484c      	ldr	r0, [pc, #304]	; (652c <sys_clock_announce+0x158>)
    63fc:	238e      	movs	r3, #142	; 0x8e
    63fe:	f000 fc21 	bl	6c44 <assert_print>
    6402:	4947      	ldr	r1, [pc, #284]	; (6520 <sys_clock_announce+0x14c>)
    6404:	484a      	ldr	r0, [pc, #296]	; (6530 <sys_clock_announce+0x15c>)
    6406:	f000 fc1d 	bl	6c44 <assert_print>
    640a:	4846      	ldr	r0, [pc, #280]	; (6524 <sys_clock_announce+0x150>)
    640c:	218e      	movs	r1, #142	; 0x8e
    640e:	f000 fc12 	bl	6c36 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6412:	4f48      	ldr	r7, [pc, #288]	; (6534 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    6414:	4842      	ldr	r0, [pc, #264]	; (6520 <sys_clock_announce+0x14c>)
	return list->head == list;
    6416:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6538 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    641a:	4e48      	ldr	r6, [pc, #288]	; (653c <sys_clock_announce+0x168>)
    641c:	f7fe fa4c 	bl	48b8 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    6420:	603c      	str	r4, [r7, #0]
    6422:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6426:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6428:	4544      	cmp	r4, r8
		curr_tick += dt;
    642a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    642e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    6432:	d00b      	beq.n	644c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6434:	b154      	cbz	r4, 644c <sys_clock_announce+0x78>
    6436:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    643a:	429a      	cmp	r2, r3
    643c:	eb70 090c 	sbcs.w	r9, r0, ip
    6440:	da28      	bge.n	6494 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6442:	1a9b      	subs	r3, r3, r2
    6444:	eb6c 0c00 	sbc.w	ip, ip, r0
    6448:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    644c:	1852      	adds	r2, r2, r1
    644e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    6452:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6454:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    6458:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    645a:	f7ff fdcd 	bl	5ff8 <next_timeout>
    645e:	4621      	mov	r1, r4
    6460:	f7fc ff38 	bl	32d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6464:	482e      	ldr	r0, [pc, #184]	; (6520 <sys_clock_announce+0x14c>)
    6466:	f7fe fa17 	bl	4898 <z_spin_unlock_valid>
    646a:	b968      	cbnz	r0, 6488 <sys_clock_announce+0xb4>
    646c:	4a2d      	ldr	r2, [pc, #180]	; (6524 <sys_clock_announce+0x150>)
    646e:	4934      	ldr	r1, [pc, #208]	; (6540 <sys_clock_announce+0x16c>)
    6470:	482e      	ldr	r0, [pc, #184]	; (652c <sys_clock_announce+0x158>)
    6472:	23b9      	movs	r3, #185	; 0xb9
    6474:	f000 fbe6 	bl	6c44 <assert_print>
    6478:	4929      	ldr	r1, [pc, #164]	; (6520 <sys_clock_announce+0x14c>)
    647a:	4832      	ldr	r0, [pc, #200]	; (6544 <sys_clock_announce+0x170>)
    647c:	f000 fbe2 	bl	6c44 <assert_print>
    6480:	4828      	ldr	r0, [pc, #160]	; (6524 <sys_clock_announce+0x150>)
    6482:	21b9      	movs	r1, #185	; 0xb9
    6484:	f000 fbd7 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    6488:	f385 8811 	msr	BASEPRI, r5
    648c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6494:	1859      	adds	r1, r3, r1
    6496:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    649a:	1ad3      	subs	r3, r2, r3
    649c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    649e:	2200      	movs	r2, #0
    64a0:	2300      	movs	r3, #0
		curr_tick += dt;
    64a2:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    64a6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    64aa:	4620      	mov	r0, r4
    64ac:	f7ff fdca 	bl	6044 <remove_timeout>
    64b0:	481b      	ldr	r0, [pc, #108]	; (6520 <sys_clock_announce+0x14c>)
    64b2:	f7fe f9f1 	bl	4898 <z_spin_unlock_valid>
    64b6:	b968      	cbnz	r0, 64d4 <sys_clock_announce+0x100>
    64b8:	4a1a      	ldr	r2, [pc, #104]	; (6524 <sys_clock_announce+0x150>)
    64ba:	4921      	ldr	r1, [pc, #132]	; (6540 <sys_clock_announce+0x16c>)
    64bc:	481b      	ldr	r0, [pc, #108]	; (652c <sys_clock_announce+0x158>)
    64be:	23b9      	movs	r3, #185	; 0xb9
    64c0:	f000 fbc0 	bl	6c44 <assert_print>
    64c4:	4916      	ldr	r1, [pc, #88]	; (6520 <sys_clock_announce+0x14c>)
    64c6:	481f      	ldr	r0, [pc, #124]	; (6544 <sys_clock_announce+0x170>)
    64c8:	f000 fbbc 	bl	6c44 <assert_print>
    64cc:	4815      	ldr	r0, [pc, #84]	; (6524 <sys_clock_announce+0x150>)
    64ce:	21b9      	movs	r1, #185	; 0xb9
    64d0:	f000 fbb1 	bl	6c36 <assert_post_action>
    64d4:	f385 8811 	msr	BASEPRI, r5
    64d8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    64dc:	68a3      	ldr	r3, [r4, #8]
    64de:	4620      	mov	r0, r4
    64e0:	4798      	blx	r3
	__asm__ volatile(
    64e2:	f04f 0320 	mov.w	r3, #32
    64e6:	f3ef 8511 	mrs	r5, BASEPRI
    64ea:	f383 8812 	msr	BASEPRI_MAX, r3
    64ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64f2:	480b      	ldr	r0, [pc, #44]	; (6520 <sys_clock_announce+0x14c>)
    64f4:	f7fe f9c2 	bl	487c <z_spin_lock_valid>
    64f8:	b968      	cbnz	r0, 6516 <sys_clock_announce+0x142>
    64fa:	4a0a      	ldr	r2, [pc, #40]	; (6524 <sys_clock_announce+0x150>)
    64fc:	490a      	ldr	r1, [pc, #40]	; (6528 <sys_clock_announce+0x154>)
    64fe:	480b      	ldr	r0, [pc, #44]	; (652c <sys_clock_announce+0x158>)
    6500:	238e      	movs	r3, #142	; 0x8e
    6502:	f000 fb9f 	bl	6c44 <assert_print>
    6506:	4906      	ldr	r1, [pc, #24]	; (6520 <sys_clock_announce+0x14c>)
    6508:	4809      	ldr	r0, [pc, #36]	; (6530 <sys_clock_announce+0x15c>)
    650a:	f000 fb9b 	bl	6c44 <assert_print>
    650e:	4805      	ldr	r0, [pc, #20]	; (6524 <sys_clock_announce+0x150>)
    6510:	218e      	movs	r1, #142	; 0x8e
    6512:	f000 fb90 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    6516:	4802      	ldr	r0, [pc, #8]	; (6520 <sys_clock_announce+0x14c>)
    6518:	f7fe f9ce 	bl	48b8 <z_spin_lock_set_owner>
	return k;
    651c:	e781      	b.n	6422 <sys_clock_announce+0x4e>
    651e:	bf00      	nop
    6520:	20000b8c 	.word	0x20000b8c
    6524:	00007a94 	.word	0x00007a94
    6528:	00007aed 	.word	0x00007aed
    652c:	000079d4 	.word	0x000079d4
    6530:	00007b02 	.word	0x00007b02
    6534:	20000b88 	.word	0x20000b88
    6538:	200000e0 	.word	0x200000e0
    653c:	20000468 	.word	0x20000468
    6540:	00007ac1 	.word	0x00007ac1
    6544:	00007ad8 	.word	0x00007ad8

00006548 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6548:	b570      	push	{r4, r5, r6, lr}
    654a:	f04f 0320 	mov.w	r3, #32
    654e:	f3ef 8611 	mrs	r6, BASEPRI
    6552:	f383 8812 	msr	BASEPRI_MAX, r3
    6556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    655a:	481b      	ldr	r0, [pc, #108]	; (65c8 <sys_clock_tick_get+0x80>)
    655c:	f7fe f98e 	bl	487c <z_spin_lock_valid>
    6560:	b968      	cbnz	r0, 657e <sys_clock_tick_get+0x36>
    6562:	4a1a      	ldr	r2, [pc, #104]	; (65cc <sys_clock_tick_get+0x84>)
    6564:	491a      	ldr	r1, [pc, #104]	; (65d0 <sys_clock_tick_get+0x88>)
    6566:	481b      	ldr	r0, [pc, #108]	; (65d4 <sys_clock_tick_get+0x8c>)
    6568:	238e      	movs	r3, #142	; 0x8e
    656a:	f000 fb6b 	bl	6c44 <assert_print>
    656e:	4916      	ldr	r1, [pc, #88]	; (65c8 <sys_clock_tick_get+0x80>)
    6570:	4819      	ldr	r0, [pc, #100]	; (65d8 <sys_clock_tick_get+0x90>)
    6572:	f000 fb67 	bl	6c44 <assert_print>
    6576:	4815      	ldr	r0, [pc, #84]	; (65cc <sys_clock_tick_get+0x84>)
    6578:	218e      	movs	r1, #142	; 0x8e
    657a:	f000 fb5c 	bl	6c36 <assert_post_action>
	z_spin_lock_set_owner(l);
    657e:	4812      	ldr	r0, [pc, #72]	; (65c8 <sys_clock_tick_get+0x80>)
    6580:	f7fe f99a 	bl	48b8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6584:	f7fc fed8 	bl	3338 <sys_clock_elapsed>
    6588:	4b14      	ldr	r3, [pc, #80]	; (65dc <sys_clock_tick_get+0x94>)
    658a:	e9d3 4500 	ldrd	r4, r5, [r3]
    658e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6590:	480d      	ldr	r0, [pc, #52]	; (65c8 <sys_clock_tick_get+0x80>)
    6592:	f145 0500 	adc.w	r5, r5, #0
    6596:	f7fe f97f 	bl	4898 <z_spin_unlock_valid>
    659a:	b968      	cbnz	r0, 65b8 <sys_clock_tick_get+0x70>
    659c:	4a0b      	ldr	r2, [pc, #44]	; (65cc <sys_clock_tick_get+0x84>)
    659e:	4910      	ldr	r1, [pc, #64]	; (65e0 <sys_clock_tick_get+0x98>)
    65a0:	480c      	ldr	r0, [pc, #48]	; (65d4 <sys_clock_tick_get+0x8c>)
    65a2:	23b9      	movs	r3, #185	; 0xb9
    65a4:	f000 fb4e 	bl	6c44 <assert_print>
    65a8:	4907      	ldr	r1, [pc, #28]	; (65c8 <sys_clock_tick_get+0x80>)
    65aa:	480e      	ldr	r0, [pc, #56]	; (65e4 <sys_clock_tick_get+0x9c>)
    65ac:	f000 fb4a 	bl	6c44 <assert_print>
    65b0:	4806      	ldr	r0, [pc, #24]	; (65cc <sys_clock_tick_get+0x84>)
    65b2:	21b9      	movs	r1, #185	; 0xb9
    65b4:	f000 fb3f 	bl	6c36 <assert_post_action>
	__asm__ volatile(
    65b8:	f386 8811 	msr	BASEPRI, r6
    65bc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    65c0:	4620      	mov	r0, r4
    65c2:	4629      	mov	r1, r5
    65c4:	bd70      	pop	{r4, r5, r6, pc}
    65c6:	bf00      	nop
    65c8:	20000b8c 	.word	0x20000b8c
    65cc:	00007a94 	.word	0x00007a94
    65d0:	00007aed 	.word	0x00007aed
    65d4:	000079d4 	.word	0x000079d4
    65d8:	00007b02 	.word	0x00007b02
    65dc:	20000468 	.word	0x20000468
    65e0:	00007ac1 	.word	0x00007ac1
    65e4:	00007ad8 	.word	0x00007ad8

000065e8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    65e8:	4b01      	ldr	r3, [pc, #4]	; (65f0 <k_thread_system_pool_assign+0x8>)
    65ea:	6703      	str	r3, [r0, #112]	; 0x70
}
    65ec:	4770      	bx	lr
    65ee:	bf00      	nop
    65f0:	2000015c 	.word	0x2000015c

000065f4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    65f4:	4a02      	ldr	r2, [pc, #8]	; (6600 <boot_banner+0xc>)
    65f6:	4903      	ldr	r1, [pc, #12]	; (6604 <boot_banner+0x10>)
    65f8:	4803      	ldr	r0, [pc, #12]	; (6608 <boot_banner+0x14>)
    65fa:	f000 ba29 	b.w	6a50 <printk>
    65fe:	bf00      	nop
    6600:	000085eb 	.word	0x000085eb
    6604:	000087e3 	.word	0x000087e3
    6608:	000087f0 	.word	0x000087f0

0000660c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    660c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    660e:	4c0e      	ldr	r4, [pc, #56]	; (6648 <statics_init+0x3c>)
    6610:	4d0e      	ldr	r5, [pc, #56]	; (664c <statics_init+0x40>)
    6612:	4e0f      	ldr	r6, [pc, #60]	; (6650 <statics_init+0x44>)
    6614:	42ac      	cmp	r4, r5
    6616:	d90c      	bls.n	6632 <statics_init+0x26>
    6618:	490e      	ldr	r1, [pc, #56]	; (6654 <statics_init+0x48>)
    661a:	480f      	ldr	r0, [pc, #60]	; (6658 <statics_init+0x4c>)
    661c:	2318      	movs	r3, #24
    661e:	4632      	mov	r2, r6
    6620:	f000 fb10 	bl	6c44 <assert_print>
    6624:	480d      	ldr	r0, [pc, #52]	; (665c <statics_init+0x50>)
    6626:	f000 fb0d 	bl	6c44 <assert_print>
    662a:	2118      	movs	r1, #24
    662c:	4630      	mov	r0, r6
    662e:	f000 fb02 	bl	6c36 <assert_post_action>
    6632:	42ac      	cmp	r4, r5
    6634:	d301      	bcc.n	663a <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    6636:	2000      	movs	r0, #0
    6638:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    663a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    663e:	4620      	mov	r0, r4
    6640:	f000 fe81 	bl	7346 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6644:	3418      	adds	r4, #24
    6646:	e7e5      	b.n	6614 <statics_init+0x8>
    6648:	2000015c 	.word	0x2000015c
    664c:	20000174 	.word	0x20000174
    6650:	00008817 	.word	0x00008817
    6654:	00008839 	.word	0x00008839
    6658:	000079d4 	.word	0x000079d4
    665c:	000083c0 	.word	0x000083c0

00006660 <nrf_cc3xx_platform_init_no_rng>:
    6660:	b510      	push	{r4, lr}
    6662:	4c0a      	ldr	r4, [pc, #40]	; (668c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6664:	6823      	ldr	r3, [r4, #0]
    6666:	b11b      	cbz	r3, 6670 <nrf_cc3xx_platform_init_no_rng+0x10>
    6668:	2301      	movs	r3, #1
    666a:	6023      	str	r3, [r4, #0]
    666c:	2000      	movs	r0, #0
    666e:	bd10      	pop	{r4, pc}
    6670:	f000 f8ce 	bl	6810 <CC_LibInitNoRng>
    6674:	2800      	cmp	r0, #0
    6676:	d0f7      	beq.n	6668 <nrf_cc3xx_platform_init_no_rng+0x8>
    6678:	3801      	subs	r0, #1
    667a:	2806      	cmp	r0, #6
    667c:	d803      	bhi.n	6686 <nrf_cc3xx_platform_init_no_rng+0x26>
    667e:	4b04      	ldr	r3, [pc, #16]	; (6690 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6680:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6684:	bd10      	pop	{r4, pc}
    6686:	4803      	ldr	r0, [pc, #12]	; (6694 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6688:	bd10      	pop	{r4, pc}
    668a:	bf00      	nop
    668c:	20000b90 	.word	0x20000b90
    6690:	00007754 	.word	0x00007754
    6694:	ffff8ffe 	.word	0xffff8ffe

00006698 <nrf_cc3xx_platform_abort>:
    6698:	f3bf 8f4f 	dsb	sy
    669c:	4905      	ldr	r1, [pc, #20]	; (66b4 <nrf_cc3xx_platform_abort+0x1c>)
    669e:	4b06      	ldr	r3, [pc, #24]	; (66b8 <nrf_cc3xx_platform_abort+0x20>)
    66a0:	68ca      	ldr	r2, [r1, #12]
    66a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    66a6:	4313      	orrs	r3, r2
    66a8:	60cb      	str	r3, [r1, #12]
    66aa:	f3bf 8f4f 	dsb	sy
    66ae:	bf00      	nop
    66b0:	e7fd      	b.n	66ae <nrf_cc3xx_platform_abort+0x16>
    66b2:	bf00      	nop
    66b4:	e000ed00 	.word	0xe000ed00
    66b8:	05fa0004 	.word	0x05fa0004

000066bc <CC_PalAbort>:
    66bc:	b410      	push	{r4}
    66be:	4b09      	ldr	r3, [pc, #36]	; (66e4 <CC_PalAbort+0x28>)
    66c0:	4909      	ldr	r1, [pc, #36]	; (66e8 <CC_PalAbort+0x2c>)
    66c2:	4c0a      	ldr	r4, [pc, #40]	; (66ec <CC_PalAbort+0x30>)
    66c4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    66c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    66cc:	6849      	ldr	r1, [r1, #4]
    66ce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    66d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    66d6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    66da:	2300      	movs	r3, #0
    66dc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    66e0:	bc10      	pop	{r4}
    66e2:	4708      	bx	r1
    66e4:	5002b000 	.word	0x5002b000
    66e8:	200000e8 	.word	0x200000e8
    66ec:	5002a000 	.word	0x5002a000

000066f0 <nrf_cc3xx_platform_set_abort>:
    66f0:	e9d0 1200 	ldrd	r1, r2, [r0]
    66f4:	4b01      	ldr	r3, [pc, #4]	; (66fc <nrf_cc3xx_platform_set_abort+0xc>)
    66f6:	e9c3 1200 	strd	r1, r2, [r3]
    66fa:	4770      	bx	lr
    66fc:	200000e8 	.word	0x200000e8

00006700 <mutex_free>:
    6700:	b510      	push	{r4, lr}
    6702:	4604      	mov	r4, r0
    6704:	b130      	cbz	r0, 6714 <mutex_free+0x14>
    6706:	6863      	ldr	r3, [r4, #4]
    6708:	06db      	lsls	r3, r3, #27
    670a:	d502      	bpl.n	6712 <mutex_free+0x12>
    670c:	2300      	movs	r3, #0
    670e:	6023      	str	r3, [r4, #0]
    6710:	6063      	str	r3, [r4, #4]
    6712:	bd10      	pop	{r4, pc}
    6714:	4b02      	ldr	r3, [pc, #8]	; (6720 <mutex_free+0x20>)
    6716:	4803      	ldr	r0, [pc, #12]	; (6724 <mutex_free+0x24>)
    6718:	685b      	ldr	r3, [r3, #4]
    671a:	4798      	blx	r3
    671c:	e7f3      	b.n	6706 <mutex_free+0x6>
    671e:	bf00      	nop
    6720:	200000e8 	.word	0x200000e8
    6724:	00007770 	.word	0x00007770

00006728 <mutex_lock>:
    6728:	b1b0      	cbz	r0, 6758 <mutex_lock+0x30>
    672a:	6843      	ldr	r3, [r0, #4]
    672c:	b193      	cbz	r3, 6754 <mutex_lock+0x2c>
    672e:	06db      	lsls	r3, r3, #27
    6730:	d50e      	bpl.n	6750 <mutex_lock+0x28>
    6732:	2301      	movs	r3, #1
    6734:	e850 2f00 	ldrex	r2, [r0]
    6738:	4619      	mov	r1, r3
    673a:	e840 1c00 	strex	ip, r1, [r0]
    673e:	f09c 0f00 	teq	ip, #0
    6742:	d1f7      	bne.n	6734 <mutex_lock+0xc>
    6744:	2a01      	cmp	r2, #1
    6746:	d0f5      	beq.n	6734 <mutex_lock+0xc>
    6748:	f3bf 8f5f 	dmb	sy
    674c:	2000      	movs	r0, #0
    674e:	4770      	bx	lr
    6750:	4803      	ldr	r0, [pc, #12]	; (6760 <mutex_lock+0x38>)
    6752:	4770      	bx	lr
    6754:	4803      	ldr	r0, [pc, #12]	; (6764 <mutex_lock+0x3c>)
    6756:	4770      	bx	lr
    6758:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    675c:	4770      	bx	lr
    675e:	bf00      	nop
    6760:	ffff8fe9 	.word	0xffff8fe9
    6764:	ffff8fea 	.word	0xffff8fea

00006768 <mutex_unlock>:
    6768:	b168      	cbz	r0, 6786 <mutex_unlock+0x1e>
    676a:	6843      	ldr	r3, [r0, #4]
    676c:	b13b      	cbz	r3, 677e <mutex_unlock+0x16>
    676e:	06db      	lsls	r3, r3, #27
    6770:	d507      	bpl.n	6782 <mutex_unlock+0x1a>
    6772:	f3bf 8f5f 	dmb	sy
    6776:	2300      	movs	r3, #0
    6778:	6003      	str	r3, [r0, #0]
    677a:	4618      	mov	r0, r3
    677c:	4770      	bx	lr
    677e:	4803      	ldr	r0, [pc, #12]	; (678c <mutex_unlock+0x24>)
    6780:	4770      	bx	lr
    6782:	4803      	ldr	r0, [pc, #12]	; (6790 <mutex_unlock+0x28>)
    6784:	4770      	bx	lr
    6786:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    678a:	4770      	bx	lr
    678c:	ffff8fea 	.word	0xffff8fea
    6790:	ffff8fe9 	.word	0xffff8fe9

00006794 <mutex_init>:
    6794:	b510      	push	{r4, lr}
    6796:	4604      	mov	r4, r0
    6798:	b120      	cbz	r0, 67a4 <mutex_init+0x10>
    679a:	2200      	movs	r2, #0
    679c:	2311      	movs	r3, #17
    679e:	6022      	str	r2, [r4, #0]
    67a0:	6063      	str	r3, [r4, #4]
    67a2:	bd10      	pop	{r4, pc}
    67a4:	4801      	ldr	r0, [pc, #4]	; (67ac <mutex_init+0x18>)
    67a6:	f7ff ff89 	bl	66bc <CC_PalAbort>
    67aa:	e7f6      	b.n	679a <mutex_init+0x6>
    67ac:	00007798 	.word	0x00007798

000067b0 <nrf_cc3xx_platform_set_mutexes>:
    67b0:	b570      	push	{r4, r5, r6, lr}
    67b2:	e9d0 2300 	ldrd	r2, r3, [r0]
    67b6:	4c13      	ldr	r4, [pc, #76]	; (6804 <nrf_cc3xx_platform_set_mutexes+0x54>)
    67b8:	4d13      	ldr	r5, [pc, #76]	; (6808 <nrf_cc3xx_platform_set_mutexes+0x58>)
    67ba:	6063      	str	r3, [r4, #4]
    67bc:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    67c0:	e9c4 3002 	strd	r3, r0, [r4, #8]
    67c4:	6022      	str	r2, [r4, #0]
    67c6:	4b11      	ldr	r3, [pc, #68]	; (680c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    67c8:	6808      	ldr	r0, [r1, #0]
    67ca:	6018      	str	r0, [r3, #0]
    67cc:	6848      	ldr	r0, [r1, #4]
    67ce:	6058      	str	r0, [r3, #4]
    67d0:	6888      	ldr	r0, [r1, #8]
    67d2:	6098      	str	r0, [r3, #8]
    67d4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    67d8:	60d8      	str	r0, [r3, #12]
    67da:	6119      	str	r1, [r3, #16]
    67dc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    67e0:	06db      	lsls	r3, r3, #27
    67e2:	d50d      	bpl.n	6800 <nrf_cc3xx_platform_set_mutexes+0x50>
    67e4:	2300      	movs	r3, #0
    67e6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    67ea:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    67ee:	f505 708a 	add.w	r0, r5, #276	; 0x114
    67f2:	4790      	blx	r2
    67f4:	6823      	ldr	r3, [r4, #0]
    67f6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    67fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67fe:	4718      	bx	r3
    6800:	bd70      	pop	{r4, r5, r6, pc}
    6802:	bf00      	nop
    6804:	200000f8 	.word	0x200000f8
    6808:	20000ba8 	.word	0x20000ba8
    680c:	20000108 	.word	0x20000108

00006810 <CC_LibInitNoRng>:
    6810:	b538      	push	{r3, r4, r5, lr}
    6812:	f000 f82f 	bl	6874 <CC_HalInit>
    6816:	b120      	cbz	r0, 6822 <CC_LibInitNoRng+0x12>
    6818:	2403      	movs	r4, #3
    681a:	f000 f863 	bl	68e4 <CC_PalTerminate>
    681e:	4620      	mov	r0, r4
    6820:	bd38      	pop	{r3, r4, r5, pc}
    6822:	f000 f831 	bl	6888 <CC_PalInit>
    6826:	b998      	cbnz	r0, 6850 <CC_LibInitNoRng+0x40>
    6828:	f000 f8ac 	bl	6984 <CC_PalPowerSaveModeSelect>
    682c:	b998      	cbnz	r0, 6856 <CC_LibInitNoRng+0x46>
    682e:	4d0f      	ldr	r5, [pc, #60]	; (686c <CC_LibInitNoRng+0x5c>)
    6830:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    6834:	0e1b      	lsrs	r3, r3, #24
    6836:	2bf0      	cmp	r3, #240	; 0xf0
    6838:	d108      	bne.n	684c <CC_LibInitNoRng+0x3c>
    683a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    683e:	4b0c      	ldr	r3, [pc, #48]	; (6870 <CC_LibInitNoRng+0x60>)
    6840:	429a      	cmp	r2, r3
    6842:	d00a      	beq.n	685a <CC_LibInitNoRng+0x4a>
    6844:	2407      	movs	r4, #7
    6846:	f000 f817 	bl	6878 <CC_HalTerminate>
    684a:	e7e6      	b.n	681a <CC_LibInitNoRng+0xa>
    684c:	2406      	movs	r4, #6
    684e:	e7fa      	b.n	6846 <CC_LibInitNoRng+0x36>
    6850:	2404      	movs	r4, #4
    6852:	4620      	mov	r0, r4
    6854:	bd38      	pop	{r3, r4, r5, pc}
    6856:	2400      	movs	r4, #0
    6858:	e7f5      	b.n	6846 <CC_LibInitNoRng+0x36>
    685a:	2001      	movs	r0, #1
    685c:	f000 f892 	bl	6984 <CC_PalPowerSaveModeSelect>
    6860:	4604      	mov	r4, r0
    6862:	2800      	cmp	r0, #0
    6864:	d1f7      	bne.n	6856 <CC_LibInitNoRng+0x46>
    6866:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    686a:	e7d8      	b.n	681e <CC_LibInitNoRng+0xe>
    686c:	5002b000 	.word	0x5002b000
    6870:	20e00000 	.word	0x20e00000

00006874 <CC_HalInit>:
    6874:	2000      	movs	r0, #0
    6876:	4770      	bx	lr

00006878 <CC_HalTerminate>:
    6878:	2000      	movs	r0, #0
    687a:	4770      	bx	lr

0000687c <CC_HalMaskInterrupt>:
    687c:	4b01      	ldr	r3, [pc, #4]	; (6884 <CC_HalMaskInterrupt+0x8>)
    687e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    6882:	4770      	bx	lr
    6884:	5002b000 	.word	0x5002b000

00006888 <CC_PalInit>:
    6888:	b510      	push	{r4, lr}
    688a:	4811      	ldr	r0, [pc, #68]	; (68d0 <CC_PalInit+0x48>)
    688c:	f000 f848 	bl	6920 <CC_PalMutexCreate>
    6890:	b100      	cbz	r0, 6894 <CC_PalInit+0xc>
    6892:	bd10      	pop	{r4, pc}
    6894:	480f      	ldr	r0, [pc, #60]	; (68d4 <CC_PalInit+0x4c>)
    6896:	f000 f843 	bl	6920 <CC_PalMutexCreate>
    689a:	2800      	cmp	r0, #0
    689c:	d1f9      	bne.n	6892 <CC_PalInit+0xa>
    689e:	4c0e      	ldr	r4, [pc, #56]	; (68d8 <CC_PalInit+0x50>)
    68a0:	4620      	mov	r0, r4
    68a2:	f000 f83d 	bl	6920 <CC_PalMutexCreate>
    68a6:	2800      	cmp	r0, #0
    68a8:	d1f3      	bne.n	6892 <CC_PalInit+0xa>
    68aa:	4b0c      	ldr	r3, [pc, #48]	; (68dc <CC_PalInit+0x54>)
    68ac:	480c      	ldr	r0, [pc, #48]	; (68e0 <CC_PalInit+0x58>)
    68ae:	601c      	str	r4, [r3, #0]
    68b0:	f000 f836 	bl	6920 <CC_PalMutexCreate>
    68b4:	4601      	mov	r1, r0
    68b6:	2800      	cmp	r0, #0
    68b8:	d1eb      	bne.n	6892 <CC_PalInit+0xa>
    68ba:	f000 f82d 	bl	6918 <CC_PalDmaInit>
    68be:	4604      	mov	r4, r0
    68c0:	b108      	cbz	r0, 68c6 <CC_PalInit+0x3e>
    68c2:	4620      	mov	r0, r4
    68c4:	bd10      	pop	{r4, pc}
    68c6:	f000 f83f 	bl	6948 <CC_PalPowerSaveModeInit>
    68ca:	4620      	mov	r0, r4
    68cc:	e7fa      	b.n	68c4 <CC_PalInit+0x3c>
    68ce:	bf00      	nop
    68d0:	20000140 	.word	0x20000140
    68d4:	20000134 	.word	0x20000134
    68d8:	2000013c 	.word	0x2000013c
    68dc:	20000144 	.word	0x20000144
    68e0:	20000138 	.word	0x20000138

000068e4 <CC_PalTerminate>:
    68e4:	b508      	push	{r3, lr}
    68e6:	4808      	ldr	r0, [pc, #32]	; (6908 <CC_PalTerminate+0x24>)
    68e8:	f000 f824 	bl	6934 <CC_PalMutexDestroy>
    68ec:	4807      	ldr	r0, [pc, #28]	; (690c <CC_PalTerminate+0x28>)
    68ee:	f000 f821 	bl	6934 <CC_PalMutexDestroy>
    68f2:	4807      	ldr	r0, [pc, #28]	; (6910 <CC_PalTerminate+0x2c>)
    68f4:	f000 f81e 	bl	6934 <CC_PalMutexDestroy>
    68f8:	4806      	ldr	r0, [pc, #24]	; (6914 <CC_PalTerminate+0x30>)
    68fa:	f000 f81b 	bl	6934 <CC_PalMutexDestroy>
    68fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6902:	f000 b80b 	b.w	691c <CC_PalDmaTerminate>
    6906:	bf00      	nop
    6908:	20000140 	.word	0x20000140
    690c:	20000134 	.word	0x20000134
    6910:	2000013c 	.word	0x2000013c
    6914:	20000138 	.word	0x20000138

00006918 <CC_PalDmaInit>:
    6918:	2000      	movs	r0, #0
    691a:	4770      	bx	lr

0000691c <CC_PalDmaTerminate>:
    691c:	4770      	bx	lr
    691e:	bf00      	nop

00006920 <CC_PalMutexCreate>:
    6920:	b508      	push	{r3, lr}
    6922:	4b03      	ldr	r3, [pc, #12]	; (6930 <CC_PalMutexCreate+0x10>)
    6924:	6802      	ldr	r2, [r0, #0]
    6926:	681b      	ldr	r3, [r3, #0]
    6928:	6810      	ldr	r0, [r2, #0]
    692a:	4798      	blx	r3
    692c:	2000      	movs	r0, #0
    692e:	bd08      	pop	{r3, pc}
    6930:	200000f8 	.word	0x200000f8

00006934 <CC_PalMutexDestroy>:
    6934:	b508      	push	{r3, lr}
    6936:	4b03      	ldr	r3, [pc, #12]	; (6944 <CC_PalMutexDestroy+0x10>)
    6938:	6802      	ldr	r2, [r0, #0]
    693a:	685b      	ldr	r3, [r3, #4]
    693c:	6810      	ldr	r0, [r2, #0]
    693e:	4798      	blx	r3
    6940:	2000      	movs	r0, #0
    6942:	bd08      	pop	{r3, pc}
    6944:	200000f8 	.word	0x200000f8

00006948 <CC_PalPowerSaveModeInit>:
    6948:	b570      	push	{r4, r5, r6, lr}
    694a:	4c09      	ldr	r4, [pc, #36]	; (6970 <CC_PalPowerSaveModeInit+0x28>)
    694c:	4d09      	ldr	r5, [pc, #36]	; (6974 <CC_PalPowerSaveModeInit+0x2c>)
    694e:	6920      	ldr	r0, [r4, #16]
    6950:	68ab      	ldr	r3, [r5, #8]
    6952:	4798      	blx	r3
    6954:	b118      	cbz	r0, 695e <CC_PalPowerSaveModeInit+0x16>
    6956:	4b08      	ldr	r3, [pc, #32]	; (6978 <CC_PalPowerSaveModeInit+0x30>)
    6958:	4808      	ldr	r0, [pc, #32]	; (697c <CC_PalPowerSaveModeInit+0x34>)
    695a:	685b      	ldr	r3, [r3, #4]
    695c:	4798      	blx	r3
    695e:	4a08      	ldr	r2, [pc, #32]	; (6980 <CC_PalPowerSaveModeInit+0x38>)
    6960:	68eb      	ldr	r3, [r5, #12]
    6962:	6920      	ldr	r0, [r4, #16]
    6964:	2100      	movs	r1, #0
    6966:	6011      	str	r1, [r2, #0]
    6968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    696c:	4718      	bx	r3
    696e:	bf00      	nop
    6970:	20000108 	.word	0x20000108
    6974:	200000f8 	.word	0x200000f8
    6978:	200000e8 	.word	0x200000e8
    697c:	000077bc 	.word	0x000077bc
    6980:	20000ba4 	.word	0x20000ba4

00006984 <CC_PalPowerSaveModeSelect>:
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	4d1b      	ldr	r5, [pc, #108]	; (69f4 <CC_PalPowerSaveModeSelect+0x70>)
    6988:	4e1b      	ldr	r6, [pc, #108]	; (69f8 <CC_PalPowerSaveModeSelect+0x74>)
    698a:	4604      	mov	r4, r0
    698c:	68b2      	ldr	r2, [r6, #8]
    698e:	6928      	ldr	r0, [r5, #16]
    6990:	4790      	blx	r2
    6992:	b9f8      	cbnz	r0, 69d4 <CC_PalPowerSaveModeSelect+0x50>
    6994:	b15c      	cbz	r4, 69ae <CC_PalPowerSaveModeSelect+0x2a>
    6996:	4c19      	ldr	r4, [pc, #100]	; (69fc <CC_PalPowerSaveModeSelect+0x78>)
    6998:	6823      	ldr	r3, [r4, #0]
    699a:	b1b3      	cbz	r3, 69ca <CC_PalPowerSaveModeSelect+0x46>
    699c:	2b01      	cmp	r3, #1
    699e:	d01b      	beq.n	69d8 <CC_PalPowerSaveModeSelect+0x54>
    69a0:	3b01      	subs	r3, #1
    69a2:	6023      	str	r3, [r4, #0]
    69a4:	6928      	ldr	r0, [r5, #16]
    69a6:	68f3      	ldr	r3, [r6, #12]
    69a8:	4798      	blx	r3
    69aa:	2000      	movs	r0, #0
    69ac:	bd70      	pop	{r4, r5, r6, pc}
    69ae:	4c13      	ldr	r4, [pc, #76]	; (69fc <CC_PalPowerSaveModeSelect+0x78>)
    69b0:	6821      	ldr	r1, [r4, #0]
    69b2:	b941      	cbnz	r1, 69c6 <CC_PalPowerSaveModeSelect+0x42>
    69b4:	4b12      	ldr	r3, [pc, #72]	; (6a00 <CC_PalPowerSaveModeSelect+0x7c>)
    69b6:	2201      	movs	r2, #1
    69b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    69bc:	4a11      	ldr	r2, [pc, #68]	; (6a04 <CC_PalPowerSaveModeSelect+0x80>)
    69be:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    69c2:	2b00      	cmp	r3, #0
    69c4:	d1fb      	bne.n	69be <CC_PalPowerSaveModeSelect+0x3a>
    69c6:	3101      	adds	r1, #1
    69c8:	6021      	str	r1, [r4, #0]
    69ca:	68f3      	ldr	r3, [r6, #12]
    69cc:	6928      	ldr	r0, [r5, #16]
    69ce:	4798      	blx	r3
    69d0:	2000      	movs	r0, #0
    69d2:	bd70      	pop	{r4, r5, r6, pc}
    69d4:	480c      	ldr	r0, [pc, #48]	; (6a08 <CC_PalPowerSaveModeSelect+0x84>)
    69d6:	bd70      	pop	{r4, r5, r6, pc}
    69d8:	4a0a      	ldr	r2, [pc, #40]	; (6a04 <CC_PalPowerSaveModeSelect+0x80>)
    69da:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    69de:	2b00      	cmp	r3, #0
    69e0:	d1fb      	bne.n	69da <CC_PalPowerSaveModeSelect+0x56>
    69e2:	4a07      	ldr	r2, [pc, #28]	; (6a00 <CC_PalPowerSaveModeSelect+0x7c>)
    69e4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    69e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    69ec:	f7ff ff46 	bl	687c <CC_HalMaskInterrupt>
    69f0:	6823      	ldr	r3, [r4, #0]
    69f2:	e7d5      	b.n	69a0 <CC_PalPowerSaveModeSelect+0x1c>
    69f4:	20000108 	.word	0x20000108
    69f8:	200000f8 	.word	0x200000f8
    69fc:	20000ba4 	.word	0x20000ba4
    6a00:	5002a000 	.word	0x5002a000
    6a04:	5002b000 	.word	0x5002b000
    6a08:	ffff8fe9 	.word	0xffff8fe9

00006a0c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6a0c:	4770      	bx	lr

00006a0e <k_uptime_get>:
{
    6a0e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    6a10:	f000 fc93 	bl	733a <z_impl_k_uptime_ticks>
    6a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6a18:	fba0 0302 	umull	r0, r3, r0, r2
    6a1c:	fb02 3101 	mla	r1, r2, r1, r3
    6a20:	0bc0      	lsrs	r0, r0, #15
}
    6a22:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    6a26:	0bc9      	lsrs	r1, r1, #15
    6a28:	bd08      	pop	{r3, pc}

00006a2a <sys_notify_validate>:
	if (notify == NULL) {
    6a2a:	4603      	mov	r3, r0
    6a2c:	b158      	cbz	r0, 6a46 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6a2e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6a30:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6a34:	2a01      	cmp	r2, #1
    6a36:	d003      	beq.n	6a40 <sys_notify_validate+0x16>
    6a38:	2a03      	cmp	r2, #3
    6a3a:	d104      	bne.n	6a46 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6a3c:	6802      	ldr	r2, [r0, #0]
    6a3e:	b112      	cbz	r2, 6a46 <sys_notify_validate+0x1c>
		notify->result = 0;
    6a40:	2000      	movs	r0, #0
    6a42:	6098      	str	r0, [r3, #8]
    6a44:	4770      	bx	lr
		return -EINVAL;
    6a46:	f06f 0015 	mvn.w	r0, #21
}
    6a4a:	4770      	bx	lr

00006a4c <arch_printk_char_out>:
}
    6a4c:	2000      	movs	r0, #0
    6a4e:	4770      	bx	lr

00006a50 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6a50:	b40f      	push	{r0, r1, r2, r3}
    6a52:	b507      	push	{r0, r1, r2, lr}
    6a54:	a904      	add	r1, sp, #16
    6a56:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6a5a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6a5c:	f7f9 fdfe 	bl	65c <vprintk>

	va_end(ap);
}
    6a60:	b003      	add	sp, #12
    6a62:	f85d eb04 	ldr.w	lr, [sp], #4
    6a66:	b004      	add	sp, #16
    6a68:	4770      	bx	lr

00006a6a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6a6a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6a6c:	f013 0307 	ands.w	r3, r3, #7
    6a70:	d105      	bne.n	6a7e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6a72:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6a74:	2b00      	cmp	r3, #0
    6a76:	bf0c      	ite	eq
    6a78:	2000      	moveq	r0, #0
    6a7a:	2003      	movne	r0, #3
    6a7c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6a7e:	2b02      	cmp	r3, #2
    6a80:	d105      	bne.n	6a8e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6a82:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    6a84:	2b00      	cmp	r3, #0
    6a86:	bf14      	ite	ne
    6a88:	2000      	movne	r0, #0
    6a8a:	2004      	moveq	r0, #4
    6a8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6a8e:	2b01      	cmp	r3, #1
    6a90:	d105      	bne.n	6a9e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6a92:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6a94:	2b00      	cmp	r3, #0
    6a96:	bf0c      	ite	eq
    6a98:	2000      	moveq	r0, #0
    6a9a:	2005      	movne	r0, #5
    6a9c:	4770      	bx	lr
	int evt = EVT_NOP;
    6a9e:	2000      	movs	r0, #0
}
    6aa0:	4770      	bx	lr

00006aa2 <notify_one>:
{
    6aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6aa6:	460d      	mov	r5, r1
    6aa8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6aaa:	4619      	mov	r1, r3
    6aac:	1d28      	adds	r0, r5, #4
{
    6aae:	4690      	mov	r8, r2
    6ab0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6ab2:	f7f9 fda5 	bl	600 <sys_notify_finalize>
	if (cb) {
    6ab6:	4604      	mov	r4, r0
    6ab8:	b138      	cbz	r0, 6aca <notify_one+0x28>
		cb(mgr, cli, state, res);
    6aba:	4633      	mov	r3, r6
    6abc:	4642      	mov	r2, r8
    6abe:	4629      	mov	r1, r5
    6ac0:	4638      	mov	r0, r7
    6ac2:	46a4      	mov	ip, r4
}
    6ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6ac8:	4760      	bx	ip
}
    6aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ace <validate_args>:
{
    6ace:	b510      	push	{r4, lr}
    6ad0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6ad2:	b140      	cbz	r0, 6ae6 <validate_args+0x18>
    6ad4:	b139      	cbz	r1, 6ae6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6ad6:	1d08      	adds	r0, r1, #4
    6ad8:	f7ff ffa7 	bl	6a2a <sys_notify_validate>
	if ((rv == 0)
    6adc:	b928      	cbnz	r0, 6aea <validate_args+0x1c>
	    && ((cli->notify.flags
    6ade:	68a3      	ldr	r3, [r4, #8]
    6ae0:	f033 0303 	bics.w	r3, r3, #3
    6ae4:	d001      	beq.n	6aea <validate_args+0x1c>
		rv = -EINVAL;
    6ae6:	f06f 0015 	mvn.w	r0, #21
}
    6aea:	bd10      	pop	{r4, pc}

00006aec <onoff_manager_init>:
{
    6aec:	b538      	push	{r3, r4, r5, lr}
    6aee:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6af0:	4605      	mov	r5, r0
    6af2:	b158      	cbz	r0, 6b0c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6af4:	b151      	cbz	r1, 6b0c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6af6:	680b      	ldr	r3, [r1, #0]
    6af8:	b143      	cbz	r3, 6b0c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6afa:	684b      	ldr	r3, [r1, #4]
    6afc:	b133      	cbz	r3, 6b0c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6afe:	2220      	movs	r2, #32
    6b00:	2100      	movs	r1, #0
    6b02:	f000 f8e7 	bl	6cd4 <memset>
    6b06:	612c      	str	r4, [r5, #16]
	return 0;
    6b08:	2000      	movs	r0, #0
}
    6b0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6b0c:	f06f 0015 	mvn.w	r0, #21
    6b10:	e7fb      	b.n	6b0a <onoff_manager_init+0x1e>

00006b12 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6b12:	4604      	mov	r4, r0
    6b14:	b508      	push	{r3, lr}
    6b16:	4608      	mov	r0, r1
    6b18:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6b1a:	461a      	mov	r2, r3
    6b1c:	47a0      	blx	r4
	return z_impl_z_current_get();
    6b1e:	f7ff f98d 	bl	5e3c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6b22:	f7fb fa55 	bl	1fd0 <z_impl_k_thread_abort>

00006b26 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    6b26:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6b2a:	8840      	ldrh	r0, [r0, #2]
}
    6b2c:	0840      	lsrs	r0, r0, #1
    6b2e:	4770      	bx	lr

00006b30 <free_list_add>:
{
    6b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b32:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    6b34:	f7ff fff7 	bl	6b26 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    6b38:	fab0 f080 	clz	r0, r0
    6b3c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    6b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    6b44:	00ca      	lsls	r2, r1, #3
    6b46:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    6b4a:	1d17      	adds	r7, r2, #4
{
    6b4c:	460c      	mov	r4, r1
    6b4e:	3206      	adds	r2, #6
    6b50:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    6b52:	b956      	cbnz	r6, 6b6a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    6b54:	2101      	movs	r1, #1
    6b56:	fa01 f000 	lsl.w	r0, r1, r0
    6b5a:	68d9      	ldr	r1, [r3, #12]
    6b5c:	4301      	orrs	r1, r0
    6b5e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    6b60:	f8cc 4010 	str.w	r4, [ip, #16]
    6b64:	53dd      	strh	r5, [r3, r7]
    6b66:	529d      	strh	r5, [r3, r2]
}
    6b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    6b6a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    6b6c:	3104      	adds	r1, #4
    6b6e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    6b70:	53d8      	strh	r0, [r3, r7]
    6b72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b76:	529e      	strh	r6, [r3, r2]
    6b78:	80c5      	strh	r5, [r0, #6]
    6b7a:	525d      	strh	r5, [r3, r1]
    6b7c:	e7f4      	b.n	6b68 <free_list_add+0x38>

00006b7e <encode_uint>:
{
    6b7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b82:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6b84:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6b86:	2b6f      	cmp	r3, #111	; 0x6f
{
    6b88:	4680      	mov	r8, r0
    6b8a:	460f      	mov	r7, r1
    6b8c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6b8e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6b92:	d029      	beq.n	6be8 <encode_uint+0x6a>
    6b94:	d824      	bhi.n	6be0 <encode_uint+0x62>
		return 16;
    6b96:	2b58      	cmp	r3, #88	; 0x58
    6b98:	bf14      	ite	ne
    6b9a:	260a      	movne	r6, #10
    6b9c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6b9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6ba2:	4632      	mov	r2, r6
    6ba4:	2300      	movs	r3, #0
    6ba6:	4640      	mov	r0, r8
    6ba8:	4639      	mov	r1, r7
    6baa:	f7f9 faa9 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bae:	2a09      	cmp	r2, #9
    6bb0:	b2d4      	uxtb	r4, r2
    6bb2:	d81e      	bhi.n	6bf2 <encode_uint+0x74>
    6bb4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6bb6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bb8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6bba:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bbe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6bc2:	d301      	bcc.n	6bc8 <encode_uint+0x4a>
    6bc4:	45d1      	cmp	r9, sl
    6bc6:	d811      	bhi.n	6bec <encode_uint+0x6e>
	if (conv->flag_hash) {
    6bc8:	782b      	ldrb	r3, [r5, #0]
    6bca:	069b      	lsls	r3, r3, #26
    6bcc:	d505      	bpl.n	6bda <encode_uint+0x5c>
		if (radix == 8) {
    6bce:	2e08      	cmp	r6, #8
    6bd0:	d115      	bne.n	6bfe <encode_uint+0x80>
			conv->altform_0 = true;
    6bd2:	78ab      	ldrb	r3, [r5, #2]
    6bd4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6bd8:	70ab      	strb	r3, [r5, #2]
}
    6bda:	4648      	mov	r0, r9
    6bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6be0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6be4:	2b70      	cmp	r3, #112	; 0x70
    6be6:	e7d7      	b.n	6b98 <encode_uint+0x1a>
	switch (specifier) {
    6be8:	2608      	movs	r6, #8
    6bea:	e7d8      	b.n	6b9e <encode_uint+0x20>
		value /= radix;
    6bec:	4680      	mov	r8, r0
    6bee:	460f      	mov	r7, r1
    6bf0:	e7d7      	b.n	6ba2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bf2:	f1bb 0f19 	cmp.w	fp, #25
    6bf6:	bf94      	ite	ls
    6bf8:	3437      	addls	r4, #55	; 0x37
    6bfa:	3457      	addhi	r4, #87	; 0x57
    6bfc:	e7db      	b.n	6bb6 <encode_uint+0x38>
		} else if (radix == 16) {
    6bfe:	2e10      	cmp	r6, #16
    6c00:	d1eb      	bne.n	6bda <encode_uint+0x5c>
			conv->altform_0c = true;
    6c02:	78ab      	ldrb	r3, [r5, #2]
    6c04:	f043 0310 	orr.w	r3, r3, #16
    6c08:	e7e6      	b.n	6bd8 <encode_uint+0x5a>

00006c0a <outs>:
{
    6c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c0e:	4607      	mov	r7, r0
    6c10:	4688      	mov	r8, r1
    6c12:	4615      	mov	r5, r2
    6c14:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6c16:	4614      	mov	r4, r2
    6c18:	42b4      	cmp	r4, r6
    6c1a:	eba4 0005 	sub.w	r0, r4, r5
    6c1e:	d302      	bcc.n	6c26 <outs+0x1c>
    6c20:	b93e      	cbnz	r6, 6c32 <outs+0x28>
    6c22:	7823      	ldrb	r3, [r4, #0]
    6c24:	b12b      	cbz	r3, 6c32 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6c26:	f814 0b01 	ldrb.w	r0, [r4], #1
    6c2a:	4641      	mov	r1, r8
    6c2c:	47b8      	blx	r7
		if (rc < 0) {
    6c2e:	2800      	cmp	r0, #0
    6c30:	daf2      	bge.n	6c18 <outs+0xe>
}
    6c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006c36 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6c36:	4040      	eors	r0, r0
    6c38:	f380 8811 	msr	BASEPRI, r0
    6c3c:	f04f 0004 	mov.w	r0, #4
    6c40:	df02      	svc	2
}
    6c42:	4770      	bx	lr

00006c44 <assert_print>:

void assert_print(const char *fmt, ...)
{
    6c44:	b40f      	push	{r0, r1, r2, r3}
    6c46:	b507      	push	{r0, r1, r2, lr}
    6c48:	a904      	add	r1, sp, #16
    6c4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6c4e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6c50:	f7f9 fd04 	bl	65c <vprintk>

	va_end(ap);
}
    6c54:	b003      	add	sp, #12
    6c56:	f85d eb04 	ldr.w	lr, [sp], #4
    6c5a:	b004      	add	sp, #16
    6c5c:	4770      	bx	lr

00006c5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6c5e:	4770      	bx	lr

00006c60 <abort_function>:
{
    6c60:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6c62:	2000      	movs	r0, #0
    6c64:	f7fa fc18 	bl	1498 <sys_reboot>

00006c68 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6c68:	f7fd bac6 	b.w	41f8 <z_fatal_error>

00006c6c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6c6c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6c6e:	6800      	ldr	r0, [r0, #0]
    6c70:	f7fd bac2 	b.w	41f8 <z_fatal_error>

00006c74 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6c74:	2100      	movs	r1, #0
    6c76:	2001      	movs	r0, #1
    6c78:	f7ff bff6 	b.w	6c68 <z_arm_fatal_error>

00006c7c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6c7c:	b508      	push	{r3, lr}
	handler();
    6c7e:	f7fa feed 	bl	1a5c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6c86:	f7fa bfc5 	b.w	1c14 <z_arm_exc_exit>

00006c8a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6c8a:	3901      	subs	r1, #1
    6c8c:	4603      	mov	r3, r0
    6c8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6c92:	b90a      	cbnz	r2, 6c98 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6c94:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6c96:	4770      	bx	lr
		*d = *s;
    6c98:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6c9c:	e7f7      	b.n	6c8e <strcpy+0x4>

00006c9e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6c9e:	4603      	mov	r3, r0
	size_t n = 0;
    6ca0:	2000      	movs	r0, #0

	while (*s != '\0') {
    6ca2:	5c1a      	ldrb	r2, [r3, r0]
    6ca4:	b902      	cbnz	r2, 6ca8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6ca6:	4770      	bx	lr
		n++;
    6ca8:	3001      	adds	r0, #1
    6caa:	e7fa      	b.n	6ca2 <strlen+0x4>

00006cac <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6cac:	4603      	mov	r3, r0
	size_t n = 0;
    6cae:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6cb0:	5c1a      	ldrb	r2, [r3, r0]
    6cb2:	b10a      	cbz	r2, 6cb8 <strnlen+0xc>
    6cb4:	4288      	cmp	r0, r1
    6cb6:	d100      	bne.n	6cba <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6cb8:	4770      	bx	lr
		n++;
    6cba:	3001      	adds	r0, #1
    6cbc:	e7f8      	b.n	6cb0 <strnlen+0x4>

00006cbe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6cbe:	b510      	push	{r4, lr}
    6cc0:	1e43      	subs	r3, r0, #1
    6cc2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6cc4:	4291      	cmp	r1, r2
    6cc6:	d100      	bne.n	6cca <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6cc8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6cca:	f811 4b01 	ldrb.w	r4, [r1], #1
    6cce:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6cd2:	e7f7      	b.n	6cc4 <memcpy+0x6>

00006cd4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6cd4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6cd6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6cd8:	4603      	mov	r3, r0
	while (n > 0) {
    6cda:	4293      	cmp	r3, r2
    6cdc:	d100      	bne.n	6ce0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6cde:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6ce0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6ce4:	e7f9      	b.n	6cda <memset+0x6>

00006ce6 <_stdout_hook_default>:
}
    6ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6cea:	4770      	bx	lr

00006cec <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    6cec:	f7fb babc 	b.w	2268 <z_impl_zephyr_fputc>

00006cf0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6cf0:	2806      	cmp	r0, #6
    6cf2:	d108      	bne.n	6d06 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cf8:	2201      	movs	r2, #1
    6cfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6cfe:	f3bf 8f4f 	dsb	sy
        __WFE();
    6d02:	bf20      	wfe
    while (true)
    6d04:	e7fd      	b.n	6d02 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6d06:	4770      	bx	lr

00006d08 <pm_state_exit_post_ops>:
    6d08:	2300      	movs	r3, #0
    6d0a:	f383 8811 	msr	BASEPRI, r3
    6d0e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6d12:	4770      	bx	lr

00006d14 <set_on_state>:
	__asm__ volatile(
    6d14:	f04f 0320 	mov.w	r3, #32
    6d18:	f3ef 8211 	mrs	r2, BASEPRI
    6d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d20:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6d24:	6803      	ldr	r3, [r0, #0]
    6d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6d2a:	f043 0302 	orr.w	r3, r3, #2
    6d2e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6d30:	f382 8811 	msr	BASEPRI, r2
    6d34:	f3bf 8f6f 	isb	sy
}
    6d38:	4770      	bx	lr

00006d3a <async_start>:
{
    6d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d3c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6d3e:	6904      	ldr	r4, [r0, #16]
{
    6d40:	4605      	mov	r5, r0
    6d42:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6d44:	f04f 0020 	mov.w	r0, #32
    6d48:	f3ef 8c11 	mrs	ip, BASEPRI
    6d4c:	f380 8812 	msr	BASEPRI_MAX, r0
    6d50:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6d54:	260c      	movs	r6, #12
    6d56:	fb06 4601 	mla	r6, r6, r1, r4
    6d5a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6d5c:	f000 0e07 	and.w	lr, r0, #7
    6d60:	f1be 0f01 	cmp.w	lr, #1
    6d64:	d111      	bne.n	6d8a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6d66:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    6d68:	2600      	movs	r6, #0
	__asm__ volatile(
    6d6a:	f38c 8811 	msr	BASEPRI, ip
    6d6e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6d72:	b946      	cbnz	r6, 6d86 <async_start+0x4c>
	subdata->cb = cb;
    6d74:	200c      	movs	r0, #12
    6d76:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    6d7a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    6d7e:	686b      	ldr	r3, [r5, #4]
    6d80:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    6d84:	4798      	blx	r3
}
    6d86:	4630      	mov	r0, r6
    6d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6d8a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6d8e:	4287      	cmp	r7, r0
    6d90:	bf14      	ite	ne
    6d92:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    6d96:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6d9a:	e7e6      	b.n	6d6a <async_start+0x30>

00006d9c <api_start>:
{
    6d9c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6d9e:	2480      	movs	r4, #128	; 0x80
    6da0:	9400      	str	r4, [sp, #0]
    6da2:	f7ff ffca 	bl	6d3a <async_start>
}
    6da6:	b002      	add	sp, #8
    6da8:	bd10      	pop	{r4, pc}

00006daa <onoff_started_callback>:
	return &data->mgr[type];
    6daa:	6900      	ldr	r0, [r0, #16]
    6dac:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6dae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    6db2:	2100      	movs	r1, #0
    6db4:	4710      	bx	r2

00006db6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6db6:	2000      	movs	r0, #0
    6db8:	f7fc bd12 	b.w	37e0 <nrfx_clock_start>

00006dbc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6dbc:	2000      	movs	r0, #0
    6dbe:	f7fc bd73 	b.w	38a8 <nrfx_clock_stop>

00006dc2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6dc2:	2280      	movs	r2, #128	; 0x80
    6dc4:	f7fb bafa 	b.w	23bc <stop>

00006dc8 <blocking_start_callback>:
{
    6dc8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6dca:	f7fd bf6d 	b.w	4ca8 <z_impl_k_sem_give>

00006dce <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6dce:	6843      	ldr	r3, [r0, #4]
    6dd0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6dd2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6dd6:	600b      	str	r3, [r1, #0]
}
    6dd8:	2000      	movs	r0, #0
    6dda:	4770      	bx	lr

00006ddc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ddc:	6843      	ldr	r3, [r0, #4]
    6dde:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6de0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6de4:	4042      	eors	r2, r0
    6de6:	400a      	ands	r2, r1
    6de8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6dea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6dee:	2000      	movs	r0, #0
    6df0:	4770      	bx	lr

00006df2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6df2:	6843      	ldr	r3, [r0, #4]
    6df4:	685b      	ldr	r3, [r3, #4]
}
    6df6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6df8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6dfc:	4770      	bx	lr

00006dfe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6dfe:	6843      	ldr	r3, [r0, #4]
    6e00:	685b      	ldr	r3, [r3, #4]
}
    6e02:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6e04:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6e08:	4770      	bx	lr

00006e0a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6e0a:	6843      	ldr	r3, [r0, #4]
    6e0c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6e0e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6e12:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6e14:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6e18:	2000      	movs	r0, #0
    6e1a:	4770      	bx	lr

00006e1c <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    6e1c:	6902      	ldr	r2, [r0, #16]
{
    6e1e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6e20:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6e24:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6e28:	2000      	movs	r0, #0
    6e2a:	4770      	bx	lr

00006e2c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6e2c:	6843      	ldr	r3, [r0, #4]
    6e2e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6e30:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6e34:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6e38:	4770      	bx	lr

00006e3a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6e3a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6e3c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6e3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6e44:	b148      	cbz	r0, 6e5a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    6e46:	7c52      	ldrb	r2, [r2, #17]
    6e48:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e4a:	2000      	movs	r0, #0
    6e4c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6e50:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e54:	2201      	movs	r2, #1
    6e56:	601a      	str	r2, [r3, #0]
	return 0;
    6e58:	4770      	bx	lr
		return -1;
    6e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6e5e:	4770      	bx	lr

00006e60 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6e60:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6e62:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e64:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e68:	b940      	cbnz	r0, 6e7c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6e6a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e6c:	079b      	lsls	r3, r3, #30
    6e6e:	d406      	bmi.n	6e7e <is_tx_ready.isra.0+0x1e>
    6e70:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6e74:	3800      	subs	r0, #0
    6e76:	bf18      	it	ne
    6e78:	2001      	movne	r0, #1
    6e7a:	4770      	bx	lr
    6e7c:	2001      	movs	r0, #1
}
    6e7e:	4770      	bx	lr

00006e80 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    6e80:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6e82:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6e84:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6e88:	05c9      	lsls	r1, r1, #23
    6e8a:	d518      	bpl.n	6ebe <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e8c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6e90:	b1a9      	cbz	r1, 6ebe <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6e92:	f04f 0020 	mov.w	r0, #32
    6e96:	f3ef 8111 	mrs	r1, BASEPRI
    6e9a:	f380 8812 	msr	BASEPRI_MAX, r0
    6e9e:	f3bf 8f6f 	isb	sy
    6ea2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6ea6:	b130      	cbz	r0, 6eb6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ea8:	2000      	movs	r0, #0
    6eaa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    6eae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6eb2:	2001      	movs	r0, #1
    6eb4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    6eb6:	f381 8811 	msr	BASEPRI, r1
    6eba:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ebe:	6852      	ldr	r2, [r2, #4]
    6ec0:	06d2      	lsls	r2, r2, #27
    6ec2:	d515      	bpl.n	6ef0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    6ec4:	f04f 0120 	mov.w	r1, #32
    6ec8:	f3ef 8211 	mrs	r2, BASEPRI
    6ecc:	f381 8812 	msr	BASEPRI_MAX, r1
    6ed0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ed4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6ed8:	b111      	cbz	r1, 6ee0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6eda:	2100      	movs	r1, #0
    6edc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6ee0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6ee4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6ee8:	f382 8811 	msr	BASEPRI, r2
    6eec:	f3bf 8f6f 	isb	sy
}
    6ef0:	4770      	bx	lr

00006ef2 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6ef2:	b510      	push	{r4, lr}
    6ef4:	2200      	movs	r2, #0
    6ef6:	4604      	mov	r4, r0
    6ef8:	2101      	movs	r1, #1
    6efa:	2028      	movs	r0, #40	; 0x28
    6efc:	f7fa fd7a 	bl	19f4 <z_arm_irq_priority_set>
    6f00:	2028      	movs	r0, #40	; 0x28
    6f02:	f7fa fd59 	bl	19b8 <arch_irq_enable>
    6f06:	4620      	mov	r0, r4
    6f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f0c:	f7fb befc 	b.w	2d08 <uarte_instance_init.constprop.0>

00006f10 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6f10:	b510      	push	{r4, lr}
    6f12:	2200      	movs	r2, #0
    6f14:	4604      	mov	r4, r0
    6f16:	2101      	movs	r1, #1
    6f18:	2002      	movs	r0, #2
    6f1a:	f7fa fd6b 	bl	19f4 <z_arm_irq_priority_set>
    6f1e:	2002      	movs	r0, #2
    6f20:	f7fa fd4a 	bl	19b8 <arch_irq_enable>
    6f24:	4620      	mov	r0, r4
    6f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f2a:	f7fb beed 	b.w	2d08 <uarte_instance_init.constprop.0>

00006f2e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6f2e:	4770      	bx	lr

00006f30 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6f30:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6f32:	6843      	ldr	r3, [r0, #4]
    6f34:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6f36:	7a03      	ldrb	r3, [r0, #8]
    6f38:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6f3c:	3b01      	subs	r3, #1
    6f3e:	00db      	lsls	r3, r3, #3
    6f40:	6845      	ldr	r5, [r0, #4]
    6f42:	6814      	ldr	r4, [r2, #0]
    6f44:	441d      	add	r5, r3
    6f46:	42ac      	cmp	r4, r5
    6f48:	d902      	bls.n	6f50 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    6f4a:	f06f 0001 	mvn.w	r0, #1
}
    6f4e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6f50:	7965      	ldrb	r5, [r4, #5]
    6f52:	428d      	cmp	r5, r1
    6f54:	d002      	beq.n	6f5c <pinctrl_lookup_state+0x2c>
		(*state)++;
    6f56:	3408      	adds	r4, #8
    6f58:	6014      	str	r4, [r2, #0]
    6f5a:	e7f1      	b.n	6f40 <pinctrl_lookup_state+0x10>
			return 0;
    6f5c:	2000      	movs	r0, #0
    6f5e:	e7f6      	b.n	6f4e <pinctrl_lookup_state+0x1e>

00006f60 <nrf_gpio_pin_clear>:
{
    6f60:	b507      	push	{r0, r1, r2, lr}
    6f62:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f64:	a801      	add	r0, sp, #4
    6f66:	f7fc f9f1 	bl	334c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6f6a:	9a01      	ldr	r2, [sp, #4]
    6f6c:	2301      	movs	r3, #1
    6f6e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6f70:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    6f74:	b003      	add	sp, #12
    6f76:	f85d fb04 	ldr.w	pc, [sp], #4

00006f7a <nrf_gpio_pin_set>:
{
    6f7a:	b507      	push	{r0, r1, r2, lr}
    6f7c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f7e:	a801      	add	r0, sp, #4
    6f80:	f7fc f9e4 	bl	334c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6f84:	9a01      	ldr	r2, [sp, #4]
    6f86:	2301      	movs	r3, #1
    6f88:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6f8a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    6f8e:	b003      	add	sp, #12
    6f90:	f85d fb04 	ldr.w	pc, [sp], #4

00006f94 <nrf_gpio_pin_write>:
    if (value == 0)
    6f94:	b909      	cbnz	r1, 6f9a <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    6f96:	f7ff bfe3 	b.w	6f60 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    6f9a:	f7ff bfee 	b.w	6f7a <nrf_gpio_pin_set>

00006f9e <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    6f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    6fa0:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6fa4:	2b00      	cmp	r3, #0
{
    6fa6:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6fa8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6fac:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6fae:	bf0b      	itete	eq
    6fb0:	4615      	moveq	r5, r2
    6fb2:	2501      	movne	r5, #1
    6fb4:	460e      	moveq	r6, r1
    6fb6:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6fb8:	9301      	str	r3, [sp, #4]
    6fba:	f7fc f9c7 	bl	334c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6fbe:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6fc0:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    6fc4:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6fc8:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    6fcc:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
    6fce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6fd2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    6fd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    6fda:	b002      	add	sp, #8
    6fdc:	bd70      	pop	{r4, r5, r6, pc}

00006fde <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6fde:	b570      	push	{r4, r5, r6, lr}
    6fe0:	4615      	mov	r5, r2
    6fe2:	4604      	mov	r4, r0
    6fe4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6fe8:	42a6      	cmp	r6, r4
    6fea:	d101      	bne.n	6ff0 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6fec:	2000      	movs	r0, #0
}
    6fee:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    6ff0:	6823      	ldr	r3, [r4, #0]
    6ff2:	0c1a      	lsrs	r2, r3, #16
    6ff4:	2a22      	cmp	r2, #34	; 0x22
    6ff6:	f200 808e 	bhi.w	7116 <pinctrl_configure_pins+0x138>
    6ffa:	e8df f002 	tbb	[pc, r2]
    6ffe:	1d12      	.short	0x1d12
    7000:	39294324 	.word	0x39294324
    7004:	8c8c8c43 	.word	0x8c8c8c43
    7008:	8c4d488c 	.word	0x8c4d488c
    700c:	8c8c8c8c 	.word	0x8c8c8c8c
    7010:	8c8c8c8c 	.word	0x8c8c8c8c
    7014:	68635e52 	.word	0x68635e52
    7018:	6d8c8c8c 	.word	0x6d8c8c8c
    701c:	827d7873 	.word	0x827d7873
    7020:	87          	.byte	0x87
    7021:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7026:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    702a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    702c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7030:	f7ff ffa3 	bl	6f7a <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7034:	2201      	movs	r2, #1
    7036:	e015      	b.n	7064 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    703c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7040:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7042:	2100      	movs	r1, #0
    7044:	e00f      	b.n	7066 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    7046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    704a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    704e:	e7ec      	b.n	702a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7054:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7058:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    705a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    705e:	f7ff ff7f 	bl	6f60 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7062:	2200      	movs	r2, #0
    7064:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7066:	6820      	ldr	r0, [r4, #0]
    7068:	f7ff ff99 	bl	6f9e <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    706c:	3404      	adds	r4, #4
    706e:	e7bb      	b.n	6fe8 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7074:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7078:	6820      	ldr	r0, [r4, #0]
    707a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    707e:	f7ff ff6f 	bl	6f60 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7082:	e7d7      	b.n	7034 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7088:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    708c:	e7d8      	b.n	7040 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    708e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7092:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7096:	e7d3      	b.n	7040 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    709c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    70a0:	e7ce      	b.n	7040 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    70a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70a6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    70aa:	6820      	ldr	r0, [r4, #0]
    70ac:	f3c0 3140 	ubfx	r1, r0, #13, #1
    70b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    70b4:	f7ff ff6e 	bl	6f94 <nrf_gpio_pin_write>
    70b8:	e7bc      	b.n	7034 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    70ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70be:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    70c2:	e7f2      	b.n	70aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    70c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70c8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    70cc:	e7ed      	b.n	70aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    70ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70d2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    70d6:	e7e8      	b.n	70aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    70d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70dc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    70e0:	2201      	movs	r2, #1
    70e2:	e7ae      	b.n	7042 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    70e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70e8:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    70ec:	e7f8      	b.n	70e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    70ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70f2:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    70f6:	e7f3      	b.n	70e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    70f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70fc:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7100:	e7ee      	b.n	70e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7106:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    710a:	e7e9      	b.n	70e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    710c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7110:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    7114:	e7e4      	b.n	70e0 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    7116:	f06f 0085 	mvn.w	r0, #133	; 0x85
    711a:	e768      	b.n	6fee <pinctrl_configure_pins+0x10>

0000711c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    711c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    711e:	2000      	movs	r0, #0
    7120:	f7fb f8f0 	bl	2304 <sys_arch_reboot>

00007124 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7124:	f7ff ba9c 	b.w	6660 <nrf_cc3xx_platform_init_no_rng>

00007128 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7128:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    712a:	f7fa fb5d 	bl	17e8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    712e:	f7fa fc0f 	bl	1950 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7136:	f7ff ba93 	b.w	6660 <nrf_cc3xx_platform_init_no_rng>

0000713a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    713a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    713e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    7142:	f1a0 0308 	sub.w	r3, r0, #8
    7146:	4258      	negs	r0, r3
    7148:	4158      	adcs	r0, r3
    714a:	4770      	bx	lr

0000714c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    714c:	4700      	bx	r0

0000714e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    714e:	f000 b8f6 	b.w	733e <z_impl_k_busy_wait>

00007152 <nrf_gpio_pin_present_check>:
    switch (port)
    7152:	0943      	lsrs	r3, r0, #5
    7154:	d00b      	beq.n	716e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    7156:	2b01      	cmp	r3, #1
    7158:	f64f 73ff 	movw	r3, #65535	; 0xffff
    715c:	bf18      	it	ne
    715e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7160:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7164:	fa23 f000 	lsr.w	r0, r3, r0
}
    7168:	f000 0001 	and.w	r0, r0, #1
    716c:	4770      	bx	lr
    switch (port)
    716e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7172:	e7f5      	b.n	7160 <nrf_gpio_pin_present_check+0xe>

00007174 <pin_is_task_output>:
{
    7174:	b508      	push	{r3, lr}
    7176:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7178:	f7fc fbfe 	bl	3978 <pin_is_output>
    717c:	b110      	cbz	r0, 7184 <pin_is_task_output+0x10>
    717e:	4610      	mov	r0, r2
    7180:	f7fc fbe4 	bl	394c <pin_in_use_by_te>
}
    7184:	f000 0001 	and.w	r0, r0, #1
    7188:	bd08      	pop	{r3, pc}

0000718a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    718a:	0080      	lsls	r0, r0, #2
}
    718c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7190:	4770      	bx	lr

00007192 <nrf_gpio_reconfigure>:
{
    7192:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7196:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7198:	a801      	add	r0, sp, #4
{
    719a:	460e      	mov	r6, r1
    719c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    71a0:	4690      	mov	r8, r2
    71a2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71a4:	f7fc fc6c 	bl	3a80 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    71a8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    71aa:	f1b8 0f00 	cmp.w	r8, #0
    71ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    71b2:	bf14      	ite	ne
    71b4:	2302      	movne	r3, #2
    71b6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    71b8:	2e00      	cmp	r6, #0
    71ba:	bf18      	it	ne
    71bc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    71c0:	2d00      	cmp	r5, #0
    71c2:	bf14      	ite	ne
    71c4:	210c      	movne	r1, #12
    71c6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    71c8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    71ca:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    71ce:	bf14      	ite	ne
    71d0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    71d4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    71d6:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    71d8:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    71dc:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    71e0:	bf14      	ite	ne
    71e2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    71e6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    71e8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    71ea:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    71ee:	b106      	cbz	r6, 71f2 <nrf_gpio_reconfigure+0x60>
    71f0:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    71f2:	f1b8 0f00 	cmp.w	r8, #0
    71f6:	d003      	beq.n	7200 <nrf_gpio_reconfigure+0x6e>
    71f8:	f898 8000 	ldrb.w	r8, [r8]
    71fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7200:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7202:	b10d      	cbz	r5, 7208 <nrf_gpio_reconfigure+0x76>
    7204:	782d      	ldrb	r5, [r5, #0]
    7206:	00ad      	lsls	r5, r5, #2
    7208:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    720c:	b10c      	cbz	r4, 7212 <nrf_gpio_reconfigure+0x80>
    720e:	7822      	ldrb	r2, [r4, #0]
    7210:	0214      	lsls	r4, r2, #8
    7212:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7214:	b10f      	cbz	r7, 721a <nrf_gpio_reconfigure+0x88>
    7216:	783f      	ldrb	r7, [r7, #0]
    7218:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    721a:	432c      	orrs	r4, r5
    721c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    721e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7222:	b002      	add	sp, #8
    7224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007228 <nrf_gpio_cfg_sense_set>:
{
    7228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    722a:	f10d 030f 	add.w	r3, sp, #15
    722e:	9301      	str	r3, [sp, #4]
    7230:	2300      	movs	r3, #0
{
    7232:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7236:	9300      	str	r3, [sp, #0]
    7238:	461a      	mov	r2, r3
    723a:	4619      	mov	r1, r3
    723c:	f7ff ffa9 	bl	7192 <nrf_gpio_reconfigure>
}
    7240:	b005      	add	sp, #20
    7242:	f85d fb04 	ldr.w	pc, [sp], #4

00007246 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7246:	f7fc bf81 	b.w	414c <_DoInit>

0000724a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    724a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    724c:	f7ff fffb 	bl	7246 <SEGGER_RTT_Init>

	return 0;
}
    7250:	2000      	movs	r0, #0
    7252:	bd08      	pop	{r3, pc}

00007254 <z_device_state_init>:
}
    7254:	4770      	bx	lr

00007256 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7256:	b138      	cbz	r0, 7268 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7258:	68c3      	ldr	r3, [r0, #12]
    725a:	8818      	ldrh	r0, [r3, #0]
    725c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7260:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7264:	4258      	negs	r0, r3
    7266:	4158      	adcs	r0, r3
}
    7268:	4770      	bx	lr

0000726a <z_early_memset>:
	(void) memset(dst, c, n);
    726a:	f7ff bd33 	b.w	6cd4 <memset>

0000726e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    726e:	f7ff bd26 	b.w	6cbe <memcpy>

00007272 <k_mem_slab_init>:
{
    7272:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7274:	2400      	movs	r4, #0
    7276:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7278:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    727a:	ea41 0402 	orr.w	r4, r1, r2
    727e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7282:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7286:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7288:	d10c      	bne.n	72a4 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    728a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    728c:	42a3      	cmp	r3, r4
    728e:	d103      	bne.n	7298 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7290:	e9c0 0000 	strd	r0, r0, [r0]
}
    7294:	2000      	movs	r0, #0
}
    7296:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7298:	6985      	ldr	r5, [r0, #24]
    729a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    729c:	3401      	adds	r4, #1
		slab->free_list = p;
    729e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    72a0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    72a2:	e7f3      	b.n	728c <k_mem_slab_init+0x1a>
		return -EINVAL;
    72a4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    72a8:	e7f5      	b.n	7296 <k_mem_slab_init+0x24>

000072aa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    72aa:	f3ef 8005 	mrs	r0, IPSR
}
    72ae:	3800      	subs	r0, #0
    72b0:	bf18      	it	ne
    72b2:	2001      	movne	r0, #1
    72b4:	4770      	bx	lr

000072b6 <z_pm_save_idle_exit>:
{
    72b6:	b508      	push	{r3, lr}
	pm_system_resume();
    72b8:	f7fa f97e 	bl	15b8 <pm_system_resume>
}
    72bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    72c0:	f7ff be35 	b.w	6f2e <sys_clock_idle_exit>

000072c4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    72c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    72c8:	428b      	cmp	r3, r1
    72ca:	d001      	beq.n	72d0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    72cc:	f7fe ba5a 	b.w	5784 <z_set_prio>
}
    72d0:	2000      	movs	r0, #0
    72d2:	4770      	bx	lr

000072d4 <z_impl_k_mutex_init>:
{
    72d4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    72d6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    72d8:	e9c3 0002 	strd	r0, r0, [r3, #8]
    72dc:	e9c3 3300 	strd	r3, r3, [r3]
}
    72e0:	4770      	bx	lr

000072e2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    72e2:	b13a      	cbz	r2, 72f4 <z_impl_k_sem_init+0x12>
    72e4:	428a      	cmp	r2, r1
    72e6:	d305      	bcc.n	72f4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    72e8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    72ec:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    72f0:	2000      	movs	r0, #0
    72f2:	4770      	bx	lr
		return -EINVAL;
    72f4:	f06f 0015 	mvn.w	r0, #21
}
    72f8:	4770      	bx	lr

000072fa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    72fa:	4603      	mov	r3, r0
    72fc:	b920      	cbnz	r0, 7308 <z_reschedule_irqlock+0xe>
    72fe:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7302:	b90a      	cbnz	r2, 7308 <z_reschedule_irqlock+0xe>
    7304:	f7fa bbca 	b.w	1a9c <arch_swap>
    7308:	f383 8811 	msr	BASEPRI, r3
    730c:	f3bf 8f6f 	isb	sy
}
    7310:	4770      	bx	lr

00007312 <z_reschedule_unlocked>:
	__asm__ volatile(
    7312:	f04f 0320 	mov.w	r3, #32
    7316:	f3ef 8011 	mrs	r0, BASEPRI
    731a:	f383 8812 	msr	BASEPRI_MAX, r3
    731e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7322:	f7ff bfea 	b.w	72fa <z_reschedule_irqlock>

00007326 <z_priq_dumb_best>:
{
    7326:	4603      	mov	r3, r0
	return list->head == list;
    7328:	6800      	ldr	r0, [r0, #0]
}
    732a:	4283      	cmp	r3, r0
    732c:	bf08      	it	eq
    732e:	2000      	moveq	r0, #0
    7330:	4770      	bx	lr

00007332 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7332:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7334:	f7ff f908 	bl	6548 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7338:	bd08      	pop	{r3, pc}

0000733a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    733a:	f7ff b905 	b.w	6548 <sys_clock_tick_get>

0000733e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    733e:	b108      	cbz	r0, 7344 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7340:	f7fa bff6 	b.w	2330 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7344:	4770      	bx	lr

00007346 <k_heap_init>:
{
    7346:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    7348:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    734c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    7350:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    7352:	f7f9 bc49 	b.w	be8 <sys_heap_init>
	...

00007358 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7358:	f7fc b854 	b.w	3404 <SystemInit>
